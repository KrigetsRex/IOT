
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005424  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  080055b4  080055b4  000155b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  08005830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001024  20000080  080058b0  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200010a4  080058b0  000210a4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034e53  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005cdc  00000000  00000000  00054f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00010d2a  00000000  00000000  0005abdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001618  00000000  00000000  0006b910  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001a40  00000000  00000000  0006cf28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c7b4  00000000  00000000  0006e968  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007bad  00000000  00000000  0007b11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00082cc9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000046d8  00000000  00000000  00082d48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800559c 	.word	0x0800559c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800559c 	.word	0x0800559c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b97a 	b.w	80008fc <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	468c      	mov	ip, r1
 8000626:	460d      	mov	r5, r1
 8000628:	4604      	mov	r4, r0
 800062a:	9e08      	ldr	r6, [sp, #32]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d151      	bne.n	80006d4 <__udivmoddi4+0xb4>
 8000630:	428a      	cmp	r2, r1
 8000632:	4617      	mov	r7, r2
 8000634:	d96d      	bls.n	8000712 <__udivmoddi4+0xf2>
 8000636:	fab2 fe82 	clz	lr, r2
 800063a:	f1be 0f00 	cmp.w	lr, #0
 800063e:	d00b      	beq.n	8000658 <__udivmoddi4+0x38>
 8000640:	f1ce 0c20 	rsb	ip, lr, #32
 8000644:	fa01 f50e 	lsl.w	r5, r1, lr
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000650:	ea4c 0c05 	orr.w	ip, ip, r5
 8000654:	fa00 f40e 	lsl.w	r4, r0, lr
 8000658:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800065c:	0c25      	lsrs	r5, r4, #16
 800065e:	fbbc f8fa 	udiv	r8, ip, sl
 8000662:	fa1f f987 	uxth.w	r9, r7
 8000666:	fb0a cc18 	mls	ip, sl, r8, ip
 800066a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800066e:	fb08 f309 	mul.w	r3, r8, r9
 8000672:	42ab      	cmp	r3, r5
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x6c>
 8000676:	19ed      	adds	r5, r5, r7
 8000678:	f108 32ff 	add.w	r2, r8, #4294967295
 800067c:	f080 8123 	bcs.w	80008c6 <__udivmoddi4+0x2a6>
 8000680:	42ab      	cmp	r3, r5
 8000682:	f240 8120 	bls.w	80008c6 <__udivmoddi4+0x2a6>
 8000686:	f1a8 0802 	sub.w	r8, r8, #2
 800068a:	443d      	add	r5, r7
 800068c:	1aed      	subs	r5, r5, r3
 800068e:	b2a4      	uxth	r4, r4
 8000690:	fbb5 f0fa 	udiv	r0, r5, sl
 8000694:	fb0a 5510 	mls	r5, sl, r0, r5
 8000698:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800069c:	fb00 f909 	mul.w	r9, r0, r9
 80006a0:	45a1      	cmp	r9, r4
 80006a2:	d909      	bls.n	80006b8 <__udivmoddi4+0x98>
 80006a4:	19e4      	adds	r4, r4, r7
 80006a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80006aa:	f080 810a 	bcs.w	80008c2 <__udivmoddi4+0x2a2>
 80006ae:	45a1      	cmp	r9, r4
 80006b0:	f240 8107 	bls.w	80008c2 <__udivmoddi4+0x2a2>
 80006b4:	3802      	subs	r0, #2
 80006b6:	443c      	add	r4, r7
 80006b8:	eba4 0409 	sub.w	r4, r4, r9
 80006bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006c0:	2100      	movs	r1, #0
 80006c2:	2e00      	cmp	r6, #0
 80006c4:	d061      	beq.n	800078a <__udivmoddi4+0x16a>
 80006c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80006ca:	2300      	movs	r3, #0
 80006cc:	6034      	str	r4, [r6, #0]
 80006ce:	6073      	str	r3, [r6, #4]
 80006d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d4:	428b      	cmp	r3, r1
 80006d6:	d907      	bls.n	80006e8 <__udivmoddi4+0xc8>
 80006d8:	2e00      	cmp	r6, #0
 80006da:	d054      	beq.n	8000786 <__udivmoddi4+0x166>
 80006dc:	2100      	movs	r1, #0
 80006de:	e886 0021 	stmia.w	r6, {r0, r5}
 80006e2:	4608      	mov	r0, r1
 80006e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e8:	fab3 f183 	clz	r1, r3
 80006ec:	2900      	cmp	r1, #0
 80006ee:	f040 808e 	bne.w	800080e <__udivmoddi4+0x1ee>
 80006f2:	42ab      	cmp	r3, r5
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0xdc>
 80006f6:	4282      	cmp	r2, r0
 80006f8:	f200 80fa 	bhi.w	80008f0 <__udivmoddi4+0x2d0>
 80006fc:	1a84      	subs	r4, r0, r2
 80006fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000702:	2001      	movs	r0, #1
 8000704:	46ac      	mov	ip, r5
 8000706:	2e00      	cmp	r6, #0
 8000708:	d03f      	beq.n	800078a <__udivmoddi4+0x16a>
 800070a:	e886 1010 	stmia.w	r6, {r4, ip}
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	b912      	cbnz	r2, 800071a <__udivmoddi4+0xfa>
 8000714:	2701      	movs	r7, #1
 8000716:	fbb7 f7f2 	udiv	r7, r7, r2
 800071a:	fab7 fe87 	clz	lr, r7
 800071e:	f1be 0f00 	cmp.w	lr, #0
 8000722:	d134      	bne.n	800078e <__udivmoddi4+0x16e>
 8000724:	1beb      	subs	r3, r5, r7
 8000726:	0c3a      	lsrs	r2, r7, #16
 8000728:	fa1f fc87 	uxth.w	ip, r7
 800072c:	2101      	movs	r1, #1
 800072e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000732:	0c25      	lsrs	r5, r4, #16
 8000734:	fb02 3318 	mls	r3, r2, r8, r3
 8000738:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800073c:	fb0c f308 	mul.w	r3, ip, r8
 8000740:	42ab      	cmp	r3, r5
 8000742:	d907      	bls.n	8000754 <__udivmoddi4+0x134>
 8000744:	19ed      	adds	r5, r5, r7
 8000746:	f108 30ff 	add.w	r0, r8, #4294967295
 800074a:	d202      	bcs.n	8000752 <__udivmoddi4+0x132>
 800074c:	42ab      	cmp	r3, r5
 800074e:	f200 80d1 	bhi.w	80008f4 <__udivmoddi4+0x2d4>
 8000752:	4680      	mov	r8, r0
 8000754:	1aed      	subs	r5, r5, r3
 8000756:	b2a3      	uxth	r3, r4
 8000758:	fbb5 f0f2 	udiv	r0, r5, r2
 800075c:	fb02 5510 	mls	r5, r2, r0, r5
 8000760:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000764:	fb0c fc00 	mul.w	ip, ip, r0
 8000768:	45a4      	cmp	ip, r4
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x15c>
 800076c:	19e4      	adds	r4, r4, r7
 800076e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x15a>
 8000774:	45a4      	cmp	ip, r4
 8000776:	f200 80b8 	bhi.w	80008ea <__udivmoddi4+0x2ca>
 800077a:	4618      	mov	r0, r3
 800077c:	eba4 040c 	sub.w	r4, r4, ip
 8000780:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000784:	e79d      	b.n	80006c2 <__udivmoddi4+0xa2>
 8000786:	4631      	mov	r1, r6
 8000788:	4630      	mov	r0, r6
 800078a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078e:	f1ce 0420 	rsb	r4, lr, #32
 8000792:	fa05 f30e 	lsl.w	r3, r5, lr
 8000796:	fa07 f70e 	lsl.w	r7, r7, lr
 800079a:	fa20 f804 	lsr.w	r8, r0, r4
 800079e:	0c3a      	lsrs	r2, r7, #16
 80007a0:	fa25 f404 	lsr.w	r4, r5, r4
 80007a4:	ea48 0803 	orr.w	r8, r8, r3
 80007a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80007ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80007b0:	fb02 4411 	mls	r4, r2, r1, r4
 80007b4:	fa1f fc87 	uxth.w	ip, r7
 80007b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80007bc:	fb01 f30c 	mul.w	r3, r1, ip
 80007c0:	42ab      	cmp	r3, r5
 80007c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80007c6:	d909      	bls.n	80007dc <__udivmoddi4+0x1bc>
 80007c8:	19ed      	adds	r5, r5, r7
 80007ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80007ce:	f080 808a 	bcs.w	80008e6 <__udivmoddi4+0x2c6>
 80007d2:	42ab      	cmp	r3, r5
 80007d4:	f240 8087 	bls.w	80008e6 <__udivmoddi4+0x2c6>
 80007d8:	3902      	subs	r1, #2
 80007da:	443d      	add	r5, r7
 80007dc:	1aeb      	subs	r3, r5, r3
 80007de:	fa1f f588 	uxth.w	r5, r8
 80007e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80007e6:	fb02 3310 	mls	r3, r2, r0, r3
 80007ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80007ee:	fb00 f30c 	mul.w	r3, r0, ip
 80007f2:	42ab      	cmp	r3, r5
 80007f4:	d907      	bls.n	8000806 <__udivmoddi4+0x1e6>
 80007f6:	19ed      	adds	r5, r5, r7
 80007f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80007fc:	d26f      	bcs.n	80008de <__udivmoddi4+0x2be>
 80007fe:	42ab      	cmp	r3, r5
 8000800:	d96d      	bls.n	80008de <__udivmoddi4+0x2be>
 8000802:	3802      	subs	r0, #2
 8000804:	443d      	add	r5, r7
 8000806:	1aeb      	subs	r3, r5, r3
 8000808:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800080c:	e78f      	b.n	800072e <__udivmoddi4+0x10e>
 800080e:	f1c1 0720 	rsb	r7, r1, #32
 8000812:	fa22 f807 	lsr.w	r8, r2, r7
 8000816:	408b      	lsls	r3, r1
 8000818:	fa05 f401 	lsl.w	r4, r5, r1
 800081c:	ea48 0303 	orr.w	r3, r8, r3
 8000820:	fa20 fe07 	lsr.w	lr, r0, r7
 8000824:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000828:	40fd      	lsrs	r5, r7
 800082a:	ea4e 0e04 	orr.w	lr, lr, r4
 800082e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000832:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000836:	fb0c 5519 	mls	r5, ip, r9, r5
 800083a:	fa1f f883 	uxth.w	r8, r3
 800083e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000842:	fb09 f408 	mul.w	r4, r9, r8
 8000846:	42ac      	cmp	r4, r5
 8000848:	fa02 f201 	lsl.w	r2, r2, r1
 800084c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x244>
 8000852:	18ed      	adds	r5, r5, r3
 8000854:	f109 30ff 	add.w	r0, r9, #4294967295
 8000858:	d243      	bcs.n	80008e2 <__udivmoddi4+0x2c2>
 800085a:	42ac      	cmp	r4, r5
 800085c:	d941      	bls.n	80008e2 <__udivmoddi4+0x2c2>
 800085e:	f1a9 0902 	sub.w	r9, r9, #2
 8000862:	441d      	add	r5, r3
 8000864:	1b2d      	subs	r5, r5, r4
 8000866:	fa1f fe8e 	uxth.w	lr, lr
 800086a:	fbb5 f0fc 	udiv	r0, r5, ip
 800086e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000872:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000876:	fb00 f808 	mul.w	r8, r0, r8
 800087a:	45a0      	cmp	r8, r4
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0x26e>
 800087e:	18e4      	adds	r4, r4, r3
 8000880:	f100 35ff 	add.w	r5, r0, #4294967295
 8000884:	d229      	bcs.n	80008da <__udivmoddi4+0x2ba>
 8000886:	45a0      	cmp	r8, r4
 8000888:	d927      	bls.n	80008da <__udivmoddi4+0x2ba>
 800088a:	3802      	subs	r0, #2
 800088c:	441c      	add	r4, r3
 800088e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000892:	eba4 0408 	sub.w	r4, r4, r8
 8000896:	fba0 8902 	umull	r8, r9, r0, r2
 800089a:	454c      	cmp	r4, r9
 800089c:	46c6      	mov	lr, r8
 800089e:	464d      	mov	r5, r9
 80008a0:	d315      	bcc.n	80008ce <__udivmoddi4+0x2ae>
 80008a2:	d012      	beq.n	80008ca <__udivmoddi4+0x2aa>
 80008a4:	b156      	cbz	r6, 80008bc <__udivmoddi4+0x29c>
 80008a6:	ebba 030e 	subs.w	r3, sl, lr
 80008aa:	eb64 0405 	sbc.w	r4, r4, r5
 80008ae:	fa04 f707 	lsl.w	r7, r4, r7
 80008b2:	40cb      	lsrs	r3, r1
 80008b4:	431f      	orrs	r7, r3
 80008b6:	40cc      	lsrs	r4, r1
 80008b8:	6037      	str	r7, [r6, #0]
 80008ba:	6074      	str	r4, [r6, #4]
 80008bc:	2100      	movs	r1, #0
 80008be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c2:	4618      	mov	r0, r3
 80008c4:	e6f8      	b.n	80006b8 <__udivmoddi4+0x98>
 80008c6:	4690      	mov	r8, r2
 80008c8:	e6e0      	b.n	800068c <__udivmoddi4+0x6c>
 80008ca:	45c2      	cmp	sl, r8
 80008cc:	d2ea      	bcs.n	80008a4 <__udivmoddi4+0x284>
 80008ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80008d2:	eb69 0503 	sbc.w	r5, r9, r3
 80008d6:	3801      	subs	r0, #1
 80008d8:	e7e4      	b.n	80008a4 <__udivmoddi4+0x284>
 80008da:	4628      	mov	r0, r5
 80008dc:	e7d7      	b.n	800088e <__udivmoddi4+0x26e>
 80008de:	4640      	mov	r0, r8
 80008e0:	e791      	b.n	8000806 <__udivmoddi4+0x1e6>
 80008e2:	4681      	mov	r9, r0
 80008e4:	e7be      	b.n	8000864 <__udivmoddi4+0x244>
 80008e6:	4601      	mov	r1, r0
 80008e8:	e778      	b.n	80007dc <__udivmoddi4+0x1bc>
 80008ea:	3802      	subs	r0, #2
 80008ec:	443c      	add	r4, r7
 80008ee:	e745      	b.n	800077c <__udivmoddi4+0x15c>
 80008f0:	4608      	mov	r0, r1
 80008f2:	e708      	b.n	8000706 <__udivmoddi4+0xe6>
 80008f4:	f1a8 0802 	sub.w	r8, r8, #2
 80008f8:	443d      	add	r5, r7
 80008fa:	e72b      	b.n	8000754 <__udivmoddi4+0x134>

080008fc <__aeabi_idiv0>:
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop

08000900 <I2Cx_Init.constprop.8>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000900:	b5f0      	push	{r4, r5, r6, r7, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
  i2c_handler->Init.OwnAddress1      = 0;
 8000902:	482a      	ldr	r0, [pc, #168]	; (80009ac <I2Cx_Init.constprop.8+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000904:	4c2a      	ldr	r4, [pc, #168]	; (80009b0 <I2Cx_Init.constprop.8+0xb0>)
  i2c_handler->Init.OwnAddress1      = 0;
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <I2Cx_Init.constprop.8+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000908:	4d2b      	ldr	r5, [pc, #172]	; (80009b8 <I2Cx_Init.constprop.8+0xb8>)
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800090a:	4f2c      	ldr	r7, [pc, #176]	; (80009bc <I2Cx_Init.constprop.8+0xbc>)
  i2c_handler->Init.OwnAddress1      = 0;
 800090c:	2600      	movs	r6, #0
 800090e:	e884 0049 	stmia.w	r4, {r0, r3, r6}
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000912:	2201      	movs	r2, #1
 8000914:	60e2      	str	r2, [r4, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000916:	6126      	str	r6, [r4, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000918:	6166      	str	r6, [r4, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800091a:	61e6      	str	r6, [r4, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800091c:	6226      	str	r6, [r4, #32]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800091e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000926:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000928:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000932:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000934:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000938:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000942:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000944:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000946:	4638      	mov	r0, r7
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000948:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800094a:	f000 fa4b 	bl	8000de4 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800094e:	a903      	add	r1, sp, #12
 8000950:	4638      	mov	r0, r7
 8000952:	f000 fa47 	bl	8000de4 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000956:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800095c:	65ab      	str	r3, [r5, #88]	; 0x58
 800095e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000964:	9302      	str	r3, [sp, #8]
 8000966:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8000968:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800096a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800096e:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000970:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000972:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000976:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000978:	4632      	mov	r2, r6
 800097a:	210f      	movs	r1, #15
 800097c:	2021      	movs	r0, #33	; 0x21
 800097e:	f000 f929 	bl	8000bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000982:	2021      	movs	r0, #33	; 0x21
 8000984:	f000 f95a 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000988:	4632      	mov	r2, r6
 800098a:	210f      	movs	r1, #15
 800098c:	2022      	movs	r0, #34	; 0x22
 800098e:	f000 f921 	bl	8000bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000992:	2022      	movs	r0, #34	; 0x22
 8000994:	f000 f952 	bl	8000c3c <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8000998:	4620      	mov	r0, r4
 800099a:	f000 fcf8 	bl	800138e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800099e:	4631      	mov	r1, r6
 80009a0:	4620      	mov	r0, r4
 80009a2:	f000 fed5 	bl	8001750 <HAL_I2CEx_ConfigAnalogFilter>
}
 80009a6:	b009      	add	sp, #36	; 0x24
 80009a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40005800 	.word	0x40005800
 80009b0:	2000029c 	.word	0x2000029c
 80009b4:	00702681 	.word	0x00702681
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000400 	.word	0x48000400

080009c0 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 80009c0:	f7ff bf9e 	b.w	8000900 <I2Cx_Init.constprop.8>

080009c4 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80009c4:	b510      	push	{r4, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80009ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 80009ce:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80009d2:	9302      	str	r3, [sp, #8]
 80009d4:	2301      	movs	r3, #1
 80009d6:	460a      	mov	r2, r1
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	4601      	mov	r1, r0
 80009dc:	9400      	str	r4, [sp, #0]
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <SENSOR_IO_Write+0x30>)
 80009e0:	f000 fd3f 	bl	8001462 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80009e4:	b120      	cbz	r0, 80009f0 <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <SENSOR_IO_Write+0x30>)
 80009e8:	f000 fd22 	bl	8001430 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80009ec:	f7ff ff88 	bl	8000900 <I2Cx_Init.constprop.8>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 80009f0:	b006      	add	sp, #24
 80009f2:	bd10      	pop	{r4, pc}
 80009f4:	2000029c 	.word	0x2000029c

080009f8 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80009f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 80009fa:	aa06      	add	r2, sp, #24
 80009fc:	2300      	movs	r3, #0
 80009fe:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000a0e:	460a      	mov	r2, r1
 8000a10:	4601      	mov	r1, r0
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <SENSOR_IO_Read+0x38>)
 8000a14:	f000 fdde 	bl	80015d4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000a18:	b120      	cbz	r0, 8000a24 <SENSOR_IO_Read+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <SENSOR_IO_Read+0x38>)
 8000a1c:	f000 fd08 	bl	8001430 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000a20:	f7ff ff6e 	bl	8000900 <I2Cx_Init.constprop.8>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8000a24:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000a28:	b007      	add	sp, #28
 8000a2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a2e:	bf00      	nop
 8000a30:	2000029c 	.word	0x2000029c

08000a34 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000a36:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000a3a:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8000a3e:	460a      	mov	r2, r1
 8000a40:	2301      	movs	r3, #1
 8000a42:	4601      	mov	r1, r0
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <SENSOR_IO_ReadMultiple+0x2c>)
 8000a46:	f000 fdc5 	bl	80015d4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	b120      	cbz	r0, 8000a58 <SENSOR_IO_ReadMultiple+0x24>
  HAL_I2C_DeInit(i2c_handler);
 8000a4e:	4804      	ldr	r0, [pc, #16]	; (8000a60 <SENSOR_IO_ReadMultiple+0x2c>)
 8000a50:	f000 fcee 	bl	8001430 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000a54:	f7ff ff54 	bl	8000900 <I2Cx_Init.constprop.8>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8000a58:	4620      	mov	r0, r4
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd10      	pop	{r4, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000029c 	.word	0x2000029c

08000a64 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8000a64:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000a66:	b2c4      	uxtb	r4, r0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f7ff ffc4 	bl	80009f8 <SENSOR_IO_Read>
 8000a70:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000a74:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8000a78:	4620      	mov	r0, r4
 8000a7a:	2120      	movs	r1, #32
}
 8000a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000a80:	f7ff bfa0 	b.w	80009c4 <SENSOR_IO_Write>

08000a84 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8000a84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8000a88:	fa5f f880 	uxtb.w	r8, r0
 8000a8c:	aa01      	add	r2, sp, #4
 8000a8e:	2302      	movs	r3, #2
 8000a90:	21b2      	movs	r1, #178	; 0xb2
 8000a92:	4640      	mov	r0, r8
 8000a94:	f7ff ffce 	bl	8000a34 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8000a98:	2135      	movs	r1, #53	; 0x35
 8000a9a:	4640      	mov	r0, r8
 8000a9c:	f7ff ffac 	bl	80009f8 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000aa0:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000aa2:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000aa6:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000aaa:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000aac:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000ab0:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 8000ab4:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8000ab6:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000ab8:	2304      	movs	r3, #4
 8000aba:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8000abe:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000ac0:	21bc      	movs	r1, #188	; 0xbc
 8000ac2:	4640      	mov	r0, r8
 8000ac4:	f7ff ffb6 	bl	8000a34 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000ac8:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8000acc:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000ad0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000ad4:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000ad8:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000adc:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000ade:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000ae2:	21aa      	movs	r1, #170	; 0xaa
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	4640      	mov	r0, r8
 8000ae8:	f7ff ffa4 	bl	8000a34 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000aec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000af0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000af4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000af8:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	1bdb      	subs	r3, r3, r7
  T0_degC = T0_degC_x8_u16 >> 3;
 8000afe:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000b00:	ee07 3a90 	vmov	s15, r3
 8000b04:	1bab      	subs	r3, r5, r6
 8000b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b0a:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000b0e:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b14:	1be4      	subs	r4, r4, r7
 8000b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b1a:	ee07 4a10 	vmov	s14, r4
 8000b1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000b22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b26:	ee07 6a90 	vmov	s15, r6
 8000b2a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 8000b2e:	ee36 0a80 	vadd.f32	s0, s13, s0
 8000b32:	b002      	add	sp, #8
 8000b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_InitTick+0x24>)
{
 8000b3c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b44:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b48:	f000 f884 	bl	8000c54 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4621      	mov	r1, r4
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f83e 	bl	8000bd4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000b58:	2000      	movs	r0, #0
 8000b5a:	bd10      	pop	{r4, pc}
 8000b5c:	20000018 	.word	0x20000018

08000b60 <HAL_Init>:
{
 8000b60:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b62:	2003      	movs	r0, #3
 8000b64:	f000 f824 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff ffe5 	bl	8000b38 <HAL_InitTick>
  HAL_MspInit();
 8000b6e:	f003 fde9 	bl	8004744 <HAL_MspInit>
}
 8000b72:	2000      	movs	r0, #0
 8000b74:	bd08      	pop	{r3, pc}
	...

08000b78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000b78:	4a02      	ldr	r2, [pc, #8]	; (8000b84 <HAL_IncTick+0xc>)
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200002e8 	.word	0x200002e8

08000b88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b88:	4b01      	ldr	r3, [pc, #4]	; (8000b90 <HAL_GetTick+0x8>)
 8000b8a:	6818      	ldr	r0, [r3, #0]
}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	200002e8 	.word	0x200002e8

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b538      	push	{r3, r4, r5, lr}
 8000b96:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff fff6 	bl	8000b88 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000b9e:	4605      	mov	r5, r0
  {
    wait++;
 8000ba0:	bf18      	it	ne
 8000ba2:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000ba4:	f7ff fff0 	bl	8000b88 <HAL_GetTick>
 8000ba8:	1b40      	subs	r0, r0, r5
 8000baa:	4284      	cmp	r4, r0
 8000bac:	d8fa      	bhi.n	8000ba4 <HAL_Delay+0x10>
  {
  }
}
 8000bae:	bd38      	pop	{r3, r4, r5, pc}

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bb2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	0c1b      	lsrs	r3, r3, #16
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bc0:	0200      	lsls	r0, r0, #8
 8000bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000bca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000bcc:	60d3      	str	r3, [r2, #12]
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd6:	b530      	push	{r4, r5, lr}
 8000bd8:	68dc      	ldr	r4, [r3, #12]
 8000bda:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bde:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	bf28      	it	cs
 8000be8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 0501 	mov.w	r5, #1
 8000bf0:	fa05 f303 	lsl.w	r3, r5, r3
 8000bf4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf8:	bf8c      	ite	hi
 8000bfa:	3c03      	subhi	r4, #3
 8000bfc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfe:	4019      	ands	r1, r3
 8000c00:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c02:	fa05 f404 	lsl.w	r4, r5, r4
 8000c06:	3c01      	subs	r4, #1
 8000c08:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c0a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	ea42 0201 	orr.w	r2, r2, r1
 8000c10:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	bfaf      	iteee	ge
 8000c16:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	f000 000f 	andlt.w	r0, r0, #15
 8000c1e:	4b06      	ldrlt	r3, [pc, #24]	; (8000c38 <HAL_NVIC_SetPriority+0x64>)
 8000c20:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	bfa5      	ittet	ge
 8000c24:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000c28:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c30:	bd30      	pop	{r4, r5, pc}
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00
 8000c38:	e000ed14 	.word	0xe000ed14

08000c3c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c3c:	0942      	lsrs	r2, r0, #5
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f000 001f 	and.w	r0, r0, #31
 8000c44:	fa03 f000 	lsl.w	r0, r3, r0
 8000c48:	4b01      	ldr	r3, [pc, #4]	; (8000c50 <HAL_NVIC_EnableIRQ+0x14>)
 8000c4a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	3801      	subs	r0, #1
 8000c56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5a:	d20a      	bcs.n	8000c72 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c60:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	21f0      	movs	r1, #240	; 0xf0
 8000c64:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e010 	.word	0xe000e010
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c82:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c84:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c86:	bf0c      	ite	eq
 8000c88:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c8c:	f022 0204 	bicne.w	r2, r2, #4
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	4770      	bx	lr
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c98:	4770      	bx	lr

08000c9a <HAL_SYSTICK_IRQHandler>:
{
 8000c9a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c9c:	f7ff fffc 	bl	8000c98 <HAL_SYSTICK_Callback>
 8000ca0:	bd08      	pop	{r3, pc}
	...

08000ca4 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <DFSDM_GetChannelFromInstance+0x54>)
 8000ca6:	4298      	cmp	r0, r3
 8000ca8:	d017      	beq.n	8000cda <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 8000caa:	3320      	adds	r3, #32
 8000cac:	4298      	cmp	r0, r3
 8000cae:	d016      	beq.n	8000cde <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 8000cb0:	3320      	adds	r3, #32
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d015      	beq.n	8000ce2 <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 8000cb6:	3320      	adds	r3, #32
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	d014      	beq.n	8000ce6 <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if(Instance == DFSDM1_Channel4)
 8000cbc:	3320      	adds	r3, #32
 8000cbe:	4298      	cmp	r0, r3
 8000cc0:	d013      	beq.n	8000cea <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 8000cc2:	3320      	adds	r3, #32
 8000cc4:	4298      	cmp	r0, r3
 8000cc6:	d012      	beq.n	8000cee <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 8000cc8:	3320      	adds	r3, #32
 8000cca:	4298      	cmp	r0, r3
 8000ccc:	d011      	beq.n	8000cf2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
  {
    channel = 7;
 8000cce:	3320      	adds	r3, #32
 8000cd0:	4298      	cmp	r0, r3
 8000cd2:	bf14      	ite	ne
 8000cd4:	20ff      	movne	r0, #255	; 0xff
 8000cd6:	2007      	moveq	r0, #7
 8000cd8:	4770      	bx	lr
    channel = 0;
 8000cda:	2000      	movs	r0, #0
 8000cdc:	4770      	bx	lr
    channel = 1;
 8000cde:	2001      	movs	r0, #1
 8000ce0:	4770      	bx	lr
    channel = 2;
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	4770      	bx	lr
    channel = 3;
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	4770      	bx	lr
    channel = 4;
 8000cea:	2004      	movs	r0, #4
 8000cec:	4770      	bx	lr
    channel = 5;
 8000cee:	2005      	movs	r0, #5
 8000cf0:	4770      	bx	lr
    channel = 6;
 8000cf2:	2006      	movs	r0, #6
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return channel;
}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40016000 	.word	0x40016000

08000cfc <HAL_DFSDM_ChannelInit>:
{
 8000cfc:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_channel == NULL)
 8000cfe:	4604      	mov	r4, r0
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d067      	beq.n	8000dd4 <HAL_DFSDM_ChannelInit+0xd8>
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000d04:	6800      	ldr	r0, [r0, #0]
 8000d06:	4d34      	ldr	r5, [pc, #208]	; (8000dd8 <HAL_DFSDM_ChannelInit+0xdc>)
 8000d08:	f7ff ffcc 	bl	8000ca4 <DFSDM_GetChannelFromInstance>
 8000d0c:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d15f      	bne.n	8000dd4 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000d14:	4620      	mov	r0, r4
 8000d16:	f002 fd9f 	bl	8003858 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8000d1a:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_DFSDM_ChannelInit+0xe0>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	3201      	adds	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d119      	bne.n	8000d5c <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_DFSDM_ChannelInit+0xe4>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8000d30:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	68a1      	ldr	r1, [r4, #8]
 8000d36:	430a      	orrs	r2, r1
 8000d38:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8000d40:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000d42:	7922      	ldrb	r2, [r4, #4]
 8000d44:	2a01      	cmp	r2, #1
 8000d46:	d105      	bne.n	8000d54 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8000d48:	68e1      	ldr	r1, [r4, #12]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	3901      	subs	r1, #1
 8000d4e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d52:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d5a:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8000d5c:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8000d5e:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8000d60:	6803      	ldr	r3, [r0, #0]
 8000d62:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8000d66:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8000d68:	6923      	ldr	r3, [r4, #16]
 8000d6a:	6802      	ldr	r2, [r0, #0]
 8000d6c:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8000d6e:	69a1      	ldr	r1, [r4, #24]
 8000d70:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8000d72:	4313      	orrs	r3, r2
 8000d74:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000d76:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8000d78:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000d7a:	f023 030f 	bic.w	r3, r3, #15
 8000d7e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8000d80:	69e3      	ldr	r3, [r4, #28]
 8000d82:	6802      	ldr	r2, [r0, #0]
 8000d84:	430b      	orrs	r3, r1
 8000d86:	4313      	orrs	r3, r2
 8000d88:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000d8a:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8000d8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000d8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000d90:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8000d94:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8000d96:	6883      	ldr	r3, [r0, #8]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000d98:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da0:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000da2:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000da4:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8000dac:	6843      	ldr	r3, [r0, #4]
 8000dae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000db2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000db4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000db8:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000dba:	6803      	ldr	r3, [r0, #0]
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc0:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000dc8:	f7ff ff6c 	bl	8000ca4 <DFSDM_GetChannelFromInstance>
 8000dcc:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dd4:	2001      	movs	r0, #1
}
 8000dd6:	bd38      	pop	{r3, r4, r5, pc}
 8000dd8:	2000009c 	.word	0x2000009c
 8000ddc:	200000bc 	.word	0x200000bc
 8000de0:	40016000 	.word	0x40016000

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000dea:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dec:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000f98 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000df0:	4c67      	ldr	r4, [pc, #412]	; (8000f90 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000df2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8000df4:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000df6:	9a01      	ldr	r2, [sp, #4]
 8000df8:	40da      	lsrs	r2, r3
 8000dfa:	d102      	bne.n	8000e02 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8000dfc:	b005      	add	sp, #20
 8000dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e02:	2601      	movs	r6, #1
    if(iocurrent)
 8000e04:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e06:	409e      	lsls	r6, r3
    if(iocurrent)
 8000e08:	ea12 0e06 	ands.w	lr, r2, r6
 8000e0c:	f000 80b1 	beq.w	8000f72 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e10:	684a      	ldr	r2, [r1, #4]
 8000e12:	f022 0710 	bic.w	r7, r2, #16
 8000e16:	2f02      	cmp	r7, #2
 8000e18:	d116      	bne.n	8000e48 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000e1a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000e1e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e22:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000e26:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e2a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000e2e:	f04f 0c0f 	mov.w	ip, #15
 8000e32:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000e36:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e3a:	690d      	ldr	r5, [r1, #16]
 8000e3c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e40:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000e44:	f8c9 5020 	str.w	r5, [r9, #32]
 8000e48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000e4c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e4e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000e52:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e56:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e58:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000e5c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e60:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e64:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e66:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000e6c:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e70:	d811      	bhi.n	8000e96 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000e72:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000e74:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e78:	68cf      	ldr	r7, [r1, #12]
 8000e7a:	fa07 f70c 	lsl.w	r7, r7, ip
 8000e7e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000e82:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e84:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e86:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e8a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000e8e:	409f      	lsls	r7, r3
 8000e90:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000e94:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e96:	f1ba 0f03 	cmp.w	sl, #3
 8000e9a:	d107      	bne.n	8000eac <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000e9c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e9e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ea2:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000ea6:	409f      	lsls	r7, r3
 8000ea8:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000eaa:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000eac:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000eae:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000eb0:	688e      	ldr	r6, [r1, #8]
 8000eb2:	fa06 f60c 	lsl.w	r6, r6, ip
 8000eb6:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000eb8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eba:	00d5      	lsls	r5, r2, #3
 8000ebc:	d559      	bpl.n	8000f72 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000ec2:	f045 0501 	orr.w	r5, r5, #1
 8000ec6:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000eca:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000ece:	f023 0603 	bic.w	r6, r3, #3
 8000ed2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000ed6:	f005 0501 	and.w	r5, r5, #1
 8000eda:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000ede:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ee0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee4:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000ee6:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ee8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000eec:	270f      	movs	r7, #15
 8000eee:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000ef2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ef6:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000efa:	d03c      	beq.n	8000f76 <HAL_GPIO_Init+0x192>
 8000efc:	4d25      	ldr	r5, [pc, #148]	; (8000f94 <HAL_GPIO_Init+0x1b0>)
 8000efe:	42a8      	cmp	r0, r5
 8000f00:	d03b      	beq.n	8000f7a <HAL_GPIO_Init+0x196>
 8000f02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f06:	42a8      	cmp	r0, r5
 8000f08:	d039      	beq.n	8000f7e <HAL_GPIO_Init+0x19a>
 8000f0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f0e:	42a8      	cmp	r0, r5
 8000f10:	d037      	beq.n	8000f82 <HAL_GPIO_Init+0x19e>
 8000f12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f16:	42a8      	cmp	r0, r5
 8000f18:	d035      	beq.n	8000f86 <HAL_GPIO_Init+0x1a2>
 8000f1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f1e:	42a8      	cmp	r0, r5
 8000f20:	d033      	beq.n	8000f8a <HAL_GPIO_Init+0x1a6>
 8000f22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f26:	42a8      	cmp	r0, r5
 8000f28:	bf14      	ite	ne
 8000f2a:	2507      	movne	r5, #7
 8000f2c:	2506      	moveq	r5, #6
 8000f2e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f32:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f34:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000f36:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f3c:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	bf54      	ite	pl
 8000f40:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f42:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000f46:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000f48:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f4a:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	bf54      	ite	pl
 8000f4e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f50:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000f54:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000f56:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f58:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8000f5a:	bf54      	ite	pl
 8000f5c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f5e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000f62:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000f64:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f66:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8000f68:	bf54      	ite	pl
 8000f6a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f6c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000f70:	60e5      	str	r5, [r4, #12]
    position++;
 8000f72:	3301      	adds	r3, #1
 8000f74:	e73f      	b.n	8000df6 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000f76:	2500      	movs	r5, #0
 8000f78:	e7d9      	b.n	8000f2e <HAL_GPIO_Init+0x14a>
 8000f7a:	2501      	movs	r5, #1
 8000f7c:	e7d7      	b.n	8000f2e <HAL_GPIO_Init+0x14a>
 8000f7e:	2502      	movs	r5, #2
 8000f80:	e7d5      	b.n	8000f2e <HAL_GPIO_Init+0x14a>
 8000f82:	2503      	movs	r5, #3
 8000f84:	e7d3      	b.n	8000f2e <HAL_GPIO_Init+0x14a>
 8000f86:	2504      	movs	r5, #4
 8000f88:	e7d1      	b.n	8000f2e <HAL_GPIO_Init+0x14a>
 8000f8a:	2505      	movs	r5, #5
 8000f8c:	e7cf      	b.n	8000f2e <HAL_GPIO_Init+0x14a>
 8000f8e:	bf00      	nop
 8000f90:	40010400 	.word	0x40010400
 8000f94:	48000400 	.word	0x48000400
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8000fa0:	4c47      	ldr	r4, [pc, #284]	; (80010c0 <HAL_GPIO_DeInit+0x124>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8000fa2:	f8df a124 	ldr.w	sl, [pc, #292]	; 80010c8 <HAL_GPIO_DeInit+0x12c>
 8000fa6:	f8df b124 	ldr.w	fp, [pc, #292]	; 80010cc <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00;
 8000faa:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1U << position);
 8000fac:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8000fb0:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != RESET)
 8000fb4:	fa31 f203 	lsrs.w	r2, r1, r3
 8000fb8:	d102      	bne.n	8000fc0 <HAL_GPIO_DeInit+0x24>
      }
    }
    
    position++;
  }
}
 8000fba:	b003      	add	sp, #12
 8000fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8000fc0:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent)
 8000fc4:	ea11 0206 	ands.w	r2, r1, r6
 8000fc8:	9201      	str	r2, [sp, #4]
 8000fca:	d06a      	beq.n	80010a2 <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8000fcc:	6807      	ldr	r7, [r0, #0]
 8000fce:	005a      	lsls	r2, r3, #1
 8000fd0:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fd4:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8000fd8:	4317      	orrs	r7, r2
 8000fda:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000fde:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fe0:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8000fe4:	f003 0e07 	and.w	lr, r3, #7
 8000fe8:	463d      	mov	r5, r7
 8000fea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000fee:	270f      	movs	r7, #15
 8000ff0:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000ff4:	ea25 0e0e 	bic.w	lr, r5, lr
 8000ff8:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000ffc:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8001000:	43d2      	mvns	r2, r2
 8001002:	ea0e 0e02 	and.w	lr, lr, r2
 8001006:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800100a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800100e:	43f6      	mvns	r6, r6
 8001010:	ea0e 0e06 	and.w	lr, lr, r6
 8001014:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001018:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800101c:	ea02 020e 	and.w	r2, r2, lr
 8001020:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001022:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001024:	4016      	ands	r6, r2
 8001026:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001028:	f023 0603 	bic.w	r6, r3, #3
 800102c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001030:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001034:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8001038:	68b2      	ldr	r2, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800103a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800103e:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8001042:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001046:	ea02 0c07 	and.w	ip, r2, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800104a:	d02c      	beq.n	80010a6 <HAL_GPIO_DeInit+0x10a>
 800104c:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <HAL_GPIO_DeInit+0x128>)
 800104e:	4290      	cmp	r0, r2
 8001050:	d02b      	beq.n	80010aa <HAL_GPIO_DeInit+0x10e>
 8001052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001056:	4290      	cmp	r0, r2
 8001058:	d029      	beq.n	80010ae <HAL_GPIO_DeInit+0x112>
 800105a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800105e:	4290      	cmp	r0, r2
 8001060:	d027      	beq.n	80010b2 <HAL_GPIO_DeInit+0x116>
 8001062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001066:	4290      	cmp	r0, r2
 8001068:	d025      	beq.n	80010b6 <HAL_GPIO_DeInit+0x11a>
 800106a:	4550      	cmp	r0, sl
 800106c:	d025      	beq.n	80010ba <HAL_GPIO_DeInit+0x11e>
 800106e:	4558      	cmp	r0, fp
 8001070:	bf0c      	ite	eq
 8001072:	2206      	moveq	r2, #6
 8001074:	2207      	movne	r2, #7
 8001076:	fa02 f20e 	lsl.w	r2, r2, lr
 800107a:	4594      	cmp	ip, r2
 800107c:	d111      	bne.n	80010a2 <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800107e:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8001080:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001082:	ea22 0707 	bic.w	r7, r2, r7
 8001086:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8001088:	6822      	ldr	r2, [r4, #0]
 800108a:	43ed      	mvns	r5, r5
 800108c:	402a      	ands	r2, r5
 800108e:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 8001090:	6862      	ldr	r2, [r4, #4]
 8001092:	402a      	ands	r2, r5
 8001094:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 8001096:	68a2      	ldr	r2, [r4, #8]
 8001098:	402a      	ands	r2, r5
 800109a:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 800109c:	68e2      	ldr	r2, [r4, #12]
 800109e:	4015      	ands	r5, r2
 80010a0:	60e5      	str	r5, [r4, #12]
    position++;
 80010a2:	3301      	adds	r3, #1
 80010a4:	e786      	b.n	8000fb4 <HAL_GPIO_DeInit+0x18>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80010a6:	2200      	movs	r2, #0
 80010a8:	e7e5      	b.n	8001076 <HAL_GPIO_DeInit+0xda>
 80010aa:	2201      	movs	r2, #1
 80010ac:	e7e3      	b.n	8001076 <HAL_GPIO_DeInit+0xda>
 80010ae:	2202      	movs	r2, #2
 80010b0:	e7e1      	b.n	8001076 <HAL_GPIO_DeInit+0xda>
 80010b2:	2203      	movs	r2, #3
 80010b4:	e7df      	b.n	8001076 <HAL_GPIO_DeInit+0xda>
 80010b6:	2204      	movs	r2, #4
 80010b8:	e7dd      	b.n	8001076 <HAL_GPIO_DeInit+0xda>
 80010ba:	2205      	movs	r2, #5
 80010bc:	e7db      	b.n	8001076 <HAL_GPIO_DeInit+0xda>
 80010be:	bf00      	nop
 80010c0:	40010400 	.word	0x40010400
 80010c4:	48000400 	.word	0x48000400
 80010c8:	48001400 	.word	0x48001400
 80010cc:	48001800 	.word	0x48001800

080010d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d0:	6903      	ldr	r3, [r0, #16]
 80010d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80010d4:	bf14      	ite	ne
 80010d6:	2001      	movne	r0, #1
 80010d8:	2000      	moveq	r0, #0
 80010da:	4770      	bx	lr

080010dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	b10a      	cbz	r2, 80010e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010de:	6181      	str	r1, [r0, #24]
 80010e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010e2:	6281      	str	r1, [r0, #40]	; 0x28
 80010e4:	4770      	bx	lr

080010e6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e6:	4770      	bx	lr

080010e8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80010e8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80010ec:	6959      	ldr	r1, [r3, #20]
 80010ee:	4201      	tst	r1, r0
 80010f0:	d002      	beq.n	80010f8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010f2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010f4:	f7ff fff7 	bl	80010e6 <HAL_GPIO_EXTI_Callback>
 80010f8:	bd08      	pop	{r3, pc}
 80010fa:	bf00      	nop
 80010fc:	40010400 	.word	0x40010400

08001100 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001100:	6803      	ldr	r3, [r0, #0]
 8001102:	699a      	ldr	r2, [r3, #24]
 8001104:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001106:	bf44      	itt	mi
 8001108:	2200      	movmi	r2, #0
 800110a:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800110c:	699a      	ldr	r2, [r3, #24]
 800110e:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001110:	bf5e      	ittt	pl
 8001112:	699a      	ldrpl	r2, [r3, #24]
 8001114:	f042 0201 	orrpl.w	r2, r2, #1
 8001118:	619a      	strpl	r2, [r3, #24]
 800111a:	4770      	bx	lr

0800111c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800111c:	b530      	push	{r4, r5, lr}
 800111e:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001120:	6805      	ldr	r5, [r0, #0]
 8001122:	4323      	orrs	r3, r4
 8001124:	0d64      	lsrs	r4, r4, #21
 8001126:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800112a:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800112e:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001132:	6868      	ldr	r0, [r5, #4]
 8001134:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001138:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800113c:	4319      	orrs	r1, r3
 800113e:	f044 0403 	orr.w	r4, r4, #3
 8001142:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001146:	ea20 0404 	bic.w	r4, r0, r4
 800114a:	4321      	orrs	r1, r4
 800114c:	6069      	str	r1, [r5, #4]
 800114e:	bd30      	pop	{r4, r5, pc}

08001150 <I2C_WaitOnFlagUntilTimeout>:
{
 8001150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001154:	9f06      	ldr	r7, [sp, #24]
 8001156:	4604      	mov	r4, r0
 8001158:	4688      	mov	r8, r1
 800115a:	4616      	mov	r6, r2
 800115c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800115e:	6822      	ldr	r2, [r4, #0]
 8001160:	6993      	ldr	r3, [r2, #24]
 8001162:	ea38 0303 	bics.w	r3, r8, r3
 8001166:	bf0c      	ite	eq
 8001168:	2301      	moveq	r3, #1
 800116a:	2300      	movne	r3, #0
 800116c:	42b3      	cmp	r3, r6
 800116e:	d002      	beq.n	8001176 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001170:	2000      	movs	r0, #0
}
 8001172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001176:	1c6b      	adds	r3, r5, #1
 8001178:	d0f2      	beq.n	8001160 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800117a:	b955      	cbnz	r5, 8001192 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 800117c:	2320      	movs	r3, #32
 800117e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001182:	2300      	movs	r3, #0
 8001184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001188:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800118c:	2003      	movs	r0, #3
 800118e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001192:	f7ff fcf9 	bl	8000b88 <HAL_GetTick>
 8001196:	1bc0      	subs	r0, r0, r7
 8001198:	4285      	cmp	r5, r0
 800119a:	d2e0      	bcs.n	800115e <I2C_WaitOnFlagUntilTimeout+0xe>
 800119c:	e7ee      	b.n	800117c <I2C_WaitOnFlagUntilTimeout+0x2c>

0800119e <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800119e:	6803      	ldr	r3, [r0, #0]
{
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011a4:	6998      	ldr	r0, [r3, #24]
 80011a6:	f010 0010 	ands.w	r0, r0, #16
{
 80011aa:	460d      	mov	r5, r1
 80011ac:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011ae:	d112      	bne.n	80011d6 <I2C_IsAcknowledgeFailed+0x38>
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80011b2:	1c69      	adds	r1, r5, #1
 80011b4:	d010      	beq.n	80011d8 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011b6:	b94d      	cbnz	r5, 80011cc <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 80011b8:	2320      	movs	r3, #32
 80011ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80011be:	2300      	movs	r3, #0
 80011c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80011c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 80011c8:	2003      	movs	r0, #3
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011cc:	f7ff fcdc 	bl	8000b88 <HAL_GetTick>
 80011d0:	1b80      	subs	r0, r0, r6
 80011d2:	4285      	cmp	r5, r0
 80011d4:	d3f0      	bcc.n	80011b8 <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	6999      	ldr	r1, [r3, #24]
 80011da:	068a      	lsls	r2, r1, #26
 80011dc:	d5e9      	bpl.n	80011b2 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011de:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e0:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011e2:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80011e4:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e6:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80011e8:	f7ff ff8a 	bl	8001100 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80011ec:	6822      	ldr	r2, [r4, #0]
 80011ee:	6853      	ldr	r3, [r2, #4]
 80011f0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80011f4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80011f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001202:	2304      	movs	r3, #4
 8001204:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001206:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001208:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800120c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8001214:	2001      	movs	r0, #1
}
 8001216:	bd70      	pop	{r4, r5, r6, pc}

08001218 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	4604      	mov	r4, r0
 800121c:	460d      	mov	r5, r1
 800121e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	079b      	lsls	r3, r3, #30
 8001226:	d501      	bpl.n	800122c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001228:	2000      	movs	r0, #0
 800122a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800122c:	4632      	mov	r2, r6
 800122e:	4629      	mov	r1, r5
 8001230:	4620      	mov	r0, r4
 8001232:	f7ff ffb4 	bl	800119e <I2C_IsAcknowledgeFailed>
 8001236:	b9b0      	cbnz	r0, 8001266 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8001238:	1c6a      	adds	r2, r5, #1
 800123a:	d0f1      	beq.n	8001220 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800123c:	b96d      	cbnz	r5, 800125a <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800123e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001246:	2320      	movs	r3, #32
 8001248:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800124c:	2300      	movs	r3, #0
 800124e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001252:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001256:	2003      	movs	r0, #3
 8001258:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800125a:	f7ff fc95 	bl	8000b88 <HAL_GetTick>
 800125e:	1b80      	subs	r0, r0, r6
 8001260:	4285      	cmp	r5, r0
 8001262:	d2dd      	bcs.n	8001220 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8001264:	e7eb      	b.n	800123e <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8001266:	2001      	movs	r0, #1
}
 8001268:	bd70      	pop	{r4, r5, r6, pc}
	...

0800126c <I2C_RequestMemoryWrite>:
{
 800126c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800126e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001270:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <I2C_RequestMemoryWrite+0x68>)
 8001274:	9300      	str	r3, [sp, #0]
{
 8001276:	4604      	mov	r4, r0
 8001278:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800127a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800127e:	b2fa      	uxtb	r2, r7
 8001280:	f7ff ff4c 	bl	800111c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001284:	4632      	mov	r2, r6
 8001286:	9908      	ldr	r1, [sp, #32]
 8001288:	4620      	mov	r0, r4
 800128a:	f7ff ffc5 	bl	8001218 <I2C_WaitOnTXISFlagUntilTimeout>
 800128e:	b128      	cbz	r0, 800129c <I2C_RequestMemoryWrite+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001290:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001292:	2b04      	cmp	r3, #4
 8001294:	d110      	bne.n	80012b8 <I2C_RequestMemoryWrite+0x4c>
      return HAL_ERROR;
 8001296:	2001      	movs	r0, #1
}
 8001298:	b003      	add	sp, #12
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800129c:	2f01      	cmp	r7, #1
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	d10c      	bne.n	80012bc <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012a2:	b2ed      	uxtb	r5, r5
 80012a4:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80012a6:	9b08      	ldr	r3, [sp, #32]
 80012a8:	9600      	str	r6, [sp, #0]
 80012aa:	2200      	movs	r2, #0
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	4620      	mov	r0, r4
 80012b0:	f7ff ff4e 	bl	8001150 <I2C_WaitOnFlagUntilTimeout>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d0ef      	beq.n	8001298 <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 80012b8:	2003      	movs	r0, #3
 80012ba:	e7ed      	b.n	8001298 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80012bc:	0a2a      	lsrs	r2, r5, #8
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012c0:	9908      	ldr	r1, [sp, #32]
 80012c2:	4632      	mov	r2, r6
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff ffa7 	bl	8001218 <I2C_WaitOnTXISFlagUntilTimeout>
 80012ca:	2800      	cmp	r0, #0
 80012cc:	d1e0      	bne.n	8001290 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	e7e7      	b.n	80012a2 <I2C_RequestMemoryWrite+0x36>
 80012d2:	bf00      	nop
 80012d4:	80002000 	.word	0x80002000

080012d8 <I2C_RequestMemoryRead>:
{
 80012d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80012dc:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <I2C_RequestMemoryRead+0x64>)
 80012e0:	9300      	str	r3, [sp, #0]
{
 80012e2:	4604      	mov	r4, r0
 80012e4:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80012e6:	2300      	movs	r3, #0
 80012e8:	b2fa      	uxtb	r2, r7
 80012ea:	f7ff ff17 	bl	800111c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012ee:	4632      	mov	r2, r6
 80012f0:	9908      	ldr	r1, [sp, #32]
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff ff90 	bl	8001218 <I2C_WaitOnTXISFlagUntilTimeout>
 80012f8:	b128      	cbz	r0, 8001306 <I2C_RequestMemoryRead+0x2e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d110      	bne.n	8001322 <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
}
 8001302:	b003      	add	sp, #12
 8001304:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001306:	2f01      	cmp	r7, #1
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	d10c      	bne.n	8001326 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800130c:	b2ed      	uxtb	r5, r5
 800130e:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001310:	9b08      	ldr	r3, [sp, #32]
 8001312:	9600      	str	r6, [sp, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	2140      	movs	r1, #64	; 0x40
 8001318:	4620      	mov	r0, r4
 800131a:	f7ff ff19 	bl	8001150 <I2C_WaitOnFlagUntilTimeout>
 800131e:	2800      	cmp	r0, #0
 8001320:	d0ef      	beq.n	8001302 <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 8001322:	2003      	movs	r0, #3
 8001324:	e7ed      	b.n	8001302 <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001326:	0a2a      	lsrs	r2, r5, #8
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800132a:	9908      	ldr	r1, [sp, #32]
 800132c:	4632      	mov	r2, r6
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff ff72 	bl	8001218 <I2C_WaitOnTXISFlagUntilTimeout>
 8001334:	2800      	cmp	r0, #0
 8001336:	d1e0      	bne.n	80012fa <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	e7e7      	b.n	800130c <I2C_RequestMemoryRead+0x34>
 800133c:	80002000 	.word	0x80002000

08001340 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001340:	b570      	push	{r4, r5, r6, lr}
 8001342:	4604      	mov	r4, r0
 8001344:	460d      	mov	r5, r1
 8001346:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	069b      	lsls	r3, r3, #26
 800134e:	d501      	bpl.n	8001354 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001350:	2000      	movs	r0, #0
 8001352:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001354:	4632      	mov	r2, r6
 8001356:	4629      	mov	r1, r5
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff ff20 	bl	800119e <I2C_IsAcknowledgeFailed>
 800135e:	b9a0      	cbnz	r0, 800138a <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001360:	b96d      	cbnz	r5, 800137e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001362:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001364:	f043 0320 	orr.w	r3, r3, #32
 8001368:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800136a:	2320      	movs	r3, #32
 800136c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001370:	2300      	movs	r3, #0
 8001372:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001376:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800137a:	2003      	movs	r0, #3
 800137c:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800137e:	f7ff fc03 	bl	8000b88 <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	4285      	cmp	r5, r0
 8001386:	d2df      	bcs.n	8001348 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8001388:	e7eb      	b.n	8001362 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800138a:	2001      	movs	r0, #1
}
 800138c:	bd70      	pop	{r4, r5, r6, pc}

0800138e <HAL_I2C_Init>:
{
 800138e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001390:	4604      	mov	r4, r0
 8001392:	2800      	cmp	r0, #0
 8001394:	d04a      	beq.n	800142c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001396:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800139a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800139e:	b91b      	cbnz	r3, 80013a8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80013a0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80013a4:	f003 f878 	bl	8004498 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013a8:	2324      	movs	r3, #36	; 0x24
 80013aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80013ae:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013b0:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	f022 0201 	bic.w	r2, r2, #1
 80013b8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013ba:	6862      	ldr	r2, [r4, #4]
 80013bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013c0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013c2:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013c4:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ce:	d124      	bne.n	800141a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013d6:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013d8:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013da:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80013de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ea:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013ec:	6922      	ldr	r2, [r4, #16]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	69a1      	ldr	r1, [r4, #24]
 80013f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013f6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013f8:	6a21      	ldr	r1, [r4, #32]
 80013fa:	69e2      	ldr	r2, [r4, #28]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	f042 0201 	orr.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001408:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800140a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800140c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800140e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001412:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001414:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001418:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800141a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800141e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001420:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001422:	bf04      	itt	eq
 8001424:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001428:	605a      	streq	r2, [r3, #4]
 800142a:	e7d4      	b.n	80013d6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800142c:	2001      	movs	r0, #1
}
 800142e:	bd10      	pop	{r4, pc}

08001430 <HAL_I2C_DeInit>:
{
 8001430:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001432:	4604      	mov	r4, r0
 8001434:	b198      	cbz	r0, 800145e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8001436:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001438:	2324      	movs	r3, #36	; 0x24
 800143a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800143e:	6813      	ldr	r3, [r2, #0]
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001446:	f003 f84f 	bl	80044e8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800144a:	2000      	movs	r0, #0
 800144c:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800144e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8001452:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001456:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001458:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 800145c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800145e:	2001      	movs	r0, #1
}
 8001460:	bd10      	pop	{r4, pc}

08001462 <HAL_I2C_Mem_Write>:
{
 8001462:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001466:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001468:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800146c:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800146e:	2b20      	cmp	r3, #32
{
 8001470:	4604      	mov	r4, r0
 8001472:	460f      	mov	r7, r1
 8001474:	9203      	str	r2, [sp, #12]
 8001476:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 800147a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800147e:	f040 80a6 	bne.w	80015ce <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8001482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001484:	b91b      	cbnz	r3, 800148e <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 8001486:	2001      	movs	r0, #1
}
 8001488:	b005      	add	sp, #20
 800148a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 800148e:	f1ba 0f00 	cmp.w	sl, #0
 8001492:	d0f8      	beq.n	8001486 <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 8001494:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001498:	2b01      	cmp	r3, #1
 800149a:	f000 8098 	beq.w	80015ce <HAL_I2C_Mem_Write+0x16c>
 800149e:	2501      	movs	r5, #1
 80014a0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80014a4:	f7ff fb70 	bl	8000b88 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014a8:	2319      	movs	r3, #25
 80014aa:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80014ac:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014ae:	462a      	mov	r2, r5
 80014b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff fe4b 	bl	8001150 <I2C_WaitOnFlagUntilTimeout>
 80014ba:	4680      	mov	r8, r0
 80014bc:	b9d0      	cbnz	r0, 80014f4 <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014be:	2321      	movs	r3, #33	; 0x21
 80014c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014c4:	2340      	movs	r3, #64	; 0x40
 80014c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80014ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014cc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80014ce:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80014d0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80014d2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014d6:	9601      	str	r6, [sp, #4]
 80014d8:	f8cd 9000 	str.w	r9, [sp]
 80014dc:	465b      	mov	r3, fp
 80014de:	9a03      	ldr	r2, [sp, #12]
 80014e0:	4639      	mov	r1, r7
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff fec2 	bl	800126c <I2C_RequestMemoryWrite>
 80014e8:	b130      	cbz	r0, 80014f8 <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80014ec:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d0c8      	beq.n	8001486 <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 80014f4:	2003      	movs	r0, #3
 80014f6:	e7c7      	b.n	8001488 <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2bff      	cmp	r3, #255	; 0xff
 80014fe:	d910      	bls.n	8001522 <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001500:	22ff      	movs	r2, #255	; 0xff
 8001502:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001504:	9000      	str	r0, [sp, #0]
 8001506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800150a:	4639      	mov	r1, r7
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff fe05 	bl	800111c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001512:	4632      	mov	r2, r6
 8001514:	4649      	mov	r1, r9
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff fe7e 	bl	8001218 <I2C_WaitOnTXISFlagUntilTimeout>
 800151c:	b148      	cbz	r0, 8001532 <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800151e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001520:	e7e6      	b.n	80014f0 <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8001522:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001524:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001526:	b292      	uxth	r2, r2
 8001528:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800152a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	e7eb      	b.n	800150a <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001534:	6822      	ldr	r2, [r4, #0]
 8001536:	1c59      	adds	r1, r3, #1
 8001538:	6261      	str	r1, [r4, #36]	; 0x24
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800153e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001540:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001542:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001544:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001546:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001548:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800154a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800154c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800154e:	b9ba      	cbnz	r2, 8001580 <HAL_I2C_Mem_Write+0x11e>
 8001550:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001552:	b29b      	uxth	r3, r3
 8001554:	b1a3      	cbz	r3, 8001580 <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001556:	9600      	str	r6, [sp, #0]
 8001558:	464b      	mov	r3, r9
 800155a:	2180      	movs	r1, #128	; 0x80
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff fdf7 	bl	8001150 <I2C_WaitOnFlagUntilTimeout>
 8001562:	2800      	cmp	r0, #0
 8001564:	d1c6      	bne.n	80014f4 <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001566:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001568:	b29b      	uxth	r3, r3
 800156a:	2bff      	cmp	r3, #255	; 0xff
 800156c:	d927      	bls.n	80015be <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800156e:	22ff      	movs	r2, #255	; 0xff
 8001570:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001572:	9000      	str	r0, [sp, #0]
 8001574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001578:	4639      	mov	r1, r7
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff fdce 	bl	800111c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001580:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001582:	b29b      	uxth	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1c4      	bne.n	8001512 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001588:	4632      	mov	r2, r6
 800158a:	4649      	mov	r1, r9
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff fed7 	bl	8001340 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001592:	2800      	cmp	r0, #0
 8001594:	d1c3      	bne.n	800151e <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	2120      	movs	r1, #32
 800159a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80015a2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80015a6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80015b0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80015b4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015b8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80015bc:	e764      	b.n	8001488 <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 80015be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015c0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80015c2:	b292      	uxth	r2, r2
 80015c4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	e7d4      	b.n	8001578 <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 80015ce:	2002      	movs	r0, #2
 80015d0:	e75a      	b.n	8001488 <HAL_I2C_Mem_Write+0x26>
	...

080015d4 <HAL_I2C_Mem_Read>:
{
 80015d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015d8:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80015de:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e0:	2b20      	cmp	r3, #32
{
 80015e2:	4604      	mov	r4, r0
 80015e4:	460f      	mov	r7, r1
 80015e6:	9203      	str	r2, [sp, #12]
 80015e8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80015ec:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f0:	f040 80a9 	bne.w	8001746 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 80015f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80015f6:	b91b      	cbnz	r3, 8001600 <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 80015f8:	2001      	movs	r0, #1
}
 80015fa:	b005      	add	sp, #20
 80015fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8001600:	f1ba 0f00 	cmp.w	sl, #0
 8001604:	d0f8      	beq.n	80015f8 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8001606:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800160a:	2b01      	cmp	r3, #1
 800160c:	f000 809b 	beq.w	8001746 <HAL_I2C_Mem_Read+0x172>
 8001610:	2501      	movs	r5, #1
 8001612:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001616:	f7ff fab7 	bl	8000b88 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800161a:	2319      	movs	r3, #25
 800161c:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800161e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001620:	462a      	mov	r2, r5
 8001622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001626:	4620      	mov	r0, r4
 8001628:	f7ff fd92 	bl	8001150 <I2C_WaitOnFlagUntilTimeout>
 800162c:	4680      	mov	r8, r0
 800162e:	b9d0      	cbnz	r0, 8001666 <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001630:	2322      	movs	r3, #34	; 0x22
 8001632:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001636:	2340      	movs	r3, #64	; 0x40
 8001638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800163c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001640:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001642:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001644:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001648:	9601      	str	r6, [sp, #4]
 800164a:	f8cd 9000 	str.w	r9, [sp]
 800164e:	465b      	mov	r3, fp
 8001650:	9a03      	ldr	r2, [sp, #12]
 8001652:	4639      	mov	r1, r7
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fe3f 	bl	80012d8 <I2C_RequestMemoryRead>
 800165a:	b130      	cbz	r0, 800166a <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800165c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800165e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001662:	2b04      	cmp	r3, #4
 8001664:	d0c8      	beq.n	80015f8 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 8001666:	2003      	movs	r0, #3
 8001668:	e7c7      	b.n	80015fa <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800166a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800166c:	b29b      	uxth	r3, r3
 800166e:	2bff      	cmp	r3, #255	; 0xff
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_I2C_Mem_Read+0x178>)
 8001672:	d944      	bls.n	80016fe <HAL_I2C_Mem_Read+0x12a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001674:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001676:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001678:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800167a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800167e:	4639      	mov	r1, r7
 8001680:	4620      	mov	r0, r4
 8001682:	f7ff fd4b 	bl	800111c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001686:	9600      	str	r6, [sp, #0]
 8001688:	464b      	mov	r3, r9
 800168a:	2200      	movs	r2, #0
 800168c:	2104      	movs	r1, #4
 800168e:	4620      	mov	r0, r4
 8001690:	f7ff fd5e 	bl	8001150 <I2C_WaitOnFlagUntilTimeout>
 8001694:	2800      	cmp	r0, #0
 8001696:	d1e6      	bne.n	8001666 <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	6262      	str	r2, [r4, #36]	; 0x24
 800169e:	6822      	ldr	r2, [r4, #0]
 80016a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016a2:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80016a4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80016a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016a8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80016aa:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80016ac:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80016ae:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80016b0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80016b2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80016b4:	b9ba      	cbnz	r2, 80016e6 <HAL_I2C_Mem_Read+0x112>
 80016b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b1a3      	cbz	r3, 80016e6 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016bc:	9600      	str	r6, [sp, #0]
 80016be:	464b      	mov	r3, r9
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff fd44 	bl	8001150 <I2C_WaitOnFlagUntilTimeout>
 80016c8:	2800      	cmp	r0, #0
 80016ca:	d1cc      	bne.n	8001666 <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2bff      	cmp	r3, #255	; 0xff
 80016d2:	d91c      	bls.n	800170e <HAL_I2C_Mem_Read+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d4:	22ff      	movs	r2, #255	; 0xff
 80016d6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016d8:	9000      	str	r0, [sp, #0]
 80016da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016de:	4639      	mov	r1, r7
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff fd1b 	bl	800111c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80016e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1cb      	bne.n	8001686 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ee:	4632      	mov	r2, r6
 80016f0:	4649      	mov	r1, r9
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff fe24 	bl	8001340 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016f8:	b188      	cbz	r0, 800171e <HAL_I2C_Mem_Read+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016fc:	e7b1      	b.n	8001662 <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 80016fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001700:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001702:	b292      	uxth	r2, r2
 8001704:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	e7b7      	b.n	800167e <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800170e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001710:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001712:	b292      	uxth	r2, r2
 8001714:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	e7df      	b.n	80016de <HAL_I2C_Mem_Read+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	2120      	movs	r1, #32
 8001722:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800172a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800172e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001738:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800173c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001740:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001744:	e759      	b.n	80015fa <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8001746:	2002      	movs	r0, #2
 8001748:	e757      	b.n	80015fa <HAL_I2C_Mem_Read+0x26>
 800174a:	bf00      	nop
 800174c:	80002400 	.word	0x80002400

08001750 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001750:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	2a20      	cmp	r2, #32
{
 8001758:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800175a:	d11d      	bne.n	8001798 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800175c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001760:	2b01      	cmp	r3, #1
 8001762:	d019      	beq.n	8001798 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001764:	2324      	movs	r3, #36	; 0x24
 8001766:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800176a:	6803      	ldr	r3, [r0, #0]
 800176c:	681c      	ldr	r4, [r3, #0]
 800176e:	f024 0401 	bic.w	r4, r4, #1
 8001772:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001774:	681c      	ldr	r4, [r3, #0]
 8001776:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800177a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800177c:	681c      	ldr	r4, [r3, #0]
 800177e:	4321      	orrs	r1, r4
 8001780:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001782:	6819      	ldr	r1, [r3, #0]
 8001784:	f041 0101 	orr.w	r1, r1, #1
 8001788:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800178a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800178c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001790:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001794:	4618      	mov	r0, r3
 8001796:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001798:	2002      	movs	r0, #2
  }
}
 800179a:	bd10      	pop	{r4, pc}

0800179c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800179c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80017a2:	b2e4      	uxtb	r4, r4
 80017a4:	2c20      	cmp	r4, #32
 80017a6:	d11c      	bne.n	80017e2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d018      	beq.n	80017e2 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017b0:	2324      	movs	r3, #36	; 0x24
 80017b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017b6:	6803      	ldr	r3, [r0, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017c0:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017c2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017c6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017ca:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80017d6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80017da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80017de:	4618      	mov	r0, r3
 80017e0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80017e2:	2002      	movs	r0, #2
  }
}
 80017e4:	bd10      	pop	{r4, pc}

080017e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80017ea:	4604      	mov	r4, r0
{
 80017ec:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d07c      	beq.n	80018ec <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 80017f2:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 80017f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017fa:	b91b      	cbnz	r3, 8001804 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017fc:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001800:	f003 f8ea 	bl	80049d8 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001804:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001806:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8001808:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 800180c:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 8001810:	f001 fe53 	bl	80034ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001816:	466e      	mov	r6, sp
 8001818:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800181a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800181e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001822:	e886 0003 	stmia.w	r6, {r0, r1}
 8001826:	f104 0804 	add.w	r8, r4, #4
 800182a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	f001 fe2f 	bl	8003492 <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8001834:	2100      	movs	r1, #0
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	f001 fe45 	bl	80034c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800183c:	2200      	movs	r2, #0
 800183e:	6860      	ldr	r0, [r4, #4]
 8001840:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8001844:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8001848:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800184a:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800184c:	4282      	cmp	r2, r0
 800184e:	f103 031c 	add.w	r3, r3, #28
 8001852:	d13b      	bne.n	80018cc <HAL_PCD_Init+0xe6>
 8001854:	2200      	movs	r2, #0
 8001856:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8001858:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 800185a:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 800185e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 8001862:	3201      	adds	r2, #1
 8001864:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 8001866:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800186a:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 800186e:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 8001872:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 8001876:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 800187a:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 800187e:	d1ec      	bne.n	800185a <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8001880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001882:	466e      	mov	r6, sp
 8001884:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001888:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800188a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800188e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001892:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001896:	6820      	ldr	r0, [r4, #0]
 8001898:	f001 fe2c 	bl	80034f4 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 800189c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 800189e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 80018a2:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 80018a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d102      	bne.n	80018b2 <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 80018ac:	4620      	mov	r0, r4
 80018ae:	f000 f81f 	bl	80018f0 <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 80018b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d102      	bne.n	80018be <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 80018b8:	4620      	mov	r0, r4
 80018ba:	f000 f82c 	bl	8001916 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 80018be:	6820      	ldr	r0, [r4, #0]
 80018c0:	f001 fed9 	bl	8003676 <USB_DevDisconnect>
  return HAL_OK;
 80018c4:	2000      	movs	r0, #0
}
 80018c6:	b00a      	add	sp, #40	; 0x28
 80018c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 80018cc:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 80018d0:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 80018d4:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80018d8:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 80018dc:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 80018e0:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 80018e4:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80018e8:	3201      	adds	r2, #1
 80018ea:	e7af      	b.n	800184c <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 80018ec:	2001      	movs	r0, #1
 80018ee:	e7ea      	b.n	80018c6 <HAL_PCD_Init+0xe0>

080018f0 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80018f0:	6802      	ldr	r2, [r0, #0]
{
 80018f2:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 80018f4:	2101      	movs	r1, #1
 80018f6:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 80018fa:	2000      	movs	r0, #0
 80018fc:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001900:	6993      	ldr	r3, [r2, #24]
 8001902:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001906:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001908:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	f043 0303 	orr.w	r3, r3, #3
 8001912:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 8001914:	4770      	bx	lr

08001916 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001916:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 8001918:	2301      	movs	r3, #1
 800191a:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 800191e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 8001926:	2000      	movs	r0, #0
 8001928:	4770      	bx	lr
	...

0800192c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800192c:	4b02      	ldr	r3, [pc, #8]	; (8001938 <HAL_PWREx_GetVoltageRange+0xc>)
 800192e:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001930:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40007000 	.word	0x40007000

0800193c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800193e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001940:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001944:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001948:	d11a      	bne.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800194a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800194e:	d013      	beq.n	8001978 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001950:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001952:	4912      	ldr	r1, [pc, #72]	; (800199c <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001954:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195c:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	fbb2 f1f1 	udiv	r1, r2, r1
 8001966:	2232      	movs	r2, #50	; 0x32
 8001968:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800196a:	b112      	cbz	r2, 8001972 <HAL_PWREx_ControlVoltageScaling+0x36>
 800196c:	6959      	ldr	r1, [r3, #20]
 800196e:	0549      	lsls	r1, r1, #21
 8001970:	d404      	bmi.n	800197c <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	055b      	lsls	r3, r3, #21
 8001976:	d40d      	bmi.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001978:	2000      	movs	r0, #0
 800197a:	4770      	bx	lr
        wait_loop_index--;
 800197c:	3a01      	subs	r2, #1
 800197e:	e7f4      	b.n	800196a <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001980:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001984:	bf1f      	itttt	ne
 8001986:	681a      	ldrne	r2, [r3, #0]
 8001988:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800198c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001990:	601a      	strne	r2, [r3, #0]
 8001992:	e7f1      	b.n	8001978 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001994:	2003      	movs	r0, #3
}  
 8001996:	4770      	bx	lr
 8001998:	40007000 	.word	0x40007000
 800199c:	000f4240 	.word	0x000f4240
 80019a0:	20000018 	.word	0x20000018

080019a4 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.  
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80019a4:	4a02      	ldr	r2, [pc, #8]	; (80019b0 <HAL_PWREx_EnableVddUSB+0xc>)
 80019a6:	6853      	ldr	r3, [r2, #4]
 80019a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ac:	6053      	str	r3, [r2, #4]
 80019ae:	4770      	bx	lr
 80019b0:	40007000 	.word	0x40007000

080019b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80019b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019b8:	9d06      	ldr	r5, [sp, #24]
 80019ba:	4604      	mov	r4, r0
 80019bc:	460f      	mov	r7, r1
 80019be:	4616      	mov	r6, r2
 80019c0:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80019c2:	6821      	ldr	r1, [r4, #0]
 80019c4:	688a      	ldr	r2, [r1, #8]
 80019c6:	423a      	tst	r2, r7
 80019c8:	bf14      	ite	ne
 80019ca:	2201      	movne	r2, #1
 80019cc:	2200      	moveq	r2, #0
 80019ce:	42b2      	cmp	r2, r6
 80019d0:	d102      	bne.n	80019d8 <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80019d2:	2000      	movs	r0, #0
}
 80019d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80019d8:	1c6b      	adds	r3, r5, #1
 80019da:	d0f3      	beq.n	80019c4 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019dc:	b94d      	cbnz	r5, 80019f2 <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80019de:	2304      	movs	r3, #4
 80019e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80019e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	63e3      	str	r3, [r4, #60]	; 0x3c
 80019ec:	2001      	movs	r0, #1
 80019ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019f2:	f7ff f8c9 	bl	8000b88 <HAL_GetTick>
 80019f6:	eba0 0008 	sub.w	r0, r0, r8
 80019fa:	4285      	cmp	r5, r0
 80019fc:	d2e1      	bcs.n	80019c2 <QSPI_WaitFlagStateUntilTimeout+0xe>
 80019fe:	e7ee      	b.n	80019de <QSPI_WaitFlagStateUntilTimeout+0x2a>

08001a00 <HAL_QSPI_Init>:
{
 8001a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff f8c0 	bl	8000b88 <HAL_GetTick>
 8001a08:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8001a0a:	2c00      	cmp	r4, #0
 8001a0c:	d049      	beq.n	8001aa2 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8001a0e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d047      	beq.n	8001aa6 <HAL_QSPI_Init+0xa6>
 8001a16:	2301      	movs	r3, #1
 8001a18:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001a1c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001a20:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001a24:	b93a      	cbnz	r2, 8001a36 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8001a26:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f002 fe08 	bl	8004640 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8001a30:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a34:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, 
 8001a36:	6820      	ldr	r0, [r4, #0]
 8001a38:	68a1      	ldr	r1, [r4, #8]
 8001a3a:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, 
 8001a3e:	3901      	subs	r1, #1
 8001a40:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001a44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001a48:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	462b      	mov	r3, r5
 8001a52:	4620      	mov	r0, r4
 8001a54:	f7ff ffae 	bl	80019b4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8001a58:	b9f0      	cbnz	r0, 8001a98 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT), 
 8001a5a:	6822      	ldr	r2, [r4, #0]
 8001a5c:	6865      	ldr	r5, [r4, #4]
 8001a5e:	6811      	ldr	r1, [r2, #0]
 8001a60:	68e3      	ldr	r3, [r4, #12]
 8001a62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001a66:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8001a6a:	f021 0110 	bic.w	r1, r1, #16
 8001a6e:	430b      	orrs	r3, r1
 8001a70:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8001a72:	69a1      	ldr	r1, [r4, #24]
 8001a74:	6963      	ldr	r3, [r4, #20]
 8001a76:	6855      	ldr	r5, [r2, #4]
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	6921      	ldr	r1, [r4, #16]
 8001a7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001a80:	490a      	ldr	r1, [pc, #40]	; (8001aac <HAL_QSPI_Init+0xac>)
 8001a82:	4029      	ands	r1, r5
 8001a84:	430b      	orrs	r3, r1
 8001a86:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001a88:	6813      	ldr	r3, [r2, #0]
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8001a90:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8001a92:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8001a94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001a9e:	b003      	add	sp, #12
 8001aa0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	e7fb      	b.n	8001a9e <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	e7f9      	b.n	8001a9e <HAL_QSPI_Init+0x9e>
 8001aaa:	bf00      	nop
 8001aac:	ffe0f8fe 	.word	0xffe0f8fe

08001ab0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ab2:	4d1e      	ldr	r5, [pc, #120]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001ab4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001ab6:	00da      	lsls	r2, r3, #3
{
 8001ab8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001aba:	d518      	bpl.n	8001aee <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001abc:	f7ff ff36 	bl	800192c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001ac4:	d123      	bne.n	8001b0e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ac6:	2c80      	cmp	r4, #128	; 0x80
 8001ac8:	d929      	bls.n	8001b1e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001aca:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001acc:	bf8c      	ite	hi
 8001ace:	2002      	movhi	r0, #2
 8001ad0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001ad4:	6813      	ldr	r3, [r2, #0]
 8001ad6:	f023 0307 	bic.w	r3, r3, #7
 8001ada:	4303      	orrs	r3, r0
 8001adc:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8001ade:	6813      	ldr	r3, [r2, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001ae4:	1a18      	subs	r0, r3, r0
 8001ae6:	bf18      	it	ne
 8001ae8:	2001      	movne	r0, #1
 8001aea:	b003      	add	sp, #12
 8001aec:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af4:	65ab      	str	r3, [r5, #88]	; 0x58
 8001af6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001b00:	f7ff ff14 	bl	800192c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b04:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	65ab      	str	r3, [r5, #88]	; 0x58
 8001b0c:	e7d8      	b.n	8001ac0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001b0e:	2c80      	cmp	r4, #128	; 0x80
 8001b10:	d807      	bhi.n	8001b22 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001b12:	d008      	beq.n	8001b26 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001b14:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001b18:	4258      	negs	r0, r3
 8001b1a:	4158      	adcs	r0, r3
 8001b1c:	e7d9      	b.n	8001ad2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b1e:	2000      	movs	r0, #0
 8001b20:	e7d7      	b.n	8001ad2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b22:	2003      	movs	r0, #3
 8001b24:	e7d5      	b.n	8001ad2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b26:	2002      	movs	r0, #2
 8001b28:	e7d3      	b.n	8001ad2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40022000 	.word	0x40022000

08001b34 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	f012 0f0c 	tst.w	r2, #12
{
 8001b3c:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001b3e:	d009      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001b46:	2a0c      	cmp	r2, #12
 8001b48:	d12d      	bne.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	f002 0203 	and.w	r2, r2, #3
 8001b50:	2a01      	cmp	r2, #1
 8001b52:	d128      	bne.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001b54:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001b56:	4928      	ldr	r1, [pc, #160]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001b58:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b5a:	bf55      	itete	pl
 8001b5c:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b60:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b62:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b66:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001b6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001b6e:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001b70:	f011 0f0c 	tst.w	r1, #12
 8001b74:	bf0c      	ite	eq
 8001b76:	4610      	moveq	r0, r2
 8001b78:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b7a:	6899      	ldr	r1, [r3, #8]
 8001b7c:	f001 010c 	and.w	r1, r1, #12
 8001b80:	290c      	cmp	r1, #12
 8001b82:	d130      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b84:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b86:	68d8      	ldr	r0, [r3, #12]
 8001b88:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001b8c:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b8e:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8001b92:	2802      	cmp	r0, #2
 8001b94:	d019      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x96>
 8001b96:	2803      	cmp	r0, #3
 8001b98:	d026      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b9a:	fbb2 f2f1 	udiv	r2, r2, r1
 8001b9e:	68d8      	ldr	r0, [r3, #12]
 8001ba0:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001ba4:	e017      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	f002 020c 	and.w	r2, r2, #12
 8001bac:	2a04      	cmp	r2, #4
 8001bae:	d007      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	f002 020c 	and.w	r2, r2, #12
 8001bb6:	2a08      	cmp	r2, #8
 8001bb8:	d104      	bne.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	e7dc      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001bc0:	480f      	ldr	r0, [pc, #60]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001bc2:	e7fb      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001bc4:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	e7d7      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001bce:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bd2:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001bdc:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bde:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001be0:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001be2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001be6:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	4804      	ldr	r0, [pc, #16]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bec:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001bf0:	e7ef      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x9e>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	0800579c 	.word	0x0800579c
 8001bfc:	007a1200 	.word	0x007a1200
 8001c00:	00f42400 	.word	0x00f42400

08001c04 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c04:	6803      	ldr	r3, [r0, #0]
{
 8001c06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001c0a:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c0c:	06d8      	lsls	r0, r3, #27
 8001c0e:	d53b      	bpl.n	8001c88 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001c10:	4ca9      	ldr	r4, [pc, #676]	; (8001eb8 <HAL_RCC_OscConfig+0x2b4>)
 8001c12:	68a3      	ldr	r3, [r4, #8]
 8001c14:	f013 0f0c 	tst.w	r3, #12
 8001c18:	d160      	bne.n	8001cdc <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	0799      	lsls	r1, r3, #30
 8001c1e:	d505      	bpl.n	8001c2c <HAL_RCC_OscConfig+0x28>
 8001c20:	69ab      	ldr	r3, [r5, #24]
 8001c22:	b91b      	cbnz	r3, 8001c2c <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8001c24:	2001      	movs	r0, #1
}
 8001c26:	b002      	add	sp, #8
 8001c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	6a28      	ldr	r0, [r5, #32]
 8001c30:	071a      	lsls	r2, r3, #28
 8001c32:	bf56      	itet	pl
 8001c34:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001c38:	6823      	ldrmi	r3, [r4, #0]
 8001c3a:	091b      	lsrpl	r3, r3, #4
 8001c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c40:	4283      	cmp	r3, r0
 8001c42:	d236      	bcs.n	8001cb2 <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c44:	f7ff ff34 	bl	8001ab0 <RCC_SetFlashLatencyFromMSIRange>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d1eb      	bne.n	8001c24 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6023      	str	r3, [r4, #0]
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	6a2a      	ldr	r2, [r5, #32]
 8001c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c60:	6863      	ldr	r3, [r4, #4]
 8001c62:	69ea      	ldr	r2, [r5, #28]
 8001c64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c6c:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c6e:	f7ff ff61 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001c72:	68a3      	ldr	r3, [r4, #8]
 8001c74:	4a91      	ldr	r2, [pc, #580]	; (8001ebc <HAL_RCC_OscConfig+0x2b8>)
 8001c76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	40d8      	lsrs	r0, r3
 8001c7e:	4b90      	ldr	r3, [pc, #576]	; (8001ec0 <HAL_RCC_OscConfig+0x2bc>)
 8001c80:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f7fe ff58 	bl	8000b38 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	07de      	lsls	r6, r3, #31
 8001c8c:	d45b      	bmi.n	8001d46 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	682b      	ldr	r3, [r5, #0]
 8001c90:	079c      	lsls	r4, r3, #30
 8001c92:	f100 80a3 	bmi.w	8001ddc <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c96:	682b      	ldr	r3, [r5, #0]
 8001c98:	0719      	lsls	r1, r3, #28
 8001c9a:	f100 80e1 	bmi.w	8001e60 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9e:	682b      	ldr	r3, [r5, #0]
 8001ca0:	075a      	lsls	r2, r3, #29
 8001ca2:	f100 810f 	bmi.w	8001ec4 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	f040 8176 	bne.w	8001f9a <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8001cae:	2000      	movs	r0, #0
 8001cb0:	e7b9      	b.n	8001c26 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	6023      	str	r3, [r4, #0]
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cc0:	4303      	orrs	r3, r0
 8001cc2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cc4:	6863      	ldr	r3, [r4, #4]
 8001cc6:	69ea      	ldr	r2, [r5, #28]
 8001cc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ccc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cd0:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd2:	f7ff feed 	bl	8001ab0 <RCC_SetFlashLatencyFromMSIRange>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d0c9      	beq.n	8001c6e <HAL_RCC_OscConfig+0x6a>
 8001cda:	e7a3      	b.n	8001c24 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cdc:	69ab      	ldr	r3, [r5, #24]
 8001cde:	b313      	cbz	r3, 8001d26 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ce8:	f7fe ff4e 	bl	8000b88 <HAL_GetTick>
 8001cec:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	079b      	lsls	r3, r3, #30
 8001cf2:	d511      	bpl.n	8001d18 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6023      	str	r3, [r4, #0]
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	6a2a      	ldr	r2, [r5, #32]
 8001d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d04:	4313      	orrs	r3, r2
 8001d06:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d08:	6863      	ldr	r3, [r4, #4]
 8001d0a:	69ea      	ldr	r2, [r5, #28]
 8001d0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d14:	6063      	str	r3, [r4, #4]
 8001d16:	e7b7      	b.n	8001c88 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d18:	f7fe ff36 	bl	8000b88 <HAL_GetTick>
 8001d1c:	1b80      	subs	r0, r0, r6
 8001d1e:	2802      	cmp	r0, #2
 8001d20:	d9e5      	bls.n	8001cee <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 8001d22:	2003      	movs	r0, #3
 8001d24:	e77f      	b.n	8001c26 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d2e:	f7fe ff2b 	bl	8000b88 <HAL_GetTick>
 8001d32:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	079f      	lsls	r7, r3, #30
 8001d38:	d5a6      	bpl.n	8001c88 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d3a:	f7fe ff25 	bl	8000b88 <HAL_GetTick>
 8001d3e:	1b80      	subs	r0, r0, r6
 8001d40:	2802      	cmp	r0, #2
 8001d42:	d9f7      	bls.n	8001d34 <HAL_RCC_OscConfig+0x130>
 8001d44:	e7ed      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001d46:	4c5c      	ldr	r4, [pc, #368]	; (8001eb8 <HAL_RCC_OscConfig+0x2b4>)
 8001d48:	68a3      	ldr	r3, [r4, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d009      	beq.n	8001d66 <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d52:	68a3      	ldr	r3, [r4, #8]
 8001d54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	d10b      	bne.n	8001d74 <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d5c:	68e3      	ldr	r3, [r4, #12]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d106      	bne.n	8001d74 <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	0398      	lsls	r0, r3, #14
 8001d6a:	d590      	bpl.n	8001c8e <HAL_RCC_OscConfig+0x8a>
 8001d6c:	686b      	ldr	r3, [r5, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d18d      	bne.n	8001c8e <HAL_RCC_OscConfig+0x8a>
 8001d72:	e757      	b.n	8001c24 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d74:	686b      	ldr	r3, [r5, #4]
 8001d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7a:	d110      	bne.n	8001d9e <HAL_RCC_OscConfig+0x19a>
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d84:	f7fe ff00 	bl	8000b88 <HAL_GetTick>
 8001d88:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	0399      	lsls	r1, r3, #14
 8001d8e:	f53f af7e 	bmi.w	8001c8e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d92:	f7fe fef9 	bl	8000b88 <HAL_GetTick>
 8001d96:	1b80      	subs	r0, r0, r6
 8001d98:	2864      	cmp	r0, #100	; 0x64
 8001d9a:	d9f6      	bls.n	8001d8a <HAL_RCC_OscConfig+0x186>
 8001d9c:	e7c1      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da2:	d104      	bne.n	8001dae <HAL_RCC_OscConfig+0x1aa>
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001daa:	6023      	str	r3, [r4, #0]
 8001dac:	e7e6      	b.n	8001d7c <HAL_RCC_OscConfig+0x178>
 8001dae:	6822      	ldr	r2, [r4, #0]
 8001db0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001db4:	6022      	str	r2, [r4, #0]
 8001db6:	6822      	ldr	r2, [r4, #0]
 8001db8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dbc:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1e0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 8001dc2:	f7fe fee1 	bl	8000b88 <HAL_GetTick>
 8001dc6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	039a      	lsls	r2, r3, #14
 8001dcc:	f57f af5f 	bpl.w	8001c8e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7fe feda 	bl	8000b88 <HAL_GetTick>
 8001dd4:	1b80      	subs	r0, r0, r6
 8001dd6:	2864      	cmp	r0, #100	; 0x64
 8001dd8:	d9f6      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x1c4>
 8001dda:	e7a2      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001ddc:	4c36      	ldr	r4, [pc, #216]	; (8001eb8 <HAL_RCC_OscConfig+0x2b4>)
 8001dde:	68a3      	ldr	r3, [r4, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d009      	beq.n	8001dfc <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001de8:	68a3      	ldr	r3, [r4, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d113      	bne.n	8001e1a <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001df2:	68e3      	ldr	r3, [r4, #12]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d10e      	bne.n	8001e1a <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	055b      	lsls	r3, r3, #21
 8001e00:	d503      	bpl.n	8001e0a <HAL_RCC_OscConfig+0x206>
 8001e02:	68eb      	ldr	r3, [r5, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f43f af0d 	beq.w	8001c24 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0a:	6863      	ldr	r3, [r4, #4]
 8001e0c:	692a      	ldr	r2, [r5, #16]
 8001e0e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001e12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e16:	6063      	str	r3, [r4, #4]
 8001e18:	e73d      	b.n	8001c96 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e1a:	68eb      	ldr	r3, [r5, #12]
 8001e1c:	b17b      	cbz	r3, 8001e3e <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e26:	f7fe feaf 	bl	8000b88 <HAL_GetTick>
 8001e2a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	055f      	lsls	r7, r3, #21
 8001e30:	d4eb      	bmi.n	8001e0a <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e32:	f7fe fea9 	bl	8000b88 <HAL_GetTick>
 8001e36:	1b80      	subs	r0, r0, r6
 8001e38:	2802      	cmp	r0, #2
 8001e3a:	d9f7      	bls.n	8001e2c <HAL_RCC_OscConfig+0x228>
 8001e3c:	e771      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e46:	f7fe fe9f 	bl	8000b88 <HAL_GetTick>
 8001e4a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	0558      	lsls	r0, r3, #21
 8001e50:	f57f af21 	bpl.w	8001c96 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e54:	f7fe fe98 	bl	8000b88 <HAL_GetTick>
 8001e58:	1b80      	subs	r0, r0, r6
 8001e5a:	2802      	cmp	r0, #2
 8001e5c:	d9f6      	bls.n	8001e4c <HAL_RCC_OscConfig+0x248>
 8001e5e:	e760      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e60:	696b      	ldr	r3, [r5, #20]
 8001e62:	4c15      	ldr	r4, [pc, #84]	; (8001eb8 <HAL_RCC_OscConfig+0x2b4>)
 8001e64:	b19b      	cbz	r3, 8001e8e <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 8001e66:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e72:	f7fe fe89 	bl	8000b88 <HAL_GetTick>
 8001e76:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001e78:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e7c:	079b      	lsls	r3, r3, #30
 8001e7e:	f53f af0e 	bmi.w	8001c9e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e82:	f7fe fe81 	bl	8000b88 <HAL_GetTick>
 8001e86:	1b80      	subs	r0, r0, r6
 8001e88:	2802      	cmp	r0, #2
 8001e8a:	d9f5      	bls.n	8001e78 <HAL_RCC_OscConfig+0x274>
 8001e8c:	e749      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 8001e8e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e9a:	f7fe fe75 	bl	8000b88 <HAL_GetTick>
 8001e9e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001ea0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001ea4:	079f      	lsls	r7, r3, #30
 8001ea6:	f57f aefa 	bpl.w	8001c9e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eaa:	f7fe fe6d 	bl	8000b88 <HAL_GetTick>
 8001eae:	1b80      	subs	r0, r0, r6
 8001eb0:	2802      	cmp	r0, #2
 8001eb2:	d9f5      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x29c>
 8001eb4:	e735      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08005783 	.word	0x08005783
 8001ec0:	20000018 	.word	0x20000018
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ec4:	4c66      	ldr	r4, [pc, #408]	; (8002060 <HAL_RCC_OscConfig+0x45c>)
 8001ec6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ec8:	00de      	lsls	r6, r3, #3
 8001eca:	d427      	bmi.n	8001f1c <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	65a3      	str	r3, [r4, #88]	; 0x58
 8001ed4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ede:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee0:	4e60      	ldr	r6, [pc, #384]	; (8002064 <HAL_RCC_OscConfig+0x460>)
 8001ee2:	6833      	ldr	r3, [r6, #0]
 8001ee4:	05d8      	lsls	r0, r3, #23
 8001ee6:	d51b      	bpl.n	8001f20 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee8:	68ab      	ldr	r3, [r5, #8]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d129      	bne.n	8001f42 <HAL_RCC_OscConfig+0x33e>
 8001eee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001efa:	f7fe fe45 	bl	8000b88 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f02:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001f04:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f08:	079a      	lsls	r2, r3, #30
 8001f0a:	d540      	bpl.n	8001f8e <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8001f0c:	2f00      	cmp	r7, #0
 8001f0e:	f43f aeca 	beq.w	8001ca6 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f18:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f1a:	e6c4      	b.n	8001ca6 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8001f1c:	2700      	movs	r7, #0
 8001f1e:	e7df      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f20:	6833      	ldr	r3, [r6, #0]
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f28:	f7fe fe2e 	bl	8000b88 <HAL_GetTick>
 8001f2c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2e:	6833      	ldr	r3, [r6, #0]
 8001f30:	05d9      	lsls	r1, r3, #23
 8001f32:	d4d9      	bmi.n	8001ee8 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f34:	f7fe fe28 	bl	8000b88 <HAL_GetTick>
 8001f38:	eba0 0008 	sub.w	r0, r0, r8
 8001f3c:	2802      	cmp	r0, #2
 8001f3e:	d9f6      	bls.n	8001f2e <HAL_RCC_OscConfig+0x32a>
 8001f40:	e6ef      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	d106      	bne.n	8001f54 <HAL_RCC_OscConfig+0x350>
 8001f46:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001f52:	e7cc      	b.n	8001eee <HAL_RCC_OscConfig+0x2ea>
 8001f54:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001f60:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f64:	f022 0204 	bic.w	r2, r2, #4
 8001f68:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1c4      	bne.n	8001efa <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001f70:	f7fe fe0a 	bl	8000b88 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f78:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001f7a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f7e:	079b      	lsls	r3, r3, #30
 8001f80:	d5c4      	bpl.n	8001f0c <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fe01 	bl	8000b88 <HAL_GetTick>
 8001f86:	1b80      	subs	r0, r0, r6
 8001f88:	4540      	cmp	r0, r8
 8001f8a:	d9f6      	bls.n	8001f7a <HAL_RCC_OscConfig+0x376>
 8001f8c:	e6c9      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fdfb 	bl	8000b88 <HAL_GetTick>
 8001f92:	1b80      	subs	r0, r0, r6
 8001f94:	4540      	cmp	r0, r8
 8001f96:	d9b5      	bls.n	8001f04 <HAL_RCC_OscConfig+0x300>
 8001f98:	e6c3      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f9a:	4c31      	ldr	r4, [pc, #196]	; (8002060 <HAL_RCC_OscConfig+0x45c>)
 8001f9c:	68a3      	ldr	r3, [r4, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	f43f ae3e 	beq.w	8001c24 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001faa:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001fac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fb2:	d137      	bne.n	8002024 <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fde8 	bl	8000b88 <HAL_GetTick>
 8001fb8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	019f      	lsls	r7, r3, #6
 8001fbe:	d42b      	bmi.n	8002018 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001fc2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001fc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001fc8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001fca:	3a01      	subs	r2, #1
 8001fcc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001fd0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001fd2:	0912      	lsrs	r2, r2, #4
 8001fd4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001fd8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001fda:	0852      	lsrs	r2, r2, #1
 8001fdc:	3a01      	subs	r2, #1
 8001fde:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001fe2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001fe4:	0852      	lsrs	r2, r2, #1
 8001fe6:	3a01      	subs	r2, #1
 8001fe8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001fec:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff6:	68e3      	ldr	r3, [r4, #12]
 8001ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fdc3 	bl	8000b88 <HAL_GetTick>
 8002002:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	0198      	lsls	r0, r3, #6
 8002008:	f53f ae51 	bmi.w	8001cae <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7fe fdbc 	bl	8000b88 <HAL_GetTick>
 8002010:	1b40      	subs	r0, r0, r5
 8002012:	2802      	cmp	r0, #2
 8002014:	d9f6      	bls.n	8002004 <HAL_RCC_OscConfig+0x400>
 8002016:	e684      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe fdb6 	bl	8000b88 <HAL_GetTick>
 800201c:	1b80      	subs	r0, r0, r6
 800201e:	2802      	cmp	r0, #2
 8002020:	d9cb      	bls.n	8001fba <HAL_RCC_OscConfig+0x3b6>
 8002022:	e67e      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	0119      	lsls	r1, r3, #4
 8002028:	d406      	bmi.n	8002038 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800202a:	6823      	ldr	r3, [r4, #0]
           &&
 800202c:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800202e:	bf5e      	ittt	pl
 8002030:	68e3      	ldrpl	r3, [r4, #12]
 8002032:	f023 0303 	bicpl.w	r3, r3, #3
 8002036:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002038:	68e3      	ldr	r3, [r4, #12]
 800203a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800203e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002042:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002044:	f7fe fda0 	bl	8000b88 <HAL_GetTick>
 8002048:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	019b      	lsls	r3, r3, #6
 800204e:	f57f ae2e 	bpl.w	8001cae <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7fe fd99 	bl	8000b88 <HAL_GetTick>
 8002056:	1b40      	subs	r0, r0, r5
 8002058:	2802      	cmp	r0, #2
 800205a:	d9f6      	bls.n	800204a <HAL_RCC_OscConfig+0x446>
 800205c:	e661      	b.n	8001d22 <HAL_RCC_OscConfig+0x11e>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000

08002068 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8002068:	4a56      	ldr	r2, [pc, #344]	; (80021c4 <HAL_RCC_ClockConfig+0x15c>)
 800206a:	6813      	ldr	r3, [r2, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	428b      	cmp	r3, r1
{
 8002072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002076:	4605      	mov	r5, r0
 8002078:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800207a:	d32b      	bcc.n	80020d4 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	07d9      	lsls	r1, r3, #31
 8002080:	d435      	bmi.n	80020ee <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002082:	6829      	ldr	r1, [r5, #0]
 8002084:	078a      	lsls	r2, r1, #30
 8002086:	f100 8083 	bmi.w	8002190 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800208a:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <HAL_RCC_ClockConfig+0x15c>)
 800208c:	6813      	ldr	r3, [r2, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	429e      	cmp	r6, r3
 8002094:	f0c0 8084 	bcc.w	80021a0 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	f011 0f04 	tst.w	r1, #4
 800209c:	4c4a      	ldr	r4, [pc, #296]	; (80021c8 <HAL_RCC_ClockConfig+0x160>)
 800209e:	f040 808a 	bne.w	80021b6 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a2:	070b      	lsls	r3, r1, #28
 80020a4:	d506      	bpl.n	80020b4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a6:	68a3      	ldr	r3, [r4, #8]
 80020a8:	692a      	ldr	r2, [r5, #16]
 80020aa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80020ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80020b2:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b4:	f7ff fd3e 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 80020b8:	68a3      	ldr	r3, [r4, #8]
 80020ba:	4a44      	ldr	r2, [pc, #272]	; (80021cc <HAL_RCC_ClockConfig+0x164>)
 80020bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	40d8      	lsrs	r0, r3
 80020c4:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <HAL_RCC_ClockConfig+0x168>)
 80020c6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7fe fd35 	bl	8000b38 <HAL_InitTick>
  return HAL_OK;
 80020ce:	2000      	movs	r0, #0
}
 80020d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d4:	6813      	ldr	r3, [r2, #0]
 80020d6:	f023 0307 	bic.w	r3, r3, #7
 80020da:	430b      	orrs	r3, r1
 80020dc:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80020de:	6813      	ldr	r3, [r2, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4299      	cmp	r1, r3
 80020e6:	d0c9      	beq.n	800207c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80020e8:	2001      	movs	r0, #1
 80020ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	686a      	ldr	r2, [r5, #4]
 80020f0:	4c35      	ldr	r4, [pc, #212]	; (80021c8 <HAL_RCC_ClockConfig+0x160>)
 80020f2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80020f4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	d11c      	bne.n	8002132 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80020f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80020fc:	d0f4      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	68a3      	ldr	r3, [r4, #8]
 8002100:	f023 0303 	bic.w	r3, r3, #3
 8002104:	4313      	orrs	r3, r2
 8002106:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002108:	f7fe fd3e 	bl	8000b88 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210c:	686b      	ldr	r3, [r5, #4]
 800210e:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8002110:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002112:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002116:	d118      	bne.n	800214a <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002118:	68a3      	ldr	r3, [r4, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d0af      	beq.n	8002082 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002122:	f7fe fd31 	bl	8000b88 <HAL_GetTick>
 8002126:	1bc0      	subs	r0, r0, r7
 8002128:	4540      	cmp	r0, r8
 800212a:	d9f5      	bls.n	8002118 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 800212c:	2003      	movs	r0, #3
 800212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002132:	2a02      	cmp	r2, #2
 8002134:	d102      	bne.n	800213c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002136:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800213a:	e7df      	b.n	80020fc <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800213c:	b912      	cbnz	r2, 8002144 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800213e:	f013 0f02 	tst.w	r3, #2
 8002142:	e7db      	b.n	80020fc <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002144:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002148:	e7d8      	b.n	80020fc <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	2b02      	cmp	r3, #2
 800214c:	d10a      	bne.n	8002164 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800214e:	68a3      	ldr	r3, [r4, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d094      	beq.n	8002082 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe fd16 	bl	8000b88 <HAL_GetTick>
 800215c:	1bc0      	subs	r0, r0, r7
 800215e:	4540      	cmp	r0, r8
 8002160:	d9f5      	bls.n	800214e <HAL_RCC_ClockConfig+0xe6>
 8002162:	e7e3      	b.n	800212c <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002164:	b973      	cbnz	r3, 8002184 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8002166:	68a3      	ldr	r3, [r4, #8]
 8002168:	f013 0f0c 	tst.w	r3, #12
 800216c:	d089      	beq.n	8002082 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216e:	f7fe fd0b 	bl	8000b88 <HAL_GetTick>
 8002172:	1bc0      	subs	r0, r0, r7
 8002174:	4540      	cmp	r0, r8
 8002176:	d9f6      	bls.n	8002166 <HAL_RCC_ClockConfig+0xfe>
 8002178:	e7d8      	b.n	800212c <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217a:	f7fe fd05 	bl	8000b88 <HAL_GetTick>
 800217e:	1bc0      	subs	r0, r0, r7
 8002180:	4540      	cmp	r0, r8
 8002182:	d8d3      	bhi.n	800212c <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002184:	68a3      	ldr	r3, [r4, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d1f5      	bne.n	800217a <HAL_RCC_ClockConfig+0x112>
 800218e:	e778      	b.n	8002082 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <HAL_RCC_ClockConfig+0x160>)
 8002192:	68a8      	ldr	r0, [r5, #8]
 8002194:	6893      	ldr	r3, [r2, #8]
 8002196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800219a:	4303      	orrs	r3, r0
 800219c:	6093      	str	r3, [r2, #8]
 800219e:	e774      	b.n	800208a <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a0:	6813      	ldr	r3, [r2, #0]
 80021a2:	f023 0307 	bic.w	r3, r3, #7
 80021a6:	4333      	orrs	r3, r6
 80021a8:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80021aa:	6813      	ldr	r3, [r2, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	429e      	cmp	r6, r3
 80021b2:	d199      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x80>
 80021b4:	e770      	b.n	8002098 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b6:	68a3      	ldr	r3, [r4, #8]
 80021b8:	68ea      	ldr	r2, [r5, #12]
 80021ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021be:	4313      	orrs	r3, r2
 80021c0:	60a3      	str	r3, [r4, #8]
 80021c2:	e76e      	b.n	80020a2 <HAL_RCC_ClockConfig+0x3a>
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08005783 	.word	0x08005783
 80021d0:	20000018 	.word	0x20000018

080021d4 <HAL_RCC_GetHCLKFreq>:
}
 80021d4:	4b01      	ldr	r3, [pc, #4]	; (80021dc <HAL_RCC_GetHCLKFreq+0x8>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000018 	.word	0x20000018

080021e0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	4a03      	ldr	r2, [pc, #12]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021ee:	6810      	ldr	r0, [r2, #0]
}
 80021f0:	40d8      	lsrs	r0, r3
 80021f2:	4770      	bx	lr
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08005793 	.word	0x08005793
 80021fc:	20000018 	.word	0x20000018

08002200 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	4a03      	ldr	r2, [pc, #12]	; (800221c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800220e:	6810      	ldr	r0, [r2, #0]
}
 8002210:	40d8      	lsrs	r0, r3
 8002212:	4770      	bx	lr
 8002214:	40021000 	.word	0x40021000
 8002218:	08005793 	.word	0x08005793
 800221c:	20000018 	.word	0x20000018

08002220 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002222:	4b45      	ldr	r3, [pc, #276]	; (8002338 <RCCEx_PLLSAI1_Config+0x118>)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	f012 0f03 	tst.w	r2, #3
{
 800222a:	4605      	mov	r5, r0
 800222c:	460e      	mov	r6, r1
 800222e:	461c      	mov	r4, r3
 8002230:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002232:	d02a      	beq.n	800228a <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	f002 0203 	and.w	r2, r2, #3
 800223a:	4282      	cmp	r2, r0
 800223c:	d13c      	bne.n	80022b8 <RCCEx_PLLSAI1_Config+0x98>
       ||
 800223e:	2a00      	cmp	r2, #0
 8002240:	d03a      	beq.n	80022b8 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002242:	68db      	ldr	r3, [r3, #12]
       ||
 8002244:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002246:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800224a:	3301      	adds	r3, #1
       ||
 800224c:	4293      	cmp	r3, r2
 800224e:	d133      	bne.n	80022b8 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002256:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002258:	f7fe fc96 	bl	8000b88 <HAL_GetTick>
 800225c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	011a      	lsls	r2, r3, #4
 8002262:	d432      	bmi.n	80022ca <RCCEx_PLLSAI1_Config+0xaa>
 8002264:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002266:	2e00      	cmp	r6, #0
 8002268:	d036      	beq.n	80022d8 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800226a:	2e01      	cmp	r6, #1
 800226c:	d150      	bne.n	8002310 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800226e:	6922      	ldr	r2, [r4, #16]
 8002270:	6928      	ldr	r0, [r5, #16]
 8002272:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002276:	0840      	lsrs	r0, r0, #1
 8002278:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800227c:	3801      	subs	r0, #1
 800227e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002282:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002286:	6122      	str	r2, [r4, #16]
 8002288:	e032      	b.n	80022f0 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 800228a:	2802      	cmp	r0, #2
 800228c:	d010      	beq.n	80022b0 <RCCEx_PLLSAI1_Config+0x90>
 800228e:	2803      	cmp	r0, #3
 8002290:	d014      	beq.n	80022bc <RCCEx_PLLSAI1_Config+0x9c>
 8002292:	2801      	cmp	r0, #1
 8002294:	d110      	bne.n	80022b8 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	079f      	lsls	r7, r3, #30
 800229a:	d538      	bpl.n	800230e <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800229c:	68e3      	ldr	r3, [r4, #12]
 800229e:	686a      	ldr	r2, [r5, #4]
 80022a0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80022a4:	3a01      	subs	r2, #1
 80022a6:	4318      	orrs	r0, r3
 80022a8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80022ac:	60e0      	str	r0, [r4, #12]
 80022ae:	e7cf      	b.n	8002250 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022b6:	d1f1      	bne.n	800229c <RCCEx_PLLSAI1_Config+0x7c>
 80022b8:	2001      	movs	r0, #1
 80022ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	0391      	lsls	r1, r2, #14
 80022c0:	d4ec      	bmi.n	800229c <RCCEx_PLLSAI1_Config+0x7c>
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80022c8:	e7f5      	b.n	80022b6 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022ca:	f7fe fc5d 	bl	8000b88 <HAL_GetTick>
 80022ce:	1bc0      	subs	r0, r0, r7
 80022d0:	2802      	cmp	r0, #2
 80022d2:	d9c4      	bls.n	800225e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80022d4:	2003      	movs	r0, #3
 80022d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022d8:	6921      	ldr	r1, [r4, #16]
 80022da:	68eb      	ldr	r3, [r5, #12]
 80022dc:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80022e0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80022e4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80022ee:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022f6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe fc46 	bl	8000b88 <HAL_GetTick>
 80022fc:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	d513      	bpl.n	800232c <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002304:	6923      	ldr	r3, [r4, #16]
 8002306:	69aa      	ldr	r2, [r5, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	6123      	str	r3, [r4, #16]
 800230c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002310:	6923      	ldr	r3, [r4, #16]
 8002312:	6968      	ldr	r0, [r5, #20]
 8002314:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002318:	0840      	lsrs	r0, r0, #1
 800231a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800231e:	3801      	subs	r0, #1
 8002320:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002324:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002328:	6123      	str	r3, [r4, #16]
 800232a:	e7e1      	b.n	80022f0 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800232c:	f7fe fc2c 	bl	8000b88 <HAL_GetTick>
 8002330:	1b80      	subs	r0, r0, r6
 8002332:	2802      	cmp	r0, #2
 8002334:	d9e3      	bls.n	80022fe <RCCEx_PLLSAI1_Config+0xde>
 8002336:	e7cd      	b.n	80022d4 <RCCEx_PLLSAI1_Config+0xb4>
 8002338:	40021000 	.word	0x40021000

0800233c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800233e:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <RCCEx_PLLSAI2_Config+0xf8>)
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	f012 0f03 	tst.w	r2, #3
{
 8002346:	4605      	mov	r5, r0
 8002348:	460e      	mov	r6, r1
 800234a:	461c      	mov	r4, r3
 800234c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800234e:	d028      	beq.n	80023a2 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	f002 0203 	and.w	r2, r2, #3
 8002356:	4282      	cmp	r2, r0
 8002358:	d13a      	bne.n	80023d0 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800235a:	2a00      	cmp	r2, #0
 800235c:	d038      	beq.n	80023d0 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800235e:	68db      	ldr	r3, [r3, #12]
       ||
 8002360:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002362:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002366:	3301      	adds	r3, #1
       ||
 8002368:	4293      	cmp	r3, r2
 800236a:	d131      	bne.n	80023d0 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002372:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002374:	f7fe fc08 	bl	8000b88 <HAL_GetTick>
 8002378:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	009a      	lsls	r2, r3, #2
 800237e:	d430      	bmi.n	80023e2 <RCCEx_PLLSAI2_Config+0xa6>
 8002380:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002382:	2e00      	cmp	r6, #0
 8002384:	d034      	beq.n	80023f0 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002386:	6963      	ldr	r3, [r4, #20]
 8002388:	6929      	ldr	r1, [r5, #16]
 800238a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800238e:	0849      	lsrs	r1, r1, #1
 8002390:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002394:	3901      	subs	r1, #1
 8002396:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800239a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800239e:	6163      	str	r3, [r4, #20]
 80023a0:	e032      	b.n	8002408 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80023a2:	2802      	cmp	r0, #2
 80023a4:	d010      	beq.n	80023c8 <RCCEx_PLLSAI2_Config+0x8c>
 80023a6:	2803      	cmp	r0, #3
 80023a8:	d014      	beq.n	80023d4 <RCCEx_PLLSAI2_Config+0x98>
 80023aa:	2801      	cmp	r0, #1
 80023ac:	d110      	bne.n	80023d0 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	079f      	lsls	r7, r3, #30
 80023b2:	d538      	bpl.n	8002426 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023b4:	68e3      	ldr	r3, [r4, #12]
 80023b6:	686a      	ldr	r2, [r5, #4]
 80023b8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80023bc:	3a01      	subs	r2, #1
 80023be:	4318      	orrs	r0, r3
 80023c0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80023c4:	60e0      	str	r0, [r4, #12]
 80023c6:	e7d1      	b.n	800236c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023ce:	d1f1      	bne.n	80023b4 <RCCEx_PLLSAI2_Config+0x78>
 80023d0:	2001      	movs	r0, #1
 80023d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	0391      	lsls	r1, r2, #14
 80023d8:	d4ec      	bmi.n	80023b4 <RCCEx_PLLSAI2_Config+0x78>
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80023e0:	e7f5      	b.n	80023ce <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80023e2:	f7fe fbd1 	bl	8000b88 <HAL_GetTick>
 80023e6:	1bc0      	subs	r0, r0, r7
 80023e8:	2802      	cmp	r0, #2
 80023ea:	d9c6      	bls.n	800237a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80023ec:	2003      	movs	r0, #3
 80023ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023f0:	6962      	ldr	r2, [r4, #20]
 80023f2:	68eb      	ldr	r3, [r5, #12]
 80023f4:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80023f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002406:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe fbba 	bl	8000b88 <HAL_GetTick>
 8002414:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	d505      	bpl.n	8002428 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800241c:	6963      	ldr	r3, [r4, #20]
 800241e:	696a      	ldr	r2, [r5, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	6163      	str	r3, [r4, #20]
 8002424:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002428:	f7fe fbae 	bl	8000b88 <HAL_GetTick>
 800242c:	1b80      	subs	r0, r0, r6
 800242e:	2802      	cmp	r0, #2
 8002430:	d9f1      	bls.n	8002416 <RCCEx_PLLSAI2_Config+0xda>
 8002432:	e7db      	b.n	80023ec <RCCEx_PLLSAI2_Config+0xb0>
 8002434:	40021000 	.word	0x40021000

08002438 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002438:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800243c:	6806      	ldr	r6, [r0, #0]
 800243e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002442:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002444:	d024      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002446:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002448:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800244c:	d02c      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800244e:	d802      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002450:	b1c1      	cbz	r1, 8002484 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8002452:	2601      	movs	r6, #1
 8002454:	e01c      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002456:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800245a:	d00d      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800245c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002460:	d1f7      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002462:	4a53      	ldr	r2, [pc, #332]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002464:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002466:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800246a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800246e:	430b      	orrs	r3, r1
 8002470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002474:	2600      	movs	r6, #0
 8002476:	e00b      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002478:	4a4d      	ldr	r2, [pc, #308]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800247a:	68d3      	ldr	r3, [r2, #12]
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	60d3      	str	r3, [r2, #12]
      break;
 8002482:	e7ee      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002484:	3004      	adds	r0, #4
 8002486:	f7ff fecb 	bl	8002220 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800248a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800248c:	2800      	cmp	r0, #0
 800248e:	d0e8      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	04d8      	lsls	r0, r3, #19
 8002494:	d506      	bpl.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002496:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002498:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800249c:	d07c      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800249e:	d808      	bhi.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024a0:	b1a9      	cbz	r1, 80024ce <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80024a2:	2601      	movs	r6, #1
 80024a4:	4635      	mov	r5, r6
 80024a6:	e021      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024a8:	2100      	movs	r1, #0
 80024aa:	3020      	adds	r0, #32
 80024ac:	f7ff ff46 	bl	800233c <RCCEx_PLLSAI2_Config>
 80024b0:	e7eb      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80024b2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80024b6:	d004      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80024b8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80024bc:	d1f1      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80024be:	4635      	mov	r5, r6
 80024c0:	e009      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024c2:	4a3b      	ldr	r2, [pc, #236]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024c4:	68d3      	ldr	r3, [r2, #12]
 80024c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ca:	60d3      	str	r3, [r2, #12]
 80024cc:	e7f7      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ce:	1d20      	adds	r0, r4, #4
 80024d0:	f7ff fea6 	bl	8002220 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024d4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80024d6:	2d00      	cmp	r5, #0
 80024d8:	d164      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024da:	4a35      	ldr	r2, [pc, #212]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024dc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80024de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80024e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80024e6:	430b      	orrs	r3, r1
 80024e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	0399      	lsls	r1, r3, #14
 80024f0:	f140 815b 	bpl.w	80027aa <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f4:	4f2e      	ldr	r7, [pc, #184]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f8:	00da      	lsls	r2, r3, #3
 80024fa:	d455      	bmi.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002502:	65bb      	str	r3, [r7, #88]	; 0x58
 8002504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800250e:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002512:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80025b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002516:	f8d9 3000 	ldr.w	r3, [r9]
 800251a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002522:	f7fe fb31 	bl	8000b88 <HAL_GetTick>
 8002526:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8002528:	f8d9 3000 	ldr.w	r3, [r9]
 800252c:	05db      	lsls	r3, r3, #23
 800252e:	d543      	bpl.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 8002530:	2d00      	cmp	r5, #0
 8002532:	d148      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002534:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002538:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800253c:	d015      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x132>
 800253e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002542:	4293      	cmp	r3, r2
 8002544:	d011      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002546:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800254a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800254e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002552:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002556:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800255a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800255e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002562:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800256a:	07d8      	lsls	r0, r3, #31
 800256c:	d509      	bpl.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 800256e:	f7fe fb0b 	bl	8000b88 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002576:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002578:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800257c:	0799      	lsls	r1, r3, #30
 800257e:	f140 810d 	bpl.w	800279c <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002582:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002586:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800258a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002594:	4635      	mov	r5, r6
 8002596:	e016      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002598:	2100      	movs	r1, #0
 800259a:	f104 0020 	add.w	r0, r4, #32
 800259e:	f7ff fecd 	bl	800233c <RCCEx_PLLSAI2_Config>
 80025a2:	e797      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80025a4:	462e      	mov	r6, r5
 80025a6:	e7a1      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 80025a8:	f04f 0800 	mov.w	r8, #0
 80025ac:	e7b1      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b8:	f7fe fae6 	bl	8000b88 <HAL_GetTick>
 80025bc:	eba0 000a 	sub.w	r0, r0, sl
 80025c0:	2802      	cmp	r0, #2
 80025c2:	d9b1      	bls.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80025c4:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80025c6:	f1b8 0f00 	cmp.w	r8, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d2:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	07da      	lsls	r2, r3, #31
 80025d8:	d508      	bpl.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025da:	498a      	ldr	r1, [pc, #552]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80025de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025e2:	f022 0203 	bic.w	r2, r2, #3
 80025e6:	4302      	orrs	r2, r0
 80025e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ec:	079f      	lsls	r7, r3, #30
 80025ee:	d508      	bpl.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f0:	4984      	ldr	r1, [pc, #528]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80025f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025f8:	f022 020c 	bic.w	r2, r2, #12
 80025fc:	4302      	orrs	r2, r0
 80025fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002602:	075e      	lsls	r6, r3, #29
 8002604:	d508      	bpl.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002606:	497f      	ldr	r1, [pc, #508]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002608:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800260a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800260e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002612:	4302      	orrs	r2, r0
 8002614:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002618:	0718      	lsls	r0, r3, #28
 800261a:	d508      	bpl.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800261c:	4979      	ldr	r1, [pc, #484]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800261e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002620:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002624:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002628:	4302      	orrs	r2, r0
 800262a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800262e:	06d9      	lsls	r1, r3, #27
 8002630:	d508      	bpl.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002632:	4974      	ldr	r1, [pc, #464]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002634:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002636:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800263a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800263e:	4302      	orrs	r2, r0
 8002640:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002644:	069a      	lsls	r2, r3, #26
 8002646:	d508      	bpl.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002648:	496e      	ldr	r1, [pc, #440]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800264a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800264c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002650:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002654:	4302      	orrs	r2, r0
 8002656:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800265a:	059f      	lsls	r7, r3, #22
 800265c:	d508      	bpl.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800265e:	4969      	ldr	r1, [pc, #420]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002660:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002662:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002666:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800266a:	4302      	orrs	r2, r0
 800266c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002670:	055e      	lsls	r6, r3, #21
 8002672:	d508      	bpl.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002674:	4963      	ldr	r1, [pc, #396]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002676:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002678:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800267c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002680:	4302      	orrs	r2, r0
 8002682:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002686:	0658      	lsls	r0, r3, #25
 8002688:	d508      	bpl.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800268a:	495e      	ldr	r1, [pc, #376]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800268c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800268e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002692:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002696:	4302      	orrs	r2, r0
 8002698:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800269c:	0619      	lsls	r1, r3, #24
 800269e:	d508      	bpl.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a0:	4958      	ldr	r1, [pc, #352]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026a8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80026ac:	4302      	orrs	r2, r0
 80026ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026b2:	05da      	lsls	r2, r3, #23
 80026b4:	d508      	bpl.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026b6:	4953      	ldr	r1, [pc, #332]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80026be:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80026c2:	4302      	orrs	r2, r0
 80026c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026c8:	049b      	lsls	r3, r3, #18
 80026ca:	d50f      	bpl.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026cc:	4a4d      	ldr	r2, [pc, #308]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026ce:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80026d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026d4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80026d8:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026da:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026e2:	d164      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e4:	68d3      	ldr	r3, [r2, #12]
 80026e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ea:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	031f      	lsls	r7, r3, #12
 80026f0:	d50f      	bpl.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026f2:	4a44      	ldr	r2, [pc, #272]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026f4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80026f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026fa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80026fe:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002700:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002708:	d15c      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270a:	68d3      	ldr	r3, [r2, #12]
 800270c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002710:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	035e      	lsls	r6, r3, #13
 8002716:	d50f      	bpl.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002718:	4a3a      	ldr	r2, [pc, #232]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800271a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800271c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002720:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002724:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002726:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800272a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800272e:	d154      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002730:	68d3      	ldr	r3, [r2, #12]
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	0458      	lsls	r0, r3, #17
 800273c:	d512      	bpl.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800273e:	4931      	ldr	r1, [pc, #196]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002740:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002742:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002746:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800274a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800274c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002754:	d14c      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002756:	2102      	movs	r1, #2
 8002758:	1d20      	adds	r0, r4, #4
 800275a:	f7ff fd61 	bl	8002220 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800275e:	2800      	cmp	r0, #0
 8002760:	bf18      	it	ne
 8002762:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002764:	6822      	ldr	r2, [r4, #0]
 8002766:	0411      	lsls	r1, r2, #16
 8002768:	d508      	bpl.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800276a:	4926      	ldr	r1, [pc, #152]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800276c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800276e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002776:	4303      	orrs	r3, r0
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800277c:	03d3      	lsls	r3, r2, #15
 800277e:	d509      	bpl.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002780:	4a20      	ldr	r2, [pc, #128]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002782:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002786:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800278a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800278e:	430b      	orrs	r3, r1
 8002790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002794:	4628      	mov	r0, r5
 8002796:	b002      	add	sp, #8
 8002798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7fe f9f4 	bl	8000b88 <HAL_GetTick>
 80027a0:	1b40      	subs	r0, r0, r5
 80027a2:	4548      	cmp	r0, r9
 80027a4:	f67f aee8 	bls.w	8002578 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80027a8:	e70c      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80027aa:	4635      	mov	r5, r6
 80027ac:	e712      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027ae:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80027b2:	d19b      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b4:	2101      	movs	r1, #1
 80027b6:	1d20      	adds	r0, r4, #4
 80027b8:	f7ff fd32 	bl	8002220 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80027bc:	2800      	cmp	r0, #0
 80027be:	bf18      	it	ne
 80027c0:	4605      	movne	r5, r0
 80027c2:	e793      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027c4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80027c8:	d1a3      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ca:	2101      	movs	r1, #1
 80027cc:	1d20      	adds	r0, r4, #4
 80027ce:	f7ff fd27 	bl	8002220 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80027d2:	2800      	cmp	r0, #0
 80027d4:	bf18      	it	ne
 80027d6:	4605      	movne	r5, r0
 80027d8:	e79b      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027da:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80027de:	d1ab      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x300>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e0:	2101      	movs	r1, #1
 80027e2:	1d20      	adds	r0, r4, #4
 80027e4:	f7ff fd1c 	bl	8002220 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80027e8:	2800      	cmp	r0, #0
 80027ea:	bf18      	it	ne
 80027ec:	4605      	movne	r5, r0
 80027ee:	e7a3      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027f0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80027f4:	d1b6      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027f6:	2102      	movs	r1, #2
 80027f8:	f104 0020 	add.w	r0, r4, #32
 80027fc:	f7ff fd9e 	bl	800233c <RCCEx_PLLSAI2_Config>
 8002800:	e7ad      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002808:	4a02      	ldr	r2, [pc, #8]	; (8002814 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800280a:	6813      	ldr	r3, [r2, #0]
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4770      	bx	lr
 8002814:	40021000 	.word	0x40021000

08002818 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002818:	6803      	ldr	r3, [r0, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002820:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002822:	6842      	ldr	r2, [r0, #4]
 8002824:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002828:	d10a      	bne.n	8002840 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 800282a:	6882      	ldr	r2, [r0, #8]
 800282c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002830:	d002      	beq.n	8002838 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002832:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002836:	d103      	bne.n	8002840 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002840:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002842:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002846:	d107      	bne.n	8002858 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002856:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002858:	2301      	movs	r3, #1
 800285a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800285e:	2300      	movs	r3, #0
 8002860:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8002864:	2003      	movs	r0, #3
 8002866:	4770      	bx	lr

08002868 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	4605      	mov	r5, r0
 800286c:	460c      	mov	r4, r1
 800286e:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002870:	682b      	ldr	r3, [r5, #0]
 8002872:	6898      	ldr	r0, [r3, #8]
 8002874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002878:	d00d      	beq.n	8002896 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 800287a:	1c62      	adds	r2, r4, #1
 800287c:	d0f9      	beq.n	8002872 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800287e:	b924      	cbnz	r4, 800288a <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8002880:	4628      	mov	r0, r5
}
 8002882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002886:	f7ff bfc7 	b.w	8002818 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800288a:	f7fe f97d 	bl	8000b88 <HAL_GetTick>
 800288e:	1b80      	subs	r0, r0, r6
 8002890:	4284      	cmp	r4, r0
 8002892:	d8ed      	bhi.n	8002870 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8002894:	e7f4      	b.n	8002880 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 8002896:	bd70      	pop	{r4, r5, r6, pc}

08002898 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800289a:	4606      	mov	r6, r0
 800289c:	460c      	mov	r4, r1
 800289e:	4615      	mov	r5, r2
 80028a0:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80028a2:	6831      	ldr	r1, [r6, #0]
 80028a4:	6888      	ldr	r0, [r1, #8]
 80028a6:	4020      	ands	r0, r4
 80028a8:	d00e      	beq.n	80028c8 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028aa:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80028ae:	bf01      	itttt	eq
 80028b0:	7b0a      	ldrbeq	r2, [r1, #12]
 80028b2:	b2d2      	uxtbeq	r2, r2
 80028b4:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 80028b8:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 80028bc:	1c6b      	adds	r3, r5, #1
 80028be:	d0f1      	beq.n	80028a4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80028c0:	b925      	cbnz	r5, 80028cc <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 80028c2:	4630      	mov	r0, r6
 80028c4:	f7ff ffa8 	bl	8002818 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 80028c8:	b003      	add	sp, #12
 80028ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80028cc:	f7fe f95c 	bl	8000b88 <HAL_GetTick>
 80028d0:	1bc0      	subs	r0, r0, r7
 80028d2:	4285      	cmp	r5, r0
 80028d4:	d8e5      	bhi.n	80028a2 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 80028d6:	e7f4      	b.n	80028c2 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

080028d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028da:	4613      	mov	r3, r2
{
 80028dc:	460d      	mov	r5, r1
 80028de:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028e0:	460a      	mov	r2, r1
 80028e2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 80028e6:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028e8:	f7ff ffd6 	bl	8002898 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80028ec:	b128      	cbz	r0, 80028fa <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80028f0:	f043 0320 	orr.w	r3, r3, #32
 80028f4:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80028f6:	2003      	movs	r0, #3
 80028f8:	e00f      	b.n	800291a <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028fa:	4632      	mov	r2, r6
 80028fc:	4629      	mov	r1, r5
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff ffb2 	bl	8002868 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8002904:	2800      	cmp	r0, #0
 8002906:	d1f2      	bne.n	80028ee <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002908:	4633      	mov	r3, r6
 800290a:	462a      	mov	r2, r5
 800290c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002910:	4620      	mov	r0, r4
 8002912:	f7ff ffc1 	bl	8002898 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002916:	2800      	cmp	r0, #0
 8002918:	d1e9      	bne.n	80028ee <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800291a:	bd70      	pop	{r4, r5, r6, pc}

0800291c <SPI_EndRxTransaction>:
{
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800291e:	6843      	ldr	r3, [r0, #4]
 8002920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002924:	4604      	mov	r4, r0
 8002926:	460e      	mov	r6, r1
 8002928:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800292a:	d10b      	bne.n	8002944 <SPI_EndRxTransaction+0x28>
 800292c:	6883      	ldr	r3, [r0, #8]
 800292e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002932:	d002      	beq.n	800293a <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002938:	d104      	bne.n	8002944 <SPI_EndRxTransaction+0x28>
    __HAL_SPI_DISABLE(hspi);
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002942:	601a      	str	r2, [r3, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002944:	463a      	mov	r2, r7
 8002946:	4631      	mov	r1, r6
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff ff8d 	bl	8002868 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 800294e:	4605      	mov	r5, r0
 8002950:	b128      	cbz	r0, 800295e <SPI_EndRxTransaction+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002952:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002954:	f043 0320 	orr.w	r3, r3, #32
 8002958:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800295a:	2503      	movs	r5, #3
 800295c:	e013      	b.n	8002986 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800295e:	6863      	ldr	r3, [r4, #4]
 8002960:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002964:	d10f      	bne.n	8002986 <SPI_EndRxTransaction+0x6a>
 8002966:	68a3      	ldr	r3, [r4, #8]
 8002968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800296c:	d002      	beq.n	8002974 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002972:	d108      	bne.n	8002986 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002974:	463b      	mov	r3, r7
 8002976:	4632      	mov	r2, r6
 8002978:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800297c:	4620      	mov	r0, r4
 800297e:	f7ff ff8b 	bl	8002898 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002982:	2800      	cmp	r0, #0
 8002984:	d1e5      	bne.n	8002952 <SPI_EndRxTransaction+0x36>
}
 8002986:	4628      	mov	r0, r5
 8002988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800298a <HAL_SPI_Init>:
{
 800298a:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800298c:	4604      	mov	r4, r0
 800298e:	2800      	cmp	r0, #0
 8002990:	d04a      	beq.n	8002a28 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002996:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800299a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800299e:	b91b      	cbnz	r3, 80029a8 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80029a0:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80029a4:	f001 fe74 	bl	8004690 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80029a8:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80029aa:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80029ac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80029b0:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b2:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80029b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80029bc:	600b      	str	r3, [r1, #0]
 80029be:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029c2:	d92e      	bls.n	8002a22 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029c4:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029c6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ca:	bf18      	it	ne
 80029cc:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80029ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029d0:	b92b      	cbnz	r3, 80029de <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029d2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80029d6:	bf8c      	ite	hi
 80029d8:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80029da:	2301      	movls	r3, #1
 80029dc:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80029de:	68a6      	ldr	r6, [r4, #8]
 80029e0:	6863      	ldr	r3, [r4, #4]
 80029e2:	69a5      	ldr	r5, [r4, #24]
 80029e4:	4333      	orrs	r3, r6
 80029e6:	6926      	ldr	r6, [r4, #16]
 80029e8:	4333      	orrs	r3, r6
 80029ea:	6966      	ldr	r6, [r4, #20]
 80029ec:	4333      	orrs	r3, r6
 80029ee:	69e6      	ldr	r6, [r4, #28]
 80029f0:	4333      	orrs	r3, r6
 80029f2:	6a26      	ldr	r6, [r4, #32]
 80029f4:	4333      	orrs	r3, r6
 80029f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80029f8:	4333      	orrs	r3, r6
 80029fa:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80029fe:	4333      	orrs	r3, r6
 8002a00:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a04:	431a      	orrs	r2, r3
 8002a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a08:	0c2d      	lsrs	r5, r5, #16
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	f005 0504 	and.w	r5, r5, #4
 8002a10:	432a      	orrs	r2, r5
 8002a12:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8002a14:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a16:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002a18:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a1a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a1c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a26:	e7d0      	b.n	80029ca <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002a28:	2001      	movs	r0, #1
}
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}

08002a2c <HAL_SPI_DeInit>:
{
 8002a2c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002a2e:	4604      	mov	r4, r0
 8002a30:	b180      	cbz	r0, 8002a54 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8002a32:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002a3a:	6813      	ldr	r3, [r2, #0]
 8002a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a40:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002a42:	f001 fe4b 	bl	80046dc <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a46:	2000      	movs	r0, #0
 8002a48:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 8002a4a:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 8002a4e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  return HAL_OK;
 8002a52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a54:	2001      	movs	r0, #1
}
 8002a56:	bd10      	pop	{r4, pc}

08002a58 <HAL_SPI_Transmit>:
{
 8002a58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002a5c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002a5e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002a62:	2b01      	cmp	r3, #1
{
 8002a64:	4604      	mov	r4, r0
 8002a66:	460d      	mov	r5, r1
 8002a68:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002a6a:	f000 80b1 	beq.w	8002bd0 <HAL_SPI_Transmit+0x178>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002a74:	f7fe f888 	bl	8000b88 <HAL_GetTick>
 8002a78:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a7a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8002a7e:	b2c0      	uxtb	r0, r0
 8002a80:	2801      	cmp	r0, #1
 8002a82:	f040 80a3 	bne.w	8002bcc <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8002a86:	2d00      	cmp	r5, #0
 8002a88:	d057      	beq.n	8002b3a <HAL_SPI_Transmit+0xe2>
 8002a8a:	f1b8 0f00 	cmp.w	r8, #0
 8002a8e:	d054      	beq.n	8002b3a <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a90:	2303      	movs	r3, #3
 8002a92:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a9a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8002a9c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8002aa0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002aa4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002aa8:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002aaa:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aac:	68a3      	ldr	r3, [r4, #8]
 8002aae:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ab0:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002ab6:	bf08      	it	eq
 8002ab8:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8002aba:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8002abe:	bf04      	itt	eq
 8002ac0:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002ac4:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ac6:	6803      	ldr	r3, [r0, #0]
 8002ac8:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002aca:	bf5e      	ittt	pl
 8002acc:	6803      	ldrpl	r3, [r0, #0]
 8002ace:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002ad2:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ad4:	68e3      	ldr	r3, [r4, #12]
 8002ad6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ada:	6863      	ldr	r3, [r4, #4]
 8002adc:	d93e      	bls.n	8002b5c <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002ade:	b11b      	cbz	r3, 8002ae8 <HAL_SPI_Transmit+0x90>
 8002ae0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 8002ae8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002aec:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8002aee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002af6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	b9a3      	cbnz	r3, 8002b26 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002afc:	463a      	mov	r2, r7
 8002afe:	4631      	mov	r1, r6
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff fee9 	bl	80028d8 <SPI_EndRxTxTransaction>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d15d      	bne.n	8002bc6 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b0a:	68a3      	ldr	r3, [r4, #8]
 8002b0c:	b933      	cbnz	r3, 8002b1c <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	9201      	str	r2, [sp, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b1c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8002b1e:	3000      	adds	r0, #0
 8002b20:	bf18      	it	ne
 8002b22:	2001      	movne	r0, #1
 8002b24:	e009      	b.n	8002b3a <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	0790      	lsls	r0, r2, #30
 8002b2c:	d503      	bpl.n	8002b36 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 8002b2e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002b32:	60da      	str	r2, [r3, #12]
 8002b34:	e7db      	b.n	8002aee <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002b36:	b94e      	cbnz	r6, 8002b4c <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 8002b38:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002b40:	2300      	movs	r3, #0
 8002b42:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002b46:	b002      	add	sp, #8
 8002b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002b4c:	1c71      	adds	r1, r6, #1
 8002b4e:	d0d2      	beq.n	8002af6 <HAL_SPI_Transmit+0x9e>
 8002b50:	f7fe f81a 	bl	8000b88 <HAL_GetTick>
 8002b54:	1bc0      	subs	r0, r0, r7
 8002b56:	4286      	cmp	r6, r0
 8002b58:	d8cd      	bhi.n	8002af6 <HAL_SPI_Transmit+0x9e>
 8002b5a:	e7ed      	b.n	8002b38 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002b5c:	b11b      	cbz	r3, 8002b66 <HAL_SPI_Transmit+0x10e>
 8002b5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d10a      	bne.n	8002b7c <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 8002b66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d916      	bls.n	8002b9c <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 8002b6e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002b72:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 8002b74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b76:	3b02      	subs	r3, #2
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002b7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0bb      	beq.n	8002afc <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	0792      	lsls	r2, r2, #30
 8002b8a:	d512      	bpl.n	8002bb2 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 8002b8c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002b8e:	b292      	uxth	r2, r2
 8002b90:	2a01      	cmp	r2, #1
 8002b92:	d90b      	bls.n	8002bac <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 8002b94:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	e7eb      	b.n	8002b74 <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002b9c:	782b      	ldrb	r3, [r5, #0]
 8002b9e:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 8002ba0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002ba8:	3501      	adds	r5, #1
 8002baa:	e7e7      	b.n	8002b7c <HAL_SPI_Transmit+0x124>
 8002bac:	782a      	ldrb	r2, [r5, #0]
 8002bae:	731a      	strb	r2, [r3, #12]
 8002bb0:	e7f6      	b.n	8002ba0 <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002bb2:	2e00      	cmp	r6, #0
 8002bb4:	d0c0      	beq.n	8002b38 <HAL_SPI_Transmit+0xe0>
 8002bb6:	1c73      	adds	r3, r6, #1
 8002bb8:	d0e0      	beq.n	8002b7c <HAL_SPI_Transmit+0x124>
 8002bba:	f7fd ffe5 	bl	8000b88 <HAL_GetTick>
 8002bbe:	1bc0      	subs	r0, r0, r7
 8002bc0:	4286      	cmp	r6, r0
 8002bc2:	d8db      	bhi.n	8002b7c <HAL_SPI_Transmit+0x124>
 8002bc4:	e7b8      	b.n	8002b38 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	6623      	str	r3, [r4, #96]	; 0x60
 8002bca:	e79e      	b.n	8002b0a <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8002bcc:	2002      	movs	r0, #2
 8002bce:	e7b4      	b.n	8002b3a <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	e7b8      	b.n	8002b46 <HAL_SPI_Transmit+0xee>

08002bd4 <HAL_SPI_TransmitReceive>:
{
 8002bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bd8:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002bda:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8002bde:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002be2:	2b01      	cmp	r3, #1
{
 8002be4:	4604      	mov	r4, r0
 8002be6:	460d      	mov	r5, r1
 8002be8:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 8002bea:	f000 8112 	beq.w	8002e12 <HAL_SPI_TransmitReceive+0x23e>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002bf4:	f7fd ffc8 	bl	8000b88 <HAL_GetTick>
  tmp  = hspi->State;
 8002bf8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 8002bfc:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8002bfe:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002c00:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002c02:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002c04:	d00a      	beq.n	8002c1c <HAL_SPI_TransmitReceive+0x48>
 8002c06:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002c0a:	f040 8100 	bne.w	8002e0e <HAL_SPI_TransmitReceive+0x23a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002c0e:	68a2      	ldr	r2, [r4, #8]
 8002c10:	2a00      	cmp	r2, #0
 8002c12:	f040 80fc 	bne.w	8002e0e <HAL_SPI_TransmitReceive+0x23a>
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	f040 80f9 	bne.w	8002e0e <HAL_SPI_TransmitReceive+0x23a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c1c:	2d00      	cmp	r5, #0
 8002c1e:	d04b      	beq.n	8002cb8 <HAL_SPI_TransmitReceive+0xe4>
 8002c20:	2e00      	cmp	r6, #0
 8002c22:	d049      	beq.n	8002cb8 <HAL_SPI_TransmitReceive+0xe4>
 8002c24:	2f00      	cmp	r7, #0
 8002c26:	d047      	beq.n	8002cb8 <HAL_SPI_TransmitReceive+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c28:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002c2c:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c2e:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c30:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c32:	bf1c      	itt	ne
 8002c34:	2305      	movne	r3, #5
 8002c36:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c3a:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002c3c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c40:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8002c42:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8002c44:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002c48:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8002c4a:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c4e:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c50:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c52:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8002c54:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002c56:	d804      	bhi.n	8002c62 <HAL_SPI_TransmitReceive+0x8e>
 8002c58:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	2a01      	cmp	r2, #1
 8002c60:	d92c      	bls.n	8002cbc <HAL_SPI_TransmitReceive+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c68:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002c6e:	bf5e      	ittt	pl
 8002c70:	681a      	ldrpl	r2, [r3, #0]
 8002c72:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002c76:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c78:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002c7c:	d956      	bls.n	8002d2c <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002c7e:	b119      	cbz	r1, 8002c88 <HAL_SPI_TransmitReceive+0xb4>
 8002c80:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002c82:	b292      	uxth	r2, r2
 8002c84:	2a01      	cmp	r2, #1
 8002c86:	d106      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002c88:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002c8c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002c8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002c96:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	b993      	cbnz	r3, 8002cc4 <HAL_SPI_TransmitReceive+0xf0>
 8002c9e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	b973      	cbnz	r3, 8002cc4 <HAL_SPI_TransmitReceive+0xf0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ca6:	464a      	mov	r2, r9
 8002ca8:	4641      	mov	r1, r8
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7ff fe14 	bl	80028d8 <SPI_EndRxTxTransaction>
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	d033      	beq.n	8002d1c <HAL_SPI_TransmitReceive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002cb8:	2001      	movs	r0, #1
 8002cba:	e02f      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x148>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cc2:	e7d1      	b.n	8002c68 <HAL_SPI_TransmitReceive+0x94>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002cc4:	b177      	cbz	r7, 8002ce4 <HAL_SPI_TransmitReceive+0x110>
 8002cc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	b15b      	cbz	r3, 8002ce4 <HAL_SPI_TransmitReceive+0x110>
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	0792      	lsls	r2, r2, #30
 8002cd2:	d507      	bpl.n	8002ce4 <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002cd4:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002cd8:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002cda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002ce2:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002ce4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b16b      	cbz	r3, 8002d08 <HAL_SPI_TransmitReceive+0x134>
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	07d0      	lsls	r0, r2, #31
 8002cf2:	d509      	bpl.n	8002d08 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002cfa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002d06:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002d08:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002d0c:	d0c4      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0xc4>
 8002d0e:	f7fd ff3b 	bl	8000b88 <HAL_GetTick>
 8002d12:	eba0 0009 	sub.w	r0, r0, r9
 8002d16:	4580      	cmp	r8, r0
 8002d18:	d8be      	bhi.n	8002c98 <HAL_SPI_TransmitReceive+0xc4>
        errorcode = HAL_TIMEOUT;
 8002d1a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d22:	2300      	movs	r3, #0
 8002d24:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8002d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002d2c:	b119      	cbz	r1, 8002d36 <HAL_SPI_TransmitReceive+0x162>
 8002d2e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002d30:	b292      	uxth	r2, r2
 8002d32:	2a01      	cmp	r2, #1
 8002d34:	d10a      	bne.n	8002d4c <HAL_SPI_TransmitReceive+0x178>
      if (hspi->TxXferCount > 1U)
 8002d36:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002d38:	b292      	uxth	r2, r2
 8002d3a:	2a01      	cmp	r2, #1
 8002d3c:	d94d      	bls.n	8002dda <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002d3e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002d42:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8002d44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d46:	3b02      	subs	r3, #2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002d4c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	b923      	cbnz	r3, 8002d5e <HAL_SPI_TransmitReceive+0x18a>
 8002d54:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0a3      	beq.n	8002ca6 <HAL_SPI_TransmitReceive+0xd2>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002d5e:	b197      	cbz	r7, 8002d86 <HAL_SPI_TransmitReceive+0x1b2>
 8002d60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	b17b      	cbz	r3, 8002d86 <HAL_SPI_TransmitReceive+0x1b2>
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	0791      	lsls	r1, r2, #30
 8002d6c:	d50b      	bpl.n	8002d86 <HAL_SPI_TransmitReceive+0x1b2>
        if (hspi->TxXferCount > 1U)
 8002d6e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002d70:	b292      	uxth	r2, r2
 8002d72:	2a01      	cmp	r2, #1
 8002d74:	d939      	bls.n	8002dea <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002d76:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002d7a:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8002d7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d7e:	3b02      	subs	r3, #2
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002d84:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002d86:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b1db      	cbz	r3, 8002dc6 <HAL_SPI_TransmitReceive+0x1f2>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	07d2      	lsls	r2, r2, #31
 8002d94:	d517      	bpl.n	8002dc6 <HAL_SPI_TransmitReceive+0x1f2>
        if (hspi->RxXferCount > 1U)
 8002d96:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002d9a:	b292      	uxth	r2, r2
 8002d9c:	2a01      	cmp	r2, #1
 8002d9e:	d92c      	bls.n	8002dfa <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 8002da6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002daa:	3a02      	subs	r2, #2
 8002dac:	b292      	uxth	r2, r2
 8002dae:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002db2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002db6:	b292      	uxth	r2, r2
 8002db8:	2a01      	cmp	r2, #1
 8002dba:	d803      	bhi.n	8002dc4 <HAL_SPI_TransmitReceive+0x1f0>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dc2:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8002dc4:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002dc6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002dca:	d0c0      	beq.n	8002d4e <HAL_SPI_TransmitReceive+0x17a>
 8002dcc:	f7fd fedc 	bl	8000b88 <HAL_GetTick>
 8002dd0:	eba0 0009 	sub.w	r0, r0, r9
 8002dd4:	4580      	cmp	r8, r0
 8002dd6:	d8ba      	bhi.n	8002d4e <HAL_SPI_TransmitReceive+0x17a>
 8002dd8:	e79f      	b.n	8002d1a <HAL_SPI_TransmitReceive+0x146>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002dda:	782a      	ldrb	r2, [r5, #0]
 8002ddc:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002dde:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002de6:	3501      	adds	r5, #1
 8002de8:	e7b0      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x178>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002dea:	782a      	ldrb	r2, [r5, #0]
 8002dec:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8002dee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002df6:	3501      	adds	r5, #1
 8002df8:	e7c4      	b.n	8002d84 <HAL_SPI_TransmitReceive+0x1b0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002dfa:	7b1b      	ldrb	r3, [r3, #12]
 8002dfc:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 8002dfe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e0a:	3601      	adds	r6, #1
 8002e0c:	e7da      	b.n	8002dc4 <HAL_SPI_TransmitReceive+0x1f0>
    errorcode = HAL_BUSY;
 8002e0e:	2002      	movs	r0, #2
 8002e10:	e784      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x148>
  __HAL_LOCK(hspi);
 8002e12:	2002      	movs	r0, #2
}
 8002e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002e18 <HAL_SPI_Receive>:
{
 8002e18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e1c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e1e:	6843      	ldr	r3, [r0, #4]
 8002e20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002e24:	4604      	mov	r4, r0
 8002e26:	460e      	mov	r6, r1
 8002e28:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e2a:	d10c      	bne.n	8002e46 <HAL_SPI_Receive+0x2e>
 8002e2c:	6883      	ldr	r3, [r0, #8]
 8002e2e:	b953      	cbnz	r3, 8002e46 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e30:	2304      	movs	r3, #4
 8002e32:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e36:	4613      	mov	r3, r2
 8002e38:	9500      	str	r5, [sp, #0]
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	f7ff feca 	bl	8002bd4 <HAL_SPI_TransmitReceive>
}
 8002e40:	b002      	add	sp, #8
 8002e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002e46:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	f000 808b 	beq.w	8002f66 <HAL_SPI_Receive+0x14e>
 8002e50:	2301      	movs	r3, #1
 8002e52:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002e56:	f7fd fe97 	bl	8000b88 <HAL_GetTick>
 8002e5a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002e5c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8002e60:	b2c0      	uxtb	r0, r0
 8002e62:	2801      	cmp	r0, #1
 8002e64:	d17d      	bne.n	8002f62 <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8002e66:	2e00      	cmp	r6, #0
 8002e68:	d05f      	beq.n	8002f2a <HAL_SPI_Receive+0x112>
 8002e6a:	f1b8 0f00 	cmp.w	r8, #0
 8002e6e:	d05c      	beq.n	8002f2a <HAL_SPI_Receive+0x112>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e70:	2304      	movs	r3, #4
 8002e72:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8002e76:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e78:	68e2      	ldr	r2, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e7a:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8002e80:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002e84:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e86:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002e88:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8002e8a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e8c:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e8e:	684b      	ldr	r3, [r1, #4]
  hspi->RxXferSize  = Size;
 8002e90:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e94:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e98:	bf8c      	ite	hi
 8002e9a:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e9e:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8002ea2:	604b      	str	r3, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea4:	68a3      	ldr	r3, [r4, #8]
 8002ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 8002eaa:	bf02      	ittt	eq
 8002eac:	680b      	ldreq	r3, [r1, #0]
 8002eae:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 8002eb2:	600b      	streq	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eb4:	680b      	ldr	r3, [r1, #0]
 8002eb6:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002eb8:	bf5e      	ittt	pl
 8002eba:	680b      	ldrpl	r3, [r1, #0]
 8002ebc:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002ec0:	600b      	strpl	r3, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002ec2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8002ec6:	d91e      	bls.n	8002f06 <HAL_SPI_Receive+0xee>
    while (hspi->RxXferCount > 0U)
 8002ec8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	b1fb      	cbz	r3, 8002f10 <HAL_SPI_Receive+0xf8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	07d2      	lsls	r2, r2, #31
 8002ed6:	d537      	bpl.n	8002f48 <HAL_SPI_Receive+0x130>
        *((uint16_t *)pData) = hspi->Instance->DR;
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002ede:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8002eea:	e7ed      	b.n	8002ec8 <HAL_SPI_Receive+0xb0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	07d0      	lsls	r0, r2, #31
 8002ef2:	d518      	bpl.n	8002f26 <HAL_SPI_Receive+0x10e>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ef4:	7b1b      	ldrb	r3, [r3, #12]
 8002ef6:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 8002efa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8002f06:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ed      	bne.n	8002eec <HAL_SPI_Receive+0xd4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f10:	463a      	mov	r2, r7
 8002f12:	4629      	mov	r1, r5
 8002f14:	4620      	mov	r0, r4
 8002f16:	f7ff fd01 	bl	800291c <SPI_EndRxTransaction>
 8002f1a:	b9f8      	cbnz	r0, 8002f5c <HAL_SPI_Receive+0x144>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f1c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8002f1e:	3000      	adds	r0, #0
 8002f20:	bf18      	it	ne
 8002f22:	2001      	movne	r0, #1
 8002f24:	e001      	b.n	8002f2a <HAL_SPI_Receive+0x112>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002f26:	b93d      	cbnz	r5, 8002f38 <HAL_SPI_Receive+0x120>
          errorcode = HAL_TIMEOUT;
 8002f28:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f30:	2300      	movs	r3, #0
 8002f32:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8002f36:	e783      	b.n	8002e40 <HAL_SPI_Receive+0x28>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002f38:	1c69      	adds	r1, r5, #1
 8002f3a:	d0e4      	beq.n	8002f06 <HAL_SPI_Receive+0xee>
 8002f3c:	f7fd fe24 	bl	8000b88 <HAL_GetTick>
 8002f40:	1bc0      	subs	r0, r0, r7
 8002f42:	4285      	cmp	r5, r0
 8002f44:	d8df      	bhi.n	8002f06 <HAL_SPI_Receive+0xee>
 8002f46:	e7ef      	b.n	8002f28 <HAL_SPI_Receive+0x110>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002f48:	2d00      	cmp	r5, #0
 8002f4a:	d0ed      	beq.n	8002f28 <HAL_SPI_Receive+0x110>
 8002f4c:	1c6b      	adds	r3, r5, #1
 8002f4e:	d0bb      	beq.n	8002ec8 <HAL_SPI_Receive+0xb0>
 8002f50:	f7fd fe1a 	bl	8000b88 <HAL_GetTick>
 8002f54:	1bc0      	subs	r0, r0, r7
 8002f56:	4285      	cmp	r5, r0
 8002f58:	d8b6      	bhi.n	8002ec8 <HAL_SPI_Receive+0xb0>
 8002f5a:	e7e5      	b.n	8002f28 <HAL_SPI_Receive+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	6623      	str	r3, [r4, #96]	; 0x60
 8002f60:	e7dc      	b.n	8002f1c <HAL_SPI_Receive+0x104>
    errorcode = HAL_BUSY;
 8002f62:	2002      	movs	r0, #2
 8002f64:	e7e1      	b.n	8002f2a <HAL_SPI_Receive+0x112>
  __HAL_LOCK(hspi);
 8002f66:	2002      	movs	r0, #2
 8002f68:	e76a      	b.n	8002e40 <HAL_SPI_Receive+0x28>

08002f6a <HAL_SPIEx_FlushRxFifo>:
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8002f6a:	6802      	ldr	r2, [r0, #0]
{
 8002f6c:	b082      	sub	sp, #8
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8002f6e:	2304      	movs	r3, #4
 8002f70:	6890      	ldr	r0, [r2, #8]
 8002f72:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 8002f76:	d101      	bne.n	8002f7c <HAL_SPIEx_FlushRxFifo+0x12>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8002f78:	b002      	add	sp, #8
 8002f7a:	4770      	bx	lr
    tmpreg = hspi->Instance->DR;
 8002f7c:	68d1      	ldr	r1, [r2, #12]
 8002f7e:	9101      	str	r1, [sp, #4]
 8002f80:	3b01      	subs	r3, #1
    if (count == SPI_FIFO_SIZE)
 8002f82:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    UNUSED(tmpreg); /* To avoid GCC warning */
 8002f86:	9901      	ldr	r1, [sp, #4]
    if (count == SPI_FIFO_SIZE)
 8002f88:	d1f2      	bne.n	8002f70 <HAL_SPIEx_FlushRxFifo+0x6>
      return HAL_TIMEOUT;
 8002f8a:	2003      	movs	r0, #3
 8002f8c:	e7f4      	b.n	8002f78 <HAL_SPIEx_FlushRxFifo+0xe>
	...

08002f90 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8002f90:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f92:	69c1      	ldr	r1, [r0, #28]
{
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f98:	6883      	ldr	r3, [r0, #8]
 8002f9a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f9c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f9e:	4303      	orrs	r3, r0
 8002fa0:	6960      	ldr	r0, [r4, #20]
 8002fa2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa4:	48ba      	ldr	r0, [pc, #744]	; (8003290 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa8:	4028      	ands	r0, r5
 8002faa:	4303      	orrs	r3, r0
 8002fac:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fae:	6853      	ldr	r3, [r2, #4]
 8002fb0:	68e0      	ldr	r0, [r4, #12]
 8002fb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fb6:	4303      	orrs	r3, r0
 8002fb8:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fba:	4bb6      	ldr	r3, [pc, #728]	; (8003294 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fbc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fbe:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fc0:	bf1c      	itt	ne
 8002fc2:	6a23      	ldrne	r3, [r4, #32]
 8002fc4:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fc6:	6893      	ldr	r3, [r2, #8]
 8002fc8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002fcc:	4303      	orrs	r3, r0
 8002fce:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fd0:	4bb1      	ldr	r3, [pc, #708]	; (8003298 <UART_SetConfig+0x308>)
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d119      	bne.n	800300a <UART_SetConfig+0x7a>
 8002fd6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002fda:	4ab0      	ldr	r2, [pc, #704]	; (800329c <UART_SetConfig+0x30c>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fe4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002fe8:	5cd3      	ldrb	r3, [r2, r3]
 8002fea:	f040 8138 	bne.w	800325e <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	f200 808f 	bhi.w	8003112 <UART_SetConfig+0x182>
 8002ff4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ff8:	00ca011a 	.word	0x00ca011a
 8002ffc:	008d00f9 	.word	0x008d00f9
 8003000:	008d0114 	.word	0x008d0114
 8003004:	008d008d 	.word	0x008d008d
 8003008:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 800300a:	4ba5      	ldr	r3, [pc, #660]	; (80032a0 <UART_SetConfig+0x310>)
 800300c:	429a      	cmp	r2, r3
 800300e:	d107      	bne.n	8003020 <UART_SetConfig+0x90>
 8003010:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003014:	4aa3      	ldr	r2, [pc, #652]	; (80032a4 <UART_SetConfig+0x314>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	e7e1      	b.n	8002fe4 <UART_SetConfig+0x54>
 8003020:	4ba1      	ldr	r3, [pc, #644]	; (80032a8 <UART_SetConfig+0x318>)
 8003022:	429a      	cmp	r2, r3
 8003024:	d123      	bne.n	800306e <UART_SetConfig+0xde>
 8003026:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003032:	2b10      	cmp	r3, #16
 8003034:	f000 80f1 	beq.w	800321a <UART_SetConfig+0x28a>
 8003038:	d80b      	bhi.n	8003052 <UART_SetConfig+0xc2>
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80f3 	beq.w	8003226 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003040:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 8003044:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003048:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304c:	f000 80f8 	beq.w	8003240 <UART_SetConfig+0x2b0>
 8003050:	e0a8      	b.n	80031a4 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003052:	2b20      	cmp	r3, #32
 8003054:	f000 80c6 	beq.w	80031e4 <UART_SetConfig+0x254>
 8003058:	2b30      	cmp	r3, #48	; 0x30
 800305a:	d1f1      	bne.n	8003040 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800305c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003060:	f040 80b8 	bne.w	80031d4 <UART_SetConfig+0x244>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003064:	6860      	ldr	r0, [r4, #4]
 8003066:	0843      	lsrs	r3, r0, #1
 8003068:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800306c:	e0c3      	b.n	80031f6 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800306e:	4b8f      	ldr	r3, [pc, #572]	; (80032ac <UART_SetConfig+0x31c>)
 8003070:	429a      	cmp	r2, r3
 8003072:	d11e      	bne.n	80030b2 <UART_SetConfig+0x122>
 8003074:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	f000 80bb 	beq.w	80031fc <UART_SetConfig+0x26c>
 8003086:	d80a      	bhi.n	800309e <UART_SetConfig+0x10e>
 8003088:	b97b      	cbnz	r3, 80030aa <UART_SetConfig+0x11a>
  if(UART_INSTANCE_LOWPOWER(huart))
 800308a:	4b82      	ldr	r3, [pc, #520]	; (8003294 <UART_SetConfig+0x304>)
 800308c:	429a      	cmp	r2, r3
 800308e:	f040 80ca 	bne.w	8003226 <UART_SetConfig+0x296>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003092:	f7ff f8a5 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
      break;
 8003096:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003098:	bbb0      	cbnz	r0, 8003108 <UART_SetConfig+0x178>
 800309a:	4602      	mov	r2, r0
 800309c:	e03a      	b.n	8003114 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800309e:	2b80      	cmp	r3, #128	; 0x80
 80030a0:	f000 809d 	beq.w	80031de <UART_SetConfig+0x24e>
 80030a4:	2bc0      	cmp	r3, #192	; 0xc0
 80030a6:	f000 80b0 	beq.w	800320a <UART_SetConfig+0x27a>
  if(UART_INSTANCE_LOWPOWER(huart))
 80030aa:	4b7a      	ldr	r3, [pc, #488]	; (8003294 <UART_SetConfig+0x304>)
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d1c7      	bne.n	8003040 <UART_SetConfig+0xb0>
 80030b0:	e02f      	b.n	8003112 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b2:	4b7f      	ldr	r3, [pc, #508]	; (80032b0 <UART_SetConfig+0x320>)
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d111      	bne.n	80030dc <UART_SetConfig+0x14c>
 80030b8:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c8:	f000 8098 	beq.w	80031fc <UART_SetConfig+0x26c>
 80030cc:	d9dc      	bls.n	8003088 <UART_SetConfig+0xf8>
 80030ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d2:	f000 8084 	beq.w	80031de <UART_SetConfig+0x24e>
 80030d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030da:	e7e4      	b.n	80030a6 <UART_SetConfig+0x116>
 80030dc:	4b6d      	ldr	r3, [pc, #436]	; (8003294 <UART_SetConfig+0x304>)
 80030de:	429a      	cmp	r2, r3
 80030e0:	d1ae      	bne.n	8003040 <UART_SetConfig+0xb0>
 80030e2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f2:	f000 8083 	beq.w	80031fc <UART_SetConfig+0x26c>
 80030f6:	d9c7      	bls.n	8003088 <UART_SetConfig+0xf8>
 80030f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fc:	d06f      	beq.n	80031de <UART_SetConfig+0x24e>
 80030fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003102:	e7d0      	b.n	80030a6 <UART_SetConfig+0x116>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003104:	486b      	ldr	r0, [pc, #428]	; (80032b4 <UART_SetConfig+0x324>)
  if(UART_INSTANCE_LOWPOWER(huart))
 8003106:	2302      	movs	r3, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8003108:	6862      	ldr	r2, [r4, #4]
 800310a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800310e:	4281      	cmp	r1, r0
 8003110:	d905      	bls.n	800311e <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003112:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003114:	2300      	movs	r3, #0
 8003116:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003118:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 800311a:	4610      	mov	r0, r2
 800311c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800311e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003122:	d8f6      	bhi.n	8003112 <UART_SetConfig+0x182>
        switch (clocksource)
 8003124:	2b08      	cmp	r3, #8
 8003126:	d82e      	bhi.n	8003186 <UART_SetConfig+0x1f6>
 8003128:	e8df f003 	tbb	[pc, r3]
 800312c:	2d1c2d05 	.word	0x2d1c2d05
 8003130:	2d2d2d24 	.word	0x2d2d2d24
 8003134:	27          	.byte	0x27
 8003135:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003136:	f7ff f853 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800313a:	6862      	ldr	r2, [r4, #4]
 800313c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003140:	0856      	lsrs	r6, r2, #1
 8003142:	2700      	movs	r7, #0
 8003144:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003148:	2300      	movs	r3, #0
 800314a:	4630      	mov	r0, r6
 800314c:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800314e:	f7fd fa4f 	bl	80005f0 <__aeabi_uldivmod>
          break;
 8003152:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003154:	4b58      	ldr	r3, [pc, #352]	; (80032b8 <UART_SetConfig+0x328>)
 8003156:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800315a:	4299      	cmp	r1, r3
 800315c:	d8d9      	bhi.n	8003112 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	60d8      	str	r0, [r3, #12]
 8003162:	e7d7      	b.n	8003114 <UART_SetConfig+0x184>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003164:	4855      	ldr	r0, [pc, #340]	; (80032bc <UART_SetConfig+0x32c>)
 8003166:	0855      	lsrs	r5, r2, #1
 8003168:	2300      	movs	r3, #0
 800316a:	2100      	movs	r1, #0
 800316c:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800316e:	f141 0100 	adc.w	r1, r1, #0
 8003172:	e7ec      	b.n	800314e <UART_SetConfig+0x1be>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003174:	f7fe fcde 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8003178:	e7df      	b.n	800313a <UART_SetConfig+0x1aa>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800317a:	0850      	lsrs	r0, r2, #1
 800317c:	2100      	movs	r1, #0
 800317e:	2300      	movs	r3, #0
 8003180:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003184:	e7f3      	b.n	800316e <UART_SetConfig+0x1de>
          ret = HAL_ERROR;
 8003186:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003188:	2000      	movs	r0, #0
 800318a:	e7e3      	b.n	8003154 <UART_SetConfig+0x1c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800318c:	f7ff f838 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8003190:	e04e      	b.n	8003230 <UART_SetConfig+0x2a0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003192:	f7ff f825 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003196:	6862      	ldr	r2, [r4, #4]
 8003198:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800319c:	fbb3 f3f2 	udiv	r3, r3, r2
 80031a0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a2:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a4:	f1a3 0010 	sub.w	r0, r3, #16
 80031a8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80031ac:	4288      	cmp	r0, r1
 80031ae:	d8b0      	bhi.n	8003112 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 80031b0:	6821      	ldr	r1, [r4, #0]
 80031b2:	60cb      	str	r3, [r1, #12]
 80031b4:	e7ae      	b.n	8003114 <UART_SetConfig+0x184>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80031b6:	f7ff f823 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80031ba:	e7ec      	b.n	8003196 <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80031bc:	6860      	ldr	r0, [r4, #4]
 80031be:	0843      	lsrs	r3, r0, #1
 80031c0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80031c4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80031c8:	fbb3 f3f0 	udiv	r3, r3, r0
 80031cc:	e7e8      	b.n	80031a0 <UART_SetConfig+0x210>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031ce:	f7fe fcb1 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 80031d2:	e7e0      	b.n	8003196 <UART_SetConfig+0x206>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80031d4:	6860      	ldr	r0, [r4, #4]
 80031d6:	0843      	lsrs	r3, r0, #1
 80031d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031dc:	e7f4      	b.n	80031c8 <UART_SetConfig+0x238>
  if(UART_INSTANCE_LOWPOWER(huart))
 80031de:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <UART_SetConfig+0x304>)
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d08f      	beq.n	8003104 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80031e8:	d1e8      	bne.n	80031bc <UART_SetConfig+0x22c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80031ea:	6860      	ldr	r0, [r4, #4]
 80031ec:	0843      	lsrs	r3, r0, #1
 80031ee:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80031f2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80031f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80031fa:	e01f      	b.n	800323c <UART_SetConfig+0x2ac>
  if(UART_INSTANCE_LOWPOWER(huart))
 80031fc:	4b25      	ldr	r3, [pc, #148]	; (8003294 <UART_SetConfig+0x304>)
 80031fe:	429a      	cmp	r2, r3
 8003200:	d10b      	bne.n	800321a <UART_SetConfig+0x28a>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003202:	f7fe fc97 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
      break;
 8003206:	2304      	movs	r3, #4
 8003208:	e746      	b.n	8003098 <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 800320a:	4b22      	ldr	r3, [pc, #136]	; (8003294 <UART_SetConfig+0x304>)
 800320c:	429a      	cmp	r2, r3
 800320e:	f47f af25 	bne.w	800305c <UART_SetConfig+0xcc>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003212:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if(UART_INSTANCE_LOWPOWER(huart))
 8003216:	2308      	movs	r3, #8
 8003218:	e776      	b.n	8003108 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800321a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800321e:	d1d6      	bne.n	80031ce <UART_SetConfig+0x23e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003220:	f7fe fc88 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8003224:	e004      	b.n	8003230 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003226:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800322a:	d1b2      	bne.n	8003192 <UART_SetConfig+0x202>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800322c:	f7fe ffd8 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003230:	6861      	ldr	r1, [r4, #4]
 8003232:	084a      	lsrs	r2, r1, #1
 8003234:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003238:	fbb3 f3f1 	udiv	r3, r3, r1
 800323c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800323e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003240:	f1a3 0010 	sub.w	r0, r3, #16
 8003244:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003248:	4288      	cmp	r0, r1
 800324a:	f63f af62 	bhi.w	8003112 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 800324e:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003252:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003254:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003258:	430b      	orrs	r3, r1
 800325a:	60c3      	str	r3, [r0, #12]
 800325c:	e75a      	b.n	8003114 <UART_SetConfig+0x184>
    switch (clocksource)
 800325e:	2b08      	cmp	r3, #8
 8003260:	f63f af57 	bhi.w	8003112 <UART_SetConfig+0x182>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <UART_SetConfig+0x2dc>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	08003193 	.word	0x08003193
 8003270:	080031b7 	.word	0x080031b7
 8003274:	080031bd 	.word	0x080031bd
 8003278:	08003113 	.word	0x08003113
 800327c:	080031cf 	.word	0x080031cf
 8003280:	08003113 	.word	0x08003113
 8003284:	08003113 	.word	0x08003113
 8003288:	08003113 	.word	0x08003113
 800328c:	080031d5 	.word	0x080031d5
 8003290:	efff69f3 	.word	0xefff69f3
 8003294:	40008000 	.word	0x40008000
 8003298:	40013800 	.word	0x40013800
 800329c:	080055b4 	.word	0x080055b4
 80032a0:	40004400 	.word	0x40004400
 80032a4:	080055b8 	.word	0x080055b8
 80032a8:	40004800 	.word	0x40004800
 80032ac:	40004c00 	.word	0x40004c00
 80032b0:	40005000 	.word	0x40005000
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	000ffcff 	.word	0x000ffcff
 80032bc:	f4240000 	.word	0xf4240000

080032c0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80032c2:	07da      	lsls	r2, r3, #31
{
 80032c4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c6:	d506      	bpl.n	80032d6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032c8:	6801      	ldr	r1, [r0, #0]
 80032ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80032cc:	684a      	ldr	r2, [r1, #4]
 80032ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80032d2:	4322      	orrs	r2, r4
 80032d4:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032d6:	079c      	lsls	r4, r3, #30
 80032d8:	d506      	bpl.n	80032e8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032da:	6801      	ldr	r1, [r0, #0]
 80032dc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80032de:	684a      	ldr	r2, [r1, #4]
 80032e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032e4:	4322      	orrs	r2, r4
 80032e6:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032e8:	0759      	lsls	r1, r3, #29
 80032ea:	d506      	bpl.n	80032fa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032ec:	6801      	ldr	r1, [r0, #0]
 80032ee:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80032f0:	684a      	ldr	r2, [r1, #4]
 80032f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032f6:	4322      	orrs	r2, r4
 80032f8:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032fa:	071a      	lsls	r2, r3, #28
 80032fc:	d506      	bpl.n	800330c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032fe:	6801      	ldr	r1, [r0, #0]
 8003300:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003302:	684a      	ldr	r2, [r1, #4]
 8003304:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003308:	4322      	orrs	r2, r4
 800330a:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800330c:	06dc      	lsls	r4, r3, #27
 800330e:	d506      	bpl.n	800331e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003310:	6801      	ldr	r1, [r0, #0]
 8003312:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003314:	688a      	ldr	r2, [r1, #8]
 8003316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800331a:	4322      	orrs	r2, r4
 800331c:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800331e:	0699      	lsls	r1, r3, #26
 8003320:	d506      	bpl.n	8003330 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003322:	6801      	ldr	r1, [r0, #0]
 8003324:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003326:	688a      	ldr	r2, [r1, #8]
 8003328:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800332c:	4322      	orrs	r2, r4
 800332e:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003330:	065a      	lsls	r2, r3, #25
 8003332:	d50f      	bpl.n	8003354 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003334:	6801      	ldr	r1, [r0, #0]
 8003336:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003338:	684a      	ldr	r2, [r1, #4]
 800333a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800333e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003340:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003344:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003346:	d105      	bne.n	8003354 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003348:	684a      	ldr	r2, [r1, #4]
 800334a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800334c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003350:	4322      	orrs	r2, r4
 8003352:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003354:	061b      	lsls	r3, r3, #24
 8003356:	d506      	bpl.n	8003366 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003358:	6802      	ldr	r2, [r0, #0]
 800335a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800335c:	6853      	ldr	r3, [r2, #4]
 800335e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003362:	430b      	orrs	r3, r1
 8003364:	6053      	str	r3, [r2, #4]
 8003366:	bd10      	pop	{r4, pc}

08003368 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800336c:	9d06      	ldr	r5, [sp, #24]
 800336e:	4604      	mov	r4, r0
 8003370:	460f      	mov	r7, r1
 8003372:	4616      	mov	r6, r2
 8003374:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003376:	6821      	ldr	r1, [r4, #0]
 8003378:	69ca      	ldr	r2, [r1, #28]
 800337a:	ea37 0302 	bics.w	r3, r7, r2
 800337e:	bf0c      	ite	eq
 8003380:	2201      	moveq	r2, #1
 8003382:	2200      	movne	r2, #0
 8003384:	42b2      	cmp	r2, r6
 8003386:	d002      	beq.n	800338e <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003388:	2000      	movs	r0, #0
}
 800338a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800338e:	1c6b      	adds	r3, r5, #1
 8003390:	d0f2      	beq.n	8003378 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003392:	b99d      	cbnz	r5, 80033bc <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800339c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80033a6:	2320      	movs	r3, #32
 80033a8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80033ac:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80033b0:	2300      	movs	r3, #0
 80033b2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80033b6:	2003      	movs	r0, #3
 80033b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80033bc:	f7fd fbe4 	bl	8000b88 <HAL_GetTick>
 80033c0:	eba0 0008 	sub.w	r0, r0, r8
 80033c4:	4285      	cmp	r5, r0
 80033c6:	d2d6      	bcs.n	8003376 <UART_WaitOnFlagUntilTimeout+0xe>
 80033c8:	e7e4      	b.n	8003394 <UART_WaitOnFlagUntilTimeout+0x2c>

080033ca <UART_CheckIdleState>:
{
 80033ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033cc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ce:	2600      	movs	r6, #0
 80033d0:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80033d2:	f7fd fbd9 	bl	8000b88 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80033dc:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033de:	d417      	bmi.n	8003410 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	075b      	lsls	r3, r3, #29
 80033e6:	d50a      	bpl.n	80033fe <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	2200      	movs	r2, #0
 80033f0:	462b      	mov	r3, r5
 80033f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033f6:	4620      	mov	r0, r4
 80033f8:	f7ff ffb6 	bl	8003368 <UART_WaitOnFlagUntilTimeout>
 80033fc:	b9a0      	cbnz	r0, 8003428 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 80033fe:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003400:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8003402:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8003406:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 800340a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800340e:	e00c      	b.n	800342a <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	4632      	mov	r2, r6
 8003418:	4603      	mov	r3, r0
 800341a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800341e:	4620      	mov	r0, r4
 8003420:	f7ff ffa2 	bl	8003368 <UART_WaitOnFlagUntilTimeout>
 8003424:	2800      	cmp	r0, #0
 8003426:	d0db      	beq.n	80033e0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003428:	2003      	movs	r0, #3
}
 800342a:	b002      	add	sp, #8
 800342c:	bd70      	pop	{r4, r5, r6, pc}

0800342e <HAL_UART_Init>:
{
 800342e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003430:	4604      	mov	r4, r0
 8003432:	b360      	cbz	r0, 800348e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003434:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003438:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800343c:	b91b      	cbnz	r3, 8003446 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800343e:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003442:	f001 fa63 	bl	800490c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003446:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003448:	2324      	movs	r3, #36	; 0x24
 800344a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800344e:	6813      	ldr	r3, [r2, #0]
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003456:	4620      	mov	r0, r4
 8003458:	f7ff fd9a 	bl	8002f90 <UART_SetConfig>
 800345c:	2801      	cmp	r0, #1
 800345e:	d016      	beq.n	800348e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003462:	b113      	cbz	r3, 800346a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003464:	4620      	mov	r0, r4
 8003466:	f7ff ff2b 	bl	80032c0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003472:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800347a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003482:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003484:	601a      	str	r2, [r3, #0]
}
 8003486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800348a:	f7ff bf9e 	b.w	80033ca <UART_CheckIdleState>
}
 800348e:	2001      	movs	r0, #1
 8003490:	bd10      	pop	{r4, pc}

08003492 <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003492:	b084      	sub	sp, #16
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	ad05      	add	r5, sp, #20
 8003498:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800349c:	68c3      	ldr	r3, [r0, #12]
 800349e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 80034a2:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034a4:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 80034a6:	f000 f8f3 	bl	8003690 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80034aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ae:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80034b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034b4:	2000      	movs	r0, #0
 80034b6:	b004      	add	sp, #16
 80034b8:	4770      	bx	lr

080034ba <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80034ba:	6883      	ldr	r3, [r0, #8]
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80034c2:	2000      	movs	r0, #0
 80034c4:	4770      	bx	lr

080034c6 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 80034c6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80034c8:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 80034ca:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80034cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80034d0:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 80034d2:	d108      	bne.n	80034e6 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80034d4:	68c3      	ldr	r3, [r0, #12]
 80034d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034da:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 80034dc:	2032      	movs	r0, #50	; 0x32
 80034de:	f7fd fb59 	bl	8000b94 <HAL_Delay>
  
  return HAL_OK;
}
 80034e2:	2000      	movs	r0, #0
 80034e4:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 80034e6:	2900      	cmp	r1, #0
 80034e8:	d1f8      	bne.n	80034dc <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80034ea:	68c3      	ldr	r3, [r0, #12]
 80034ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034f0:	60c3      	str	r3, [r0, #12]
 80034f2:	e7f3      	b.n	80034dc <USB_SetCurrentMode+0x16>

080034f4 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034f4:	b084      	sub	sp, #16
 80034f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034fa:	4604      	mov	r4, r0
 80034fc:	a809      	add	r0, sp, #36	; 0x24
 80034fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003502:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003504:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8003506:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800350a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800350e:	4689      	mov	r9, r1
 8003510:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 8003512:	b95f      	cbnz	r7, 800352c <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8003514:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003516:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800351a:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003522:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352a:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 800352c:	2500      	movs	r5, #0
 800352e:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003532:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003536:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800353a:	2103      	movs	r1, #3
 800353c:	4620      	mov	r0, r4
 800353e:	f000 f893 	bl	8003668 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8003542:	2110      	movs	r1, #16
 8003544:	4620      	mov	r0, r4
 8003546:	f000 f86d 	bl	8003624 <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800354a:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 800354e:	4620      	mov	r0, r4
 8003550:	f000 f87a 	bl	8003648 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8003554:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 8003558:	6135      	str	r5, [r6, #16]
 800355a:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 800355c:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800355e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8003562:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8003564:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 8003566:	61f5      	str	r5, [r6, #28]
 8003568:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 800356c:	454d      	cmp	r5, r9
 800356e:	d13c      	bne.n	80035ea <USB_DevInit+0xf6>
 8003570:	2200      	movs	r2, #0
 8003572:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8003576:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 800357c:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 8003580:	4295      	cmp	r5, r2
 8003582:	d13e      	bne.n	8003602 <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003584:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 8003586:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800358a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800358e:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8003590:	d108      	bne.n	80035a4 <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <USB_DevInit+0x128>)
 8003594:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8003596:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	f043 0303 	orr.w	r3, r3, #3
 80035a0:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 80035a2:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 80035a8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80035ac:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80035ae:	f1b8 0f00 	cmp.w	r8, #0
 80035b2:	d103      	bne.n	80035bc <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80035b4:	69a3      	ldr	r3, [r4, #24]
 80035b6:	f043 0310 	orr.w	r3, r3, #16
 80035ba:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80035bc:	69a2      	ldr	r2, [r4, #24]
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <USB_DevInit+0x12c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 80035c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035c6:	b11b      	cbz	r3, 80035d0 <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80035c8:	69a3      	ldr	r3, [r4, #24]
 80035ca:	f043 0308 	orr.w	r3, r3, #8
 80035ce:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80035d0:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80035d2:	bf01      	itttt	eq
 80035d4:	69a3      	ldreq	r3, [r4, #24]
 80035d6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80035da:	f043 0304 	orreq.w	r3, r3, #4
 80035de:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80035e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035e4:	2000      	movs	r0, #0
 80035e6:	b004      	add	sp, #16
 80035e8:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80035ea:	f8d3 e000 	ldr.w	lr, [r3]
 80035ee:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80035f2:	bfb4      	ite	lt
 80035f4:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 80035f6:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 80035f8:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 80035fa:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80035fc:	6098      	str	r0, [r3, #8]
 80035fe:	3320      	adds	r3, #32
 8003600:	e7b4      	b.n	800356c <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003602:	f8d3 c000 	ldr.w	ip, [r3]
 8003606:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800360a:	bfb4      	ite	lt
 800360c:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 800360e:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8003610:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8003612:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8003614:	f8c3 e008 	str.w	lr, [r3, #8]
 8003618:	3320      	adds	r3, #32
 800361a:	e7b1      	b.n	8003580 <USB_DevInit+0x8c>
 800361c:	00800100 	.word	0x00800100
 8003620:	803c3800 	.word	0x803c3800

08003624 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003624:	0189      	lsls	r1, r1, #6
 8003626:	f041 0120 	orr.w	r1, r1, #32
 800362a:	4a06      	ldr	r2, [pc, #24]	; (8003644 <USB_FlushTxFifo+0x20>)
 800362c:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 800362e:	3a01      	subs	r2, #1
 8003630:	d005      	beq.n	800363e <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003632:	6903      	ldr	r3, [r0, #16]
 8003634:	f013 0320 	ands.w	r3, r3, #32
 8003638:	d1f9      	bne.n	800362e <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 800363a:	4618      	mov	r0, r3
 800363c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800363e:	2003      	movs	r0, #3
}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	00030d41 	.word	0x00030d41

08003648 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003648:	2310      	movs	r3, #16
 800364a:	4a06      	ldr	r2, [pc, #24]	; (8003664 <USB_FlushRxFifo+0x1c>)
 800364c:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 800364e:	3a01      	subs	r2, #1
 8003650:	d005      	beq.n	800365e <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003652:	6903      	ldr	r3, [r0, #16]
 8003654:	f013 0310 	ands.w	r3, r3, #16
 8003658:	d1f9      	bne.n	800364e <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 800365a:	4618      	mov	r0, r3
 800365c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800365e:	2003      	movs	r0, #3
}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	00030d41 	.word	0x00030d41

08003668 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8003668:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800366c:	4319      	orrs	r1, r3
 800366e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8003672:	2000      	movs	r0, #0
 8003674:	4770      	bx	lr

08003676 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003676:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8003678:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8003684:	2003      	movs	r0, #3
 8003686:	f7fd fa85 	bl	8000b94 <HAL_Delay>
  
  return HAL_OK;  
}
 800368a:	2000      	movs	r0, #0
 800368c:	bd08      	pop	{r3, pc}
	...

08003690 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <USB_CoreReset+0x64>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e01b      	b.n	80036e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	daf2      	bge.n	800369c <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f043 0201 	orr.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3301      	adds	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <USB_CoreReset+0x64>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e006      	b.n	80036e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d0f0      	beq.n	80036c6 <USB_CoreReset+0x36>
  
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	00030d40 	.word	0x00030d40

080036f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036f8:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability
    */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80036fa:	4a2f      	ldr	r2, [pc, #188]	; (80037b8 <SystemClock_Config+0xc0>)
 80036fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
{
 8003700:	b0b8      	sub	sp, #224	; 0xe0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003702:	f023 0318 	bic.w	r3, r3, #24
 8003706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800370a:	2314      	movs	r3, #20
 800370c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003712:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003714:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003716:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003718:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800371a:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 800371c:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800371e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003720:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003722:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003724:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003726:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003728:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800372a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800372c:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800372e:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003730:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003732:	f7fe fa67 	bl	8001c04 <HAL_RCC_OscConfig>
 8003736:	b100      	cbz	r0, 800373a <SystemClock_Config+0x42>
 8003738:	e7fe      	b.n	8003738 <SystemClock_Config+0x40>

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800373a:	220f      	movs	r2, #15
 800373c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800373e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003740:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003742:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003744:	2104      	movs	r1, #4
 8003746:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003748:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800374c:	f7fe fc8c 	bl	8002068 <HAL_RCC_ClockConfig>
 8003750:	b100      	cbz	r0, 8003754 <SystemClock_Config+0x5c>
 8003752:	e7fe      	b.n	8003752 <SystemClock_Config+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 8003754:	f242 0301 	movw	r3, #8193	; 0x2001
 8003758:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800375a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800375e:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003760:	2318      	movs	r3, #24
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003762:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003764:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003766:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003768:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800376c:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800376e:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003770:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003772:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003774:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003776:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003778:	f7fe fe5e 	bl	8002438 <HAL_RCCEx_PeriphCLKConfig>
 800377c:	b100      	cbz	r0, 8003780 <SystemClock_Config+0x88>
 800377e:	e7fe      	b.n	800377e <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003780:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003784:	f7fe f8da 	bl	800193c <HAL_PWREx_ControlVoltageScaling>
 8003788:	4604      	mov	r4, r0
 800378a:	b100      	cbz	r0, 800378e <SystemClock_Config+0x96>
 800378c:	e7fe      	b.n	800378c <SystemClock_Config+0x94>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800378e:	f7fe fd21 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 8003792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003796:	fbb0 f0f3 	udiv	r0, r0, r3
 800379a:	f7fd fa5b 	bl	8000c54 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800379e:	2004      	movs	r0, #4
 80037a0:	f7fd fa6e 	bl	8000c80 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration
    */
  HAL_RCCEx_EnableMSIPLLMode();
 80037a4:	f7ff f830 	bl	8002808 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80037a8:	4622      	mov	r2, r4
 80037aa:	4621      	mov	r1, r4
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295
 80037b0:	f7fd fa10 	bl	8000bd4 <HAL_NVIC_SetPriority>
}
 80037b4:	b038      	add	sp, #224	; 0xe0
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
 80037b8:	40021000 	.word	0x40021000

080037bc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80037bc:	e7fe      	b.n	80037bc <_Error_Handler>
	...

080037c0 <thingSpeakUpdate>:
}

/*send 3 fields to Thingspeak
 * @param wifi_xmit: the string of fields to be updated
 */
void thingSpeakUpdate(uint8_t* wifi_xmit){
 80037c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037c2:	4605      	mov	r5, r0
	static uint8_t WIFI_connection[250];
	sprintf(WIFI_connection, "POST /update HTTP/1.1\n"
 80037c4:	f7fc fd04 	bl	80001d0 <strlen>
 80037c8:	4c0d      	ldr	r4, [pc, #52]	; (8003800 <thingSpeakUpdate+0x40>)
 80037ca:	490e      	ldr	r1, [pc, #56]	; (8003804 <thingSpeakUpdate+0x44>)
 80037cc:	4602      	mov	r2, r0
 80037ce:	4620      	mov	r0, r4
 80037d0:	f001 fa22 	bl	8004c18 <siprintf>
			                 "Host: api.thingspeak.com\n"
							 "Connection: close\n"
							 "X-THINGSPEAKAPIKEY: YF7HOW1VSKR4Y8H8\n"
							 "Content-Type: application/x-www-form-urlencoded\n"
							 "Content-Length: %d\n\n", strlen(wifi_xmit));
	sprintf(strchr(WIFI_connection, '\0'), wifi_xmit);
 80037d4:	2100      	movs	r1, #0
 80037d6:	4620      	mov	r0, r4
 80037d8:	f001 fa42 	bl	8004c60 <strchr>
 80037dc:	4629      	mov	r1, r5
 80037de:	f001 fa1b 	bl	8004c18 <siprintf>
	WIFI_SendData((uint8_t)0, WIFI_connection, strlen(WIFI_connection), &XferSize, Timeout);
 80037e2:	4620      	mov	r0, r4
 80037e4:	f7fc fcf4 	bl	80001d0 <strlen>
 80037e8:	f242 7310 	movw	r3, #10000	; 0x2710
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	b282      	uxth	r2, r0
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <thingSpeakUpdate+0x48>)
 80037f2:	4621      	mov	r1, r4
 80037f4:	2000      	movs	r0, #0
 80037f6:	f001 f9a3 	bl	8004b40 <WIFI_SendData>
}
 80037fa:	b003      	add	sp, #12
 80037fc:	bd30      	pop	{r4, r5, pc}
 80037fe:	bf00      	nop
 8003800:	200000c0 	.word	0x200000c0
 8003804:	080055c5 	.word	0x080055c5
 8003808:	200001ba 	.word	0x200001ba

0800380c <MX_DFSDM1_Init>:

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{

  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800380c:	480f      	ldr	r0, [pc, #60]	; (800384c <MX_DFSDM1_Init+0x40>)
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800380e:	2102      	movs	r1, #2
{
 8003810:	b508      	push	{r3, lr}
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <MX_DFSDM1_Init+0x44>)
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8003814:	60c1      	str	r1, [r0, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8003816:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800381a:	2201      	movs	r2, #1
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800381c:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800381e:	6181      	str	r1, [r0, #24]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8003820:	2300      	movs	r3, #0
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003822:	2104      	movs	r1, #4
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8003824:	7102      	strb	r2, [r0, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8003826:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8003828:	6103      	str	r3, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800382a:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800382c:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800382e:	6201      	str	r1, [r0, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8003830:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8003832:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8003834:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8003836:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8003838:	f7fd fa60 	bl	8000cfc <HAL_DFSDM_ChannelInit>
 800383c:	b128      	cbz	r0, 800384a <MX_DFSDM1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800383e:	2146      	movs	r1, #70	; 0x46
 8003840:	4804      	ldr	r0, [pc, #16]	; (8003854 <MX_DFSDM1_Init+0x48>)
  }

}
 8003842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003846:	f7ff bfb9 	b.w	80037bc <_Error_Handler>
 800384a:	bd08      	pop	{r3, pc}
 800384c:	20000794 	.word	0x20000794
 8003850:	40016020 	.word	0x40016020
 8003854:	08005670 	.word	0x08005670

08003858 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8003858:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 800385a:	4c10      	ldr	r4, [pc, #64]	; (800389c <HAL_DFSDM_ChannelMspInit+0x44>)
 800385c:	6823      	ldr	r3, [r4, #0]
{
 800385e:	b086      	sub	sp, #24
  if(DFSDM1_Init == 0)
 8003860:	b9cb      	cbnz	r3, 8003896 <HAL_DFSDM_ChannelMspInit+0x3e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003862:	4a0f      	ldr	r2, [pc, #60]	; (80038a0 <HAL_DFSDM_ChannelMspInit+0x48>)
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003864:	480f      	ldr	r0, [pc, #60]	; (80038a4 <HAL_DFSDM_ChannelMspInit+0x4c>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003866:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8003868:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800386c:	6611      	str	r1, [r2, #96]	; 0x60
 800386e:	6e12      	ldr	r2, [r2, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	9303      	str	r3, [sp, #12]
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003872:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8003876:	9200      	str	r2, [sp, #0]
 8003878:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800387c:	f44f 7220 	mov.w	r2, #640	; 0x280
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003880:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003882:	9201      	str	r2, [sp, #4]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003884:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003886:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003888:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388a:	9202      	str	r2, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800388c:	f7fd faaa 	bl	8000de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	6023      	str	r3, [r4, #0]
  }
}
 8003896:	b006      	add	sp, #24
 8003898:	bd10      	pop	{r4, pc}
 800389a:	bf00      	nop
 800389c:	200001bc 	.word	0x200001bc
 80038a0:	40021000 	.word	0x40021000
 80038a4:	48001000 	.word	0x48001000

080038a8 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt) 
{
 80038a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;
    
    if (*ptr == '-') {                                		/* Check for minus character */
 80038aa:	7803      	ldrb	r3, [r0, #0]
 80038ac:	2b2d      	cmp	r3, #45	; 0x2d
        minus = 1;
        ptr++;
 80038ae:	bf06      	itte	eq
 80038b0:	3001      	addeq	r0, #1
        minus = 1;
 80038b2:	2501      	moveq	r5, #1
    uint8_t minus = 0, i = 0;
 80038b4:	2500      	movne	r5, #0
 80038b6:	1e43      	subs	r3, r0, #1
 80038b8:	462a      	mov	r2, r5
 80038ba:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 80038bc:	270a      	movs	r7, #10
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80038be:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80038c2:	3c30      	subs	r4, #48	; 0x30
 80038c4:	b2e6      	uxtb	r6, r4
 80038c6:	2e09      	cmp	r6, #9
 80038c8:	d904      	bls.n	80038d4 <ParseNumber+0x2c>
        ptr++;
        i++;
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80038ca:	b101      	cbz	r1, 80038ce <ParseNumber+0x26>
        *cnt = i;
 80038cc:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80038ce:	b105      	cbz	r5, 80038d2 <ParseNumber+0x2a>
        return 0 - sum;
 80038d0:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 80038d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        i++;
 80038d4:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 80038d6:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	e7ef      	b.n	80038be <ParseNumber+0x16>

080038de <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr) 
{
 80038de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80038e2:	4604      	mov	r4, r0
 80038e4:	460f      	mov	r7, r1
  uint8_t hexnum = 0, hexcnt;
 80038e6:	2500      	movs	r5, #0
  
  while(* ptr) { 
    hexcnt = 1;
 80038e8:	f04f 0801 	mov.w	r8, #1
  while(* ptr) { 
 80038ec:	7823      	ldrb	r3, [r4, #0]
 80038ee:	b913      	cbnz	r3, 80038f6 <ParseIP+0x18>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 80038f0:	b002      	add	sp, #8
 80038f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*ptr != '.')
 80038f6:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 80038f8:	f88d 8007 	strb.w	r8, [sp, #7]
    if(*ptr != '.')
 80038fc:	d008      	beq.n	8003910 <ParseIP+0x32>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 80038fe:	f10d 0107 	add.w	r1, sp, #7
 8003902:	4620      	mov	r0, r4
 8003904:	f7ff ffd0 	bl	80038a8 <ParseNumber>
 8003908:	1c6e      	adds	r6, r5, #1
 800390a:	b2f6      	uxtb	r6, r6
 800390c:	5578      	strb	r0, [r7, r5]
 800390e:	4635      	mov	r5, r6
    ptr = ptr + hexcnt;
 8003910:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003914:	441c      	add	r4, r3
 8003916:	e7e9      	b.n	80038ec <ParseIP+0xe>

08003918 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	4604      	mov	r4, r0
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800391c:	4608      	mov	r0, r1
{
 800391e:	460e      	mov	r6, r1
 8003920:	4615      	mov	r5, r2
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8003922:	f7fc fc55 	bl	80001d0 <strlen>
 8003926:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800392a:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 800392e:	b281      	uxth	r1, r0
 8003930:	4630      	mov	r0, r6
 8003932:	4798      	blx	r3
 8003934:	2800      	cmp	r0, #0
 8003936:	dd14      	ble.n	8003962 <AT_ExecuteCommand+0x4a>
  {
    int16_t n=Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8003938:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800393c:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 8003940:	2100      	movs	r1, #0
 8003942:	4628      	mov	r0, r5
 8003944:	4798      	blx	r3
    if(n > 0)
 8003946:	2800      	cmp	r0, #0
 8003948:	dd0b      	ble.n	8003962 <AT_ExecuteCommand+0x4a>
    {
      *(pdata+n)=0;
 800394a:	2400      	movs	r4, #0
 800394c:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800394e:	4908      	ldr	r1, [pc, #32]	; (8003970 <AT_ExecuteCommand+0x58>)
 8003950:	4628      	mov	r0, r5
 8003952:	f001 f9b0 	bl	8004cb6 <strstr>
 8003956:	b930      	cbnz	r0, 8003966 <AT_ExecuteCommand+0x4e>
      {
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8003958:	4906      	ldr	r1, [pc, #24]	; (8003974 <AT_ExecuteCommand+0x5c>)
 800395a:	4628      	mov	r0, r5
 800395c:	f001 f9ab 	bl	8004cb6 <strstr>
 8003960:	b918      	cbnz	r0, 800396a <AT_ExecuteCommand+0x52>
      {
        return ES_WIFI_STATUS_ERROR;
      }      
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8003962:	2004      	movs	r0, #4
 8003964:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 8003966:	4620      	mov	r0, r4
 8003968:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_ERROR;
 800396a:	2002      	movs	r0, #2
}
 800396c:	bd70      	pop	{r4, r5, r6, pc}
 800396e:	bf00      	nop
 8003970:	0800567f 	.word	0x0800567f
 8003974:	08005688 	.word	0x08005688

08003978 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8003978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  
  Obj->Timeout = ES_WIFI_TIMEOUT;
 800397c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003980:	f8c0 3760 	str.w	r3, [r0, #1888]	; 0x760
  
  if (Obj->fops.IO_Init() == 0)
 8003984:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
{
 8003988:	4604      	mov	r4, r0
  if (Obj->fops.IO_Init() == 0)
 800398a:	4798      	blx	r3
 800398c:	2800      	cmp	r0, #0
 800398e:	d14b      	bne.n	8003a28 <ES_WIFI_Init+0xb0>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8003990:	f504 7290 	add.w	r2, r4, #288	; 0x120
 8003994:	4925      	ldr	r1, [pc, #148]	; (8003a2c <ES_WIFI_Init+0xb4>)
 8003996:	4620      	mov	r0, r4
 8003998:	f7ff ffbe 	bl	8003918 <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 800399c:	4605      	mov	r5, r0
 800399e:	b960      	cbnz	r0, 80039ba <ES_WIFI_Init+0x42>
  ptr = strtok((char *)pdata + 2, ",");  
 80039a0:	4923      	ldr	r1, [pc, #140]	; (8003a30 <ES_WIFI_Init+0xb8>)
      ptr = strtok(ptr, "\r"); 
 80039a2:	4f24      	ldr	r7, [pc, #144]	; (8003a34 <ES_WIFI_Init+0xbc>)
    ptr = strtok(NULL, ","); 
 80039a4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003a30 <ES_WIFI_Init+0xb8>
  ptr = strtok((char *)pdata + 2, ",");  
 80039a8:	f504 7091 	add.w	r0, r4, #290	; 0x122
 80039ac:	f001 f99e 	bl	8004cec <strtok>
 80039b0:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 80039b2:	f104 0860 	add.w	r8, r4, #96	; 0x60
 80039b6:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 80039b8:	b910      	cbnz	r0, 80039c0 <ES_WIFI_Init+0x48>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 80039ba:	4628      	mov	r0, r5
 80039bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) { 
 80039c0:	2b06      	cmp	r3, #6
 80039c2:	d824      	bhi.n	8003a0e <ES_WIFI_Init+0x96>
 80039c4:	e8df f003 	tbb	[pc, r3]
 80039c8:	140f0a04 	.word	0x140f0a04
 80039cc:	1e19      	.short	0x1e19
 80039ce:	29          	.byte	0x29
 80039cf:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80039d0:	4601      	mov	r1, r0
 80039d2:	2220      	movs	r2, #32
 80039d4:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 80039d6:	f001 f959 	bl	8004c8c <strncpy>
 80039da:	e018      	b.n	8003a0e <ES_WIFI_Init+0x96>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80039dc:	4601      	mov	r1, r0
 80039de:	2210      	movs	r2, #16
 80039e0:	f104 0020 	add.w	r0, r4, #32
 80039e4:	e7f7      	b.n	80039d6 <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);      
 80039e6:	4601      	mov	r1, r0
 80039e8:	2210      	movs	r2, #16
 80039ea:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80039ee:	e7f2      	b.n	80039d6 <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);   
 80039f0:	4601      	mov	r1, r0
 80039f2:	2210      	movs	r2, #16
 80039f4:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80039f8:	e7ed      	b.n	80039d6 <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);        
 80039fa:	4601      	mov	r1, r0
 80039fc:	2210      	movs	r2, #16
 80039fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a02:	e7e8      	b.n	80039d6 <ES_WIFI_Init+0x5e>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8003a04:	2100      	movs	r1, #0
 8003a06:	f7ff ff4f 	bl	80038a8 <ParseNumber>
 8003a0a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    ptr = strtok(NULL, ","); 
 8003a0e:	4649      	mov	r1, r9
 8003a10:	2000      	movs	r0, #0
 8003a12:	f001 f96b 	bl	8004cec <strtok>
 8003a16:	3601      	adds	r6, #1
 8003a18:	e7cd      	b.n	80039b6 <ES_WIFI_Init+0x3e>
      ptr = strtok(ptr, "\r"); 
 8003a1a:	4639      	mov	r1, r7
 8003a1c:	f001 f966 	bl	8004cec <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8003a20:	2220      	movs	r2, #32
 8003a22:	4601      	mov	r1, r0
 8003a24:	4640      	mov	r0, r8
 8003a26:	e7d6      	b.n	80039d6 <ES_WIFI_Init+0x5e>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8003a28:	2502      	movs	r5, #2
 8003a2a:	e7c6      	b.n	80039ba <ES_WIFI_Init+0x42>
 8003a2c:	080056ad 	.word	0x080056ad
 8003a30:	080056b2 	.word	0x080056b2
 8003a34:	08005700 	.word	0x08005700

08003a38 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,  
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8003a38:	b530      	push	{r4, r5, lr}
 8003a3a:	9d03      	ldr	r5, [sp, #12]
 8003a3c:	9c04      	ldr	r4, [sp, #16]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8003a3e:	b168      	cbz	r0, 8003a5c <ES_WIFI_RegisterBusIO+0x24>
 8003a40:	b161      	cbz	r1, 8003a5c <ES_WIFI_RegisterBusIO+0x24>
 8003a42:	b15a      	cbz	r2, 8003a5c <ES_WIFI_RegisterBusIO+0x24>
 8003a44:	b155      	cbz	r5, 8003a5c <ES_WIFI_RegisterBusIO+0x24>
 8003a46:	b14c      	cbz	r4, 8003a5c <ES_WIFI_RegisterBusIO+0x24>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 8003a48:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
  Obj->fops.IO_Send = IO_Send;
 8003a4c:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
  Obj->fops.IO_Receive = IO_Receive;
 8003a50:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
  Obj->fops.IO_Delay = IO_Delay;  
 8003a54:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
  
  return ES_WIFI_STATUS_OK;
 8003a58:	2000      	movs	r0, #0
 8003a5a:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8003a5c:	2002      	movs	r0, #2
}
 8003a5e:	bd30      	pop	{r4, r5, pc}

08003a60 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID, 
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8003a62:	f500 7490 	add.w	r4, r0, #288	; 0x120
{
 8003a66:	4605      	mov	r5, r0
 8003a68:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	460a      	mov	r2, r1
 8003a6e:	4918      	ldr	r1, [pc, #96]	; (8003ad0 <ES_WIFI_Connect+0x70>)
{
 8003a70:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8003a72:	f001 f8d1 	bl	8004c18 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003a76:	4622      	mov	r2, r4
 8003a78:	4621      	mov	r1, r4
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f7ff ff4c 	bl	8003918 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8003a80:	bb20      	cbnz	r0, 8003acc <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8003a82:	463a      	mov	r2, r7
 8003a84:	4913      	ldr	r1, [pc, #76]	; (8003ad4 <ES_WIFI_Connect+0x74>)
 8003a86:	4620      	mov	r0, r4
 8003a88:	f001 f8c6 	bl	8004c18 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003a8c:	4622      	mov	r2, r4
 8003a8e:	4621      	mov	r1, r4
 8003a90:	4628      	mov	r0, r5
 8003a92:	f7ff ff41 	bl	8003918 <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8003a96:	b9c8      	cbnz	r0, 8003acc <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8003a98:	4632      	mov	r2, r6
 8003a9a:	490f      	ldr	r1, [pc, #60]	; (8003ad8 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8003a9c:	f885 6084 	strb.w	r6, [r5, #132]	; 0x84
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f001 f8b9 	bl	8004c18 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f7ff ff34 	bl	8003918 <AT_ExecuteCommand>
      
      if(ret == ES_WIFI_STATUS_OK)
 8003ab0:	b960      	cbnz	r0, 8003acc <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8003ab2:	490a      	ldr	r1, [pc, #40]	; (8003adc <ES_WIFI_Connect+0x7c>)
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f001 f8e1 	bl	8004c7c <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);  
 8003aba:	4622      	mov	r2, r4
 8003abc:	4621      	mov	r1, r4
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f7ff ff2a 	bl	8003918 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8003ac4:	b910      	cbnz	r0, 8003acc <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f885 30ca 	strb.w	r3, [r5, #202]	; 0xca
        }
      }    
    }
  }
  return ret;
}
 8003acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	08005690 	.word	0x08005690
 8003ad4:	08005697 	.word	0x08005697
 8003ad8:	0800569e 	.word	0x0800569e
 8003adc:	080056a5 	.word	0x080056a5

08003ae0 <ES_WIFI_GetNetworkSettings>:
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C?\r");
 8003ae0:	f500 7290 	add.w	r2, r0, #288	; 0x120
{
 8003ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8003ae8:	4937      	ldr	r1, [pc, #220]	; (8003bc8 <ES_WIFI_GetNetworkSettings+0xe8>)
{
 8003aea:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8003aec:	4610      	mov	r0, r2
 8003aee:	f001 f8c5 	bl	8004c7c <strcpy>
 8003af2:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003af4:	4601      	mov	r1, r0
 8003af6:	4620      	mov	r0, r4
 8003af8:	f7ff ff0e 	bl	8003918 <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8003afc:	4606      	mov	r6, r0
 8003afe:	b960      	cbnz	r0, 8003b1a <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");   
 8003b00:	4932      	ldr	r1, [pc, #200]	; (8003bcc <ES_WIFI_GetNetworkSettings+0xec>)
    ptr = strtok(NULL, ",");
 8003b02:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8003bcc <ES_WIFI_GetNetworkSettings+0xec>
  ptr = strtok(pdata + 2, ",");   
 8003b06:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8003b0a:	f001 f8ef 	bl	8004cec <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8003b0e:	f104 0785 	add.w	r7, r4, #133	; 0x85
  uint8_t num = 0;
 8003b12:	46b2      	mov	sl, r6
      ParseIP(ptr, NetSettings->DNS2);
 8003b14:	f104 08dd 	add.w	r8, r4, #221	; 0xdd
  while (ptr != NULL) {
 8003b18:	b910      	cbnz	r0, 8003b20 <ES_WIFI_GetNetworkSettings+0x40>
  }  
  return ret;
}
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (num++) {      
 8003b20:	f10a 0501 	add.w	r5, sl, #1
 8003b24:	b2ed      	uxtb	r5, r5
 8003b26:	f1ba 0f0b 	cmp.w	sl, #11
 8003b2a:	d80c      	bhi.n	8003b46 <ES_WIFI_GetNetworkSettings+0x66>
 8003b2c:	e8df f00a 	tbb	[pc, sl]
 8003b30:	241e1906 	.word	0x241e1906
 8003b34:	3835302a 	.word	0x3835302a
 8003b38:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1); 
 8003b3c:	4601      	mov	r1, r0
 8003b3e:	2221      	movs	r2, #33	; 0x21
 8003b40:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 8003b42:	f001 f8a3 	bl	8004c8c <strncpy>
    ptr = strtok(NULL, ",");
 8003b46:	4649      	mov	r1, r9
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f001 f8cf 	bl	8004cec <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8003b4e:	b130      	cbz	r0, 8003b5e <ES_WIFI_GetNetworkSettings+0x7e>
 8003b50:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8003b54:	2b2c      	cmp	r3, #44	; 0x2c
      num++;
 8003b56:	bf04      	itt	eq
 8003b58:	f10a 0502 	addeq.w	r5, sl, #2
 8003b5c:	b2ed      	uxtbeq	r5, r5
{
 8003b5e:	46aa      	mov	sl, r5
 8003b60:	e7da      	b.n	8003b18 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 8003b62:	4601      	mov	r1, r0
 8003b64:	2221      	movs	r2, #33	; 0x21
 8003b66:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
 8003b6a:	e7ea      	b.n	8003b42 <ES_WIFI_GetNetworkSettings+0x62>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	f7ff fe9b 	bl	80038a8 <ParseNumber>
 8003b72:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
 8003b76:	e7e6      	b.n	8003b46 <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8003b78:	2100      	movs	r1, #0
 8003b7a:	f7ff fe95 	bl	80038a8 <ParseNumber>
 8003b7e:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
 8003b82:	e7e0      	b.n	8003b46 <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8003b84:	2100      	movs	r1, #0
 8003b86:	f7ff fe8f 	bl	80038a8 <ParseNumber>
 8003b8a:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
 8003b8e:	e7da      	b.n	8003b46 <ES_WIFI_GetNetworkSettings+0x66>
      ParseIP(ptr, NetSettings->IP_Addr);
 8003b90:	f104 01cd 	add.w	r1, r4, #205	; 0xcd
      ParseIP(ptr, NetSettings->IP_Mask);
 8003b94:	f7ff fea3 	bl	80038de <ParseIP>
 8003b98:	e7d5      	b.n	8003b46 <ES_WIFI_GetNetworkSettings+0x66>
 8003b9a:	f104 01d1 	add.w	r1, r4, #209	; 0xd1
 8003b9e:	e7f9      	b.n	8003b94 <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8003ba0:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
 8003ba4:	e7f6      	b.n	8003b94 <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->DNS1);
 8003ba6:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8003baa:	e7f3      	b.n	8003b94 <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->DNS2);
 8003bac:	4641      	mov	r1, r8
 8003bae:	e7f1      	b.n	8003b94 <ES_WIFI_GetNetworkSettings+0xb4>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	f7ff fe79 	bl	80038a8 <ParseNumber>
 8003bb6:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
 8003bba:	e7c4      	b.n	8003b46 <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	f7ff fe73 	bl	80038a8 <ParseNumber>
 8003bc2:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
 8003bc6:	e7be      	b.n	8003b46 <ES_WIFI_GetNetworkSettings+0x66>
 8003bc8:	080056a9 	.word	0x080056a9
 8003bcc:	080056b2 	.word	0x080056b2

08003bd0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8003bd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret;

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8003bd2:	f500 7490 	add.w	r4, r0, #288	; 0x120
 8003bd6:	784a      	ldrb	r2, [r1, #1]
{
 8003bd8:	4606      	mov	r6, r0
 8003bda:	460d      	mov	r5, r1
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8003bdc:	4620      	mov	r0, r4
 8003bde:	4928      	ldr	r1, [pc, #160]	; (8003c80 <ES_WIFI_StartClientConnection+0xb0>)
 8003be0:	f001 f81a 	bl	8004c18 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003be4:	4622      	mov	r2, r4
 8003be6:	4621      	mov	r1, r4
 8003be8:	4630      	mov	r0, r6
 8003bea:	f7ff fe95 	bl	8003918 <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d144      	bne.n	8003c7c <ES_WIFI_StartClientConnection+0xac>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8003bf2:	782a      	ldrb	r2, [r5, #0]
 8003bf4:	4923      	ldr	r1, [pc, #140]	; (8003c84 <ES_WIFI_StartClientConnection+0xb4>)
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f001 f80e 	bl	8004c18 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003bfc:	4622      	mov	r2, r4
 8003bfe:	4621      	mov	r1, r4
 8003c00:	4630      	mov	r0, r6
 8003c02:	f7ff fe89 	bl	8003918 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d138      	bne.n	8003c7c <ES_WIFI_StartClientConnection+0xac>
    {
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0)) 
 8003c0a:	782b      	ldrb	r3, [r5, #0]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d026      	beq.n	8003c5e <ES_WIFI_StartClientConnection+0x8e>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
        {
          return ES_WIFI_STATUS_ERROR;
        }
      }
      sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8003c10:	886a      	ldrh	r2, [r5, #2]
 8003c12:	491d      	ldr	r1, [pc, #116]	; (8003c88 <ES_WIFI_StartClientConnection+0xb8>)
 8003c14:	4620      	mov	r0, r4
 8003c16:	f000 ffff 	bl	8004c18 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	4630      	mov	r0, r6
 8003c20:	f7ff fe7a 	bl	8003918 <AT_ExecuteCommand>
      
      if(ret == ES_WIFI_STATUS_OK)
 8003c24:	bb50      	cbnz	r0, 8003c7c <ES_WIFI_StartClientConnection+0xac>
      {
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8003c26:	7a69      	ldrb	r1, [r5, #9]
 8003c28:	9101      	str	r1, [sp, #4]
 8003c2a:	7a29      	ldrb	r1, [r5, #8]
 8003c2c:	79aa      	ldrb	r2, [r5, #6]
 8003c2e:	9100      	str	r1, [sp, #0]
 8003c30:	79eb      	ldrb	r3, [r5, #7]
 8003c32:	4916      	ldr	r1, [pc, #88]	; (8003c8c <ES_WIFI_StartClientConnection+0xbc>)
 8003c34:	4620      	mov	r0, r4
 8003c36:	f000 ffef 	bl	8004c18 <siprintf>
                conn->RemoteIP[2],conn->RemoteIP[3]);
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData); 
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f7ff fe6a 	bl	8003918 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8003c44:	b9d0      	cbnz	r0, 8003c7c <ES_WIFI_StartClientConnection+0xac>
        {
          sprintf((char*)Obj->CmdData,"P6=1\r");
 8003c46:	4912      	ldr	r1, [pc, #72]	; (8003c90 <ES_WIFI_StartClientConnection+0xc0>)
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f001 f817 	bl	8004c7c <strcpy>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);         
 8003c4e:	4622      	mov	r2, r4
 8003c50:	4621      	mov	r1, r4
 8003c52:	4630      	mov	r0, r6
        }          
      }           
    }
  }
  return ret;
}
 8003c54:	b002      	add	sp, #8
 8003c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);         
 8003c5a:	f7ff be5d 	b.w	8003918 <AT_ExecuteCommand>
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0)) 
 8003c5e:	88ab      	ldrh	r3, [r5, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0d5      	beq.n	8003c10 <ES_WIFI_StartClientConnection+0x40>
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->RemotePort);
 8003c64:	886a      	ldrh	r2, [r5, #2]
 8003c66:	490b      	ldr	r1, [pc, #44]	; (8003c94 <ES_WIFI_StartClientConnection+0xc4>)
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f000 ffd5 	bl	8004c18 <siprintf>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
 8003c6e:	4622      	mov	r2, r4
 8003c70:	4621      	mov	r1, r4
 8003c72:	4630      	mov	r0, r6
 8003c74:	f7ff fe50 	bl	8003918 <AT_ExecuteCommand>
 8003c78:	2802      	cmp	r0, #2
 8003c7a:	d1c9      	bne.n	8003c10 <ES_WIFI_StartClientConnection+0x40>
}
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	080056ca 	.word	0x080056ca
 8003c84:	080056d1 	.word	0x080056d1
 8003c88:	080056d8 	.word	0x080056d8
 8003c8c:	080056e6 	.word	0x080056e6
 8003c90:	080056f6 	.word	0x080056f6
 8003c94:	080056df 	.word	0x080056df

08003c98 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8003c98:	b538      	push	{r3, r4, r5, lr}
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8003c9a:	f500 7490 	add.w	r4, r0, #288	; 0x120
 8003c9e:	784a      	ldrb	r2, [r1, #1]
 8003ca0:	490b      	ldr	r1, [pc, #44]	; (8003cd0 <ES_WIFI_StopClientConnection+0x38>)
{
 8003ca2:	4605      	mov	r5, r0
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f000 ffb7 	bl	8004c18 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003caa:	4622      	mov	r2, r4
 8003cac:	4621      	mov	r1, r4
 8003cae:	4628      	mov	r0, r5
 8003cb0:	f7ff fe32 	bl	8003918 <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8003cb4:	b950      	cbnz	r0, 8003ccc <ES_WIFI_StopClientConnection+0x34>
  {  
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8003cb6:	4907      	ldr	r1, [pc, #28]	; (8003cd4 <ES_WIFI_StopClientConnection+0x3c>)
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f000 ffdf 	bl	8004c7c <strcpy>
    ret =  AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);     
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	4628      	mov	r0, r5
  }
  return ret;
}
 8003cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret =  AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);     
 8003cc8:	f7ff be26 	b.w	8003918 <AT_ExecuteCommand>
}
 8003ccc:	bd38      	pop	{r3, r4, r5, pc}
 8003cce:	bf00      	nop
 8003cd0:	080056ca 	.word	0x080056ca
 8003cd4:	080056fc 	.word	0x080056fc

08003cd8 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8003cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cdc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003ce0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8003ce4:	bf28      	it	cs
 8003ce6:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
  
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
  
  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8003cea:	f500 7490 	add.w	r4, r0, #288	; 0x120
{
 8003cee:	4605      	mov	r5, r0
  *SentLen = Reqlen;
 8003cf0:	f8a8 3000 	strh.w	r3, [r8]
{
 8003cf4:	4692      	mov	sl, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	460a      	mov	r2, r1
 8003cfa:	492f      	ldr	r1, [pc, #188]	; (8003db8 <ES_WIFI_SendData+0xe0>)
 8003cfc:	461f      	mov	r7, r3
 8003cfe:	f000 ff8b 	bl	8004c18 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003d02:	4622      	mov	r2, r4
 8003d04:	4621      	mov	r1, r4
 8003d06:	4628      	mov	r0, r5
 8003d08:	f7ff fe06 	bl	8003918 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d141      	bne.n	8003d96 <ES_WIFI_SendData+0xbe>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 8003d12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d14:	4929      	ldr	r1, [pc, #164]	; (8003dbc <ES_WIFI_SendData+0xe4>)
 8003d16:	4620      	mov	r0, r4
 8003d18:	f000 ff7e 	bl	8004c18 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	4621      	mov	r1, r4
 8003d20:	4628      	mov	r0, r5
 8003d22:	f7ff fdf9 	bl	8003918 <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8003d26:	4606      	mov	r6, r0
 8003d28:	bba8      	cbnz	r0, 8003d96 <ES_WIFI_SendData+0xbe>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8003d2a:	463a      	mov	r2, r7
 8003d2c:	4924      	ldr	r1, [pc, #144]	; (8003dc0 <ES_WIFI_SendData+0xe8>)
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f000 ff72 	bl	8004c18 <siprintf>
  uint16_t n=strlen((char*)cmd);
 8003d34:	4620      	mov	r0, r4
 8003d36:	f7fc fa4b 	bl	80001d0 <strlen>
  if (n &1 ) return ES_WIFI_STATUS_ERROR;
 8003d3a:	f010 0901 	ands.w	r9, r0, #1
 8003d3e:	fa1f fb80 	uxth.w	fp, r0
 8003d42:	d12a      	bne.n	8003d9a <ES_WIFI_SendData+0xc2>
  if(Obj->fops.IO_Send(cmd, n, Obj->Timeout) == n)
 8003d44:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8003d48:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	4620      	mov	r0, r4
 8003d50:	4798      	blx	r3
 8003d52:	4583      	cmp	fp, r0
 8003d54:	d11d      	bne.n	8003d92 <ES_WIFI_SendData+0xba>
    int16_t n=Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8003d56:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8003d5a:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8003d5e:	4639      	mov	r1, r7
 8003d60:	4650      	mov	r0, sl
 8003d62:	4798      	blx	r3
    if(n == len)
 8003d64:	4287      	cmp	r7, r0
 8003d66:	d118      	bne.n	8003d9a <ES_WIFI_SendData+0xc2>
      n = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8003d68:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8003d6c:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8003d70:	4649      	mov	r1, r9
 8003d72:	4620      	mov	r0, r4
 8003d74:	4798      	blx	r3
      if(n > 0)
 8003d76:	2800      	cmp	r0, #0
 8003d78:	dd0b      	ble.n	8003d92 <ES_WIFI_SendData+0xba>
        *(pdata+n)=0;
 8003d7a:	f804 9000 	strb.w	r9, [r4, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8003d7e:	4911      	ldr	r1, [pc, #68]	; (8003dc4 <ES_WIFI_SendData+0xec>)
 8003d80:	4620      	mov	r0, r4
 8003d82:	f000 ff98 	bl	8004cb6 <strstr>
 8003d86:	b968      	cbnz	r0, 8003da4 <ES_WIFI_SendData+0xcc>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8003d88:	490f      	ldr	r1, [pc, #60]	; (8003dc8 <ES_WIFI_SendData+0xf0>)
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f000 ff93 	bl	8004cb6 <strstr>
 8003d90:	b918      	cbnz	r0, 8003d9a <ES_WIFI_SendData+0xc2>
        }
      }
    }
  }
  
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 8003d92:	2604      	movs	r6, #4
  return ret;  
 8003d94:	e00c      	b.n	8003db0 <ES_WIFI_SendData+0xd8>
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 8003d96:	2e02      	cmp	r6, #2
 8003d98:	d10a      	bne.n	8003db0 <ES_WIFI_SendData+0xd8>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8a8 3000 	strh.w	r3, [r8]
 8003da0:	2602      	movs	r6, #2
 8003da2:	e005      	b.n	8003db0 <ES_WIFI_SendData+0xd8>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8003da4:	4909      	ldr	r1, [pc, #36]	; (8003dcc <ES_WIFI_SendData+0xf4>)
 8003da6:	4620      	mov	r0, r4
 8003da8:	f000 ff85 	bl	8004cb6 <strstr>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d1f4      	bne.n	8003d9a <ES_WIFI_SendData+0xc2>
}
 8003db0:	4630      	mov	r0, r6
 8003db2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	080056ca 	.word	0x080056ca
 8003dbc:	080056b4 	.word	0x080056b4
 8003dc0:	080056bc 	.word	0x080056bc
 8003dc4:	0800567f 	.word	0x0800567f
 8003dc8:	08005688 	.word	0x08005688
 8003dcc:	080056c5 	.word	0x080056c5

08003dd0 <SPI_WIFI_MspInit>:
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8003dd0:	4b44      	ldr	r3, [pc, #272]	; (8003ee4 <SPI_WIFI_MspInit+0x114>)
{
 8003dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8003dd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8003dd8:	4e43      	ldr	r6, [pc, #268]	; (8003ee8 <SPI_WIFI_MspInit+0x118>)
  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8003dda:	4f44      	ldr	r7, [pc, #272]	; (8003eec <SPI_WIFI_MspInit+0x11c>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8003ddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003de0:	659a      	str	r2, [r3, #88]	; 0x58
 8003de2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8003de4:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_SPI3_CLK_ENABLE();
 8003de6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003dea:	9201      	str	r2, [sp, #4]
 8003dec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003df0:	f042 0202 	orr.w	r2, r2, #2
 8003df4:	64da      	str	r2, [r3, #76]	; 0x4c
 8003df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003df8:	f002 0202 	and.w	r2, r2, #2
 8003dfc:	9202      	str	r2, [sp, #8]
 8003dfe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e02:	f042 0204 	orr.w	r2, r2, #4
 8003e06:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e0a:	f002 0204 	and.w	r2, r2, #4
 8003e0e:	9203      	str	r2, [sp, #12]
 8003e10:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e14:	f042 0210 	orr.w	r2, r2, #16
 8003e18:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1c:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8003e20:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e22:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8003e24:	4630      	mov	r0, r6
 8003e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e2a:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003e2c:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e2e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8003e30:	f7fd f954 	bl	80010dc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8003e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8003e38:	a905      	add	r1, sp, #20
 8003e3a:	4630      	mov	r0, r6
  GPIO_Init.Pin       = GPIO_PIN_13;
 8003e3c:	9305      	str	r3, [sp, #20]
  GPIO_Init.Pin       = GPIO_PIN_1;
 8003e3e:	2602      	movs	r6, #2
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e40:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003e42:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8003e44:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8003e46:	f7fc ffcd 	bl	8000de4 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8003e4a:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <SPI_WIFI_MspInit+0x120>)
 8003e4c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8003e4e:	a905      	add	r1, sp, #20
 8003e50:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_1;
 8003e52:	9605      	str	r6, [sp, #20]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003e54:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8003e56:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8003e58:	f7fc ffc4 	bl	8000de4 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8003e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  GPIO_Init.Alternate = 0;
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8003e60:	a905      	add	r1, sp, #20
 8003e62:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_8;
 8003e64:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e66:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003e68:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8003e6a:	9508      	str	r5, [sp, #32]
  GPIO_Init.Alternate = 0;
 8003e6c:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8003e6e:	f7fc ffb9 	bl	8000de4 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE, GPIO_PIN_0, GPIO_PIN_SET ); 
 8003e72:	4622      	mov	r2, r4
 8003e74:	4621      	mov	r1, r4
 8003e76:	4638      	mov	r0, r7
 8003e78:	f7fd f930 	bl	80010dc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_0;
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8003e7c:	a905      	add	r1, sp, #20
 8003e7e:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_10;
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8003e80:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8003e84:	f04f 0806 	mov.w	r8, #6
  GPIO_Init.Pin       = GPIO_PIN_0;
 8003e88:	9405      	str	r4, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e8a:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003e8c:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003e8e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8003e90:	f7fc ffa8 	bl	8000de4 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_10;
 8003e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8003e98:	a905      	add	r1, sp, #20
 8003e9a:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_10;
 8003e9c:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003e9e:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003ea0:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003ea2:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8003ea4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8003ea8:	f7fc ff9c 	bl	8000de4 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8003eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8003eb0:	a905      	add	r1, sp, #20
 8003eb2:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_12;
 8003eb4:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003eb6:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003eb8:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003eba:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8003ebc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8003ec0:	f7fc ff90 	bl	8000de4 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8003ec4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8003ec8:	a905      	add	r1, sp, #20
 8003eca:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_11;
 8003ecc:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003ece:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8003ed0:	9407      	str	r4, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003ed2:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8003ed4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8003ed8:	f7fc ff84 	bl	8000de4 <HAL_GPIO_Init>
}
 8003edc:	b00a      	add	sp, #40	; 0x28
 8003ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	48000400 	.word	0x48000400
 8003eec:	48001000 	.word	0x48001000
 8003ef0:	10110000 	.word	0x10110000

08003ef4 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(void)
{
 8003ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8003ef6:	f7fc fe47 	bl	8000b88 <HAL_GetTick>
  uint8_t Prompt[6];
  uint8_t count = 0;
  HAL_StatusTypeDef  Status;
  
  hspi.Instance               = SPI3;
 8003efa:	4c41      	ldr	r4, [pc, #260]	; (8004000 <SPI_WIFI_Init+0x10c>)
 8003efc:	4b41      	ldr	r3, [pc, #260]	; (8004004 <SPI_WIFI_Init+0x110>)
 8003efe:	6023      	str	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8003f00:	4606      	mov	r6, r0
  SPI_WIFI_MspInit(&hspi);
 8003f02:	4620      	mov	r0, r4
 8003f04:	f7ff ff64 	bl	8003dd0 <SPI_WIFI_MspInit>
  
  hspi.Init.Mode              = SPI_MODE_MASTER;
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8003f08:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  hspi.Init.Mode              = SPI_MODE_MASTER;
 8003f0c:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8003f10:	60e2      	str	r2, [r4, #12]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
  hspi.Init.NSS               = SPI_NSS_SOFT;
 8003f12:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi.Init.Mode              = SPI_MODE_MASTER;
 8003f16:	6063      	str	r3, [r4, #4]
  hspi.Init.NSS               = SPI_NSS_SOFT;
 8003f18:	61a2      	str	r2, [r4, #24]
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8003f1a:	2300      	movs	r3, #0
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8003f1c:	2210      	movs	r2, #16
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
  hspi.Init.CRCPolynomial     = 0;
  
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8003f1e:	4620      	mov	r0, r4
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8003f20:	60a3      	str	r3, [r4, #8]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8003f22:	6123      	str	r3, [r4, #16]
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8003f24:	6163      	str	r3, [r4, #20]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8003f26:	61e2      	str	r2, [r4, #28]
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003f28:	6223      	str	r3, [r4, #32]
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8003f2a:	6263      	str	r3, [r4, #36]	; 0x24
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8003f2c:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi.Init.CRCPolynomial     = 0;
 8003f2e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8003f30:	f7fe fd2b 	bl	800298a <HAL_SPI_Init>
 8003f34:	4605      	mov	r5, r0
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d15c      	bne.n	8003ff4 <SPI_WIFI_Init+0x100>
  {
    return -1;
  }
  
  WIFI_RESET_MODULE();
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f40:	4831      	ldr	r0, [pc, #196]	; (8004008 <SPI_WIFI_Init+0x114>)
 8003f42:	f7fd f8cb 	bl	80010dc <HAL_GPIO_WritePin>
 8003f46:	200a      	movs	r0, #10
 8003f48:	f7fc fe24 	bl	8000b94 <HAL_Delay>
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f52:	482d      	ldr	r0, [pc, #180]	; (8004008 <SPI_WIFI_Init+0x114>)
 8003f54:	f7fd f8c2 	bl	80010dc <HAL_GPIO_WritePin>
 8003f58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f5c:	f7fc fe1a 	bl	8000b94 <HAL_Delay>
  
  WIFI_ENABLE_NSS(); 
 8003f60:	4829      	ldr	r0, [pc, #164]	; (8004008 <SPI_WIFI_Init+0x114>)
 8003f62:	462a      	mov	r2, r5
 8003f64:	2101      	movs	r1, #1
 8003f66:	f7fd f8b9 	bl	80010dc <HAL_GPIO_WritePin>
 8003f6a:	200a      	movs	r0, #10
 8003f6c:	f7fc fe12 	bl	8000b94 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 8003f70:	2102      	movs	r1, #2
 8003f72:	4825      	ldr	r0, [pc, #148]	; (8004008 <SPI_WIFI_Init+0x114>)
 8003f74:	f7fd f8ac 	bl	80010d0 <HAL_GPIO_ReadPin>
 8003f78:	2801      	cmp	r0, #1
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	d022      	beq.n	8003fc4 <SPI_WIFI_Init+0xd0>
      WIFI_DISABLE_NSS(); 
      return -1;
    }    
  }
  
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8003f7e:	f89d 3000 	ldrb.w	r3, [sp]
 8003f82:	2b15      	cmp	r3, #21
 8003f84:	d12e      	bne.n	8003fe4 <SPI_WIFI_Init+0xf0>
 8003f86:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003f8a:	2b15      	cmp	r3, #21
 8003f8c:	d12a      	bne.n	8003fe4 <SPI_WIFI_Init+0xf0>
 8003f8e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003f92:	2b0d      	cmp	r3, #13
 8003f94:	d126      	bne.n	8003fe4 <SPI_WIFI_Init+0xf0>
 8003f96:	f89d 4003 	ldrb.w	r4, [sp, #3]
 8003f9a:	2c0a      	cmp	r4, #10
 8003f9c:	d122      	bne.n	8003fe4 <SPI_WIFI_Init+0xf0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8003f9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8003fa4:	d11e      	bne.n	8003fe4 <SPI_WIFI_Init+0xf0>
 8003fa6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d11a      	bne.n	8003fe4 <SPI_WIFI_Init+0xf0>
  {
    WIFI_DISABLE_NSS(); 
    return -1;
  }    
   
  WIFI_DISABLE_NSS(); 
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4815      	ldr	r0, [pc, #84]	; (8004008 <SPI_WIFI_Init+0x114>)
 8003fb4:	f7fd f892 	bl	80010dc <HAL_GPIO_WritePin>
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f7fc fdeb 	bl	8000b94 <HAL_Delay>
  return 0;
 8003fbe:	2000      	movs	r0, #0
}
 8003fc0:	b003      	add	sp, #12
 8003fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8003fc4:	eb0d 0105 	add.w	r1, sp, r5
 8003fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7fe ff23 	bl	8002e18 <HAL_SPI_Receive>
 8003fd2:	4607      	mov	r7, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8003fd4:	f7fc fdd8 	bl	8000b88 <HAL_GetTick>
 8003fd8:	1b80      	subs	r0, r0, r6
    count += 2;
 8003fda:	3502      	adds	r5, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8003fdc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8003fe0:	b2ed      	uxtb	r5, r5
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8003fe2:	d30a      	bcc.n	8003ffa <SPI_WIFI_Init+0x106>
      WIFI_DISABLE_NSS(); 
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	4808      	ldr	r0, [pc, #32]	; (8004008 <SPI_WIFI_Init+0x114>)
 8003fe8:	4611      	mov	r1, r2
 8003fea:	f7fd f877 	bl	80010dc <HAL_GPIO_WritePin>
 8003fee:	200a      	movs	r0, #10
 8003ff0:	f7fc fdd0 	bl	8000b94 <HAL_Delay>
    return -1;
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	e7e2      	b.n	8003fc0 <SPI_WIFI_Init+0xcc>
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8003ffa:	2f00      	cmp	r7, #0
 8003ffc:	d0b8      	beq.n	8003f70 <SPI_WIFI_Init+0x7c>
 8003ffe:	e7f1      	b.n	8003fe4 <SPI_WIFI_Init+0xf0>
 8004000:	200007cc 	.word	0x200007cc
 8004004:	40003c00 	.word	0x40003c00
 8004008:	48001000 	.word	0x48001000

0800400c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800400c:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 800400e:	4802      	ldr	r0, [pc, #8]	; (8004018 <SPI_WIFI_DeInit+0xc>)
 8004010:	f7fe fd0c 	bl	8002a2c <HAL_SPI_DeInit>
  return 0;
}
 8004014:	2000      	movs	r0, #0
 8004016:	bd08      	pop	{r3, pc}
 8004018:	200007cc 	.word	0x200007cc

0800401c <SPI_WIFI_ReceiveData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800401c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	468a      	mov	sl, r1
 8004022:	4616      	mov	r6, r2
 8004024:	4680      	mov	r8, r0
  uint32_t tickstart = HAL_GetTick();
 8004026:	f7fc fdaf 	bl	8000b88 <HAL_GetTick>
 800402a:	4681      	mov	r9, r0
  int16_t length = 0;
  uint8_t tmp[2];
  
  HAL_SPIEx_FlushRxFifo(&hspi);
 800402c:	4837      	ldr	r0, [pc, #220]	; (800410c <SPI_WIFI_ReceiveData+0xf0>)
  
  WIFI_DISABLE_NSS(); 
  
  while (!WIFI_IS_CMDDATA_READY())
 800402e:	4c38      	ldr	r4, [pc, #224]	; (8004110 <SPI_WIFI_ReceiveData+0xf4>)
  HAL_SPIEx_FlushRxFifo(&hspi);
 8004030:	f7fe ff9b 	bl	8002f6a <HAL_SPIEx_FlushRxFifo>
  WIFI_DISABLE_NSS(); 
 8004034:	2201      	movs	r2, #1
 8004036:	4611      	mov	r1, r2
 8004038:	4835      	ldr	r0, [pc, #212]	; (8004110 <SPI_WIFI_ReceiveData+0xf4>)
 800403a:	f7fd f84f 	bl	80010dc <HAL_GPIO_WritePin>
 800403e:	200a      	movs	r0, #10
 8004040:	f7fc fda8 	bl	8000b94 <HAL_Delay>
  while (!WIFI_IS_CMDDATA_READY())
 8004044:	2102      	movs	r1, #2
 8004046:	4620      	mov	r0, r4
 8004048:	f7fd f842 	bl	80010d0 <HAL_GPIO_ReadPin>
 800404c:	2801      	cmp	r0, #1
 800404e:	4601      	mov	r1, r0
 8004050:	d141      	bne.n	80040d6 <SPI_WIFI_ReceiveData+0xba>
    {
      return -1;
    }
  }
  
  WIFI_ENABLE_NSS(); 
 8004052:	2200      	movs	r2, #0
 8004054:	482e      	ldr	r0, [pc, #184]	; (8004110 <SPI_WIFI_ReceiveData+0xf4>)
  
  while (WIFI_IS_CMDDATA_READY())
 8004056:	4f2e      	ldr	r7, [pc, #184]	; (8004110 <SPI_WIFI_ReceiveData+0xf4>)
  WIFI_ENABLE_NSS(); 
 8004058:	f7fd f840 	bl	80010dc <HAL_GPIO_WritePin>
 800405c:	200a      	movs	r0, #10
 800405e:	f7fc fd99 	bl	8000b94 <HAL_Delay>
  while (WIFI_IS_CMDDATA_READY())
 8004062:	4644      	mov	r4, r8
 8004064:	2102      	movs	r1, #2
 8004066:	4638      	mov	r0, r7
 8004068:	f7fd f832 	bl	80010d0 <HAL_GPIO_ReadPin>
 800406c:	eba4 0508 	sub.w	r5, r4, r8
 8004070:	b2ad      	uxth	r5, r5
 8004072:	2801      	cmp	r0, #1
 8004074:	fa0f fb85 	sxth.w	fp, r5
 8004078:	d121      	bne.n	80040be <SPI_WIFI_ReceiveData+0xa2>
  {
    if((length < len) || (!len))
 800407a:	45d3      	cmp	fp, sl
 800407c:	db02      	blt.n	8004084 <SPI_WIFI_ReceiveData+0x68>
 800407e:	f1ba 0f00 	cmp.w	sl, #0
 8004082:	d11c      	bne.n	80040be <SPI_WIFI_ReceiveData+0xa2>
    {
      HAL_SPI_Receive(&hspi, tmp, 1, timeout) ;	   
 8004084:	4633      	mov	r3, r6
 8004086:	2201      	movs	r2, #1
 8004088:	a901      	add	r1, sp, #4
 800408a:	4820      	ldr	r0, [pc, #128]	; (800410c <SPI_WIFI_ReceiveData+0xf0>)
 800408c:	f7fe fec4 	bl	8002e18 <HAL_SPI_Receive>
      /* let some time to hardware to change CMDDATA signal */
      if(tmp[1] == 0x15)
 8004090:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004094:	2b15      	cmp	r3, #21
 8004096:	d102      	bne.n	800409e <SPI_WIFI_ReceiveData+0x82>
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004098:	2001      	movs	r0, #1
 800409a:	f7fc fd7b 	bl	8000b94 <HAL_Delay>
      if(!WIFI_IS_CMDDATA_READY())
 800409e:	2102      	movs	r1, #2
 80040a0:	4638      	mov	r0, r7
 80040a2:	f7fd f815 	bl	80010d0 <HAL_GPIO_ReadPin>
 80040a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80040aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pData[0] = tmp[0];
 80040ae:	7022      	strb	r2, [r4, #0]
      if(!WIFI_IS_CMDDATA_READY())
 80040b0:	2801      	cmp	r0, #1
 80040b2:	d019      	beq.n	80040e8 <SPI_WIFI_ReceiveData+0xcc>
        if(tmp[1] == 0x15)
 80040b4:	2b15      	cmp	r3, #21
 80040b6:	d117      	bne.n	80040e8 <SPI_WIFI_ReceiveData+0xcc>
          length++;
 80040b8:	3501      	adds	r5, #1
 80040ba:	fa0f fb85 	sxth.w	fp, r5
  WIFI_DISABLE_NSS(); 
 80040be:	2201      	movs	r2, #1
 80040c0:	4813      	ldr	r0, [pc, #76]	; (8004110 <SPI_WIFI_ReceiveData+0xf4>)
 80040c2:	4611      	mov	r1, r2
 80040c4:	f7fd f80a 	bl	80010dc <HAL_GPIO_WritePin>
 80040c8:	200a      	movs	r0, #10
 80040ca:	f7fc fd63 	bl	8000b94 <HAL_Delay>
}
 80040ce:	4658      	mov	r0, fp
 80040d0:	b003      	add	sp, #12
 80040d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 80040d6:	f7fc fd57 	bl	8000b88 <HAL_GetTick>
 80040da:	eba0 0009 	sub.w	r0, r0, r9
 80040de:	42b0      	cmp	r0, r6
 80040e0:	d9b0      	bls.n	8004044 <SPI_WIFI_ReceiveData+0x28>
      return -1;
 80040e2:	f04f 3bff 	mov.w	fp, #4294967295
 80040e6:	e7f2      	b.n	80040ce <SPI_WIFI_ReceiveData+0xb2>
      pData[1] = tmp[1];
 80040e8:	7063      	strb	r3, [r4, #1]
      if((HAL_GetTick() - tickstart ) > timeout)
 80040ea:	f7fc fd4d 	bl	8000b88 <HAL_GetTick>
 80040ee:	eba0 0009 	sub.w	r0, r0, r9
 80040f2:	4286      	cmp	r6, r0
      pData  += 2;
 80040f4:	f104 0402 	add.w	r4, r4, #2
      if((HAL_GetTick() - tickstart ) > timeout)
 80040f8:	d2b4      	bcs.n	8004064 <SPI_WIFI_ReceiveData+0x48>
        WIFI_DISABLE_NSS(); 
 80040fa:	2201      	movs	r2, #1
 80040fc:	4611      	mov	r1, r2
 80040fe:	4804      	ldr	r0, [pc, #16]	; (8004110 <SPI_WIFI_ReceiveData+0xf4>)
 8004100:	f7fc ffec 	bl	80010dc <HAL_GPIO_WritePin>
 8004104:	200a      	movs	r0, #10
 8004106:	f7fc fd45 	bl	8000b94 <HAL_Delay>
 800410a:	e7ea      	b.n	80040e2 <SPI_WIFI_ReceiveData+0xc6>
 800410c:	200007cc 	.word	0x200007cc
 8004110:	48001000 	.word	0x48001000

08004114 <SPI_WIFI_SendData>:
{
 8004114:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004118:	4605      	mov	r5, r0
 800411a:	460c      	mov	r4, r1
 800411c:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800411e:	f7fc fd33 	bl	8000b88 <HAL_GetTick>
  while (!WIFI_IS_CMDDATA_READY())
 8004122:	4f1f      	ldr	r7, [pc, #124]	; (80041a0 <SPI_WIFI_SendData+0x8c>)
  uint32_t tickstart = HAL_GetTick();
 8004124:	4680      	mov	r8, r0
  while (!WIFI_IS_CMDDATA_READY())
 8004126:	2102      	movs	r1, #2
 8004128:	4638      	mov	r0, r7
 800412a:	f7fc ffd1 	bl	80010d0 <HAL_GPIO_ReadPin>
 800412e:	2801      	cmp	r0, #1
 8004130:	4601      	mov	r1, r0
 8004132:	d122      	bne.n	800417a <SPI_WIFI_SendData+0x66>
  WIFI_ENABLE_NSS(); 
 8004134:	2200      	movs	r2, #0
 8004136:	481a      	ldr	r0, [pc, #104]	; (80041a0 <SPI_WIFI_SendData+0x8c>)
 8004138:	f7fc ffd0 	bl	80010dc <HAL_GPIO_WritePin>
 800413c:	200a      	movs	r0, #10
 800413e:	f7fc fd29 	bl	8000b94 <HAL_Delay>
  if (len > 1)
 8004142:	2c01      	cmp	r4, #1
 8004144:	d906      	bls.n	8004154 <SPI_WIFI_SendData+0x40>
   if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, timeout) != HAL_OK)
 8004146:	4633      	mov	r3, r6
 8004148:	0862      	lsrs	r2, r4, #1
 800414a:	4629      	mov	r1, r5
 800414c:	4815      	ldr	r0, [pc, #84]	; (80041a4 <SPI_WIFI_SendData+0x90>)
 800414e:	f7fe fc83 	bl	8002a58 <HAL_SPI_Transmit>
 8004152:	b9c0      	cbnz	r0, 8004186 <SPI_WIFI_SendData+0x72>
  if ( len & 1)
 8004154:	07e3      	lsls	r3, r4, #31
 8004156:	d50e      	bpl.n	8004176 <SPI_WIFI_SendData+0x62>
    Padding[0] = pdata[len-1];
 8004158:	4425      	add	r5, r4
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 800415a:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 800415c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004160:	f88d 3004 	strb.w	r3, [sp, #4]
    Padding[1] = '\n';
 8004164:	230a      	movs	r3, #10
 8004166:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 800416a:	a901      	add	r1, sp, #4
 800416c:	4633      	mov	r3, r6
 800416e:	480d      	ldr	r0, [pc, #52]	; (80041a4 <SPI_WIFI_SendData+0x90>)
 8004170:	f7fe fc72 	bl	8002a58 <HAL_SPI_Transmit>
 8004174:	b938      	cbnz	r0, 8004186 <SPI_WIFI_SendData+0x72>
  return len;
 8004176:	b220      	sxth	r0, r4
 8004178:	e00f      	b.n	800419a <SPI_WIFI_SendData+0x86>
    if((HAL_GetTick() - tickstart ) > timeout)
 800417a:	f7fc fd05 	bl	8000b88 <HAL_GetTick>
 800417e:	eba0 0008 	sub.w	r0, r0, r8
 8004182:	42b0      	cmp	r0, r6
 8004184:	d9cf      	bls.n	8004126 <SPI_WIFI_SendData+0x12>
      WIFI_DISABLE_NSS();       
 8004186:	2201      	movs	r2, #1
 8004188:	4611      	mov	r1, r2
 800418a:	4805      	ldr	r0, [pc, #20]	; (80041a0 <SPI_WIFI_SendData+0x8c>)
 800418c:	f7fc ffa6 	bl	80010dc <HAL_GPIO_WritePin>
 8004190:	200a      	movs	r0, #10
 8004192:	f7fc fcff 	bl	8000b94 <HAL_Delay>
      return -1;
 8004196:	f04f 30ff 	mov.w	r0, #4294967295
}
 800419a:	b002      	add	sp, #8
 800419c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041a0:	48001000 	.word	0x48001000
 80041a4:	200007cc 	.word	0x200007cc

080041a8 <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 80041a8:	f7fc bcf4 	b.w	8000b94 <HAL_Delay>

080041ac <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041ac:	4b99      	ldr	r3, [pc, #612]	; (8004414 <MX_GPIO_Init+0x268>)
{
 80041ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80041b4:	4e98      	ldr	r6, [pc, #608]	; (8004418 <MX_GPIO_Init+0x26c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80041b6:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8004420 <MX_GPIO_Init+0x274>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80041ba:	f8df 9268 	ldr.w	r9, [pc, #616]	; 8004424 <MX_GPIO_Init+0x278>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80041be:	f8df a268 	ldr.w	sl, [pc, #616]	; 8004428 <MX_GPIO_Init+0x27c>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041c2:	f8df b268 	ldr.w	fp, [pc, #616]	; 800442c <MX_GPIO_Init+0x280>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041c6:	f042 0210 	orr.w	r2, r2, #16
 80041ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80041cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 80041ce:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041d0:	f002 0210 	and.w	r2, r2, #16
 80041d4:	9202      	str	r2, [sp, #8]
 80041d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041da:	f042 0204 	orr.w	r2, r2, #4
 80041de:	64da      	str	r2, [r3, #76]	; 0x4c
 80041e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041e2:	f002 0204 	and.w	r2, r2, #4
 80041e6:	9203      	str	r2, [sp, #12]
 80041e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041ec:	f042 0201 	orr.w	r2, r2, #1
 80041f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80041f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041f4:	f002 0201 	and.w	r2, r2, #1
 80041f8:	9204      	str	r2, [sp, #16]
 80041fa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041fe:	f042 0202 	orr.w	r2, r2, #2
 8004202:	64da      	str	r2, [r3, #76]	; 0x4c
 8004204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004206:	f002 0202 	and.w	r2, r2, #2
 800420a:	9205      	str	r2, [sp, #20]
 800420c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800420e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004210:	f042 0208 	orr.w	r2, r2, #8
 8004214:	64da      	str	r2, [r3, #76]	; 0x4c
 8004216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800421e:	4630      	mov	r0, r6
 8004220:	2200      	movs	r2, #0
 8004222:	f240 1115 	movw	r1, #277	; 0x115
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004226:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8004228:	f7fc ff58 	bl	80010dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800422c:	2200      	movs	r2, #0
 800422e:	f248 1104 	movw	r1, #33028	; 0x8104
 8004232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004236:	f7fc ff51 	bl	80010dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800423a:	4640      	mov	r0, r8
 800423c:	2200      	movs	r2, #0
 800423e:	f24f 0134 	movw	r1, #61492	; 0xf034
 8004242:	f7fc ff4b 	bl	80010dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8004246:	4648      	mov	r0, r9
 8004248:	2200      	movs	r2, #0
 800424a:	f243 0181 	movw	r1, #12417	; 0x3081
 800424e:	f7fc ff45 	bl	80010dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004252:	2200      	movs	r2, #0
 8004254:	4650      	mov	r0, sl
 8004256:	f44f 7110 	mov.w	r1, #576	; 0x240
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425a:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800425c:	f7fc ff3e 	bl	80010dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004260:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004262:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004266:	a907      	add	r1, sp, #28
 8004268:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800426a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800426c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004270:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004272:	f7fc fdb7 	bl	8000de4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8004276:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004278:	a907      	add	r1, sp, #28
 800427a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800427c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800427e:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004282:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004284:	f7fc fdae 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8004288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800428c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800428e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004290:	4b62      	ldr	r3, [pc, #392]	; (800441c <MX_GPIO_Init+0x270>)
 8004292:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8004294:	4650      	mov	r0, sl

  /*configure GPIO pins: a0-a2 for relays & actuator*/
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004296:	2603      	movs	r6, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004298:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800429a:	f7fc fda3 	bl	8000de4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
 800429e:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042a0:	a907      	add	r1, sp, #28
 80042a2:	4650      	mov	r0, sl

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a4:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
 80042a6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042a8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042aa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ac:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ae:	f7fc fd99 	bl	8000de4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80042b2:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b4:	a907      	add	r1, sp, #28
 80042b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80042ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80042bc:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80042be:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c4:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c6:	f7fc fd8d 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80042ca:	f248 1204 	movw	r2, #33028	; 0x8104
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ce:	a907      	add	r1, sp, #28
 80042d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80042d4:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042d6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042da:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042dc:	f7fc fd82 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80042e0:	9b00      	ldr	r3, [sp, #0]
 80042e2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80042e4:	a907      	add	r1, sp, #28
 80042e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ea:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ee:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042f0:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80042f2:	f7fc fd77 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80042f6:	220b      	movs	r2, #11
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80042f8:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80042fa:	a907      	add	r1, sp, #28
 80042fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004300:	9208      	str	r2, [sp, #32]
 8004302:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8004304:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004306:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8004308:	f7fc fd6c 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin|ARD_D10_Pin;
 800430c:	23e4      	movs	r3, #228	; 0xe4
 800430e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004310:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004312:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004318:	930b      	str	r3, [sp, #44]	; 0x2c
 800431a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431c:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004320:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004322:	f7fc fd5f 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004326:	a907      	add	r1, sp, #28
 8004328:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800432a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800432c:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004332:	f7fc fd57 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004336:	9a01      	ldr	r2, [sp, #4]
 8004338:	9208      	str	r2, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800433a:	a907      	add	r1, sp, #28
 800433c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800433e:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004340:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004342:	f7fc fd4f 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8004346:	f24f 0234 	movw	r2, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434a:	a907      	add	r1, sp, #28
 800434c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800434e:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004350:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004352:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004354:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004356:	f7fc fd45 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 800435a:	f64c 4204 	movw	r2, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800435e:	a907      	add	r1, sp, #28
 8004360:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8004362:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004364:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004368:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800436a:	f7fc fd3b 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800436e:	f243 0281 	movw	r2, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004372:	a907      	add	r1, sp, #28
 8004374:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8004376:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004378:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800437e:	f7fc fd31 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004382:	f44f 7210 	mov.w	r2, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004386:	a907      	add	r1, sp, #28
 8004388:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800438a:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800438c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004390:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004392:	f7fc fd27 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004396:	f44f 72c0 	mov.w	r2, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800439a:	a907      	add	r1, sp, #28
 800439c:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800439e:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043a0:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043a6:	f7fc fd1d 	bl	8000de4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043aa:	9b00      	ldr	r3, [sp, #0]
 80043ac:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80043ae:	a907      	add	r1, sp, #28
 80043b0:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80043b2:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b4:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b8:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80043ba:	f7fc fd13 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80043be:	2378      	movs	r3, #120	; 0x78
 80043c0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043c2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043c4:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043c6:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043c8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ca:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043cc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ce:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043d0:	f7fc fd08 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80043d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043d8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043da:	2312      	movs	r3, #18
 80043dc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043de:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80043e0:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043e2:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80043e4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043e6:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e8:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ea:	f7fc fcfb 	bl	8000de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80043ee:	4622      	mov	r2, r4
 80043f0:	4621      	mov	r1, r4
 80043f2:	2017      	movs	r0, #23
 80043f4:	f7fc fbee 	bl	8000bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043f8:	2017      	movs	r0, #23
 80043fa:	f7fc fc1f 	bl	8000c3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80043fe:	4622      	mov	r2, r4
 8004400:	4621      	mov	r1, r4
 8004402:	2028      	movs	r0, #40	; 0x28
 8004404:	f7fc fbe6 	bl	8000bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004408:	2028      	movs	r0, #40	; 0x28
 800440a:	f7fc fc17 	bl	8000c3c <HAL_NVIC_EnableIRQ>

}
 800440e:	b00d      	add	sp, #52	; 0x34
 8004410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004414:	40021000 	.word	0x40021000
 8004418:	48001000 	.word	0x48001000
 800441c:	10210000 	.word	0x10210000
 8004420:	48000400 	.word	0x48000400
 8004424:	48000c00 	.word	0x48000c00
 8004428:	48000800 	.word	0x48000800
 800442c:	10110000 	.word	0x10110000

08004430 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004430:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8004432:	4815      	ldr	r0, [pc, #84]	; (8004488 <MX_I2C2_Init+0x58>)
  hi2c2.Init.Timing = 0x10909CEC;
 8004434:	4b15      	ldr	r3, [pc, #84]	; (800448c <MX_I2C2_Init+0x5c>)
 8004436:	4916      	ldr	r1, [pc, #88]	; (8004490 <MX_I2C2_Init+0x60>)
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004438:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x10909CEC;
 800443a:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004442:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004444:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004446:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004448:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800444a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800444c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800444e:	f7fc ff9e 	bl	800138e <HAL_I2C_Init>
 8004452:	b118      	cbz	r0, 800445c <MX_I2C2_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004454:	2142      	movs	r1, #66	; 0x42
 8004456:	480f      	ldr	r0, [pc, #60]	; (8004494 <MX_I2C2_Init+0x64>)
 8004458:	f7ff f9b0 	bl	80037bc <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800445c:	2100      	movs	r1, #0
 800445e:	480a      	ldr	r0, [pc, #40]	; (8004488 <MX_I2C2_Init+0x58>)
 8004460:	f7fd f976 	bl	8001750 <HAL_I2CEx_ConfigAnalogFilter>
 8004464:	b118      	cbz	r0, 800446e <MX_I2C2_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004466:	2149      	movs	r1, #73	; 0x49
 8004468:	480a      	ldr	r0, [pc, #40]	; (8004494 <MX_I2C2_Init+0x64>)
 800446a:	f7ff f9a7 	bl	80037bc <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800446e:	2100      	movs	r1, #0
 8004470:	4805      	ldr	r0, [pc, #20]	; (8004488 <MX_I2C2_Init+0x58>)
 8004472:	f7fd f993 	bl	800179c <HAL_I2CEx_ConfigDigitalFilter>
 8004476:	b128      	cbz	r0, 8004484 <MX_I2C2_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004478:	2150      	movs	r1, #80	; 0x50
 800447a:	4806      	ldr	r0, [pc, #24]	; (8004494 <MX_I2C2_Init+0x64>)
  }

}
 800447c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004480:	f7ff b99c 	b.w	80037bc <_Error_Handler>
 8004484:	bd08      	pop	{r3, pc}
 8004486:	bf00      	nop
 8004488:	20000830 	.word	0x20000830
 800448c:	10909cec 	.word	0x10909cec
 8004490:	40005800 	.word	0x40005800
 8004494:	08005702 	.word	0x08005702

08004498 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004498:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C2)
 800449a:	6802      	ldr	r2, [r0, #0]
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <HAL_I2C_MspInit+0x44>)
 800449e:	429a      	cmp	r2, r3
 80044a0:	d119      	bne.n	80044d6 <HAL_I2C_MspInit+0x3e>
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80044a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80044a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044a8:	2312      	movs	r3, #18
 80044aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044ac:	2301      	movs	r3, #1
 80044ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b0:	2303      	movs	r3, #3
 80044b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044b4:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b6:	eb0d 0103 	add.w	r1, sp, r3
 80044ba:	4809      	ldr	r0, [pc, #36]	; (80044e0 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044be:	f7fc fc91 	bl	8000de4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80044c2:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <HAL_I2C_MspInit+0x4c>)
 80044c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044c6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80044ca:	659a      	str	r2, [r3, #88]	; 0x58
 80044cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80044d6:	b007      	add	sp, #28
 80044d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80044dc:	40005800 	.word	0x40005800
 80044e0:	48000400 	.word	0x48000400
 80044e4:	40021000 	.word	0x40021000

080044e8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C2)
 80044e8:	6802      	ldr	r2, [r0, #0]
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <HAL_I2C_MspDeInit+0x20>)
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d109      	bne.n	8004504 <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80044f0:	4a06      	ldr	r2, [pc, #24]	; (800450c <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80044f2:	4807      	ldr	r0, [pc, #28]	; (8004510 <HAL_I2C_MspDeInit+0x28>)
    __HAL_RCC_I2C2_CLK_DISABLE();
 80044f4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80044f6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80044fa:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80044fc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004500:	f7fc bd4c 	b.w	8000f9c <HAL_GPIO_DeInit>
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40005800 	.word	0x40005800
 800450c:	40021000 	.word	0x40021000
 8004510:	48000400 	.word	0x48000400

08004514 <main>:
  * action as required
  *
  * @retval None
  */
int main(void)
{
 8004514:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004516:	f7fc fb23 	bl	8000b60 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800451a:	f7ff f8ed 	bl	80036f8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800451e:	f7ff fe45 	bl	80041ac <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8004522:	f7ff f973 	bl	800380c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8004526:	f7ff ff83 	bl	8004430 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800452a:	f000 f86b 	bl	8004604 <MX_QUADSPI_Init>
  //MX_SPI3_Init();
  MX_USART1_UART_Init();
 800452e:	f000 f9a9 	bl	8004884 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8004532:	f000 f9c9 	bl	80048c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004536:	f000 fa2f 	bl	8004998 <MX_USB_OTG_FS_PCD_Init>
  BSP_TSENSOR_Init();
 800453a:	f000 f8e5 	bl	8004708 <BSP_TSENSOR_Init>
  SPI_WIFI_Init();
 800453e:	f7ff fcd9 	bl	8003ef4 <SPI_WIFI_Init>
  WIFI_Init();
 8004542:	f000 fa8d 	bl	8004a60 <WIFI_Init>

  //Connect to Access Point
  stat = WIFI_Connect("LukeandMichelle","10122010",  WIFI_ECN_WPA2_PSK);
 8004546:	2203      	movs	r2, #3
 8004548:	4922      	ldr	r1, [pc, #136]	; (80045d4 <main+0xc0>)
 800454a:	4823      	ldr	r0, [pc, #140]	; (80045d8 <main+0xc4>)
 800454c:	f000 faac 	bl	8004aa8 <WIFI_Connect>
  if (stat != WIFI_STATUS_OK){
 8004550:	b120      	cbz	r0, 800455c <main+0x48>
	  stat = WIFI_Connect("iotclass","myiotclass",  WIFI_ECN_WPA2_PSK);
 8004552:	2203      	movs	r2, #3
 8004554:	4921      	ldr	r1, [pc, #132]	; (80045dc <main+0xc8>)
 8004556:	4822      	ldr	r0, [pc, #136]	; (80045e0 <main+0xcc>)
 8004558:	f000 faa6 	bl	8004aa8 <WIFI_Connect>
  }

  //Connect to ThingSpeak
  WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, server, IP_Addr, 80, 0);
 800455c:	4e21      	ldr	r6, [pc, #132]	; (80045e4 <main+0xd0>)
  //WIFI_SendData((uint8_t)0, WIFI_connection, sizeof(WIFI_connection), &XferSize, Timeout);

  while (1){
	  BSP_TSENSOR_ReadTemp(&int_temp);
 800455e:	4f22      	ldr	r7, [pc, #136]	; (80045e8 <main+0xd4>)
  WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, server, IP_Addr, 80, 0);
 8004560:	6832      	ldr	r2, [r6, #0]
	  sprintf(WIFI_xmit, "field1=%u&field2=%.2f&field3=%.2f&field4=%u",
 8004562:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8004600 <main+0xec>
 8004566:	4d21      	ldr	r5, [pc, #132]	; (80045ec <main+0xd8>)
  WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, server, IP_Addr, 80, 0);
 8004568:	2100      	movs	r1, #0
 800456a:	2350      	movs	r3, #80	; 0x50
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	9101      	str	r1, [sp, #4]
 8004570:	4b1f      	ldr	r3, [pc, #124]	; (80045f0 <main+0xdc>)
 8004572:	4608      	mov	r0, r1
 8004574:	f000 faac 	bl	8004ad0 <WIFI_OpenClientConnection>
	  BSP_TSENSOR_ReadTemp(&int_temp);
 8004578:	481b      	ldr	r0, [pc, #108]	; (80045e8 <main+0xd4>)
 800457a:	f000 f8d7 	bl	800472c <BSP_TSENSOR_ReadTemp>
	  sprintf(WIFI_xmit, "field1=%u&field2=%.2f&field3=%.2f&field4=%u",
 800457e:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <main+0xe0>)
 8004580:	f898 4000 	ldrb.w	r4, [r8]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	9304      	str	r3, [sp, #16]
 8004588:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <main+0xe4>)
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	f7fb ffdc 	bl	8000548 <__aeabi_f2d>
 8004590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004594:	6838      	ldr	r0, [r7, #0]
 8004596:	f7fb ffd7 	bl	8000548 <__aeabi_f2d>
 800459a:	4622      	mov	r2, r4
 800459c:	e9cd 0100 	strd	r0, r1, [sp]
 80045a0:	4916      	ldr	r1, [pc, #88]	; (80045fc <main+0xe8>)
 80045a2:	4628      	mov	r0, r5
 80045a4:	f000 fb38 	bl	8004c18 <siprintf>
	  mode, int_temp, ext_temp, errorNum);
	  WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, server, IP_Addr, 80, 0);
 80045a8:	2400      	movs	r4, #0
 80045aa:	2350      	movs	r3, #80	; 0x50
 80045ac:	6832      	ldr	r2, [r6, #0]
 80045ae:	4621      	mov	r1, r4
 80045b0:	e88d 0018 	stmia.w	sp, {r3, r4}
 80045b4:	4620      	mov	r0, r4
 80045b6:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <main+0xdc>)
 80045b8:	f000 fa8a 	bl	8004ad0 <WIFI_OpenClientConnection>
	  thingSpeakUpdate(WIFI_xmit);
 80045bc:	4628      	mov	r0, r5
 80045be:	f7ff f8ff 	bl	80037c0 <thingSpeakUpdate>
	  WIFI_CloseClientConnection(0);
 80045c2:	4620      	mov	r0, r4
 80045c4:	f000 faac 	bl	8004b20 <WIFI_CloseClientConnection>
	  HAL_Delay(15000);
 80045c8:	f643 2098 	movw	r0, #15000	; 0x3a98
 80045cc:	f7fc fae2 	bl	8000b94 <HAL_Delay>
 80045d0:	e7d2      	b.n	8004578 <main+0x64>
 80045d2:	bf00      	nop
 80045d4:	0800570f 	.word	0x0800570f
 80045d8:	08005718 	.word	0x08005718
 80045dc:	08005728 	.word	0x08005728
 80045e0:	0800572a 	.word	0x0800572a
 80045e4:	20000014 	.word	0x20000014
 80045e8:	2000020c 	.word	0x2000020c
 80045ec:	200001c0 	.word	0x200001c0
 80045f0:	20000010 	.word	0x20000010
 80045f4:	20000204 	.word	0x20000204
 80045f8:	20000208 	.word	0x20000208
 80045fc:	08005733 	.word	0x08005733
 8004600:	20000210 	.word	0x20000210

08004604 <MX_QUADSPI_Init>:

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{

  hqspi.Instance = QUADSPI;
 8004604:	480b      	ldr	r0, [pc, #44]	; (8004634 <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 255;
 8004606:	4a0c      	ldr	r2, [pc, #48]	; (8004638 <MX_QUADSPI_Init+0x34>)
{
 8004608:	b508      	push	{r3, lr}
  hqspi.Init.ClockPrescaler = 255;
 800460a:	23ff      	movs	r3, #255	; 0xff
 800460c:	e880 000c 	stmia.w	r0, {r2, r3}
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004610:	2300      	movs	r3, #0
  hqspi.Init.FifoThreshold = 1;
 8004612:	2201      	movs	r2, #1
 8004614:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004616:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8004618:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800461a:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800461c:	6183      	str	r3, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800461e:	f7fd f9ef 	bl	8001a00 <HAL_QSPI_Init>
 8004622:	b128      	cbz	r0, 8004630 <MX_QUADSPI_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004624:	2140      	movs	r1, #64	; 0x40
 8004626:	4805      	ldr	r0, [pc, #20]	; (800463c <MX_QUADSPI_Init+0x38>)
  }

}
 8004628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800462c:	f7ff b8c6 	b.w	80037bc <_Error_Handler>
 8004630:	bd08      	pop	{r3, pc}
 8004632:	bf00      	nop
 8004634:	2000087c 	.word	0x2000087c
 8004638:	a0001000 	.word	0xa0001000
 800463c:	08005772 	.word	0x08005772

08004640 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8004640:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(qspiHandle->Instance==QUADSPI)
 8004642:	6802      	ldr	r2, [r0, #0]
 8004644:	4b10      	ldr	r3, [pc, #64]	; (8004688 <HAL_QSPI_MspInit+0x48>)
 8004646:	429a      	cmp	r2, r3
 8004648:	d11b      	bne.n	8004682 <HAL_QSPI_MspInit+0x42>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800464a:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 800464e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004652:	a901      	add	r1, sp, #4
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004656:	480d      	ldr	r0, [pc, #52]	; (800468c <HAL_QSPI_MspInit+0x4c>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800465c:	651a      	str	r2, [r3, #80]	; 0x50
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8004668:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800466c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466e:	2302      	movs	r3, #2
 8004670:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004672:	2300      	movs	r3, #0
 8004674:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004676:	2303      	movs	r3, #3
 8004678:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800467a:	230a      	movs	r3, #10
 800467c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800467e:	f7fc fbb1 	bl	8000de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8004682:	b007      	add	sp, #28
 8004684:	f85d fb04 	ldr.w	pc, [sp], #4
 8004688:	a0001000 	.word	0xa0001000
 800468c:	48001000 	.word	0x48001000

08004690 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004690:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI3)
 8004692:	6802      	ldr	r2, [r0, #0]
 8004694:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <HAL_SPI_MspInit+0x44>)
 8004696:	429a      	cmp	r2, r3
 8004698:	d119      	bne.n	80046ce <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800469a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800469e:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 80046a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046a2:	480d      	ldr	r0, [pc, #52]	; (80046d8 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80046a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046a8:	659a      	str	r2, [r3, #88]	; 0x58
 80046aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80046b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80046b8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c2:	2303      	movs	r3, #3
 80046c4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80046c6:	2306      	movs	r3, #6
 80046c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ca:	f7fc fb8b 	bl	8000de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80046ce:	b007      	add	sp, #28
 80046d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80046d4:	40003c00 	.word	0x40003c00
 80046d8:	48000800 	.word	0x48000800

080046dc <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{

  if(spiHandle->Instance==SPI3)
 80046dc:	6802      	ldr	r2, [r0, #0]
 80046de:	4b07      	ldr	r3, [pc, #28]	; (80046fc <HAL_SPI_MspDeInit+0x20>)
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d109      	bne.n	80046f8 <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80046e4:	4a06      	ldr	r2, [pc, #24]	; (8004700 <HAL_SPI_MspDeInit+0x24>)
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80046e6:	4807      	ldr	r0, [pc, #28]	; (8004704 <HAL_SPI_MspDeInit+0x28>)
    __HAL_RCC_SPI3_CLK_DISABLE();
 80046e8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80046ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046ee:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80046f0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80046f4:	f7fc bc52 	b.w	8000f9c <HAL_GPIO_DeInit>
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40003c00 	.word	0x40003c00
 8004700:	40021000 	.word	0x40021000
 8004704:	48000800 	.word	0x48000800

08004708 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8004708:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800470a:	4c06      	ldr	r4, [pc, #24]	; (8004724 <BSP_TSENSOR_Init+0x1c>)
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <BSP_TSENSOR_Init+0x20>)
 800470e:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8004710:	f7fc f956 	bl	80009c0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	2100      	movs	r1, #0
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	20be      	movs	r0, #190	; 0xbe
 800471c:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 800471e:	2000      	movs	r0, #0
 8004720:	bd10      	pop	{r4, pc}
 8004722:	bf00      	nop
 8004724:	20000214 	.word	0x20000214
 8004728:	20000000 	.word	0x20000000

0800472c <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
void BSP_TSENSOR_ReadTemp(float* tmp)
{ 
  *tmp = tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <BSP_TSENSOR_ReadTemp+0x14>)
 800472e:	681b      	ldr	r3, [r3, #0]
{ 
 8004730:	b510      	push	{r4, lr}
  *tmp = tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8004732:	68db      	ldr	r3, [r3, #12]
{ 
 8004734:	4604      	mov	r4, r0
  *tmp = tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8004736:	20be      	movs	r0, #190	; 0xbe
 8004738:	4798      	blx	r3
 800473a:	ed84 0a00 	vstr	s0, [r4]
 800473e:	bd10      	pop	{r4, pc}
 8004740:	20000214 	.word	0x20000214

08004744 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004744:	4b21      	ldr	r3, [pc, #132]	; (80047cc <HAL_MspInit+0x88>)
{
 8004746:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004748:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	661a      	str	r2, [r3, #96]	; 0x60
 8004750:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004752:	f002 0201 	and.w	r2, r2, #1
 8004756:	9200      	str	r2, [sp, #0]
 8004758:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800475c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004760:	659a      	str	r2, [r3, #88]	; 0x58
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004768:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800476a:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800476c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800476e:	f7fc fa1f 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004772:	2200      	movs	r2, #0
 8004774:	4611      	mov	r1, r2
 8004776:	f06f 000b 	mvn.w	r0, #11
 800477a:	f7fc fa2b 	bl	8000bd4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800477e:	2200      	movs	r2, #0
 8004780:	4611      	mov	r1, r2
 8004782:	f06f 000a 	mvn.w	r0, #10
 8004786:	f7fc fa25 	bl	8000bd4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800478a:	2200      	movs	r2, #0
 800478c:	4611      	mov	r1, r2
 800478e:	f06f 0009 	mvn.w	r0, #9
 8004792:	f7fc fa1f 	bl	8000bd4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	4611      	mov	r1, r2
 800479a:	f06f 0004 	mvn.w	r0, #4
 800479e:	f7fc fa19 	bl	8000bd4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80047a2:	2200      	movs	r2, #0
 80047a4:	4611      	mov	r1, r2
 80047a6:	f06f 0003 	mvn.w	r0, #3
 80047aa:	f7fc fa13 	bl	8000bd4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80047ae:	2200      	movs	r2, #0
 80047b0:	4611      	mov	r1, r2
 80047b2:	f06f 0001 	mvn.w	r0, #1
 80047b6:	f7fc fa0d 	bl	8000bd4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	4611      	mov	r1, r2
 80047be:	f04f 30ff 	mov.w	r0, #4294967295
 80047c2:	f7fc fa07 	bl	8000bd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047c6:	b003      	add	sp, #12
 80047c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80047cc:	40021000 	.word	0x40021000

080047d0 <NMI_Handler>:
 80047d0:	4770      	bx	lr

080047d2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80047d2:	e7fe      	b.n	80047d2 <HardFault_Handler>

080047d4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80047d4:	e7fe      	b.n	80047d4 <MemManage_Handler>

080047d6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80047d6:	e7fe      	b.n	80047d6 <BusFault_Handler>

080047d8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80047d8:	e7fe      	b.n	80047d8 <UsageFault_Handler>

080047da <SVC_Handler>:
 80047da:	4770      	bx	lr

080047dc <DebugMon_Handler>:
 80047dc:	4770      	bx	lr

080047de <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80047de:	4770      	bx	lr

080047e0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80047e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047e2:	f7fc f9c9 	bl	8000b78 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80047ea:	f7fc ba56 	b.w	8000c9a <HAL_SYSTICK_IRQHandler>

080047ee <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80047ee:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80047f0:	2020      	movs	r0, #32
 80047f2:	f7fc fc79 	bl	80010e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80047f6:	2040      	movs	r0, #64	; 0x40
 80047f8:	f7fc fc76 	bl	80010e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80047fc:	2080      	movs	r0, #128	; 0x80
 80047fe:	f7fc fc73 	bl	80010e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004802:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800480a:	f7fc bc6d 	b.w	80010e8 <HAL_GPIO_EXTI_IRQHandler>

0800480e <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 800480e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004810:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004814:	f7fc fc68 	bl	80010e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004818:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800481c:	f7fc fc64 	bl	80010e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004820:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004824:	f7fc fc60 	bl	80010e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004828:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800482c:	f7fc fc5c 	bl	80010e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004830:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004838:	f7fc bc56 	b.w	80010e8 <HAL_GPIO_EXTI_IRQHandler>

0800483c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800483c:	490f      	ldr	r1, [pc, #60]	; (800487c <SystemInit+0x40>)
 800483e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004842:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <SystemInit+0x44>)
 800484c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800484e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8004856:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800485e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004862:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004864:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004868:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004870:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004872:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004878:	608b      	str	r3, [r1, #8]
 800487a:	4770      	bx	lr
 800487c:	e000ed00 	.word	0xe000ed00
 8004880:	40021000 	.word	0x40021000

08004884 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8004884:	480d      	ldr	r0, [pc, #52]	; (80048bc <MX_USART1_UART_Init+0x38>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8004886:	4a0e      	ldr	r2, [pc, #56]	; (80048c0 <MX_USART1_UART_Init+0x3c>)
{
 8004888:	b508      	push	{r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800488a:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 800488e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004892:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004896:	2300      	movs	r3, #0
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004898:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800489a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800489c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800489e:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048a0:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048a2:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048a4:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048a6:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048a8:	f7fe fdc1 	bl	800342e <HAL_UART_Init>
 80048ac:	b128      	cbz	r0, 80048ba <MX_USART1_UART_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80048ae:	2145      	movs	r1, #69	; 0x45
 80048b0:	4804      	ldr	r0, [pc, #16]	; (80048c4 <MX_USART1_UART_Init+0x40>)
  }

}
 80048b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80048b6:	f7fe bf81 	b.w	80037bc <_Error_Handler>
 80048ba:	bd08      	pop	{r3, pc}
 80048bc:	2000071c 	.word	0x2000071c
 80048c0:	40013800 	.word	0x40013800
 80048c4:	080057cc 	.word	0x080057cc

080048c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 80048c8:	480d      	ldr	r0, [pc, #52]	; (8004900 <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_7B;
 80048ca:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <MX_USART3_UART_Init+0x3c>)
{
 80048cc:	b508      	push	{r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_7B;
 80048ce:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 80048d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80048d6:	e880 100c 	stmia.w	r0, {r2, r3, ip}
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048da:	2300      	movs	r3, #0
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048dc:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048de:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80048e0:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048e2:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048e4:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80048e6:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048e8:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048ea:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80048ec:	f7fe fd9f 	bl	800342e <HAL_UART_Init>
 80048f0:	b128      	cbz	r0, 80048fe <MX_USART3_UART_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80048f2:	215a      	movs	r1, #90	; 0x5a
 80048f4:	4804      	ldr	r0, [pc, #16]	; (8004908 <MX_USART3_UART_Init+0x40>)
  }

}
 80048f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80048fa:	f7fe bf5f 	b.w	80037bc <_Error_Handler>
 80048fe:	bd08      	pop	{r3, pc}
 8004900:	200008c0 	.word	0x200008c0
 8004904:	40004800 	.word	0x40004800
 8004908:	080057cc 	.word	0x080057cc

0800490c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800490c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 800490e:	6803      	ldr	r3, [r0, #0]
 8004910:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <HAL_UART_MspInit+0x78>)
 8004912:	4293      	cmp	r3, r2
{
 8004914:	b089      	sub	sp, #36	; 0x24
  if(uartHandle->Instance==USART1)
 8004916:	d11a      	bne.n	800494e <HAL_UART_MspInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004918:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800491a:	481c      	ldr	r0, [pc, #112]	; (800498c <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800491c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800491e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004922:	661a      	str	r2, [r3, #96]	; 0x60
 8004924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800492e:	23c0      	movs	r3, #192	; 0xc0
 8004930:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004932:	2302      	movs	r3, #2
 8004934:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004936:	2300      	movs	r3, #0
 8004938:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493a:	2303      	movs	r3, #3
 800493c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800493e:	2307      	movs	r3, #7
 8004940:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004942:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004944:	f7fc fa4e 	bl	8000de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004948:	b009      	add	sp, #36	; 0x24
 800494a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(uartHandle->Instance==USART3)
 800494e:	4a10      	ldr	r2, [pc, #64]	; (8004990 <HAL_UART_MspInit+0x84>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d1f9      	bne.n	8004948 <HAL_UART_MspInit+0x3c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004954:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <HAL_UART_MspInit+0x7c>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004956:	480f      	ldr	r0, [pc, #60]	; (8004994 <HAL_UART_MspInit+0x88>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004958:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800495a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800495e:	659a      	str	r2, [r3, #88]	; 0x58
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004966:	9302      	str	r3, [sp, #8]
 8004968:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800496a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800496e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004970:	2302      	movs	r3, #2
 8004972:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004974:	2300      	movs	r3, #0
 8004976:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004978:	2303      	movs	r3, #3
 800497a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800497c:	2307      	movs	r3, #7
 800497e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004980:	a903      	add	r1, sp, #12
 8004982:	e7df      	b.n	8004944 <HAL_UART_MspInit+0x38>
 8004984:	40013800 	.word	0x40013800
 8004988:	40021000 	.word	0x40021000
 800498c:	48000400 	.word	0x48000400
 8004990:	40004800 	.word	0x40004800
 8004994:	48000c00 	.word	0x48000c00

08004998 <MX_USB_OTG_FS_PCD_Init>:
/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004998:	480d      	ldr	r0, [pc, #52]	; (80049d0 <MX_USB_OTG_FS_PCD_Init+0x38>)
{
 800499a:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800499c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80049a0:	2306      	movs	r3, #6
 80049a2:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80049a6:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80049a8:	2201      	movs	r2, #1
 80049aa:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80049ac:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80049ae:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80049b0:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80049b2:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80049b4:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80049b6:	6283      	str	r3, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80049b8:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80049ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80049bc:	f7fc ff13 	bl	80017e6 <HAL_PCD_Init>
 80049c0:	b128      	cbz	r0, 80049ce <MX_USB_OTG_FS_PCD_Init+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
 80049c2:	2145      	movs	r1, #69	; 0x45
 80049c4:	4803      	ldr	r0, [pc, #12]	; (80049d4 <MX_USB_OTG_FS_PCD_Init+0x3c>)
  }

}
 80049c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80049ca:	f7fe bef7 	b.w	80037bc <_Error_Handler>
 80049ce:	bd08      	pop	{r3, pc}
 80049d0:	200002ec 	.word	0x200002ec
 80049d4:	080057db 	.word	0x080057db

080049d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80049d8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80049da:	6803      	ldr	r3, [r0, #0]
 80049dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80049e0:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 80049e2:	d138      	bne.n	8004a56 <HAL_PCD_MspInit+0x7e>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049e4:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80049e6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80049ea:	a903      	add	r1, sp, #12
 80049ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80049f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049f2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80049f6:	f7fc f9f5 	bl	8000de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80049fa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80049fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a00:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a02:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004a04:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004a08:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a12:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004a14:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004a1a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a1c:	f7fc f9e2 	bl	8000de4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004a20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004a22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a26:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004a28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	d410      	bmi.n	8004a5a <HAL_PCD_MspInit+0x82>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	9302      	str	r3, [sp, #8]
 8004a48:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8004a4a:	f7fc ffab 	bl	80019a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a54:	65a3      	str	r3, [r4, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004a56:	b008      	add	sp, #32
 8004a58:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8004a5a:	f7fc ffa3 	bl	80019a4 <HAL_PWREx_EnableVddUSB>
}
 8004a5e:	e7fa      	b.n	8004a56 <HAL_PCD_MspInit+0x7e>

08004a60 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8004a60:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8004a62:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <WIFI_Init+0x30>)
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <WIFI_Init+0x34>)
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <WIFI_Init+0x38>)
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <WIFI_Init+0x3c>)
 8004a6e:	490c      	ldr	r1, [pc, #48]	; (8004aa0 <WIFI_Init+0x40>)
 8004a70:	480c      	ldr	r0, [pc, #48]	; (8004aa4 <WIFI_Init+0x44>)
 8004a72:	f7fe ffe1 	bl	8003a38 <ES_WIFI_RegisterBusIO>
 8004a76:	b940      	cbnz	r0, 8004a8a <WIFI_Init+0x2a>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004a78:	480a      	ldr	r0, [pc, #40]	; (8004aa4 <WIFI_Init+0x44>)
 8004a7a:	f7fe ff7d 	bl	8003978 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004a7e:	3000      	adds	r0, #0
 8004a80:	bf18      	it	ne
 8004a82:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8004a84:	b003      	add	sp, #12
 8004a86:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	e7fa      	b.n	8004a84 <WIFI_Init+0x24>
 8004a8e:	bf00      	nop
 8004a90:	0800401d 	.word	0x0800401d
 8004a94:	08004115 	.word	0x08004115
 8004a98:	0800400d 	.word	0x0800400d
 8004a9c:	080041a9 	.word	0x080041a9
 8004aa0:	08003ef5 	.word	0x08003ef5
 8004aa4:	20000938 	.word	0x20000938

08004aa8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8004aa8:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8004aaa:	4613      	mov	r3, r2
 8004aac:	460a      	mov	r2, r1
 8004aae:	4601      	mov	r1, r0
 8004ab0:	4806      	ldr	r0, [pc, #24]	; (8004acc <WIFI_Connect+0x24>)
 8004ab2:	f7fe ffd5 	bl	8003a60 <ES_WIFI_Connect>
 8004ab6:	b930      	cbnz	r0, 8004ac6 <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004ab8:	4804      	ldr	r0, [pc, #16]	; (8004acc <WIFI_Connect+0x24>)
 8004aba:	f7ff f811 	bl	8003ae0 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8004abe:	3000      	adds	r0, #0
 8004ac0:	bf18      	it	ne
 8004ac2:	2001      	movne	r0, #1
 8004ac4:	bd08      	pop	{r3, pc}
 8004ac6:	2001      	movs	r0, #1
       ret = WIFI_STATUS_OK;
    }
    
  }
  return ret;
}
 8004ac8:	bd08      	pop	{r3, pc}
 8004aca:	bf00      	nop
 8004acc:	20000938 	.word	0x20000938

08004ad0 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char* name, uint8_t* ipaddr, uint16_t port, uint16_t local_port)
{
 8004ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 8004ad2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8004ad6:	f8ad 2002 	strh.w	r2, [sp, #2]
  conn.LocalPort = local_port;
 8004ada:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004ade:	f8ad 2004 	strh.w	r2, [sp, #4]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004ae2:	3100      	adds	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8004ae4:	781a      	ldrb	r2, [r3, #0]
 8004ae6:	f88d 2006 	strb.w	r2, [sp, #6]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004aea:	bf18      	it	ne
 8004aec:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8004aee:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 8004af0:	f88d 0001 	strb.w	r0, [sp, #1]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004af4:	f88d 1000 	strb.w	r1, [sp]
  conn.RemoteIP[1] = ipaddr[1];
 8004af8:	f88d 2007 	strb.w	r2, [sp, #7]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004afc:	4669      	mov	r1, sp
  conn.RemoteIP[2] = ipaddr[2];
 8004afe:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004b00:	4806      	ldr	r0, [pc, #24]	; (8004b1c <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 8004b02:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8004b04:	f88d 2008 	strb.w	r2, [sp, #8]
  conn.RemoteIP[3] = ipaddr[3];
 8004b08:	f88d 3009 	strb.w	r3, [sp, #9]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004b0c:	f7ff f860 	bl	8003bd0 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8004b10:	3000      	adds	r0, #0
 8004b12:	bf18      	it	ne
 8004b14:	2001      	movne	r0, #1
 8004b16:	b005      	add	sp, #20
 8004b18:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b1c:	20000938 	.word	0x20000938

08004b20 <WIFI_CloseClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8004b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8004b22:	f88d 0001 	strb.w	r0, [sp, #1]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004b26:	4669      	mov	r1, sp
 8004b28:	4804      	ldr	r0, [pc, #16]	; (8004b3c <WIFI_CloseClientConnection+0x1c>)
 8004b2a:	f7ff f8b5 	bl	8003c98 <ES_WIFI_StopClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret; 
}
 8004b2e:	3000      	adds	r0, #0
 8004b30:	bf18      	it	ne
 8004b32:	2001      	movne	r0, #1
 8004b34:	b005      	add	sp, #20
 8004b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b3a:	bf00      	nop
 8004b3c:	20000938 	.word	0x20000938

08004b40 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8004b40:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004b42:	9c04      	ldr	r4, [sp, #16]
 8004b44:	e88d 0018 	stmia.w	sp, {r3, r4}
 8004b48:	4613      	mov	r3, r2
 8004b4a:	460a      	mov	r2, r1
 8004b4c:	4601      	mov	r1, r0
 8004b4e:	4804      	ldr	r0, [pc, #16]	; (8004b60 <WIFI_SendData+0x20>)
 8004b50:	f7ff f8c2 	bl	8003cd8 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8004b54:	3000      	adds	r0, #0
 8004b56:	bf18      	it	ne
 8004b58:	2001      	movne	r0, #1
 8004b5a:	b002      	add	sp, #8
 8004b5c:	bd10      	pop	{r4, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000938 	.word	0x20000938

08004b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b9c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004b68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004b6a:	e003      	b.n	8004b74 <LoopCopyDataInit>

08004b6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004b6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004b70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004b72:	3104      	adds	r1, #4

08004b74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004b74:	480b      	ldr	r0, [pc, #44]	; (8004ba4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004b78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004b7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004b7c:	d3f6      	bcc.n	8004b6c <CopyDataInit>
	ldr	r2, =_sbss
 8004b7e:	4a0b      	ldr	r2, [pc, #44]	; (8004bac <LoopForever+0x12>)
	b	LoopFillZerobss
 8004b80:	e002      	b.n	8004b88 <LoopFillZerobss>

08004b82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004b82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004b84:	f842 3b04 	str.w	r3, [r2], #4

08004b88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <LoopForever+0x16>)
	cmp	r2, r3
 8004b8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004b8c:	d3f9      	bcc.n	8004b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b8e:	f7ff fe55 	bl	800483c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b92:	f000 f811 	bl	8004bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b96:	f7ff fcbd 	bl	8004514 <main>

08004b9a <LoopForever>:

LoopForever:
    b LoopForever
 8004b9a:	e7fe      	b.n	8004b9a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b9c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004ba0:	08005830 	.word	0x08005830
	ldr	r0, =_sdata
 8004ba4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004ba8:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8004bac:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8004bb0:	200010a4 	.word	0x200010a4

08004bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bb4:	e7fe      	b.n	8004bb4 <ADC1_2_IRQHandler>
	...

08004bb8 <__libc_init_array>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	4e0d      	ldr	r6, [pc, #52]	; (8004bf0 <__libc_init_array+0x38>)
 8004bbc:	4c0d      	ldr	r4, [pc, #52]	; (8004bf4 <__libc_init_array+0x3c>)
 8004bbe:	1ba4      	subs	r4, r4, r6
 8004bc0:	10a4      	asrs	r4, r4, #2
 8004bc2:	2500      	movs	r5, #0
 8004bc4:	42a5      	cmp	r5, r4
 8004bc6:	d109      	bne.n	8004bdc <__libc_init_array+0x24>
 8004bc8:	4e0b      	ldr	r6, [pc, #44]	; (8004bf8 <__libc_init_array+0x40>)
 8004bca:	4c0c      	ldr	r4, [pc, #48]	; (8004bfc <__libc_init_array+0x44>)
 8004bcc:	f000 fce6 	bl	800559c <_init>
 8004bd0:	1ba4      	subs	r4, r4, r6
 8004bd2:	10a4      	asrs	r4, r4, #2
 8004bd4:	2500      	movs	r5, #0
 8004bd6:	42a5      	cmp	r5, r4
 8004bd8:	d105      	bne.n	8004be6 <__libc_init_array+0x2e>
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
 8004bdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004be0:	4798      	blx	r3
 8004be2:	3501      	adds	r5, #1
 8004be4:	e7ee      	b.n	8004bc4 <__libc_init_array+0xc>
 8004be6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bea:	4798      	blx	r3
 8004bec:	3501      	adds	r5, #1
 8004bee:	e7f2      	b.n	8004bd6 <__libc_init_array+0x1e>
 8004bf0:	08005828 	.word	0x08005828
 8004bf4:	08005828 	.word	0x08005828
 8004bf8:	08005828 	.word	0x08005828
 8004bfc:	0800582c 	.word	0x0800582c

08004c00 <memcpy>:
 8004c00:	b510      	push	{r4, lr}
 8004c02:	1e43      	subs	r3, r0, #1
 8004c04:	440a      	add	r2, r1
 8004c06:	4291      	cmp	r1, r2
 8004c08:	d100      	bne.n	8004c0c <memcpy+0xc>
 8004c0a:	bd10      	pop	{r4, pc}
 8004c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c14:	e7f7      	b.n	8004c06 <memcpy+0x6>
	...

08004c18 <siprintf>:
 8004c18:	b40e      	push	{r1, r2, r3}
 8004c1a:	b500      	push	{lr}
 8004c1c:	b09c      	sub	sp, #112	; 0x70
 8004c1e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004c22:	ab1d      	add	r3, sp, #116	; 0x74
 8004c24:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004c28:	9002      	str	r0, [sp, #8]
 8004c2a:	9006      	str	r0, [sp, #24]
 8004c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c30:	480a      	ldr	r0, [pc, #40]	; (8004c5c <siprintf+0x44>)
 8004c32:	9104      	str	r1, [sp, #16]
 8004c34:	9107      	str	r1, [sp, #28]
 8004c36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c3e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004c42:	6800      	ldr	r0, [r0, #0]
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	a902      	add	r1, sp, #8
 8004c48:	f000 f9b4 	bl	8004fb4 <_svfiprintf_r>
 8004c4c:	9b02      	ldr	r3, [sp, #8]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	b01c      	add	sp, #112	; 0x70
 8004c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c58:	b003      	add	sp, #12
 8004c5a:	4770      	bx	lr
 8004c5c:	2000001c 	.word	0x2000001c

08004c60 <strchr>:
 8004c60:	b2c9      	uxtb	r1, r1
 8004c62:	4603      	mov	r3, r0
 8004c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c68:	b11a      	cbz	r2, 8004c72 <strchr+0x12>
 8004c6a:	4291      	cmp	r1, r2
 8004c6c:	d1f9      	bne.n	8004c62 <strchr+0x2>
 8004c6e:	4618      	mov	r0, r3
 8004c70:	4770      	bx	lr
 8004c72:	2900      	cmp	r1, #0
 8004c74:	bf0c      	ite	eq
 8004c76:	4618      	moveq	r0, r3
 8004c78:	2000      	movne	r0, #0
 8004c7a:	4770      	bx	lr

08004c7c <strcpy>:
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c82:	f803 2b01 	strb.w	r2, [r3], #1
 8004c86:	2a00      	cmp	r2, #0
 8004c88:	d1f9      	bne.n	8004c7e <strcpy+0x2>
 8004c8a:	4770      	bx	lr

08004c8c <strncpy>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4604      	mov	r4, r0
 8004c90:	b902      	cbnz	r2, 8004c94 <strncpy+0x8>
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
 8004c94:	4623      	mov	r3, r4
 8004c96:	f811 5b01 	ldrb.w	r5, [r1], #1
 8004c9a:	f803 5b01 	strb.w	r5, [r3], #1
 8004c9e:	1e56      	subs	r6, r2, #1
 8004ca0:	b91d      	cbnz	r5, 8004caa <strncpy+0x1e>
 8004ca2:	4414      	add	r4, r2
 8004ca4:	42a3      	cmp	r3, r4
 8004ca6:	d103      	bne.n	8004cb0 <strncpy+0x24>
 8004ca8:	bd70      	pop	{r4, r5, r6, pc}
 8004caa:	461c      	mov	r4, r3
 8004cac:	4632      	mov	r2, r6
 8004cae:	e7ef      	b.n	8004c90 <strncpy+0x4>
 8004cb0:	f803 5b01 	strb.w	r5, [r3], #1
 8004cb4:	e7f6      	b.n	8004ca4 <strncpy+0x18>

08004cb6 <strstr>:
 8004cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb8:	7803      	ldrb	r3, [r0, #0]
 8004cba:	b133      	cbz	r3, 8004cca <strstr+0x14>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	1c5e      	adds	r6, r3, #1
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b933      	cbnz	r3, 8004cd4 <strstr+0x1e>
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cca:	780b      	ldrb	r3, [r1, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf18      	it	ne
 8004cd0:	2000      	movne	r0, #0
 8004cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cd4:	1e4d      	subs	r5, r1, #1
 8004cd6:	1e44      	subs	r4, r0, #1
 8004cd8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004cdc:	2a00      	cmp	r2, #0
 8004cde:	d0f3      	beq.n	8004cc8 <strstr+0x12>
 8004ce0:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8004ce4:	4297      	cmp	r7, r2
 8004ce6:	4633      	mov	r3, r6
 8004ce8:	d0f6      	beq.n	8004cd8 <strstr+0x22>
 8004cea:	e7e8      	b.n	8004cbe <strstr+0x8>

08004cec <strtok>:
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <strtok+0x50>)
 8004cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf2:	681d      	ldr	r5, [r3, #0]
 8004cf4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	460f      	mov	r7, r1
 8004cfa:	b9b4      	cbnz	r4, 8004d2a <strtok+0x3e>
 8004cfc:	2050      	movs	r0, #80	; 0x50
 8004cfe:	f000 f849 	bl	8004d94 <malloc>
 8004d02:	65a8      	str	r0, [r5, #88]	; 0x58
 8004d04:	6004      	str	r4, [r0, #0]
 8004d06:	6044      	str	r4, [r0, #4]
 8004d08:	6084      	str	r4, [r0, #8]
 8004d0a:	60c4      	str	r4, [r0, #12]
 8004d0c:	6104      	str	r4, [r0, #16]
 8004d0e:	6144      	str	r4, [r0, #20]
 8004d10:	6184      	str	r4, [r0, #24]
 8004d12:	6284      	str	r4, [r0, #40]	; 0x28
 8004d14:	62c4      	str	r4, [r0, #44]	; 0x2c
 8004d16:	6304      	str	r4, [r0, #48]	; 0x30
 8004d18:	6344      	str	r4, [r0, #52]	; 0x34
 8004d1a:	6384      	str	r4, [r0, #56]	; 0x38
 8004d1c:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004d1e:	6404      	str	r4, [r0, #64]	; 0x40
 8004d20:	6444      	str	r4, [r0, #68]	; 0x44
 8004d22:	6484      	str	r4, [r0, #72]	; 0x48
 8004d24:	64c4      	str	r4, [r0, #76]	; 0x4c
 8004d26:	7704      	strb	r4, [r0, #28]
 8004d28:	6244      	str	r4, [r0, #36]	; 0x24
 8004d2a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004d2c:	4639      	mov	r1, r7
 8004d2e:	4630      	mov	r0, r6
 8004d30:	2301      	movs	r3, #1
 8004d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d36:	f000 b803 	b.w	8004d40 <__strtok_r>
 8004d3a:	bf00      	nop
 8004d3c:	2000001c 	.word	0x2000001c

08004d40 <__strtok_r>:
 8004d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d42:	b918      	cbnz	r0, 8004d4c <__strtok_r+0xc>
 8004d44:	6810      	ldr	r0, [r2, #0]
 8004d46:	b908      	cbnz	r0, 8004d4c <__strtok_r+0xc>
 8004d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	460f      	mov	r7, r1
 8004d50:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004d54:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004d58:	b91e      	cbnz	r6, 8004d62 <__strtok_r+0x22>
 8004d5a:	b965      	cbnz	r5, 8004d76 <__strtok_r+0x36>
 8004d5c:	6015      	str	r5, [r2, #0]
 8004d5e:	4628      	mov	r0, r5
 8004d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d62:	42b5      	cmp	r5, r6
 8004d64:	d1f6      	bne.n	8004d54 <__strtok_r+0x14>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1ef      	bne.n	8004d4a <__strtok_r+0xa>
 8004d6a:	6014      	str	r4, [r2, #0]
 8004d6c:	7003      	strb	r3, [r0, #0]
 8004d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d70:	461c      	mov	r4, r3
 8004d72:	e00c      	b.n	8004d8e <__strtok_r+0x4e>
 8004d74:	b915      	cbnz	r5, 8004d7c <__strtok_r+0x3c>
 8004d76:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004d7a:	460e      	mov	r6, r1
 8004d7c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004d80:	42ab      	cmp	r3, r5
 8004d82:	d1f7      	bne.n	8004d74 <__strtok_r+0x34>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f3      	beq.n	8004d70 <__strtok_r+0x30>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004d8e:	6014      	str	r4, [r2, #0]
 8004d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004d94 <malloc>:
 8004d94:	4b02      	ldr	r3, [pc, #8]	; (8004da0 <malloc+0xc>)
 8004d96:	4601      	mov	r1, r0
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	f000 b851 	b.w	8004e40 <_malloc_r>
 8004d9e:	bf00      	nop
 8004da0:	2000001c 	.word	0x2000001c

08004da4 <_free_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4605      	mov	r5, r0
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d045      	beq.n	8004e38 <_free_r+0x94>
 8004dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db0:	1f0c      	subs	r4, r1, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bfb8      	it	lt
 8004db6:	18e4      	addlt	r4, r4, r3
 8004db8:	f000 fbb0 	bl	800551c <__malloc_lock>
 8004dbc:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <_free_r+0x98>)
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	b933      	cbnz	r3, 8004dd2 <_free_r+0x2e>
 8004dc4:	6063      	str	r3, [r4, #4]
 8004dc6:	6014      	str	r4, [r2, #0]
 8004dc8:	4628      	mov	r0, r5
 8004dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dce:	f000 bba6 	b.w	800551e <__malloc_unlock>
 8004dd2:	42a3      	cmp	r3, r4
 8004dd4:	d90c      	bls.n	8004df0 <_free_r+0x4c>
 8004dd6:	6821      	ldr	r1, [r4, #0]
 8004dd8:	1862      	adds	r2, r4, r1
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	bf04      	itt	eq
 8004dde:	681a      	ldreq	r2, [r3, #0]
 8004de0:	685b      	ldreq	r3, [r3, #4]
 8004de2:	6063      	str	r3, [r4, #4]
 8004de4:	bf04      	itt	eq
 8004de6:	1852      	addeq	r2, r2, r1
 8004de8:	6022      	streq	r2, [r4, #0]
 8004dea:	6004      	str	r4, [r0, #0]
 8004dec:	e7ec      	b.n	8004dc8 <_free_r+0x24>
 8004dee:	4613      	mov	r3, r2
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	b10a      	cbz	r2, 8004df8 <_free_r+0x54>
 8004df4:	42a2      	cmp	r2, r4
 8004df6:	d9fa      	bls.n	8004dee <_free_r+0x4a>
 8004df8:	6819      	ldr	r1, [r3, #0]
 8004dfa:	1858      	adds	r0, r3, r1
 8004dfc:	42a0      	cmp	r0, r4
 8004dfe:	d10b      	bne.n	8004e18 <_free_r+0x74>
 8004e00:	6820      	ldr	r0, [r4, #0]
 8004e02:	4401      	add	r1, r0
 8004e04:	1858      	adds	r0, r3, r1
 8004e06:	4282      	cmp	r2, r0
 8004e08:	6019      	str	r1, [r3, #0]
 8004e0a:	d1dd      	bne.n	8004dc8 <_free_r+0x24>
 8004e0c:	6810      	ldr	r0, [r2, #0]
 8004e0e:	6852      	ldr	r2, [r2, #4]
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	4401      	add	r1, r0
 8004e14:	6019      	str	r1, [r3, #0]
 8004e16:	e7d7      	b.n	8004dc8 <_free_r+0x24>
 8004e18:	d902      	bls.n	8004e20 <_free_r+0x7c>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	602b      	str	r3, [r5, #0]
 8004e1e:	e7d3      	b.n	8004dc8 <_free_r+0x24>
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	1821      	adds	r1, r4, r0
 8004e24:	428a      	cmp	r2, r1
 8004e26:	bf04      	itt	eq
 8004e28:	6811      	ldreq	r1, [r2, #0]
 8004e2a:	6852      	ldreq	r2, [r2, #4]
 8004e2c:	6062      	str	r2, [r4, #4]
 8004e2e:	bf04      	itt	eq
 8004e30:	1809      	addeq	r1, r1, r0
 8004e32:	6021      	streq	r1, [r4, #0]
 8004e34:	605c      	str	r4, [r3, #4]
 8004e36:	e7c7      	b.n	8004dc8 <_free_r+0x24>
 8004e38:	bd38      	pop	{r3, r4, r5, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000218 	.word	0x20000218

08004e40 <_malloc_r>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	1ccd      	adds	r5, r1, #3
 8004e44:	f025 0503 	bic.w	r5, r5, #3
 8004e48:	3508      	adds	r5, #8
 8004e4a:	2d0c      	cmp	r5, #12
 8004e4c:	bf38      	it	cc
 8004e4e:	250c      	movcc	r5, #12
 8004e50:	2d00      	cmp	r5, #0
 8004e52:	4606      	mov	r6, r0
 8004e54:	db01      	blt.n	8004e5a <_malloc_r+0x1a>
 8004e56:	42a9      	cmp	r1, r5
 8004e58:	d903      	bls.n	8004e62 <_malloc_r+0x22>
 8004e5a:	230c      	movs	r3, #12
 8004e5c:	6033      	str	r3, [r6, #0]
 8004e5e:	2000      	movs	r0, #0
 8004e60:	bd70      	pop	{r4, r5, r6, pc}
 8004e62:	f000 fb5b 	bl	800551c <__malloc_lock>
 8004e66:	4a23      	ldr	r2, [pc, #140]	; (8004ef4 <_malloc_r+0xb4>)
 8004e68:	6814      	ldr	r4, [r2, #0]
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	b991      	cbnz	r1, 8004e94 <_malloc_r+0x54>
 8004e6e:	4c22      	ldr	r4, [pc, #136]	; (8004ef8 <_malloc_r+0xb8>)
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	b91b      	cbnz	r3, 8004e7c <_malloc_r+0x3c>
 8004e74:	4630      	mov	r0, r6
 8004e76:	f000 fb27 	bl	80054c8 <_sbrk_r>
 8004e7a:	6020      	str	r0, [r4, #0]
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f000 fb22 	bl	80054c8 <_sbrk_r>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d126      	bne.n	8004ed6 <_malloc_r+0x96>
 8004e88:	230c      	movs	r3, #12
 8004e8a:	6033      	str	r3, [r6, #0]
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f000 fb46 	bl	800551e <__malloc_unlock>
 8004e92:	e7e4      	b.n	8004e5e <_malloc_r+0x1e>
 8004e94:	680b      	ldr	r3, [r1, #0]
 8004e96:	1b5b      	subs	r3, r3, r5
 8004e98:	d41a      	bmi.n	8004ed0 <_malloc_r+0x90>
 8004e9a:	2b0b      	cmp	r3, #11
 8004e9c:	d90f      	bls.n	8004ebe <_malloc_r+0x7e>
 8004e9e:	600b      	str	r3, [r1, #0]
 8004ea0:	50cd      	str	r5, [r1, r3]
 8004ea2:	18cc      	adds	r4, r1, r3
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f000 fb3a 	bl	800551e <__malloc_unlock>
 8004eaa:	f104 000b 	add.w	r0, r4, #11
 8004eae:	1d23      	adds	r3, r4, #4
 8004eb0:	f020 0007 	bic.w	r0, r0, #7
 8004eb4:	1ac3      	subs	r3, r0, r3
 8004eb6:	d01b      	beq.n	8004ef0 <_malloc_r+0xb0>
 8004eb8:	425a      	negs	r2, r3
 8004eba:	50e2      	str	r2, [r4, r3]
 8004ebc:	bd70      	pop	{r4, r5, r6, pc}
 8004ebe:	428c      	cmp	r4, r1
 8004ec0:	bf0d      	iteet	eq
 8004ec2:	6863      	ldreq	r3, [r4, #4]
 8004ec4:	684b      	ldrne	r3, [r1, #4]
 8004ec6:	6063      	strne	r3, [r4, #4]
 8004ec8:	6013      	streq	r3, [r2, #0]
 8004eca:	bf18      	it	ne
 8004ecc:	460c      	movne	r4, r1
 8004ece:	e7e9      	b.n	8004ea4 <_malloc_r+0x64>
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	6849      	ldr	r1, [r1, #4]
 8004ed4:	e7ca      	b.n	8004e6c <_malloc_r+0x2c>
 8004ed6:	1cc4      	adds	r4, r0, #3
 8004ed8:	f024 0403 	bic.w	r4, r4, #3
 8004edc:	42a0      	cmp	r0, r4
 8004ede:	d005      	beq.n	8004eec <_malloc_r+0xac>
 8004ee0:	1a21      	subs	r1, r4, r0
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f000 faf0 	bl	80054c8 <_sbrk_r>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d0cd      	beq.n	8004e88 <_malloc_r+0x48>
 8004eec:	6025      	str	r5, [r4, #0]
 8004eee:	e7d9      	b.n	8004ea4 <_malloc_r+0x64>
 8004ef0:	bd70      	pop	{r4, r5, r6, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000218 	.word	0x20000218
 8004ef8:	2000021c 	.word	0x2000021c

08004efc <__ssputs_r>:
 8004efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f00:	688e      	ldr	r6, [r1, #8]
 8004f02:	429e      	cmp	r6, r3
 8004f04:	4682      	mov	sl, r0
 8004f06:	460c      	mov	r4, r1
 8004f08:	4691      	mov	r9, r2
 8004f0a:	4698      	mov	r8, r3
 8004f0c:	d835      	bhi.n	8004f7a <__ssputs_r+0x7e>
 8004f0e:	898a      	ldrh	r2, [r1, #12]
 8004f10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f14:	d031      	beq.n	8004f7a <__ssputs_r+0x7e>
 8004f16:	6825      	ldr	r5, [r4, #0]
 8004f18:	6909      	ldr	r1, [r1, #16]
 8004f1a:	1a6f      	subs	r7, r5, r1
 8004f1c:	6965      	ldr	r5, [r4, #20]
 8004f1e:	2302      	movs	r3, #2
 8004f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f24:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f28:	f108 0301 	add.w	r3, r8, #1
 8004f2c:	443b      	add	r3, r7
 8004f2e:	429d      	cmp	r5, r3
 8004f30:	bf38      	it	cc
 8004f32:	461d      	movcc	r5, r3
 8004f34:	0553      	lsls	r3, r2, #21
 8004f36:	d531      	bpl.n	8004f9c <__ssputs_r+0xa0>
 8004f38:	4629      	mov	r1, r5
 8004f3a:	f7ff ff81 	bl	8004e40 <_malloc_r>
 8004f3e:	4606      	mov	r6, r0
 8004f40:	b950      	cbnz	r0, 8004f58 <__ssputs_r+0x5c>
 8004f42:	230c      	movs	r3, #12
 8004f44:	f8ca 3000 	str.w	r3, [sl]
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f4e:	81a3      	strh	r3, [r4, #12]
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295
 8004f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f58:	463a      	mov	r2, r7
 8004f5a:	6921      	ldr	r1, [r4, #16]
 8004f5c:	f7ff fe50 	bl	8004c00 <memcpy>
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	6126      	str	r6, [r4, #16]
 8004f6e:	6165      	str	r5, [r4, #20]
 8004f70:	443e      	add	r6, r7
 8004f72:	1bed      	subs	r5, r5, r7
 8004f74:	6026      	str	r6, [r4, #0]
 8004f76:	60a5      	str	r5, [r4, #8]
 8004f78:	4646      	mov	r6, r8
 8004f7a:	4546      	cmp	r6, r8
 8004f7c:	bf28      	it	cs
 8004f7e:	4646      	movcs	r6, r8
 8004f80:	4632      	mov	r2, r6
 8004f82:	4649      	mov	r1, r9
 8004f84:	6820      	ldr	r0, [r4, #0]
 8004f86:	f000 faaf 	bl	80054e8 <memmove>
 8004f8a:	68a3      	ldr	r3, [r4, #8]
 8004f8c:	1b9b      	subs	r3, r3, r6
 8004f8e:	60a3      	str	r3, [r4, #8]
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	441e      	add	r6, r3
 8004f94:	6026      	str	r6, [r4, #0]
 8004f96:	2000      	movs	r0, #0
 8004f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9c:	462a      	mov	r2, r5
 8004f9e:	f000 fabf 	bl	8005520 <_realloc_r>
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d1e1      	bne.n	8004f6c <__ssputs_r+0x70>
 8004fa8:	6921      	ldr	r1, [r4, #16]
 8004faa:	4650      	mov	r0, sl
 8004fac:	f7ff fefa 	bl	8004da4 <_free_r>
 8004fb0:	e7c7      	b.n	8004f42 <__ssputs_r+0x46>
	...

08004fb4 <_svfiprintf_r>:
 8004fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb8:	b09d      	sub	sp, #116	; 0x74
 8004fba:	4680      	mov	r8, r0
 8004fbc:	9303      	str	r3, [sp, #12]
 8004fbe:	898b      	ldrh	r3, [r1, #12]
 8004fc0:	061c      	lsls	r4, r3, #24
 8004fc2:	460d      	mov	r5, r1
 8004fc4:	4616      	mov	r6, r2
 8004fc6:	d50f      	bpl.n	8004fe8 <_svfiprintf_r+0x34>
 8004fc8:	690b      	ldr	r3, [r1, #16]
 8004fca:	b96b      	cbnz	r3, 8004fe8 <_svfiprintf_r+0x34>
 8004fcc:	2140      	movs	r1, #64	; 0x40
 8004fce:	f7ff ff37 	bl	8004e40 <_malloc_r>
 8004fd2:	6028      	str	r0, [r5, #0]
 8004fd4:	6128      	str	r0, [r5, #16]
 8004fd6:	b928      	cbnz	r0, 8004fe4 <_svfiprintf_r+0x30>
 8004fd8:	230c      	movs	r3, #12
 8004fda:	f8c8 3000 	str.w	r3, [r8]
 8004fde:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe2:	e0c5      	b.n	8005170 <_svfiprintf_r+0x1bc>
 8004fe4:	2340      	movs	r3, #64	; 0x40
 8004fe6:	616b      	str	r3, [r5, #20]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	9309      	str	r3, [sp, #36]	; 0x24
 8004fec:	2320      	movs	r3, #32
 8004fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ff2:	2330      	movs	r3, #48	; 0x30
 8004ff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ff8:	f04f 0b01 	mov.w	fp, #1
 8004ffc:	4637      	mov	r7, r6
 8004ffe:	463c      	mov	r4, r7
 8005000:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d13c      	bne.n	8005082 <_svfiprintf_r+0xce>
 8005008:	ebb7 0a06 	subs.w	sl, r7, r6
 800500c:	d00b      	beq.n	8005026 <_svfiprintf_r+0x72>
 800500e:	4653      	mov	r3, sl
 8005010:	4632      	mov	r2, r6
 8005012:	4629      	mov	r1, r5
 8005014:	4640      	mov	r0, r8
 8005016:	f7ff ff71 	bl	8004efc <__ssputs_r>
 800501a:	3001      	adds	r0, #1
 800501c:	f000 80a3 	beq.w	8005166 <_svfiprintf_r+0x1b2>
 8005020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005022:	4453      	add	r3, sl
 8005024:	9309      	str	r3, [sp, #36]	; 0x24
 8005026:	783b      	ldrb	r3, [r7, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 809c 	beq.w	8005166 <_svfiprintf_r+0x1b2>
 800502e:	2300      	movs	r3, #0
 8005030:	f04f 32ff 	mov.w	r2, #4294967295
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	9307      	str	r3, [sp, #28]
 8005038:	9205      	str	r2, [sp, #20]
 800503a:	9306      	str	r3, [sp, #24]
 800503c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005040:	931a      	str	r3, [sp, #104]	; 0x68
 8005042:	2205      	movs	r2, #5
 8005044:	7821      	ldrb	r1, [r4, #0]
 8005046:	4850      	ldr	r0, [pc, #320]	; (8005188 <_svfiprintf_r+0x1d4>)
 8005048:	f7fb f8ca 	bl	80001e0 <memchr>
 800504c:	1c67      	adds	r7, r4, #1
 800504e:	9b04      	ldr	r3, [sp, #16]
 8005050:	b9d8      	cbnz	r0, 800508a <_svfiprintf_r+0xd6>
 8005052:	06d9      	lsls	r1, r3, #27
 8005054:	bf44      	itt	mi
 8005056:	2220      	movmi	r2, #32
 8005058:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800505c:	071a      	lsls	r2, r3, #28
 800505e:	bf44      	itt	mi
 8005060:	222b      	movmi	r2, #43	; 0x2b
 8005062:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005066:	7822      	ldrb	r2, [r4, #0]
 8005068:	2a2a      	cmp	r2, #42	; 0x2a
 800506a:	d016      	beq.n	800509a <_svfiprintf_r+0xe6>
 800506c:	9a07      	ldr	r2, [sp, #28]
 800506e:	2100      	movs	r1, #0
 8005070:	200a      	movs	r0, #10
 8005072:	4627      	mov	r7, r4
 8005074:	3401      	adds	r4, #1
 8005076:	783b      	ldrb	r3, [r7, #0]
 8005078:	3b30      	subs	r3, #48	; 0x30
 800507a:	2b09      	cmp	r3, #9
 800507c:	d951      	bls.n	8005122 <_svfiprintf_r+0x16e>
 800507e:	b1c9      	cbz	r1, 80050b4 <_svfiprintf_r+0x100>
 8005080:	e011      	b.n	80050a6 <_svfiprintf_r+0xf2>
 8005082:	2b25      	cmp	r3, #37	; 0x25
 8005084:	d0c0      	beq.n	8005008 <_svfiprintf_r+0x54>
 8005086:	4627      	mov	r7, r4
 8005088:	e7b9      	b.n	8004ffe <_svfiprintf_r+0x4a>
 800508a:	4a3f      	ldr	r2, [pc, #252]	; (8005188 <_svfiprintf_r+0x1d4>)
 800508c:	1a80      	subs	r0, r0, r2
 800508e:	fa0b f000 	lsl.w	r0, fp, r0
 8005092:	4318      	orrs	r0, r3
 8005094:	9004      	str	r0, [sp, #16]
 8005096:	463c      	mov	r4, r7
 8005098:	e7d3      	b.n	8005042 <_svfiprintf_r+0x8e>
 800509a:	9a03      	ldr	r2, [sp, #12]
 800509c:	1d11      	adds	r1, r2, #4
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	9103      	str	r1, [sp, #12]
 80050a2:	2a00      	cmp	r2, #0
 80050a4:	db01      	blt.n	80050aa <_svfiprintf_r+0xf6>
 80050a6:	9207      	str	r2, [sp, #28]
 80050a8:	e004      	b.n	80050b4 <_svfiprintf_r+0x100>
 80050aa:	4252      	negs	r2, r2
 80050ac:	f043 0302 	orr.w	r3, r3, #2
 80050b0:	9207      	str	r2, [sp, #28]
 80050b2:	9304      	str	r3, [sp, #16]
 80050b4:	783b      	ldrb	r3, [r7, #0]
 80050b6:	2b2e      	cmp	r3, #46	; 0x2e
 80050b8:	d10e      	bne.n	80050d8 <_svfiprintf_r+0x124>
 80050ba:	787b      	ldrb	r3, [r7, #1]
 80050bc:	2b2a      	cmp	r3, #42	; 0x2a
 80050be:	f107 0101 	add.w	r1, r7, #1
 80050c2:	d132      	bne.n	800512a <_svfiprintf_r+0x176>
 80050c4:	9b03      	ldr	r3, [sp, #12]
 80050c6:	1d1a      	adds	r2, r3, #4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	9203      	str	r2, [sp, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bfb8      	it	lt
 80050d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80050d4:	3702      	adds	r7, #2
 80050d6:	9305      	str	r3, [sp, #20]
 80050d8:	4c2c      	ldr	r4, [pc, #176]	; (800518c <_svfiprintf_r+0x1d8>)
 80050da:	7839      	ldrb	r1, [r7, #0]
 80050dc:	2203      	movs	r2, #3
 80050de:	4620      	mov	r0, r4
 80050e0:	f7fb f87e 	bl	80001e0 <memchr>
 80050e4:	b138      	cbz	r0, 80050f6 <_svfiprintf_r+0x142>
 80050e6:	2340      	movs	r3, #64	; 0x40
 80050e8:	1b00      	subs	r0, r0, r4
 80050ea:	fa03 f000 	lsl.w	r0, r3, r0
 80050ee:	9b04      	ldr	r3, [sp, #16]
 80050f0:	4303      	orrs	r3, r0
 80050f2:	9304      	str	r3, [sp, #16]
 80050f4:	3701      	adds	r7, #1
 80050f6:	7839      	ldrb	r1, [r7, #0]
 80050f8:	4825      	ldr	r0, [pc, #148]	; (8005190 <_svfiprintf_r+0x1dc>)
 80050fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050fe:	2206      	movs	r2, #6
 8005100:	1c7e      	adds	r6, r7, #1
 8005102:	f7fb f86d 	bl	80001e0 <memchr>
 8005106:	2800      	cmp	r0, #0
 8005108:	d035      	beq.n	8005176 <_svfiprintf_r+0x1c2>
 800510a:	4b22      	ldr	r3, [pc, #136]	; (8005194 <_svfiprintf_r+0x1e0>)
 800510c:	b9fb      	cbnz	r3, 800514e <_svfiprintf_r+0x19a>
 800510e:	9b03      	ldr	r3, [sp, #12]
 8005110:	3307      	adds	r3, #7
 8005112:	f023 0307 	bic.w	r3, r3, #7
 8005116:	3308      	adds	r3, #8
 8005118:	9303      	str	r3, [sp, #12]
 800511a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511c:	444b      	add	r3, r9
 800511e:	9309      	str	r3, [sp, #36]	; 0x24
 8005120:	e76c      	b.n	8004ffc <_svfiprintf_r+0x48>
 8005122:	fb00 3202 	mla	r2, r0, r2, r3
 8005126:	2101      	movs	r1, #1
 8005128:	e7a3      	b.n	8005072 <_svfiprintf_r+0xbe>
 800512a:	2300      	movs	r3, #0
 800512c:	9305      	str	r3, [sp, #20]
 800512e:	4618      	mov	r0, r3
 8005130:	240a      	movs	r4, #10
 8005132:	460f      	mov	r7, r1
 8005134:	3101      	adds	r1, #1
 8005136:	783a      	ldrb	r2, [r7, #0]
 8005138:	3a30      	subs	r2, #48	; 0x30
 800513a:	2a09      	cmp	r2, #9
 800513c:	d903      	bls.n	8005146 <_svfiprintf_r+0x192>
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ca      	beq.n	80050d8 <_svfiprintf_r+0x124>
 8005142:	9005      	str	r0, [sp, #20]
 8005144:	e7c8      	b.n	80050d8 <_svfiprintf_r+0x124>
 8005146:	fb04 2000 	mla	r0, r4, r0, r2
 800514a:	2301      	movs	r3, #1
 800514c:	e7f1      	b.n	8005132 <_svfiprintf_r+0x17e>
 800514e:	ab03      	add	r3, sp, #12
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	462a      	mov	r2, r5
 8005154:	4b10      	ldr	r3, [pc, #64]	; (8005198 <_svfiprintf_r+0x1e4>)
 8005156:	a904      	add	r1, sp, #16
 8005158:	4640      	mov	r0, r8
 800515a:	f3af 8000 	nop.w
 800515e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005162:	4681      	mov	r9, r0
 8005164:	d1d9      	bne.n	800511a <_svfiprintf_r+0x166>
 8005166:	89ab      	ldrh	r3, [r5, #12]
 8005168:	065b      	lsls	r3, r3, #25
 800516a:	f53f af38 	bmi.w	8004fde <_svfiprintf_r+0x2a>
 800516e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005170:	b01d      	add	sp, #116	; 0x74
 8005172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005176:	ab03      	add	r3, sp, #12
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	462a      	mov	r2, r5
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <_svfiprintf_r+0x1e4>)
 800517e:	a904      	add	r1, sp, #16
 8005180:	4640      	mov	r0, r8
 8005182:	f000 f881 	bl	8005288 <_printf_i>
 8005186:	e7ea      	b.n	800515e <_svfiprintf_r+0x1aa>
 8005188:	080057ec 	.word	0x080057ec
 800518c:	080057f2 	.word	0x080057f2
 8005190:	080057f6 	.word	0x080057f6
 8005194:	00000000 	.word	0x00000000
 8005198:	08004efd 	.word	0x08004efd

0800519c <_printf_common>:
 800519c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a0:	4691      	mov	r9, r2
 80051a2:	461f      	mov	r7, r3
 80051a4:	688a      	ldr	r2, [r1, #8]
 80051a6:	690b      	ldr	r3, [r1, #16]
 80051a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051ac:	4293      	cmp	r3, r2
 80051ae:	bfb8      	it	lt
 80051b0:	4613      	movlt	r3, r2
 80051b2:	f8c9 3000 	str.w	r3, [r9]
 80051b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051ba:	4606      	mov	r6, r0
 80051bc:	460c      	mov	r4, r1
 80051be:	b112      	cbz	r2, 80051c6 <_printf_common+0x2a>
 80051c0:	3301      	adds	r3, #1
 80051c2:	f8c9 3000 	str.w	r3, [r9]
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	0699      	lsls	r1, r3, #26
 80051ca:	bf42      	ittt	mi
 80051cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80051d0:	3302      	addmi	r3, #2
 80051d2:	f8c9 3000 	strmi.w	r3, [r9]
 80051d6:	6825      	ldr	r5, [r4, #0]
 80051d8:	f015 0506 	ands.w	r5, r5, #6
 80051dc:	d107      	bne.n	80051ee <_printf_common+0x52>
 80051de:	f104 0a19 	add.w	sl, r4, #25
 80051e2:	68e3      	ldr	r3, [r4, #12]
 80051e4:	f8d9 2000 	ldr.w	r2, [r9]
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	429d      	cmp	r5, r3
 80051ec:	db29      	blt.n	8005242 <_printf_common+0xa6>
 80051ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	3300      	adds	r3, #0
 80051f6:	bf18      	it	ne
 80051f8:	2301      	movne	r3, #1
 80051fa:	0692      	lsls	r2, r2, #26
 80051fc:	d42e      	bmi.n	800525c <_printf_common+0xc0>
 80051fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005202:	4639      	mov	r1, r7
 8005204:	4630      	mov	r0, r6
 8005206:	47c0      	blx	r8
 8005208:	3001      	adds	r0, #1
 800520a:	d021      	beq.n	8005250 <_printf_common+0xb4>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	68e5      	ldr	r5, [r4, #12]
 8005210:	f8d9 2000 	ldr.w	r2, [r9]
 8005214:	f003 0306 	and.w	r3, r3, #6
 8005218:	2b04      	cmp	r3, #4
 800521a:	bf08      	it	eq
 800521c:	1aad      	subeq	r5, r5, r2
 800521e:	68a3      	ldr	r3, [r4, #8]
 8005220:	6922      	ldr	r2, [r4, #16]
 8005222:	bf0c      	ite	eq
 8005224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005228:	2500      	movne	r5, #0
 800522a:	4293      	cmp	r3, r2
 800522c:	bfc4      	itt	gt
 800522e:	1a9b      	subgt	r3, r3, r2
 8005230:	18ed      	addgt	r5, r5, r3
 8005232:	f04f 0900 	mov.w	r9, #0
 8005236:	341a      	adds	r4, #26
 8005238:	454d      	cmp	r5, r9
 800523a:	d11b      	bne.n	8005274 <_printf_common+0xd8>
 800523c:	2000      	movs	r0, #0
 800523e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005242:	2301      	movs	r3, #1
 8005244:	4652      	mov	r2, sl
 8005246:	4639      	mov	r1, r7
 8005248:	4630      	mov	r0, r6
 800524a:	47c0      	blx	r8
 800524c:	3001      	adds	r0, #1
 800524e:	d103      	bne.n	8005258 <_printf_common+0xbc>
 8005250:	f04f 30ff 	mov.w	r0, #4294967295
 8005254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005258:	3501      	adds	r5, #1
 800525a:	e7c2      	b.n	80051e2 <_printf_common+0x46>
 800525c:	18e1      	adds	r1, r4, r3
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	2030      	movs	r0, #48	; 0x30
 8005262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005266:	4422      	add	r2, r4
 8005268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800526c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005270:	3302      	adds	r3, #2
 8005272:	e7c4      	b.n	80051fe <_printf_common+0x62>
 8005274:	2301      	movs	r3, #1
 8005276:	4622      	mov	r2, r4
 8005278:	4639      	mov	r1, r7
 800527a:	4630      	mov	r0, r6
 800527c:	47c0      	blx	r8
 800527e:	3001      	adds	r0, #1
 8005280:	d0e6      	beq.n	8005250 <_printf_common+0xb4>
 8005282:	f109 0901 	add.w	r9, r9, #1
 8005286:	e7d7      	b.n	8005238 <_printf_common+0x9c>

08005288 <_printf_i>:
 8005288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800528c:	4617      	mov	r7, r2
 800528e:	7e0a      	ldrb	r2, [r1, #24]
 8005290:	b085      	sub	sp, #20
 8005292:	2a6e      	cmp	r2, #110	; 0x6e
 8005294:	4698      	mov	r8, r3
 8005296:	4606      	mov	r6, r0
 8005298:	460c      	mov	r4, r1
 800529a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800529c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80052a0:	f000 80bc 	beq.w	800541c <_printf_i+0x194>
 80052a4:	d81a      	bhi.n	80052dc <_printf_i+0x54>
 80052a6:	2a63      	cmp	r2, #99	; 0x63
 80052a8:	d02e      	beq.n	8005308 <_printf_i+0x80>
 80052aa:	d80a      	bhi.n	80052c2 <_printf_i+0x3a>
 80052ac:	2a00      	cmp	r2, #0
 80052ae:	f000 80c8 	beq.w	8005442 <_printf_i+0x1ba>
 80052b2:	2a58      	cmp	r2, #88	; 0x58
 80052b4:	f000 808a 	beq.w	80053cc <_printf_i+0x144>
 80052b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052bc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80052c0:	e02a      	b.n	8005318 <_printf_i+0x90>
 80052c2:	2a64      	cmp	r2, #100	; 0x64
 80052c4:	d001      	beq.n	80052ca <_printf_i+0x42>
 80052c6:	2a69      	cmp	r2, #105	; 0x69
 80052c8:	d1f6      	bne.n	80052b8 <_printf_i+0x30>
 80052ca:	6821      	ldr	r1, [r4, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80052d2:	d023      	beq.n	800531c <_printf_i+0x94>
 80052d4:	1d11      	adds	r1, r2, #4
 80052d6:	6019      	str	r1, [r3, #0]
 80052d8:	6813      	ldr	r3, [r2, #0]
 80052da:	e027      	b.n	800532c <_printf_i+0xa4>
 80052dc:	2a73      	cmp	r2, #115	; 0x73
 80052de:	f000 80b4 	beq.w	800544a <_printf_i+0x1c2>
 80052e2:	d808      	bhi.n	80052f6 <_printf_i+0x6e>
 80052e4:	2a6f      	cmp	r2, #111	; 0x6f
 80052e6:	d02a      	beq.n	800533e <_printf_i+0xb6>
 80052e8:	2a70      	cmp	r2, #112	; 0x70
 80052ea:	d1e5      	bne.n	80052b8 <_printf_i+0x30>
 80052ec:	680a      	ldr	r2, [r1, #0]
 80052ee:	f042 0220 	orr.w	r2, r2, #32
 80052f2:	600a      	str	r2, [r1, #0]
 80052f4:	e003      	b.n	80052fe <_printf_i+0x76>
 80052f6:	2a75      	cmp	r2, #117	; 0x75
 80052f8:	d021      	beq.n	800533e <_printf_i+0xb6>
 80052fa:	2a78      	cmp	r2, #120	; 0x78
 80052fc:	d1dc      	bne.n	80052b8 <_printf_i+0x30>
 80052fe:	2278      	movs	r2, #120	; 0x78
 8005300:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005304:	496e      	ldr	r1, [pc, #440]	; (80054c0 <_printf_i+0x238>)
 8005306:	e064      	b.n	80053d2 <_printf_i+0x14a>
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800530e:	1d11      	adds	r1, r2, #4
 8005310:	6019      	str	r1, [r3, #0]
 8005312:	6813      	ldr	r3, [r2, #0]
 8005314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005318:	2301      	movs	r3, #1
 800531a:	e0a3      	b.n	8005464 <_printf_i+0x1dc>
 800531c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005320:	f102 0104 	add.w	r1, r2, #4
 8005324:	6019      	str	r1, [r3, #0]
 8005326:	d0d7      	beq.n	80052d8 <_printf_i+0x50>
 8005328:	f9b2 3000 	ldrsh.w	r3, [r2]
 800532c:	2b00      	cmp	r3, #0
 800532e:	da03      	bge.n	8005338 <_printf_i+0xb0>
 8005330:	222d      	movs	r2, #45	; 0x2d
 8005332:	425b      	negs	r3, r3
 8005334:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005338:	4962      	ldr	r1, [pc, #392]	; (80054c4 <_printf_i+0x23c>)
 800533a:	220a      	movs	r2, #10
 800533c:	e017      	b.n	800536e <_printf_i+0xe6>
 800533e:	6820      	ldr	r0, [r4, #0]
 8005340:	6819      	ldr	r1, [r3, #0]
 8005342:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005346:	d003      	beq.n	8005350 <_printf_i+0xc8>
 8005348:	1d08      	adds	r0, r1, #4
 800534a:	6018      	str	r0, [r3, #0]
 800534c:	680b      	ldr	r3, [r1, #0]
 800534e:	e006      	b.n	800535e <_printf_i+0xd6>
 8005350:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005354:	f101 0004 	add.w	r0, r1, #4
 8005358:	6018      	str	r0, [r3, #0]
 800535a:	d0f7      	beq.n	800534c <_printf_i+0xc4>
 800535c:	880b      	ldrh	r3, [r1, #0]
 800535e:	4959      	ldr	r1, [pc, #356]	; (80054c4 <_printf_i+0x23c>)
 8005360:	2a6f      	cmp	r2, #111	; 0x6f
 8005362:	bf14      	ite	ne
 8005364:	220a      	movne	r2, #10
 8005366:	2208      	moveq	r2, #8
 8005368:	2000      	movs	r0, #0
 800536a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800536e:	6865      	ldr	r5, [r4, #4]
 8005370:	60a5      	str	r5, [r4, #8]
 8005372:	2d00      	cmp	r5, #0
 8005374:	f2c0 809c 	blt.w	80054b0 <_printf_i+0x228>
 8005378:	6820      	ldr	r0, [r4, #0]
 800537a:	f020 0004 	bic.w	r0, r0, #4
 800537e:	6020      	str	r0, [r4, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d13f      	bne.n	8005404 <_printf_i+0x17c>
 8005384:	2d00      	cmp	r5, #0
 8005386:	f040 8095 	bne.w	80054b4 <_printf_i+0x22c>
 800538a:	4675      	mov	r5, lr
 800538c:	2a08      	cmp	r2, #8
 800538e:	d10b      	bne.n	80053a8 <_printf_i+0x120>
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	07da      	lsls	r2, r3, #31
 8005394:	d508      	bpl.n	80053a8 <_printf_i+0x120>
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	6862      	ldr	r2, [r4, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	bfde      	ittt	le
 800539e:	2330      	movle	r3, #48	; 0x30
 80053a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053a8:	ebae 0305 	sub.w	r3, lr, r5
 80053ac:	6123      	str	r3, [r4, #16]
 80053ae:	f8cd 8000 	str.w	r8, [sp]
 80053b2:	463b      	mov	r3, r7
 80053b4:	aa03      	add	r2, sp, #12
 80053b6:	4621      	mov	r1, r4
 80053b8:	4630      	mov	r0, r6
 80053ba:	f7ff feef 	bl	800519c <_printf_common>
 80053be:	3001      	adds	r0, #1
 80053c0:	d155      	bne.n	800546e <_printf_i+0x1e6>
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295
 80053c6:	b005      	add	sp, #20
 80053c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053cc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80053d0:	493c      	ldr	r1, [pc, #240]	; (80054c4 <_printf_i+0x23c>)
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80053da:	f100 0504 	add.w	r5, r0, #4
 80053de:	601d      	str	r5, [r3, #0]
 80053e0:	d001      	beq.n	80053e6 <_printf_i+0x15e>
 80053e2:	6803      	ldr	r3, [r0, #0]
 80053e4:	e002      	b.n	80053ec <_printf_i+0x164>
 80053e6:	0655      	lsls	r5, r2, #25
 80053e8:	d5fb      	bpl.n	80053e2 <_printf_i+0x15a>
 80053ea:	8803      	ldrh	r3, [r0, #0]
 80053ec:	07d0      	lsls	r0, r2, #31
 80053ee:	bf44      	itt	mi
 80053f0:	f042 0220 	orrmi.w	r2, r2, #32
 80053f4:	6022      	strmi	r2, [r4, #0]
 80053f6:	b91b      	cbnz	r3, 8005400 <_printf_i+0x178>
 80053f8:	6822      	ldr	r2, [r4, #0]
 80053fa:	f022 0220 	bic.w	r2, r2, #32
 80053fe:	6022      	str	r2, [r4, #0]
 8005400:	2210      	movs	r2, #16
 8005402:	e7b1      	b.n	8005368 <_printf_i+0xe0>
 8005404:	4675      	mov	r5, lr
 8005406:	fbb3 f0f2 	udiv	r0, r3, r2
 800540a:	fb02 3310 	mls	r3, r2, r0, r3
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005414:	4603      	mov	r3, r0
 8005416:	2800      	cmp	r0, #0
 8005418:	d1f5      	bne.n	8005406 <_printf_i+0x17e>
 800541a:	e7b7      	b.n	800538c <_printf_i+0x104>
 800541c:	6808      	ldr	r0, [r1, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	6949      	ldr	r1, [r1, #20]
 8005422:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005426:	d004      	beq.n	8005432 <_printf_i+0x1aa>
 8005428:	1d10      	adds	r0, r2, #4
 800542a:	6018      	str	r0, [r3, #0]
 800542c:	6813      	ldr	r3, [r2, #0]
 800542e:	6019      	str	r1, [r3, #0]
 8005430:	e007      	b.n	8005442 <_printf_i+0x1ba>
 8005432:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005436:	f102 0004 	add.w	r0, r2, #4
 800543a:	6018      	str	r0, [r3, #0]
 800543c:	6813      	ldr	r3, [r2, #0]
 800543e:	d0f6      	beq.n	800542e <_printf_i+0x1a6>
 8005440:	8019      	strh	r1, [r3, #0]
 8005442:	2300      	movs	r3, #0
 8005444:	6123      	str	r3, [r4, #16]
 8005446:	4675      	mov	r5, lr
 8005448:	e7b1      	b.n	80053ae <_printf_i+0x126>
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	1d11      	adds	r1, r2, #4
 800544e:	6019      	str	r1, [r3, #0]
 8005450:	6815      	ldr	r5, [r2, #0]
 8005452:	6862      	ldr	r2, [r4, #4]
 8005454:	2100      	movs	r1, #0
 8005456:	4628      	mov	r0, r5
 8005458:	f7fa fec2 	bl	80001e0 <memchr>
 800545c:	b108      	cbz	r0, 8005462 <_printf_i+0x1da>
 800545e:	1b40      	subs	r0, r0, r5
 8005460:	6060      	str	r0, [r4, #4]
 8005462:	6863      	ldr	r3, [r4, #4]
 8005464:	6123      	str	r3, [r4, #16]
 8005466:	2300      	movs	r3, #0
 8005468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800546c:	e79f      	b.n	80053ae <_printf_i+0x126>
 800546e:	6923      	ldr	r3, [r4, #16]
 8005470:	462a      	mov	r2, r5
 8005472:	4639      	mov	r1, r7
 8005474:	4630      	mov	r0, r6
 8005476:	47c0      	blx	r8
 8005478:	3001      	adds	r0, #1
 800547a:	d0a2      	beq.n	80053c2 <_printf_i+0x13a>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	079b      	lsls	r3, r3, #30
 8005480:	d507      	bpl.n	8005492 <_printf_i+0x20a>
 8005482:	2500      	movs	r5, #0
 8005484:	f104 0919 	add.w	r9, r4, #25
 8005488:	68e3      	ldr	r3, [r4, #12]
 800548a:	9a03      	ldr	r2, [sp, #12]
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	429d      	cmp	r5, r3
 8005490:	db05      	blt.n	800549e <_printf_i+0x216>
 8005492:	68e0      	ldr	r0, [r4, #12]
 8005494:	9b03      	ldr	r3, [sp, #12]
 8005496:	4298      	cmp	r0, r3
 8005498:	bfb8      	it	lt
 800549a:	4618      	movlt	r0, r3
 800549c:	e793      	b.n	80053c6 <_printf_i+0x13e>
 800549e:	2301      	movs	r3, #1
 80054a0:	464a      	mov	r2, r9
 80054a2:	4639      	mov	r1, r7
 80054a4:	4630      	mov	r0, r6
 80054a6:	47c0      	blx	r8
 80054a8:	3001      	adds	r0, #1
 80054aa:	d08a      	beq.n	80053c2 <_printf_i+0x13a>
 80054ac:	3501      	adds	r5, #1
 80054ae:	e7eb      	b.n	8005488 <_printf_i+0x200>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1a7      	bne.n	8005404 <_printf_i+0x17c>
 80054b4:	780b      	ldrb	r3, [r1, #0]
 80054b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054be:	e765      	b.n	800538c <_printf_i+0x104>
 80054c0:	0800580e 	.word	0x0800580e
 80054c4:	080057fd 	.word	0x080057fd

080054c8 <_sbrk_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4c06      	ldr	r4, [pc, #24]	; (80054e4 <_sbrk_r+0x1c>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	4605      	mov	r5, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	6023      	str	r3, [r4, #0]
 80054d4:	f000 f854 	bl	8005580 <_sbrk>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_sbrk_r+0x1a>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_sbrk_r+0x1a>
 80054e0:	602b      	str	r3, [r5, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	200010a0 	.word	0x200010a0

080054e8 <memmove>:
 80054e8:	4288      	cmp	r0, r1
 80054ea:	b510      	push	{r4, lr}
 80054ec:	eb01 0302 	add.w	r3, r1, r2
 80054f0:	d803      	bhi.n	80054fa <memmove+0x12>
 80054f2:	1e42      	subs	r2, r0, #1
 80054f4:	4299      	cmp	r1, r3
 80054f6:	d10c      	bne.n	8005512 <memmove+0x2a>
 80054f8:	bd10      	pop	{r4, pc}
 80054fa:	4298      	cmp	r0, r3
 80054fc:	d2f9      	bcs.n	80054f2 <memmove+0xa>
 80054fe:	1881      	adds	r1, r0, r2
 8005500:	1ad2      	subs	r2, r2, r3
 8005502:	42d3      	cmn	r3, r2
 8005504:	d100      	bne.n	8005508 <memmove+0x20>
 8005506:	bd10      	pop	{r4, pc}
 8005508:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800550c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005510:	e7f7      	b.n	8005502 <memmove+0x1a>
 8005512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005516:	f802 4f01 	strb.w	r4, [r2, #1]!
 800551a:	e7eb      	b.n	80054f4 <memmove+0xc>

0800551c <__malloc_lock>:
 800551c:	4770      	bx	lr

0800551e <__malloc_unlock>:
 800551e:	4770      	bx	lr

08005520 <_realloc_r>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	4607      	mov	r7, r0
 8005524:	4614      	mov	r4, r2
 8005526:	460e      	mov	r6, r1
 8005528:	b921      	cbnz	r1, 8005534 <_realloc_r+0x14>
 800552a:	4611      	mov	r1, r2
 800552c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005530:	f7ff bc86 	b.w	8004e40 <_malloc_r>
 8005534:	b922      	cbnz	r2, 8005540 <_realloc_r+0x20>
 8005536:	f7ff fc35 	bl	8004da4 <_free_r>
 800553a:	4625      	mov	r5, r4
 800553c:	4628      	mov	r0, r5
 800553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005540:	f000 f814 	bl	800556c <_malloc_usable_size_r>
 8005544:	4284      	cmp	r4, r0
 8005546:	d90f      	bls.n	8005568 <_realloc_r+0x48>
 8005548:	4621      	mov	r1, r4
 800554a:	4638      	mov	r0, r7
 800554c:	f7ff fc78 	bl	8004e40 <_malloc_r>
 8005550:	4605      	mov	r5, r0
 8005552:	2800      	cmp	r0, #0
 8005554:	d0f2      	beq.n	800553c <_realloc_r+0x1c>
 8005556:	4631      	mov	r1, r6
 8005558:	4622      	mov	r2, r4
 800555a:	f7ff fb51 	bl	8004c00 <memcpy>
 800555e:	4631      	mov	r1, r6
 8005560:	4638      	mov	r0, r7
 8005562:	f7ff fc1f 	bl	8004da4 <_free_r>
 8005566:	e7e9      	b.n	800553c <_realloc_r+0x1c>
 8005568:	4635      	mov	r5, r6
 800556a:	e7e7      	b.n	800553c <_realloc_r+0x1c>

0800556c <_malloc_usable_size_r>:
 800556c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005570:	2800      	cmp	r0, #0
 8005572:	f1a0 0004 	sub.w	r0, r0, #4
 8005576:	bfbc      	itt	lt
 8005578:	580b      	ldrlt	r3, [r1, r0]
 800557a:	18c0      	addlt	r0, r0, r3
 800557c:	4770      	bx	lr
	...

08005580 <_sbrk>:
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <_sbrk+0x14>)
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	4602      	mov	r2, r0
 8005586:	b909      	cbnz	r1, 800558c <_sbrk+0xc>
 8005588:	4903      	ldr	r1, [pc, #12]	; (8005598 <_sbrk+0x18>)
 800558a:	6019      	str	r1, [r3, #0]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	4402      	add	r2, r0
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	4770      	bx	lr
 8005594:	20000220 	.word	0x20000220
 8005598:	200010a4 	.word	0x200010a4

0800559c <_init>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr

080055a8 <_fini>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	bf00      	nop
 80055ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ae:	bc08      	pop	{r3}
 80055b0:	469e      	mov	lr, r3
 80055b2:	4770      	bx	lr
