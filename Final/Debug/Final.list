
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004414  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080045a4  080045a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  080047cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ac4  20000084  08004850  00020084  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000b48  08004850  00020b48  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  9 .debug_info   00025a8f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000040a7  00000000  00000000  00045b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a671  00000000  00000000  00049bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e58  00000000  00000000  00054260  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001290  00000000  00000000  000550b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000874d  00000000  00000000  00056348  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000057c7  00000000  00000000  0005ea95  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006425c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002da0  00000000  00000000  000642d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800458c 	.word	0x0800458c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800458c 	.word	0x0800458c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <I2Cx_Init.constprop.8>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
  i2c_handler->Init.OwnAddress1      = 0;
 8000282:	482a      	ldr	r0, [pc, #168]	; (800032c <I2Cx_Init.constprop.8+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000284:	4c2a      	ldr	r4, [pc, #168]	; (8000330 <I2Cx_Init.constprop.8+0xb0>)
  i2c_handler->Init.OwnAddress1      = 0;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <I2Cx_Init.constprop.8+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000288:	4d2b      	ldr	r5, [pc, #172]	; (8000338 <I2Cx_Init.constprop.8+0xb8>)
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800028a:	4f2c      	ldr	r7, [pc, #176]	; (800033c <I2Cx_Init.constprop.8+0xbc>)
  i2c_handler->Init.OwnAddress1      = 0;
 800028c:	2600      	movs	r6, #0
 800028e:	e884 0049 	stmia.w	r4, {r0, r3, r6}
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000292:	2201      	movs	r2, #1
 8000294:	60e2      	str	r2, [r4, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000296:	6126      	str	r6, [r4, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000298:	6166      	str	r6, [r4, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800029a:	61e6      	str	r6, [r4, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800029c:	6226      	str	r6, [r4, #32]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800029e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80002a0:	f043 0302 	orr.w	r3, r3, #2
 80002a4:	64eb      	str	r3, [r5, #76]	; 0x4c
 80002a6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 80002a8:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80002aa:	f003 0302 	and.w	r3, r3, #2
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80002b2:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80002b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80002b8:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80002ba:	2312      	movs	r3, #18
 80002bc:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002be:	2303      	movs	r3, #3
 80002c0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80002c2:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80002c4:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80002c6:	4638      	mov	r0, r7
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80002c8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80002ca:	f000 fa1b 	bl	8000704 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80002ce:	a903      	add	r1, sp, #12
 80002d0:	4638      	mov	r0, r7
 80002d2:	f000 fa17 	bl	8000704 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 80002d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80002d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002dc:	65ab      	str	r3, [r5, #88]	; 0x58
 80002de:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80002e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002e4:	9302      	str	r3, [sp, #8]
 80002e6:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 80002e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80002ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002ee:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 80002f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80002f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80002f6:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80002f8:	4632      	mov	r2, r6
 80002fa:	210f      	movs	r1, #15
 80002fc:	2021      	movs	r0, #33	; 0x21
 80002fe:	f000 f999 	bl	8000634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000302:	2021      	movs	r0, #33	; 0x21
 8000304:	f000 f9ca 	bl	800069c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000308:	4632      	mov	r2, r6
 800030a:	210f      	movs	r1, #15
 800030c:	2022      	movs	r0, #34	; 0x22
 800030e:	f000 f991 	bl	8000634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000312:	2022      	movs	r0, #34	; 0x22
 8000314:	f000 f9c2 	bl	800069c <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8000318:	4620      	mov	r0, r4
 800031a:	f000 fcc8 	bl	8000cae <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800031e:	4631      	mov	r1, r6
 8000320:	4620      	mov	r0, r4
 8000322:	f000 fea5 	bl	8001070 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000326:	b009      	add	sp, #36	; 0x24
 8000328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032a:	bf00      	nop
 800032c:	40005800 	.word	0x40005800
 8000330:	20000278 	.word	0x20000278
 8000334:	00702681 	.word	0x00702681
 8000338:	40021000 	.word	0x40021000
 800033c:	48000400 	.word	0x48000400

08000340 <BSP_LED_Init>:
{
 8000340:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000342:	b948      	cbnz	r0, 8000358 <BSP_LED_Init+0x18>
 8000344:	4b0d      	ldr	r3, [pc, #52]	; (800037c <BSP_LED_Init+0x3c>)
 8000346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000348:	f042 0202 	orr.w	r2, r2, #2
 800034c:	64da      	str	r2, [r3, #76]	; 0x4c
 800034e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000350:	f003 0302 	and.w	r3, r3, #2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800035c:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000366:	2302      	movs	r3, #2
 8000368:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800036a:	4b05      	ldr	r3, [pc, #20]	; (8000380 <BSP_LED_Init+0x40>)
 800036c:	a901      	add	r1, sp, #4
 800036e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000372:	f000 f9c7 	bl	8000704 <HAL_GPIO_Init>
}
 8000376:	b007      	add	sp, #28
 8000378:	f85d fb04 	ldr.w	pc, [sp], #4
 800037c:	40021000 	.word	0x40021000
 8000380:	20000004 	.word	0x20000004

08000384 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <BSP_LED_On+0x10>)
 8000386:	2201      	movs	r2, #1
 8000388:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800038c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000390:	f000 bb34 	b.w	80009fc <HAL_GPIO_WritePin>
 8000394:	20000004 	.word	0x20000004

08000398 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <BSP_LED_Off+0x10>)
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80003a4:	f000 bb2a 	b.w	80009fc <HAL_GPIO_WritePin>
 80003a8:	20000004 	.word	0x20000004

080003ac <BSP_PB_Init>:
{
 80003ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <BSP_PB_Init+0x6c>)
 80003b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003b2:	f042 0204 	orr.w	r2, r2, #4
 80003b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	f003 0304 	and.w	r3, r3, #4
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 80003c2:	b981      	cbnz	r1, 80003e6 <BSP_PB_Init+0x3a>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80003c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c8:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ce:	2302      	movs	r3, #2
 80003d0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80003d2:	4b12      	ldr	r3, [pc, #72]	; (800041c <BSP_PB_Init+0x70>)
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80003d4:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80003d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80003da:	a901      	add	r1, sp, #4
 80003dc:	f000 f992 	bl	8000704 <HAL_GPIO_Init>
}
 80003e0:	b007      	add	sp, #28
 80003e2:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 80003e6:	2901      	cmp	r1, #1
 80003e8:	d1fa      	bne.n	80003e0 <BSP_PB_Init+0x34>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80003ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ee:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003f0:	2303      	movs	r3, #3
 80003f2:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <BSP_PB_Init+0x74>)
 80003f6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <BSP_PB_Init+0x70>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 80003fa:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80003fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000400:	a901      	add	r1, sp, #4
 8000402:	f000 f97f 	bl	8000704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000406:	2200      	movs	r2, #0
 8000408:	210f      	movs	r1, #15
 800040a:	2028      	movs	r0, #40	; 0x28
 800040c:	f000 f912 	bl	8000634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000410:	2028      	movs	r0, #40	; 0x28
 8000412:	f000 f943 	bl	800069c <HAL_NVIC_EnableIRQ>
}
 8000416:	e7e3      	b.n	80003e0 <BSP_PB_Init+0x34>
 8000418:	40021000 	.word	0x40021000
 800041c:	20000000 	.word	0x20000000
 8000420:	10110000 	.word	0x10110000

08000424 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8000424:	f7ff bf2c 	b.w	8000280 <I2Cx_Init.constprop.8>

08000428 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000428:	b510      	push	{r4, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800042e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000432:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000436:	9302      	str	r3, [sp, #8]
 8000438:	2301      	movs	r3, #1
 800043a:	460a      	mov	r2, r1
 800043c:	9301      	str	r3, [sp, #4]
 800043e:	4601      	mov	r1, r0
 8000440:	9400      	str	r4, [sp, #0]
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <SENSOR_IO_Write+0x30>)
 8000444:	f000 fc9d 	bl	8000d82 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000448:	b120      	cbz	r0, 8000454 <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 800044a:	4803      	ldr	r0, [pc, #12]	; (8000458 <SENSOR_IO_Write+0x30>)
 800044c:	f000 fc80 	bl	8000d50 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000450:	f7ff ff16 	bl	8000280 <I2Cx_Init.constprop.8>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8000454:	b006      	add	sp, #24
 8000456:	bd10      	pop	{r4, pc}
 8000458:	20000278 	.word	0x20000278

0800045c <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800045c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 800045e:	aa06      	add	r2, sp, #24
 8000460:	2300      	movs	r3, #0
 8000462:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800046a:	9302      	str	r3, [sp, #8]
 800046c:	2301      	movs	r3, #1
 800046e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000472:	460a      	mov	r2, r1
 8000474:	4601      	mov	r1, r0
 8000476:	4807      	ldr	r0, [pc, #28]	; (8000494 <SENSOR_IO_Read+0x38>)
 8000478:	f000 fd3c 	bl	8000ef4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800047c:	b120      	cbz	r0, 8000488 <SENSOR_IO_Read+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <SENSOR_IO_Read+0x38>)
 8000480:	f000 fc66 	bl	8000d50 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000484:	f7ff fefc 	bl	8000280 <I2Cx_Init.constprop.8>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8000488:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800048c:	b007      	add	sp, #28
 800048e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000492:	bf00      	nop
 8000494:	20000278 	.word	0x20000278

08000498 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800049a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800049e:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 80004a2:	460a      	mov	r2, r1
 80004a4:	2301      	movs	r3, #1
 80004a6:	4601      	mov	r1, r0
 80004a8:	4806      	ldr	r0, [pc, #24]	; (80004c4 <SENSOR_IO_ReadMultiple+0x2c>)
 80004aa:	f000 fd23 	bl	8000ef4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80004ae:	4604      	mov	r4, r0
 80004b0:	b120      	cbz	r0, 80004bc <SENSOR_IO_ReadMultiple+0x24>
  HAL_I2C_DeInit(i2c_handler);
 80004b2:	4804      	ldr	r0, [pc, #16]	; (80004c4 <SENSOR_IO_ReadMultiple+0x2c>)
 80004b4:	f000 fc4c 	bl	8000d50 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80004b8:	f7ff fee2 	bl	8000280 <I2Cx_Init.constprop.8>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 80004bc:	4620      	mov	r0, r4
 80004be:	b004      	add	sp, #16
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	bf00      	nop
 80004c4:	20000278 	.word	0x20000278

080004c8 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80004c8:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80004ca:	b2c4      	uxtb	r4, r0
 80004cc:	2120      	movs	r1, #32
 80004ce:	4620      	mov	r0, r4
 80004d0:	f7ff ffc4 	bl	800045c <SENSOR_IO_Read>
 80004d4:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80004d8:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 80004dc:	4620      	mov	r0, r4
 80004de:	2120      	movs	r1, #32
}
 80004e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80004e4:	f7ff bfa0 	b.w	8000428 <SENSOR_IO_Write>

080004e8 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80004e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80004ec:	fa5f f880 	uxtb.w	r8, r0
 80004f0:	aa01      	add	r2, sp, #4
 80004f2:	2302      	movs	r3, #2
 80004f4:	21b2      	movs	r1, #178	; 0xb2
 80004f6:	4640      	mov	r0, r8
 80004f8:	f7ff ffce 	bl	8000498 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80004fc:	2135      	movs	r1, #53	; 0x35
 80004fe:	4640      	mov	r0, r8
 8000500:	f7ff ffac 	bl	800045c <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000504:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000506:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800050a:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800050e:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000510:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000514:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 8000518:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 800051a:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800051c:	2304      	movs	r3, #4
 800051e:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8000522:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000524:	21bc      	movs	r1, #188	; 0xbc
 8000526:	4640      	mov	r0, r8
 8000528:	f7ff ffb6 	bl	8000498 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800052c:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8000530:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000534:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000538:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800053c:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000540:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000542:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000546:	21aa      	movs	r1, #170	; 0xaa
 8000548:	2302      	movs	r3, #2
 800054a:	4640      	mov	r0, r8
 800054c:	f7ff ffa4 	bl	8000498 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000550:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000554:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000558:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800055c:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800055e:	b21b      	sxth	r3, r3
 8000560:	1bdb      	subs	r3, r3, r7
  T0_degC = T0_degC_x8_u16 >> 3;
 8000562:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000564:	ee07 3a90 	vmov	s15, r3
 8000568:	1bab      	subs	r3, r5, r6
 800056a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800056e:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000572:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000578:	1be4      	subs	r4, r4, r7
 800057a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800057e:	ee07 4a10 	vmov	s14, r4
 8000582:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000586:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800058a:	ee07 6a90 	vmov	s15, r6
 800058e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 8000592:	ee36 0a80 	vadd.f32	s0, s13, s0
 8000596:	b002      	add	sp, #8
 8000598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800059c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_InitTick+0x24>)
{
 80005a0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80005a2:	6818      	ldr	r0, [r3, #0]
 80005a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80005ac:	f000 f882 	bl	80006b4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	4621      	mov	r1, r4
 80005b4:	f04f 30ff 	mov.w	r0, #4294967295
 80005b8:	f000 f83c 	bl	8000634 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005bc:	2000      	movs	r0, #0
 80005be:	bd10      	pop	{r4, pc}
 80005c0:	2000001c 	.word	0x2000001c

080005c4 <HAL_Init>:
{
 80005c4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c6:	2003      	movs	r0, #3
 80005c8:	f000 f822 	bl	8000610 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff ffe5 	bl	800059c <HAL_InitTick>
  HAL_MspInit();
 80005d2:	f003 f92b 	bl	800382c <HAL_MspInit>
}
 80005d6:	2000      	movs	r0, #0
 80005d8:	bd08      	pop	{r3, pc}
	...

080005dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005dc:	4a02      	ldr	r2, [pc, #8]	; (80005e8 <HAL_IncTick+0xc>)
 80005de:	6813      	ldr	r3, [r2, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200002c4 	.word	0x200002c4

080005ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <HAL_GetTick+0x8>)
 80005ee:	6818      	ldr	r0, [r3, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200002c4 	.word	0x200002c4

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b538      	push	{r3, r4, r5, lr}
 80005fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff fff6 	bl	80005ec <HAL_GetTick>
 8000600:	4605      	mov	r5, r0
//  if (wait < HAL_MAX_DELAY)
//  {
//    wait++;
//  }

  while((HAL_GetTick() - tickstart) < wait)
 8000602:	f7ff fff3 	bl	80005ec <HAL_GetTick>
 8000606:	1b40      	subs	r0, r0, r5
 8000608:	4284      	cmp	r4, r0
 800060a:	d8fa      	bhi.n	8000602 <HAL_Delay+0xa>
  {
  }
}
 800060c:	bd38      	pop	{r3, r4, r5, pc}
	...

08000610 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000612:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000614:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000618:	041b      	lsls	r3, r3, #16
 800061a:	0c1b      	lsrs	r3, r3, #16
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000620:	0200      	lsls	r0, r0, #8
 8000622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000626:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800062a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800062c:	60d3      	str	r3, [r2, #12]
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000636:	b530      	push	{r4, r5, lr}
 8000638:	68dc      	ldr	r4, [r3, #12]
 800063a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000642:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000644:	2b04      	cmp	r3, #4
 8000646:	bf28      	it	cs
 8000648:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	f04f 0501 	mov.w	r5, #1
 8000650:	fa05 f303 	lsl.w	r3, r5, r3
 8000654:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000658:	bf8c      	ite	hi
 800065a:	3c03      	subhi	r4, #3
 800065c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065e:	4019      	ands	r1, r3
 8000660:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000662:	fa05 f404 	lsl.w	r4, r5, r4
 8000666:	3c01      	subs	r4, #1
 8000668:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800066a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	ea42 0201 	orr.w	r2, r2, r1
 8000670:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	bfaf      	iteee	ge
 8000676:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	f000 000f 	andlt.w	r0, r0, #15
 800067e:	4b06      	ldrlt	r3, [pc, #24]	; (8000698 <HAL_NVIC_SetPriority+0x64>)
 8000680:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	bfa5      	ittet	ge
 8000684:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000688:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	bf00      	nop
 8000694:	e000ed00 	.word	0xe000ed00
 8000698:	e000ed14 	.word	0xe000ed14

0800069c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800069c:	0942      	lsrs	r2, r0, #5
 800069e:	2301      	movs	r3, #1
 80006a0:	f000 001f 	and.w	r0, r0, #31
 80006a4:	fa03 f000 	lsl.w	r0, r3, r0
 80006a8:	4b01      	ldr	r3, [pc, #4]	; (80006b0 <HAL_NVIC_EnableIRQ+0x14>)
 80006aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b4:	3801      	subs	r0, #1
 80006b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ba:	d20a      	bcs.n	80006d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	21f0      	movs	r1, #240	; 0xf0
 80006c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e010 	.word	0xe000e010
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006e2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006e4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006e6:	bf0c      	ite	eq
 80006e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006ec:	f022 0204 	bicne.w	r2, r2, #4
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	4770      	bx	lr
 80006f4:	e000e010 	.word	0xe000e010

080006f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006f8:	4770      	bx	lr

080006fa <HAL_SYSTICK_IRQHandler>:
{
 80006fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006fc:	f7ff fffc 	bl	80006f8 <HAL_SYSTICK_Callback>
 8000700:	bd08      	pop	{r3, pc}
	...

08000704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000708:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800070a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80008b8 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000710:	4c67      	ldr	r4, [pc, #412]	; (80008b0 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000712:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8000714:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000716:	9a01      	ldr	r2, [sp, #4]
 8000718:	40da      	lsrs	r2, r3
 800071a:	d102      	bne.n	8000722 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 800071c:	b005      	add	sp, #20
 800071e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000722:	2601      	movs	r6, #1
    if(iocurrent)
 8000724:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000726:	409e      	lsls	r6, r3
    if(iocurrent)
 8000728:	ea12 0e06 	ands.w	lr, r2, r6
 800072c:	f000 80b1 	beq.w	8000892 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000730:	684a      	ldr	r2, [r1, #4]
 8000732:	f022 0710 	bic.w	r7, r2, #16
 8000736:	2f02      	cmp	r7, #2
 8000738:	d116      	bne.n	8000768 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800073a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800073e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000742:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000746:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800074a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800074e:	f04f 0c0f 	mov.w	ip, #15
 8000752:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000756:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800075a:	690d      	ldr	r5, [r1, #16]
 800075c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000760:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000764:	f8c9 5020 	str.w	r5, [r9, #32]
 8000768:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800076c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800076e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000772:	fa05 f50c 	lsl.w	r5, r5, ip
 8000776:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000778:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800077c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000780:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000784:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000786:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800078a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800078c:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000790:	d811      	bhi.n	80007b6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000792:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000794:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000798:	68cf      	ldr	r7, [r1, #12]
 800079a:	fa07 f70c 	lsl.w	r7, r7, ip
 800079e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80007a2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007a4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007a6:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007aa:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80007ae:	409f      	lsls	r7, r3
 80007b0:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80007b4:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80007b6:	f1ba 0f03 	cmp.w	sl, #3
 80007ba:	d107      	bne.n	80007cc <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80007bc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80007be:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80007c2:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80007c6:	409f      	lsls	r7, r3
 80007c8:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80007ca:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80007cc:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80007ce:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80007d0:	688e      	ldr	r6, [r1, #8]
 80007d2:	fa06 f60c 	lsl.w	r6, r6, ip
 80007d6:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80007d8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007da:	00d5      	lsls	r5, r2, #3
 80007dc:	d559      	bpl.n	8000892 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80007e2:	f045 0501 	orr.w	r5, r5, #1
 80007e6:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80007ea:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80007ee:	f023 0603 	bic.w	r6, r3, #3
 80007f2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80007f6:	f005 0501 	and.w	r5, r5, #1
 80007fa:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80007fe:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000800:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000804:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000806:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000808:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800080c:	270f      	movs	r7, #15
 800080e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000812:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000816:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800081a:	d03c      	beq.n	8000896 <HAL_GPIO_Init+0x192>
 800081c:	4d25      	ldr	r5, [pc, #148]	; (80008b4 <HAL_GPIO_Init+0x1b0>)
 800081e:	42a8      	cmp	r0, r5
 8000820:	d03b      	beq.n	800089a <HAL_GPIO_Init+0x196>
 8000822:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000826:	42a8      	cmp	r0, r5
 8000828:	d039      	beq.n	800089e <HAL_GPIO_Init+0x19a>
 800082a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800082e:	42a8      	cmp	r0, r5
 8000830:	d037      	beq.n	80008a2 <HAL_GPIO_Init+0x19e>
 8000832:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000836:	42a8      	cmp	r0, r5
 8000838:	d035      	beq.n	80008a6 <HAL_GPIO_Init+0x1a2>
 800083a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800083e:	42a8      	cmp	r0, r5
 8000840:	d033      	beq.n	80008aa <HAL_GPIO_Init+0x1a6>
 8000842:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000846:	42a8      	cmp	r0, r5
 8000848:	bf14      	ite	ne
 800084a:	2507      	movne	r5, #7
 800084c:	2506      	moveq	r5, #6
 800084e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000852:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000854:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000856:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000858:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800085c:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 800085e:	bf54      	ite	pl
 8000860:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000862:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000866:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000868:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800086a:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 800086c:	bf54      	ite	pl
 800086e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000870:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000874:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000876:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000878:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 800087a:	bf54      	ite	pl
 800087c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800087e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000882:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000884:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000886:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8000888:	bf54      	ite	pl
 800088a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800088c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000890:	60e5      	str	r5, [r4, #12]
    position++;
 8000892:	3301      	adds	r3, #1
 8000894:	e73f      	b.n	8000716 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000896:	2500      	movs	r5, #0
 8000898:	e7d9      	b.n	800084e <HAL_GPIO_Init+0x14a>
 800089a:	2501      	movs	r5, #1
 800089c:	e7d7      	b.n	800084e <HAL_GPIO_Init+0x14a>
 800089e:	2502      	movs	r5, #2
 80008a0:	e7d5      	b.n	800084e <HAL_GPIO_Init+0x14a>
 80008a2:	2503      	movs	r5, #3
 80008a4:	e7d3      	b.n	800084e <HAL_GPIO_Init+0x14a>
 80008a6:	2504      	movs	r5, #4
 80008a8:	e7d1      	b.n	800084e <HAL_GPIO_Init+0x14a>
 80008aa:	2505      	movs	r5, #5
 80008ac:	e7cf      	b.n	800084e <HAL_GPIO_Init+0x14a>
 80008ae:	bf00      	nop
 80008b0:	40010400 	.word	0x40010400
 80008b4:	48000400 	.word	0x48000400
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80008bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 80008c0:	4c47      	ldr	r4, [pc, #284]	; (80009e0 <HAL_GPIO_DeInit+0x124>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80008c2:	f8df a124 	ldr.w	sl, [pc, #292]	; 80009e8 <HAL_GPIO_DeInit+0x12c>
 80008c6:	f8df b124 	ldr.w	fp, [pc, #292]	; 80009ec <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00;
 80008ca:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1U << position);
 80008cc:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 80008d0:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != RESET)
 80008d4:	fa31 f203 	lsrs.w	r2, r1, r3
 80008d8:	d102      	bne.n	80008e0 <HAL_GPIO_DeInit+0x24>
      }
    }
    
    position++;
  }
}
 80008da:	b003      	add	sp, #12
 80008dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 80008e0:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent)
 80008e4:	ea11 0206 	ands.w	r2, r1, r6
 80008e8:	9201      	str	r2, [sp, #4]
 80008ea:	d06a      	beq.n	80009c2 <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 80008ec:	6807      	ldr	r7, [r0, #0]
 80008ee:	005a      	lsls	r2, r3, #1
 80008f0:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008f4:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 80008f8:	4317      	orrs	r7, r2
 80008fa:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80008fe:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000900:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8000904:	f003 0e07 	and.w	lr, r3, #7
 8000908:	463d      	mov	r5, r7
 800090a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800090e:	270f      	movs	r7, #15
 8000910:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000914:	ea25 0e0e 	bic.w	lr, r5, lr
 8000918:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800091c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8000920:	43d2      	mvns	r2, r2
 8000922:	ea0e 0e02 	and.w	lr, lr, r2
 8000926:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800092a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800092e:	43f6      	mvns	r6, r6
 8000930:	ea0e 0e06 	and.w	lr, lr, r6
 8000934:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000938:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800093c:	ea02 020e 	and.w	r2, r2, lr
 8000940:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000942:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000944:	4016      	ands	r6, r2
 8000946:	62c6      	str	r6, [r0, #44]	; 0x2c
 8000948:	f023 0603 	bic.w	r6, r3, #3
 800094c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000950:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000954:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8000958:	68b2      	ldr	r2, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800095a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800095e:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8000962:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000966:	ea02 0c07 	and.w	ip, r2, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800096a:	d02c      	beq.n	80009c6 <HAL_GPIO_DeInit+0x10a>
 800096c:	4a1d      	ldr	r2, [pc, #116]	; (80009e4 <HAL_GPIO_DeInit+0x128>)
 800096e:	4290      	cmp	r0, r2
 8000970:	d02b      	beq.n	80009ca <HAL_GPIO_DeInit+0x10e>
 8000972:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000976:	4290      	cmp	r0, r2
 8000978:	d029      	beq.n	80009ce <HAL_GPIO_DeInit+0x112>
 800097a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800097e:	4290      	cmp	r0, r2
 8000980:	d027      	beq.n	80009d2 <HAL_GPIO_DeInit+0x116>
 8000982:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000986:	4290      	cmp	r0, r2
 8000988:	d025      	beq.n	80009d6 <HAL_GPIO_DeInit+0x11a>
 800098a:	4550      	cmp	r0, sl
 800098c:	d025      	beq.n	80009da <HAL_GPIO_DeInit+0x11e>
 800098e:	4558      	cmp	r0, fp
 8000990:	bf0c      	ite	eq
 8000992:	2206      	moveq	r2, #6
 8000994:	2207      	movne	r2, #7
 8000996:	fa02 f20e 	lsl.w	r2, r2, lr
 800099a:	4594      	cmp	ip, r2
 800099c:	d111      	bne.n	80009c2 <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800099e:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 80009a0:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80009a2:	ea22 0707 	bic.w	r7, r2, r7
 80009a6:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 80009a8:	6822      	ldr	r2, [r4, #0]
 80009aa:	43ed      	mvns	r5, r5
 80009ac:	402a      	ands	r2, r5
 80009ae:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 80009b0:	6862      	ldr	r2, [r4, #4]
 80009b2:	402a      	ands	r2, r5
 80009b4:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 80009b6:	68a2      	ldr	r2, [r4, #8]
 80009b8:	402a      	ands	r2, r5
 80009ba:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 80009bc:	68e2      	ldr	r2, [r4, #12]
 80009be:	4015      	ands	r5, r2
 80009c0:	60e5      	str	r5, [r4, #12]
    position++;
 80009c2:	3301      	adds	r3, #1
 80009c4:	e786      	b.n	80008d4 <HAL_GPIO_DeInit+0x18>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80009c6:	2200      	movs	r2, #0
 80009c8:	e7e5      	b.n	8000996 <HAL_GPIO_DeInit+0xda>
 80009ca:	2201      	movs	r2, #1
 80009cc:	e7e3      	b.n	8000996 <HAL_GPIO_DeInit+0xda>
 80009ce:	2202      	movs	r2, #2
 80009d0:	e7e1      	b.n	8000996 <HAL_GPIO_DeInit+0xda>
 80009d2:	2203      	movs	r2, #3
 80009d4:	e7df      	b.n	8000996 <HAL_GPIO_DeInit+0xda>
 80009d6:	2204      	movs	r2, #4
 80009d8:	e7dd      	b.n	8000996 <HAL_GPIO_DeInit+0xda>
 80009da:	2205      	movs	r2, #5
 80009dc:	e7db      	b.n	8000996 <HAL_GPIO_DeInit+0xda>
 80009de:	bf00      	nop
 80009e0:	40010400 	.word	0x40010400
 80009e4:	48000400 	.word	0x48000400
 80009e8:	48001400 	.word	0x48001400
 80009ec:	48001800 	.word	0x48001800

080009f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80009f0:	6903      	ldr	r3, [r0, #16]
 80009f2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80009f4:	bf14      	ite	ne
 80009f6:	2001      	movne	r0, #1
 80009f8:	2000      	moveq	r0, #0
 80009fa:	4770      	bx	lr

080009fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009fc:	b10a      	cbz	r2, 8000a02 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009fe:	6181      	str	r1, [r0, #24]
 8000a00:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a02:	6281      	str	r1, [r0, #40]	; 0x28
 8000a04:	4770      	bx	lr

08000a06 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a06:	4770      	bx	lr

08000a08 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000a08:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000a0c:	6959      	ldr	r1, [r3, #20]
 8000a0e:	4201      	tst	r1, r0
 8000a10:	d002      	beq.n	8000a18 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a12:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a14:	f7ff fff7 	bl	8000a06 <HAL_GPIO_EXTI_Callback>
 8000a18:	bd08      	pop	{r3, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40010400 	.word	0x40010400

08000a20 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000a20:	6803      	ldr	r3, [r0, #0]
 8000a22:	699a      	ldr	r2, [r3, #24]
 8000a24:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000a26:	bf44      	itt	mi
 8000a28:	2200      	movmi	r2, #0
 8000a2a:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a2c:	699a      	ldr	r2, [r3, #24]
 8000a2e:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000a30:	bf5e      	ittt	pl
 8000a32:	699a      	ldrpl	r2, [r3, #24]
 8000a34:	f042 0201 	orrpl.w	r2, r2, #1
 8000a38:	619a      	strpl	r2, [r3, #24]
 8000a3a:	4770      	bx	lr

08000a3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000a3c:	b530      	push	{r4, r5, lr}
 8000a3e:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000a40:	6805      	ldr	r5, [r0, #0]
 8000a42:	4323      	orrs	r3, r4
 8000a44:	0d64      	lsrs	r4, r4, #21
 8000a46:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000a4a:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000a4e:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000a52:	6868      	ldr	r0, [r5, #4]
 8000a54:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000a58:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	f044 0403 	orr.w	r4, r4, #3
 8000a62:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000a66:	ea20 0404 	bic.w	r4, r0, r4
 8000a6a:	4321      	orrs	r1, r4
 8000a6c:	6069      	str	r1, [r5, #4]
 8000a6e:	bd30      	pop	{r4, r5, pc}

08000a70 <I2C_WaitOnFlagUntilTimeout>:
{
 8000a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a74:	9f06      	ldr	r7, [sp, #24]
 8000a76:	4604      	mov	r4, r0
 8000a78:	4688      	mov	r8, r1
 8000a7a:	4616      	mov	r6, r2
 8000a7c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000a7e:	6822      	ldr	r2, [r4, #0]
 8000a80:	6993      	ldr	r3, [r2, #24]
 8000a82:	ea38 0303 	bics.w	r3, r8, r3
 8000a86:	bf0c      	ite	eq
 8000a88:	2301      	moveq	r3, #1
 8000a8a:	2300      	movne	r3, #0
 8000a8c:	42b3      	cmp	r3, r6
 8000a8e:	d002      	beq.n	8000a96 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000a90:	2000      	movs	r0, #0
}
 8000a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000a96:	1c6b      	adds	r3, r5, #1
 8000a98:	d0f2      	beq.n	8000a80 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000a9a:	b955      	cbnz	r5, 8000ab2 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000aa8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000aac:	2003      	movs	r0, #3
 8000aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ab2:	f7ff fd9b 	bl	80005ec <HAL_GetTick>
 8000ab6:	1bc0      	subs	r0, r0, r7
 8000ab8:	4285      	cmp	r5, r0
 8000aba:	d2e0      	bcs.n	8000a7e <I2C_WaitOnFlagUntilTimeout+0xe>
 8000abc:	e7ee      	b.n	8000a9c <I2C_WaitOnFlagUntilTimeout+0x2c>

08000abe <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000abe:	6803      	ldr	r3, [r0, #0]
{
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ac4:	6998      	ldr	r0, [r3, #24]
 8000ac6:	f010 0010 	ands.w	r0, r0, #16
{
 8000aca:	460d      	mov	r5, r1
 8000acc:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ace:	d112      	bne.n	8000af6 <I2C_IsAcknowledgeFailed+0x38>
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000ad2:	1c69      	adds	r1, r5, #1
 8000ad4:	d010      	beq.n	8000af8 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ad6:	b94d      	cbnz	r5, 8000aec <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000ae4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8000ae8:	2003      	movs	r0, #3
 8000aea:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000aec:	f7ff fd7e 	bl	80005ec <HAL_GetTick>
 8000af0:	1b80      	subs	r0, r0, r6
 8000af2:	4285      	cmp	r5, r0
 8000af4:	d3f0      	bcc.n	8000ad8 <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	6999      	ldr	r1, [r3, #24]
 8000afa:	068a      	lsls	r2, r1, #26
 8000afc:	d5e9      	bpl.n	8000ad2 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000afe:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b00:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b02:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000b04:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b06:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000b08:	f7ff ff8a 	bl	8000a20 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000b0c:	6822      	ldr	r2, [r4, #0]
 8000b0e:	6853      	ldr	r3, [r2, #4]
 8000b10:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000b14:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000b18:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000b1c:	f023 0301 	bic.w	r3, r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000b22:	2304      	movs	r3, #4
 8000b24:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b26:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000b28:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000b2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8000b34:	2001      	movs	r0, #1
}
 8000b36:	bd70      	pop	{r4, r5, r6, pc}

08000b38 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	460d      	mov	r5, r1
 8000b3e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	079b      	lsls	r3, r3, #30
 8000b46:	d501      	bpl.n	8000b4c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000b48:	2000      	movs	r0, #0
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b4c:	4632      	mov	r2, r6
 8000b4e:	4629      	mov	r1, r5
 8000b50:	4620      	mov	r0, r4
 8000b52:	f7ff ffb4 	bl	8000abe <I2C_IsAcknowledgeFailed>
 8000b56:	b9b0      	cbnz	r0, 8000b86 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000b58:	1c6a      	adds	r2, r5, #1
 8000b5a:	d0f1      	beq.n	8000b40 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000b5c:	b96d      	cbnz	r5, 8000b7a <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b60:	f043 0320 	orr.w	r3, r3, #32
 8000b64:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000b66:	2320      	movs	r3, #32
 8000b68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000b72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000b76:	2003      	movs	r0, #3
 8000b78:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000b7a:	f7ff fd37 	bl	80005ec <HAL_GetTick>
 8000b7e:	1b80      	subs	r0, r0, r6
 8000b80:	4285      	cmp	r5, r0
 8000b82:	d2dd      	bcs.n	8000b40 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8000b84:	e7eb      	b.n	8000b5e <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8000b86:	2001      	movs	r0, #1
}
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b8c <I2C_RequestMemoryWrite>:
{
 8000b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000b90:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <I2C_RequestMemoryWrite+0x68>)
 8000b94:	9300      	str	r3, [sp, #0]
{
 8000b96:	4604      	mov	r4, r0
 8000b98:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000b9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b9e:	b2fa      	uxtb	r2, r7
 8000ba0:	f7ff ff4c 	bl	8000a3c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ba4:	4632      	mov	r2, r6
 8000ba6:	9908      	ldr	r1, [sp, #32]
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f7ff ffc5 	bl	8000b38 <I2C_WaitOnTXISFlagUntilTimeout>
 8000bae:	b128      	cbz	r0, 8000bbc <I2C_RequestMemoryWrite+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d110      	bne.n	8000bd8 <I2C_RequestMemoryWrite+0x4c>
      return HAL_ERROR;
 8000bb6:	2001      	movs	r0, #1
}
 8000bb8:	b003      	add	sp, #12
 8000bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000bbc:	2f01      	cmp	r7, #1
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	d10c      	bne.n	8000bdc <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000bc2:	b2ed      	uxtb	r5, r5
 8000bc4:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000bc6:	9b08      	ldr	r3, [sp, #32]
 8000bc8:	9600      	str	r6, [sp, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f7ff ff4e 	bl	8000a70 <I2C_WaitOnFlagUntilTimeout>
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d0ef      	beq.n	8000bb8 <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 8000bd8:	2003      	movs	r0, #3
 8000bda:	e7ed      	b.n	8000bb8 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000bdc:	0a2a      	lsrs	r2, r5, #8
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000be0:	9908      	ldr	r1, [sp, #32]
 8000be2:	4632      	mov	r2, r6
 8000be4:	4620      	mov	r0, r4
 8000be6:	f7ff ffa7 	bl	8000b38 <I2C_WaitOnTXISFlagUntilTimeout>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d1e0      	bne.n	8000bb0 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	e7e7      	b.n	8000bc2 <I2C_RequestMemoryWrite+0x36>
 8000bf2:	bf00      	nop
 8000bf4:	80002000 	.word	0x80002000

08000bf8 <I2C_RequestMemoryRead>:
{
 8000bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000bfa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000bfc:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <I2C_RequestMemoryRead+0x64>)
 8000c00:	9300      	str	r3, [sp, #0]
{
 8000c02:	4604      	mov	r4, r0
 8000c04:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000c06:	2300      	movs	r3, #0
 8000c08:	b2fa      	uxtb	r2, r7
 8000c0a:	f7ff ff17 	bl	8000a3c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c0e:	4632      	mov	r2, r6
 8000c10:	9908      	ldr	r1, [sp, #32]
 8000c12:	4620      	mov	r0, r4
 8000c14:	f7ff ff90 	bl	8000b38 <I2C_WaitOnTXISFlagUntilTimeout>
 8000c18:	b128      	cbz	r0, 8000c26 <I2C_RequestMemoryRead+0x2e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d110      	bne.n	8000c42 <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 8000c20:	2001      	movs	r0, #1
}
 8000c22:	b003      	add	sp, #12
 8000c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000c26:	2f01      	cmp	r7, #1
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	d10c      	bne.n	8000c46 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000c2c:	b2ed      	uxtb	r5, r5
 8000c2e:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000c30:	9b08      	ldr	r3, [sp, #32]
 8000c32:	9600      	str	r6, [sp, #0]
 8000c34:	2200      	movs	r2, #0
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f7ff ff19 	bl	8000a70 <I2C_WaitOnFlagUntilTimeout>
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	d0ef      	beq.n	8000c22 <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 8000c42:	2003      	movs	r0, #3
 8000c44:	e7ed      	b.n	8000c22 <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000c46:	0a2a      	lsrs	r2, r5, #8
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c4a:	9908      	ldr	r1, [sp, #32]
 8000c4c:	4632      	mov	r2, r6
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f7ff ff72 	bl	8000b38 <I2C_WaitOnTXISFlagUntilTimeout>
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d1e0      	bne.n	8000c1a <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	e7e7      	b.n	8000c2c <I2C_RequestMemoryRead+0x34>
 8000c5c:	80002000 	.word	0x80002000

08000c60 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c68:	6823      	ldr	r3, [r4, #0]
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	069b      	lsls	r3, r3, #26
 8000c6e:	d501      	bpl.n	8000c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000c70:	2000      	movs	r0, #0
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c74:	4632      	mov	r2, r6
 8000c76:	4629      	mov	r1, r5
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f7ff ff20 	bl	8000abe <I2C_IsAcknowledgeFailed>
 8000c7e:	b9a0      	cbnz	r0, 8000caa <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000c80:	b96d      	cbnz	r5, 8000c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000c8a:	2320      	movs	r3, #32
 8000c8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000c96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000c9e:	f7ff fca5 	bl	80005ec <HAL_GetTick>
 8000ca2:	1b80      	subs	r0, r0, r6
 8000ca4:	4285      	cmp	r5, r0
 8000ca6:	d2df      	bcs.n	8000c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8000ca8:	e7eb      	b.n	8000c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000caa:	2001      	movs	r0, #1
}
 8000cac:	bd70      	pop	{r4, r5, r6, pc}

08000cae <HAL_I2C_Init>:
{
 8000cae:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	d04a      	beq.n	8000d4c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cb6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000cba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cbe:	b91b      	cbnz	r3, 8000cc8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000cc0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000cc4:	f002 fb30 	bl	8003328 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cc8:	2324      	movs	r3, #36	; 0x24
 8000cca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000cce:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cd0:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	f022 0201 	bic.w	r2, r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000cda:	6862      	ldr	r2, [r4, #4]
 8000cdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ce0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ce2:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ce4:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cee:	d124      	bne.n	8000d3a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000cf6:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000cf8:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000cfa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d02:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d0a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d0c:	6922      	ldr	r2, [r4, #16]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	69a1      	ldr	r1, [r4, #24]
 8000d12:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d16:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d18:	6a21      	ldr	r1, [r4, #32]
 8000d1a:	69e2      	ldr	r2, [r4, #28]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	f042 0201 	orr.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d28:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000d2a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d2c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d32:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d34:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000d38:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d3e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d40:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d42:	bf04      	itt	eq
 8000d44:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000d48:	605a      	streq	r2, [r3, #4]
 8000d4a:	e7d4      	b.n	8000cf6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000d4c:	2001      	movs	r0, #1
}
 8000d4e:	bd10      	pop	{r4, pc}

08000d50 <HAL_I2C_DeInit>:
{
 8000d50:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000d52:	4604      	mov	r4, r0
 8000d54:	b198      	cbz	r0, 8000d7e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8000d56:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d58:	2324      	movs	r3, #36	; 0x24
 8000d5a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000d5e:	6813      	ldr	r3, [r2, #0]
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8000d66:	f002 fb07 	bl	8003378 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8000d6e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8000d72:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d76:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d78:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000d7c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d7e:	2001      	movs	r0, #1
}
 8000d80:	bd10      	pop	{r4, pc}

08000d82 <HAL_I2C_Mem_Write>:
{
 8000d82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d86:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d88:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000d8c:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d8e:	2b20      	cmp	r3, #32
{
 8000d90:	4604      	mov	r4, r0
 8000d92:	460f      	mov	r7, r1
 8000d94:	9203      	str	r2, [sp, #12]
 8000d96:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000d9a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d9e:	f040 80a6 	bne.w	8000eee <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8000da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000da4:	b91b      	cbnz	r3, 8000dae <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 8000da6:	2001      	movs	r0, #1
}
 8000da8:	b005      	add	sp, #20
 8000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8000dae:	f1ba 0f00 	cmp.w	sl, #0
 8000db2:	d0f8      	beq.n	8000da6 <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 8000db4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	f000 8098 	beq.w	8000eee <HAL_I2C_Mem_Write+0x16c>
 8000dbe:	2501      	movs	r5, #1
 8000dc0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000dc4:	f7ff fc12 	bl	80005ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000dc8:	2319      	movs	r3, #25
 8000dca:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000dcc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000dce:	462a      	mov	r2, r5
 8000dd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f7ff fe4b 	bl	8000a70 <I2C_WaitOnFlagUntilTimeout>
 8000dda:	4680      	mov	r8, r0
 8000ddc:	b9d0      	cbnz	r0, 8000e14 <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000dde:	2321      	movs	r3, #33	; 0x21
 8000de0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000de4:	2340      	movs	r3, #64	; 0x40
 8000de6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dec:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000dee:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000df0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000df2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000df6:	9601      	str	r6, [sp, #4]
 8000df8:	f8cd 9000 	str.w	r9, [sp]
 8000dfc:	465b      	mov	r3, fp
 8000dfe:	9a03      	ldr	r2, [sp, #12]
 8000e00:	4639      	mov	r1, r7
 8000e02:	4620      	mov	r0, r4
 8000e04:	f7ff fec2 	bl	8000b8c <I2C_RequestMemoryWrite>
 8000e08:	b130      	cbz	r0, 8000e18 <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000e0c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d0c8      	beq.n	8000da6 <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 8000e14:	2003      	movs	r0, #3
 8000e16:	e7c7      	b.n	8000da8 <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	2bff      	cmp	r3, #255	; 0xff
 8000e1e:	d910      	bls.n	8000e42 <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e20:	22ff      	movs	r2, #255	; 0xff
 8000e22:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e24:	9000      	str	r0, [sp, #0]
 8000e26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e2a:	4639      	mov	r1, r7
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff fe05 	bl	8000a3c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e32:	4632      	mov	r2, r6
 8000e34:	4649      	mov	r1, r9
 8000e36:	4620      	mov	r0, r4
 8000e38:	f7ff fe7e 	bl	8000b38 <I2C_WaitOnTXISFlagUntilTimeout>
 8000e3c:	b148      	cbz	r0, 8000e52 <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e40:	e7e6      	b.n	8000e10 <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8000e42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e44:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000e46:	b292      	uxth	r2, r2
 8000e48:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	e7eb      	b.n	8000e2a <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e54:	6822      	ldr	r2, [r4, #0]
 8000e56:	1c59      	adds	r1, r3, #1
 8000e58:	6261      	str	r1, [r4, #36]	; 0x24
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8000e5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e60:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000e62:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000e64:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000e66:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000e68:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000e6a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e6c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000e6e:	b9ba      	cbnz	r2, 8000ea0 <HAL_I2C_Mem_Write+0x11e>
 8000e70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	b1a3      	cbz	r3, 8000ea0 <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e76:	9600      	str	r6, [sp, #0]
 8000e78:	464b      	mov	r3, r9
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f7ff fdf7 	bl	8000a70 <I2C_WaitOnFlagUntilTimeout>
 8000e82:	2800      	cmp	r0, #0
 8000e84:	d1c6      	bne.n	8000e14 <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	2bff      	cmp	r3, #255	; 0xff
 8000e8c:	d927      	bls.n	8000ede <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e8e:	22ff      	movs	r2, #255	; 0xff
 8000e90:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e92:	9000      	str	r0, [sp, #0]
 8000e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e98:	4639      	mov	r1, r7
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f7ff fdce 	bl	8000a3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8000ea0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1c4      	bne.n	8000e32 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ea8:	4632      	mov	r2, r6
 8000eaa:	4649      	mov	r1, r9
 8000eac:	4620      	mov	r0, r4
 8000eae:	f7ff fed7 	bl	8000c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d1c3      	bne.n	8000e3e <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	2120      	movs	r1, #32
 8000eba:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000ec2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000ec6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000eca:	f022 0201 	bic.w	r2, r2, #1
 8000ece:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000ed0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000ed4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ed8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000edc:	e764      	b.n	8000da8 <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 8000ede:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ee0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	e7d4      	b.n	8000e98 <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 8000eee:	2002      	movs	r0, #2
 8000ef0:	e75a      	b.n	8000da8 <HAL_I2C_Mem_Write+0x26>
	...

08000ef4 <HAL_I2C_Mem_Read>:
{
 8000ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ef8:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000efa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000efe:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f00:	2b20      	cmp	r3, #32
{
 8000f02:	4604      	mov	r4, r0
 8000f04:	460f      	mov	r7, r1
 8000f06:	9203      	str	r2, [sp, #12]
 8000f08:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000f0c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f10:	f040 80a9 	bne.w	8001066 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8000f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000f16:	b91b      	cbnz	r3, 8000f20 <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 8000f18:	2001      	movs	r0, #1
}
 8000f1a:	b005      	add	sp, #20
 8000f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8000f20:	f1ba 0f00 	cmp.w	sl, #0
 8000f24:	d0f8      	beq.n	8000f18 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8000f26:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	f000 809b 	beq.w	8001066 <HAL_I2C_Mem_Read+0x172>
 8000f30:	2501      	movs	r5, #1
 8000f32:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000f36:	f7ff fb59 	bl	80005ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f3a:	2319      	movs	r3, #25
 8000f3c:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000f3e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f40:	462a      	mov	r2, r5
 8000f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f46:	4620      	mov	r0, r4
 8000f48:	f7ff fd92 	bl	8000a70 <I2C_WaitOnFlagUntilTimeout>
 8000f4c:	4680      	mov	r8, r0
 8000f4e:	b9d0      	cbnz	r0, 8000f86 <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f50:	2322      	movs	r3, #34	; 0x22
 8000f52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f56:	2340      	movs	r3, #64	; 0x40
 8000f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f5e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000f60:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000f62:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000f64:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f68:	9601      	str	r6, [sp, #4]
 8000f6a:	f8cd 9000 	str.w	r9, [sp]
 8000f6e:	465b      	mov	r3, fp
 8000f70:	9a03      	ldr	r2, [sp, #12]
 8000f72:	4639      	mov	r1, r7
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff fe3f 	bl	8000bf8 <I2C_RequestMemoryRead>
 8000f7a:	b130      	cbz	r0, 8000f8a <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000f7e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d0c8      	beq.n	8000f18 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 8000f86:	2003      	movs	r0, #3
 8000f88:	e7c7      	b.n	8000f1a <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	2bff      	cmp	r3, #255	; 0xff
 8000f90:	4b36      	ldr	r3, [pc, #216]	; (800106c <HAL_I2C_Mem_Read+0x178>)
 8000f92:	d944      	bls.n	800101e <HAL_I2C_Mem_Read+0x12a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f94:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000f96:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f98:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000f9e:	4639      	mov	r1, r7
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f7ff fd4b 	bl	8000a3c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000fa6:	9600      	str	r6, [sp, #0]
 8000fa8:	464b      	mov	r3, r9
 8000faa:	2200      	movs	r2, #0
 8000fac:	2104      	movs	r1, #4
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f7ff fd5e 	bl	8000a70 <I2C_WaitOnFlagUntilTimeout>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d1e6      	bne.n	8000f86 <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	6262      	str	r2, [r4, #36]	; 0x24
 8000fbe:	6822      	ldr	r2, [r4, #0]
 8000fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fc2:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000fc4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000fc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000fc8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000fca:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000fcc:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000fce:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000fd0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000fd2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000fd4:	b9ba      	cbnz	r2, 8001006 <HAL_I2C_Mem_Read+0x112>
 8000fd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b1a3      	cbz	r3, 8001006 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fdc:	9600      	str	r6, [sp, #0]
 8000fde:	464b      	mov	r3, r9
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f7ff fd44 	bl	8000a70 <I2C_WaitOnFlagUntilTimeout>
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d1cc      	bne.n	8000f86 <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	2bff      	cmp	r3, #255	; 0xff
 8000ff2:	d91c      	bls.n	800102e <HAL_I2C_Mem_Read+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ff4:	22ff      	movs	r2, #255	; 0xff
 8000ff6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ff8:	9000      	str	r0, [sp, #0]
 8000ffa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ffe:	4639      	mov	r1, r7
 8001000:	4620      	mov	r0, r4
 8001002:	f7ff fd1b 	bl	8000a3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001006:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001008:	b29b      	uxth	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1cb      	bne.n	8000fa6 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800100e:	4632      	mov	r2, r6
 8001010:	4649      	mov	r1, r9
 8001012:	4620      	mov	r0, r4
 8001014:	f7ff fe24 	bl	8000c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001018:	b188      	cbz	r0, 800103e <HAL_I2C_Mem_Read+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800101a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800101c:	e7b1      	b.n	8000f82 <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 800101e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001020:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001022:	b292      	uxth	r2, r2
 8001024:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	e7b7      	b.n	8000f9e <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800102e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001030:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001032:	b292      	uxth	r2, r2
 8001034:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	e7df      	b.n	8000ffe <HAL_I2C_Mem_Read+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	2120      	movs	r1, #32
 8001042:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800104a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800104e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001058:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800105c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001060:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001064:	e759      	b.n	8000f1a <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8001066:	2002      	movs	r0, #2
 8001068:	e757      	b.n	8000f1a <HAL_I2C_Mem_Read+0x26>
 800106a:	bf00      	nop
 800106c:	80002400 	.word	0x80002400

08001070 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001070:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	2a20      	cmp	r2, #32
{
 8001078:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800107a:	d11d      	bne.n	80010b8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800107c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001080:	2b01      	cmp	r3, #1
 8001082:	d019      	beq.n	80010b8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001084:	2324      	movs	r3, #36	; 0x24
 8001086:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800108a:	6803      	ldr	r3, [r0, #0]
 800108c:	681c      	ldr	r4, [r3, #0]
 800108e:	f024 0401 	bic.w	r4, r4, #1
 8001092:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001094:	681c      	ldr	r4, [r3, #0]
 8001096:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800109a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800109c:	681c      	ldr	r4, [r3, #0]
 800109e:	4321      	orrs	r1, r4
 80010a0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010a2:	6819      	ldr	r1, [r3, #0]
 80010a4:	f041 0101 	orr.w	r1, r1, #1
 80010a8:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010aa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80010ac:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80010b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80010b4:	4618      	mov	r0, r3
 80010b6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80010b8:	2002      	movs	r0, #2
  }
}
 80010ba:	bd10      	pop	{r4, pc}

080010bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010bc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010be:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80010c2:	b2e4      	uxtb	r4, r4
 80010c4:	2c20      	cmp	r4, #32
 80010c6:	d11c      	bne.n	8001102 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010c8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d018      	beq.n	8001102 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010d0:	2324      	movs	r3, #36	; 0x24
 80010d2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010d6:	6803      	ldr	r3, [r0, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010e0:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010e2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010e6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010ea:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	f042 0201 	orr.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010f4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80010f6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80010fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80010fe:	4618      	mov	r0, r3
 8001100:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001102:	2002      	movs	r0, #2
  }
}
 8001104:	bd10      	pop	{r4, pc}
	...

08001108 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <HAL_PWREx_GetVoltageRange+0xc>)
 800110a:	6818      	ldr	r0, [r3, #0]
#endif  
}
 800110c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40007000 	.word	0x40007000

08001118 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800111a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800111c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001120:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001124:	d11a      	bne.n	800115c <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001126:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800112a:	d013      	beq.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800112e:	4912      	ldr	r1, [pc, #72]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001130:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001138:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_PWREx_ControlVoltageScaling+0x64>)
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	fbb2 f1f1 	udiv	r1, r2, r1
 8001142:	2232      	movs	r2, #50	; 0x32
 8001144:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001146:	b112      	cbz	r2, 800114e <HAL_PWREx_ControlVoltageScaling+0x36>
 8001148:	6959      	ldr	r1, [r3, #20]
 800114a:	0549      	lsls	r1, r1, #21
 800114c:	d404      	bmi.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	055b      	lsls	r3, r3, #21
 8001152:	d40d      	bmi.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001154:	2000      	movs	r0, #0
 8001156:	4770      	bx	lr
        wait_loop_index--;
 8001158:	3a01      	subs	r2, #1
 800115a:	e7f4      	b.n	8001146 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800115c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001160:	bf1f      	itttt	ne
 8001162:	681a      	ldrne	r2, [r3, #0]
 8001164:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001168:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 800116c:	601a      	strne	r2, [r3, #0]
 800116e:	e7f1      	b.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001170:	2003      	movs	r0, #3
}  
 8001172:	4770      	bx	lr
 8001174:	40007000 	.word	0x40007000
 8001178:	000f4240 	.word	0x000f4240
 800117c:	2000001c 	.word	0x2000001c

08001180 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001180:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001182:	4d1e      	ldr	r5, [pc, #120]	; (80011fc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001184:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001186:	00da      	lsls	r2, r3, #3
{
 8001188:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800118a:	d518      	bpl.n	80011be <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800118c:	f7ff ffbc 	bl	8001108 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001190:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001194:	d123      	bne.n	80011de <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001196:	2c80      	cmp	r4, #128	; 0x80
 8001198:	d929      	bls.n	80011ee <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800119a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800119c:	bf8c      	ite	hi
 800119e:	2002      	movhi	r0, #2
 80011a0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80011a4:	6813      	ldr	r3, [r2, #0]
 80011a6:	f023 0307 	bic.w	r3, r3, #7
 80011aa:	4303      	orrs	r3, r0
 80011ac:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 80011ae:	6813      	ldr	r3, [r2, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80011b4:	1a18      	subs	r0, r3, r0
 80011b6:	bf18      	it	ne
 80011b8:	2001      	movne	r0, #1
 80011ba:	b003      	add	sp, #12
 80011bc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	65ab      	str	r3, [r5, #88]	; 0x58
 80011c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80011d0:	f7ff ff9a 	bl	8001108 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80011d4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80011d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011da:	65ab      	str	r3, [r5, #88]	; 0x58
 80011dc:	e7d8      	b.n	8001190 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80011de:	2c80      	cmp	r4, #128	; 0x80
 80011e0:	d807      	bhi.n	80011f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80011e2:	d008      	beq.n	80011f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80011e4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80011e8:	4258      	negs	r0, r3
 80011ea:	4158      	adcs	r0, r3
 80011ec:	e7d9      	b.n	80011a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80011ee:	2000      	movs	r0, #0
 80011f0:	e7d7      	b.n	80011a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80011f2:	2003      	movs	r0, #3
 80011f4:	e7d5      	b.n	80011a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80011f6:	2002      	movs	r0, #2
 80011f8:	e7d3      	b.n	80011a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001204:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	f012 0f0c 	tst.w	r2, #12
{
 800120c:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800120e:	d009      	beq.n	8001224 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001216:	2a0c      	cmp	r2, #12
 8001218:	d12d      	bne.n	8001276 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	f002 0203 	and.w	r2, r2, #3
 8001220:	2a01      	cmp	r2, #1
 8001222:	d128      	bne.n	8001276 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001224:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001226:	4928      	ldr	r1, [pc, #160]	; (80012c8 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001228:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800122a:	bf55      	itete	pl
 800122c:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001230:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001232:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001236:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800123a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800123e:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001240:	f011 0f0c 	tst.w	r1, #12
 8001244:	bf0c      	ite	eq
 8001246:	4610      	moveq	r0, r2
 8001248:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800124a:	6899      	ldr	r1, [r3, #8]
 800124c:	f001 010c 	and.w	r1, r1, #12
 8001250:	290c      	cmp	r1, #12
 8001252:	d130      	bne.n	80012b6 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001254:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001256:	68d8      	ldr	r0, [r3, #12]
 8001258:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800125c:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800125e:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8001262:	2802      	cmp	r0, #2
 8001264:	d019      	beq.n	800129a <HAL_RCC_GetSysClockFreq+0x96>
 8001266:	2803      	cmp	r0, #3
 8001268:	d026      	beq.n	80012b8 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800126a:	fbb2 f2f1 	udiv	r2, r2, r1
 800126e:	68d8      	ldr	r0, [r3, #12]
 8001270:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001274:	e017      	b.n	80012a6 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	f002 020c 	and.w	r2, r2, #12
 800127c:	2a04      	cmp	r2, #4
 800127e:	d007      	beq.n	8001290 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	f002 020c 	and.w	r2, r2, #12
 8001286:	2a08      	cmp	r2, #8
 8001288:	d104      	bne.n	8001294 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 800128a:	4810      	ldr	r0, [pc, #64]	; (80012cc <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800128c:	2200      	movs	r2, #0
 800128e:	e7dc      	b.n	800124a <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001290:	480f      	ldr	r0, [pc, #60]	; (80012d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001292:	e7fb      	b.n	800128c <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001294:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001296:	4602      	mov	r2, r0
 8001298:	e7d7      	b.n	800124a <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800129e:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80012a2:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80012ac:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80012ae:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80012b0:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80012b2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80012b6:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	4804      	ldr	r0, [pc, #16]	; (80012cc <HAL_RCC_GetSysClockFreq+0xc8>)
 80012bc:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80012c0:	e7ef      	b.n	80012a2 <HAL_RCC_GetSysClockFreq+0x9e>
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	08004760 	.word	0x08004760
 80012cc:	007a1200 	.word	0x007a1200
 80012d0:	00f42400 	.word	0x00f42400

080012d4 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012d4:	6803      	ldr	r3, [r0, #0]
{
 80012d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80012da:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012dc:	06d8      	lsls	r0, r3, #27
 80012de:	d53b      	bpl.n	8001358 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80012e0:	4ca9      	ldr	r4, [pc, #676]	; (8001588 <HAL_RCC_OscConfig+0x2b4>)
 80012e2:	68a3      	ldr	r3, [r4, #8]
 80012e4:	f013 0f0c 	tst.w	r3, #12
 80012e8:	d160      	bne.n	80013ac <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	0799      	lsls	r1, r3, #30
 80012ee:	d505      	bpl.n	80012fc <HAL_RCC_OscConfig+0x28>
 80012f0:	69ab      	ldr	r3, [r5, #24]
 80012f2:	b91b      	cbnz	r3, 80012fc <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 80012f4:	2001      	movs	r0, #1
}
 80012f6:	b002      	add	sp, #8
 80012f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	6a28      	ldr	r0, [r5, #32]
 8001300:	071a      	lsls	r2, r3, #28
 8001302:	bf56      	itet	pl
 8001304:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001308:	6823      	ldrmi	r3, [r4, #0]
 800130a:	091b      	lsrpl	r3, r3, #4
 800130c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001310:	4283      	cmp	r3, r0
 8001312:	d236      	bcs.n	8001382 <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001314:	f7ff ff34 	bl	8001180 <RCC_SetFlashLatencyFromMSIRange>
 8001318:	2800      	cmp	r0, #0
 800131a:	d1eb      	bne.n	80012f4 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6023      	str	r3, [r4, #0]
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	6a2a      	ldr	r2, [r5, #32]
 8001328:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800132c:	4313      	orrs	r3, r2
 800132e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001330:	6863      	ldr	r3, [r4, #4]
 8001332:	69ea      	ldr	r2, [r5, #28]
 8001334:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001338:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800133c:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800133e:	f7ff ff61 	bl	8001204 <HAL_RCC_GetSysClockFreq>
 8001342:	68a3      	ldr	r3, [r4, #8]
 8001344:	4a91      	ldr	r2, [pc, #580]	; (800158c <HAL_RCC_OscConfig+0x2b8>)
 8001346:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	40d8      	lsrs	r0, r3
 800134e:	4b90      	ldr	r3, [pc, #576]	; (8001590 <HAL_RCC_OscConfig+0x2bc>)
 8001350:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff f922 	bl	800059c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	07de      	lsls	r6, r3, #31
 800135c:	d45b      	bmi.n	8001416 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	682b      	ldr	r3, [r5, #0]
 8001360:	079c      	lsls	r4, r3, #30
 8001362:	f100 80a3 	bmi.w	80014ac <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	0719      	lsls	r1, r3, #28
 800136a:	f100 80e1 	bmi.w	8001530 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136e:	682b      	ldr	r3, [r5, #0]
 8001370:	075a      	lsls	r2, r3, #29
 8001372:	f100 810f 	bmi.w	8001594 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001376:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001378:	2a00      	cmp	r2, #0
 800137a:	f040 8176 	bne.w	800166a <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 800137e:	2000      	movs	r0, #0
 8001380:	e7b9      	b.n	80012f6 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6023      	str	r3, [r4, #0]
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001390:	4303      	orrs	r3, r0
 8001392:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001394:	6863      	ldr	r3, [r4, #4]
 8001396:	69ea      	ldr	r2, [r5, #28]
 8001398:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800139c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80013a0:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a2:	f7ff feed 	bl	8001180 <RCC_SetFlashLatencyFromMSIRange>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d0c9      	beq.n	800133e <HAL_RCC_OscConfig+0x6a>
 80013aa:	e7a3      	b.n	80012f4 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ac:	69ab      	ldr	r3, [r5, #24]
 80013ae:	b313      	cbz	r3, 80013f6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013b8:	f7ff f918 	bl	80005ec <HAL_GetTick>
 80013bc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	079b      	lsls	r3, r3, #30
 80013c2:	d511      	bpl.n	80013e8 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6023      	str	r3, [r4, #0]
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	6a2a      	ldr	r2, [r5, #32]
 80013d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013d4:	4313      	orrs	r3, r2
 80013d6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d8:	6863      	ldr	r3, [r4, #4]
 80013da:	69ea      	ldr	r2, [r5, #28]
 80013dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80013e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80013e4:	6063      	str	r3, [r4, #4]
 80013e6:	e7b7      	b.n	8001358 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e8:	f7ff f900 	bl	80005ec <HAL_GetTick>
 80013ec:	1b80      	subs	r0, r0, r6
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d9e5      	bls.n	80013be <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 80013f2:	2003      	movs	r0, #3
 80013f4:	e77f      	b.n	80012f6 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013fe:	f7ff f8f5 	bl	80005ec <HAL_GetTick>
 8001402:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	079f      	lsls	r7, r3, #30
 8001408:	d5a6      	bpl.n	8001358 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140a:	f7ff f8ef 	bl	80005ec <HAL_GetTick>
 800140e:	1b80      	subs	r0, r0, r6
 8001410:	2802      	cmp	r0, #2
 8001412:	d9f7      	bls.n	8001404 <HAL_RCC_OscConfig+0x130>
 8001414:	e7ed      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001416:	4c5c      	ldr	r4, [pc, #368]	; (8001588 <HAL_RCC_OscConfig+0x2b4>)
 8001418:	68a3      	ldr	r3, [r4, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b08      	cmp	r3, #8
 8001420:	d009      	beq.n	8001436 <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001422:	68a3      	ldr	r3, [r4, #8]
 8001424:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d10b      	bne.n	8001444 <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800142c:	68e3      	ldr	r3, [r4, #12]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b03      	cmp	r3, #3
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	0398      	lsls	r0, r3, #14
 800143a:	d590      	bpl.n	800135e <HAL_RCC_OscConfig+0x8a>
 800143c:	686b      	ldr	r3, [r5, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d18d      	bne.n	800135e <HAL_RCC_OscConfig+0x8a>
 8001442:	e757      	b.n	80012f4 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001444:	686b      	ldr	r3, [r5, #4]
 8001446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144a:	d110      	bne.n	800146e <HAL_RCC_OscConfig+0x19a>
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001452:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001454:	f7ff f8ca 	bl	80005ec <HAL_GetTick>
 8001458:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800145a:	6823      	ldr	r3, [r4, #0]
 800145c:	0399      	lsls	r1, r3, #14
 800145e:	f53f af7e 	bmi.w	800135e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001462:	f7ff f8c3 	bl	80005ec <HAL_GetTick>
 8001466:	1b80      	subs	r0, r0, r6
 8001468:	2864      	cmp	r0, #100	; 0x64
 800146a:	d9f6      	bls.n	800145a <HAL_RCC_OscConfig+0x186>
 800146c:	e7c1      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001472:	d104      	bne.n	800147e <HAL_RCC_OscConfig+0x1aa>
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147a:	6023      	str	r3, [r4, #0]
 800147c:	e7e6      	b.n	800144c <HAL_RCC_OscConfig+0x178>
 800147e:	6822      	ldr	r2, [r4, #0]
 8001480:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001484:	6022      	str	r2, [r4, #0]
 8001486:	6822      	ldr	r2, [r4, #0]
 8001488:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800148c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1e0      	bne.n	8001454 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 8001492:	f7ff f8ab 	bl	80005ec <HAL_GetTick>
 8001496:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	039a      	lsls	r2, r3, #14
 800149c:	f57f af5f 	bpl.w	800135e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff f8a4 	bl	80005ec <HAL_GetTick>
 80014a4:	1b80      	subs	r0, r0, r6
 80014a6:	2864      	cmp	r0, #100	; 0x64
 80014a8:	d9f6      	bls.n	8001498 <HAL_RCC_OscConfig+0x1c4>
 80014aa:	e7a2      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80014ac:	4c36      	ldr	r4, [pc, #216]	; (8001588 <HAL_RCC_OscConfig+0x2b4>)
 80014ae:	68a3      	ldr	r3, [r4, #8]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d009      	beq.n	80014cc <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014b8:	68a3      	ldr	r3, [r4, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d113      	bne.n	80014ea <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014c2:	68e3      	ldr	r3, [r4, #12]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d10e      	bne.n	80014ea <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	055b      	lsls	r3, r3, #21
 80014d0:	d503      	bpl.n	80014da <HAL_RCC_OscConfig+0x206>
 80014d2:	68eb      	ldr	r3, [r5, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f43f af0d 	beq.w	80012f4 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	6863      	ldr	r3, [r4, #4]
 80014dc:	692a      	ldr	r2, [r5, #16]
 80014de:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80014e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014e6:	6063      	str	r3, [r4, #4]
 80014e8:	e73d      	b.n	8001366 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ea:	68eb      	ldr	r3, [r5, #12]
 80014ec:	b17b      	cbz	r3, 800150e <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014f6:	f7ff f879 	bl	80005ec <HAL_GetTick>
 80014fa:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	055f      	lsls	r7, r3, #21
 8001500:	d4eb      	bmi.n	80014da <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff f873 	bl	80005ec <HAL_GetTick>
 8001506:	1b80      	subs	r0, r0, r6
 8001508:	2802      	cmp	r0, #2
 800150a:	d9f7      	bls.n	80014fc <HAL_RCC_OscConfig+0x228>
 800150c:	e771      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001514:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001516:	f7ff f869 	bl	80005ec <HAL_GetTick>
 800151a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	0558      	lsls	r0, r3, #21
 8001520:	f57f af21 	bpl.w	8001366 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001524:	f7ff f862 	bl	80005ec <HAL_GetTick>
 8001528:	1b80      	subs	r0, r0, r6
 800152a:	2802      	cmp	r0, #2
 800152c:	d9f6      	bls.n	800151c <HAL_RCC_OscConfig+0x248>
 800152e:	e760      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001530:	696b      	ldr	r3, [r5, #20]
 8001532:	4c15      	ldr	r4, [pc, #84]	; (8001588 <HAL_RCC_OscConfig+0x2b4>)
 8001534:	b19b      	cbz	r3, 800155e <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 8001536:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001542:	f7ff f853 	bl	80005ec <HAL_GetTick>
 8001546:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001548:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800154c:	079b      	lsls	r3, r3, #30
 800154e:	f53f af0e 	bmi.w	800136e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff f84b 	bl	80005ec <HAL_GetTick>
 8001556:	1b80      	subs	r0, r0, r6
 8001558:	2802      	cmp	r0, #2
 800155a:	d9f5      	bls.n	8001548 <HAL_RCC_OscConfig+0x274>
 800155c:	e749      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 800155e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800156a:	f7ff f83f 	bl	80005ec <HAL_GetTick>
 800156e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001570:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001574:	079f      	lsls	r7, r3, #30
 8001576:	f57f aefa 	bpl.w	800136e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff f837 	bl	80005ec <HAL_GetTick>
 800157e:	1b80      	subs	r0, r0, r6
 8001580:	2802      	cmp	r0, #2
 8001582:	d9f5      	bls.n	8001570 <HAL_RCC_OscConfig+0x29c>
 8001584:	e735      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	0800474f 	.word	0x0800474f
 8001590:	2000001c 	.word	0x2000001c
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001594:	4c66      	ldr	r4, [pc, #408]	; (8001730 <HAL_RCC_OscConfig+0x45c>)
 8001596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001598:	00de      	lsls	r6, r3, #3
 800159a:	d427      	bmi.n	80015ec <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800159c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80015a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015ae:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b0:	4e60      	ldr	r6, [pc, #384]	; (8001734 <HAL_RCC_OscConfig+0x460>)
 80015b2:	6833      	ldr	r3, [r6, #0]
 80015b4:	05d8      	lsls	r0, r3, #23
 80015b6:	d51b      	bpl.n	80015f0 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	68ab      	ldr	r3, [r5, #8]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d129      	bne.n	8001612 <HAL_RCC_OscConfig+0x33e>
 80015be:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80015ca:	f7ff f80f 	bl	80005ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80015d2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80015d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80015d8:	079a      	lsls	r2, r3, #30
 80015da:	d540      	bpl.n	800165e <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80015dc:	2f00      	cmp	r7, #0
 80015de:	f43f aeca 	beq.w	8001376 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80015ea:	e6c4      	b.n	8001376 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 80015ec:	2700      	movs	r7, #0
 80015ee:	e7df      	b.n	80015b0 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015f0:	6833      	ldr	r3, [r6, #0]
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80015f8:	f7fe fff8 	bl	80005ec <HAL_GetTick>
 80015fc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fe:	6833      	ldr	r3, [r6, #0]
 8001600:	05d9      	lsls	r1, r3, #23
 8001602:	d4d9      	bmi.n	80015b8 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001604:	f7fe fff2 	bl	80005ec <HAL_GetTick>
 8001608:	eba0 0008 	sub.w	r0, r0, r8
 800160c:	2802      	cmp	r0, #2
 800160e:	d9f6      	bls.n	80015fe <HAL_RCC_OscConfig+0x32a>
 8001610:	e6ef      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001612:	2b05      	cmp	r3, #5
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x350>
 8001616:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001622:	e7cc      	b.n	80015be <HAL_RCC_OscConfig+0x2ea>
 8001624:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001628:	f022 0201 	bic.w	r2, r2, #1
 800162c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001630:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001634:	f022 0204 	bic.w	r2, r2, #4
 8001638:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1c4      	bne.n	80015ca <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001640:	f7fe ffd4 	bl	80005ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001648:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800164a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800164e:	079b      	lsls	r3, r3, #30
 8001650:	d5c4      	bpl.n	80015dc <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7fe ffcb 	bl	80005ec <HAL_GetTick>
 8001656:	1b80      	subs	r0, r0, r6
 8001658:	4540      	cmp	r0, r8
 800165a:	d9f6      	bls.n	800164a <HAL_RCC_OscConfig+0x376>
 800165c:	e6c9      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7fe ffc5 	bl	80005ec <HAL_GetTick>
 8001662:	1b80      	subs	r0, r0, r6
 8001664:	4540      	cmp	r0, r8
 8001666:	d9b5      	bls.n	80015d4 <HAL_RCC_OscConfig+0x300>
 8001668:	e6c3      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800166a:	4c31      	ldr	r4, [pc, #196]	; (8001730 <HAL_RCC_OscConfig+0x45c>)
 800166c:	68a3      	ldr	r3, [r4, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b0c      	cmp	r3, #12
 8001674:	f43f ae3e 	beq.w	80012f4 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8001678:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800167a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800167c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001680:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001682:	d137      	bne.n	80016f4 <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 8001684:	f7fe ffb2 	bl	80005ec <HAL_GetTick>
 8001688:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	019f      	lsls	r7, r3, #6
 800168e:	d42b      	bmi.n	80016e8 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001690:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001692:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001694:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001698:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800169a:	3a01      	subs	r2, #1
 800169c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80016a0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80016a2:	0912      	lsrs	r2, r2, #4
 80016a4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80016a8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80016aa:	0852      	lsrs	r2, r2, #1
 80016ac:	3a01      	subs	r2, #1
 80016ae:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80016b2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80016b4:	0852      	lsrs	r2, r2, #1
 80016b6:	3a01      	subs	r2, #1
 80016b8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80016bc:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016c6:	68e3      	ldr	r3, [r4, #12]
 80016c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016cc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80016ce:	f7fe ff8d 	bl	80005ec <HAL_GetTick>
 80016d2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	0198      	lsls	r0, r3, #6
 80016d8:	f53f ae51 	bmi.w	800137e <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7fe ff86 	bl	80005ec <HAL_GetTick>
 80016e0:	1b40      	subs	r0, r0, r5
 80016e2:	2802      	cmp	r0, #2
 80016e4:	d9f6      	bls.n	80016d4 <HAL_RCC_OscConfig+0x400>
 80016e6:	e684      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e8:	f7fe ff80 	bl	80005ec <HAL_GetTick>
 80016ec:	1b80      	subs	r0, r0, r6
 80016ee:	2802      	cmp	r0, #2
 80016f0:	d9cb      	bls.n	800168a <HAL_RCC_OscConfig+0x3b6>
 80016f2:	e67e      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	0119      	lsls	r1, r3, #4
 80016f8:	d406      	bmi.n	8001708 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80016fa:	6823      	ldr	r3, [r4, #0]
           &&
 80016fc:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016fe:	bf5e      	ittt	pl
 8001700:	68e3      	ldrpl	r3, [r4, #12]
 8001702:	f023 0303 	bicpl.w	r3, r3, #3
 8001706:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001708:	68e3      	ldr	r3, [r4, #12]
 800170a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800170e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001712:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001714:	f7fe ff6a 	bl	80005ec <HAL_GetTick>
 8001718:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	019b      	lsls	r3, r3, #6
 800171e:	f57f ae2e 	bpl.w	800137e <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001722:	f7fe ff63 	bl	80005ec <HAL_GetTick>
 8001726:	1b40      	subs	r0, r0, r5
 8001728:	2802      	cmp	r0, #2
 800172a:	d9f6      	bls.n	800171a <HAL_RCC_OscConfig+0x446>
 800172c:	e661      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	40007000 	.word	0x40007000

08001738 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001738:	4a56      	ldr	r2, [pc, #344]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 800173a:	6813      	ldr	r3, [r2, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	428b      	cmp	r3, r1
{
 8001742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001746:	4605      	mov	r5, r0
 8001748:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800174a:	d32b      	bcc.n	80017a4 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	07d9      	lsls	r1, r3, #31
 8001750:	d435      	bmi.n	80017be <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001752:	6829      	ldr	r1, [r5, #0]
 8001754:	078a      	lsls	r2, r1, #30
 8001756:	f100 8083 	bmi.w	8001860 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800175a:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <HAL_RCC_ClockConfig+0x15c>)
 800175c:	6813      	ldr	r3, [r2, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	429e      	cmp	r6, r3
 8001764:	f0c0 8084 	bcc.w	8001870 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	f011 0f04 	tst.w	r1, #4
 800176c:	4c4a      	ldr	r4, [pc, #296]	; (8001898 <HAL_RCC_ClockConfig+0x160>)
 800176e:	f040 808a 	bne.w	8001886 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001772:	070b      	lsls	r3, r1, #28
 8001774:	d506      	bpl.n	8001784 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001776:	68a3      	ldr	r3, [r4, #8]
 8001778:	692a      	ldr	r2, [r5, #16]
 800177a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800177e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001782:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001784:	f7ff fd3e 	bl	8001204 <HAL_RCC_GetSysClockFreq>
 8001788:	68a3      	ldr	r3, [r4, #8]
 800178a:	4a44      	ldr	r2, [pc, #272]	; (800189c <HAL_RCC_ClockConfig+0x164>)
 800178c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	40d8      	lsrs	r0, r3
 8001794:	4b42      	ldr	r3, [pc, #264]	; (80018a0 <HAL_RCC_ClockConfig+0x168>)
 8001796:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001798:	2000      	movs	r0, #0
 800179a:	f7fe feff 	bl	800059c <HAL_InitTick>
  return HAL_OK;
 800179e:	2000      	movs	r0, #0
}
 80017a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a4:	6813      	ldr	r3, [r2, #0]
 80017a6:	f023 0307 	bic.w	r3, r3, #7
 80017aa:	430b      	orrs	r3, r1
 80017ac:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80017ae:	6813      	ldr	r3, [r2, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	4299      	cmp	r1, r3
 80017b6:	d0c9      	beq.n	800174c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80017b8:	2001      	movs	r0, #1
 80017ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017be:	686a      	ldr	r2, [r5, #4]
 80017c0:	4c35      	ldr	r4, [pc, #212]	; (8001898 <HAL_RCC_ClockConfig+0x160>)
 80017c2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80017c4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c6:	d11c      	bne.n	8001802 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80017c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80017cc:	d0f4      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	68a3      	ldr	r3, [r4, #8]
 80017d0:	f023 0303 	bic.w	r3, r3, #3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80017d8:	f7fe ff08 	bl	80005ec <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017dc:	686b      	ldr	r3, [r5, #4]
 80017de:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 80017e0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e2:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e6:	d118      	bne.n	800181a <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e8:	68a3      	ldr	r3, [r4, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d0af      	beq.n	8001752 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f2:	f7fe fefb 	bl	80005ec <HAL_GetTick>
 80017f6:	1bc0      	subs	r0, r0, r7
 80017f8:	4540      	cmp	r0, r8
 80017fa:	d9f5      	bls.n	80017e8 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80017fc:	2003      	movs	r0, #3
 80017fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	2a02      	cmp	r2, #2
 8001804:	d102      	bne.n	800180c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001806:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800180a:	e7df      	b.n	80017cc <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800180c:	b912      	cbnz	r2, 8001814 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800180e:	f013 0f02 	tst.w	r3, #2
 8001812:	e7db      	b.n	80017cc <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001814:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001818:	e7d8      	b.n	80017cc <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181a:	2b02      	cmp	r3, #2
 800181c:	d10a      	bne.n	8001834 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800181e:	68a3      	ldr	r3, [r4, #8]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d094      	beq.n	8001752 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7fe fee0 	bl	80005ec <HAL_GetTick>
 800182c:	1bc0      	subs	r0, r0, r7
 800182e:	4540      	cmp	r0, r8
 8001830:	d9f5      	bls.n	800181e <HAL_RCC_ClockConfig+0xe6>
 8001832:	e7e3      	b.n	80017fc <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001834:	b973      	cbnz	r3, 8001854 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001836:	68a3      	ldr	r3, [r4, #8]
 8001838:	f013 0f0c 	tst.w	r3, #12
 800183c:	d089      	beq.n	8001752 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183e:	f7fe fed5 	bl	80005ec <HAL_GetTick>
 8001842:	1bc0      	subs	r0, r0, r7
 8001844:	4540      	cmp	r0, r8
 8001846:	d9f6      	bls.n	8001836 <HAL_RCC_ClockConfig+0xfe>
 8001848:	e7d8      	b.n	80017fc <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184a:	f7fe fecf 	bl	80005ec <HAL_GetTick>
 800184e:	1bc0      	subs	r0, r0, r7
 8001850:	4540      	cmp	r0, r8
 8001852:	d8d3      	bhi.n	80017fc <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001854:	68a3      	ldr	r3, [r4, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b04      	cmp	r3, #4
 800185c:	d1f5      	bne.n	800184a <HAL_RCC_ClockConfig+0x112>
 800185e:	e778      	b.n	8001752 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <HAL_RCC_ClockConfig+0x160>)
 8001862:	68a8      	ldr	r0, [r5, #8]
 8001864:	6893      	ldr	r3, [r2, #8]
 8001866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800186a:	4303      	orrs	r3, r0
 800186c:	6093      	str	r3, [r2, #8]
 800186e:	e774      	b.n	800175a <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001870:	6813      	ldr	r3, [r2, #0]
 8001872:	f023 0307 	bic.w	r3, r3, #7
 8001876:	4333      	orrs	r3, r6
 8001878:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800187a:	6813      	ldr	r3, [r2, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	429e      	cmp	r6, r3
 8001882:	d199      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x80>
 8001884:	e770      	b.n	8001768 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001886:	68a3      	ldr	r3, [r4, #8]
 8001888:	68ea      	ldr	r2, [r5, #12]
 800188a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800188e:	4313      	orrs	r3, r2
 8001890:	60a3      	str	r3, [r4, #8]
 8001892:	e76e      	b.n	8001772 <HAL_RCC_ClockConfig+0x3a>
 8001894:	40022000 	.word	0x40022000
 8001898:	40021000 	.word	0x40021000
 800189c:	0800474f 	.word	0x0800474f
 80018a0:	2000001c 	.word	0x2000001c

080018a4 <HAL_RCC_GetHCLKFreq>:
}
 80018a4:	4b01      	ldr	r3, [pc, #4]	; (80018ac <HAL_RCC_GetHCLKFreq+0x8>)
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	2000001c 	.word	0x2000001c

080018b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80018b2:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <RCCEx_PLLSAI1_Config+0x118>)
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	f012 0f03 	tst.w	r2, #3
{
 80018ba:	4605      	mov	r5, r0
 80018bc:	460e      	mov	r6, r1
 80018be:	461c      	mov	r4, r3
 80018c0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80018c2:	d02a      	beq.n	800191a <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	4282      	cmp	r2, r0
 80018cc:	d13c      	bne.n	8001948 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80018ce:	2a00      	cmp	r2, #0
 80018d0:	d03a      	beq.n	8001948 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80018d2:	68db      	ldr	r3, [r3, #12]
       ||
 80018d4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80018d6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80018da:	3301      	adds	r3, #1
       ||
 80018dc:	4293      	cmp	r3, r2
 80018de:	d133      	bne.n	8001948 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80018e6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e8:	f7fe fe80 	bl	80005ec <HAL_GetTick>
 80018ec:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	011a      	lsls	r2, r3, #4
 80018f2:	d432      	bmi.n	800195a <RCCEx_PLLSAI1_Config+0xaa>
 80018f4:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80018f6:	2e00      	cmp	r6, #0
 80018f8:	d036      	beq.n	8001968 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80018fa:	2e01      	cmp	r6, #1
 80018fc:	d150      	bne.n	80019a0 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80018fe:	6922      	ldr	r2, [r4, #16]
 8001900:	6928      	ldr	r0, [r5, #16]
 8001902:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001906:	0840      	lsrs	r0, r0, #1
 8001908:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800190c:	3801      	subs	r0, #1
 800190e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001912:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001916:	6122      	str	r2, [r4, #16]
 8001918:	e032      	b.n	8001980 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 800191a:	2802      	cmp	r0, #2
 800191c:	d010      	beq.n	8001940 <RCCEx_PLLSAI1_Config+0x90>
 800191e:	2803      	cmp	r0, #3
 8001920:	d014      	beq.n	800194c <RCCEx_PLLSAI1_Config+0x9c>
 8001922:	2801      	cmp	r0, #1
 8001924:	d110      	bne.n	8001948 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	079f      	lsls	r7, r3, #30
 800192a:	d538      	bpl.n	800199e <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800192c:	68e3      	ldr	r3, [r4, #12]
 800192e:	686a      	ldr	r2, [r5, #4]
 8001930:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001934:	3a01      	subs	r2, #1
 8001936:	4318      	orrs	r0, r3
 8001938:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800193c:	60e0      	str	r0, [r4, #12]
 800193e:	e7cf      	b.n	80018e0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001946:	d1f1      	bne.n	800192c <RCCEx_PLLSAI1_Config+0x7c>
 8001948:	2001      	movs	r0, #1
 800194a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	0391      	lsls	r1, r2, #14
 8001950:	d4ec      	bmi.n	800192c <RCCEx_PLLSAI1_Config+0x7c>
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001958:	e7f5      	b.n	8001946 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800195a:	f7fe fe47 	bl	80005ec <HAL_GetTick>
 800195e:	1bc0      	subs	r0, r0, r7
 8001960:	2802      	cmp	r0, #2
 8001962:	d9c4      	bls.n	80018ee <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001964:	2003      	movs	r0, #3
 8001966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001968:	6921      	ldr	r1, [r4, #16]
 800196a:	68eb      	ldr	r3, [r5, #12]
 800196c:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001970:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001974:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800197e:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001986:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7fe fe30 	bl	80005ec <HAL_GetTick>
 800198c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	d513      	bpl.n	80019bc <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001994:	6923      	ldr	r3, [r4, #16]
 8001996:	69aa      	ldr	r2, [r5, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	6123      	str	r3, [r4, #16]
 800199c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800199e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80019a0:	6923      	ldr	r3, [r4, #16]
 80019a2:	6968      	ldr	r0, [r5, #20]
 80019a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80019a8:	0840      	lsrs	r0, r0, #1
 80019aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80019ae:	3801      	subs	r0, #1
 80019b0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80019b4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80019b8:	6123      	str	r3, [r4, #16]
 80019ba:	e7e1      	b.n	8001980 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80019bc:	f7fe fe16 	bl	80005ec <HAL_GetTick>
 80019c0:	1b80      	subs	r0, r0, r6
 80019c2:	2802      	cmp	r0, #2
 80019c4:	d9e3      	bls.n	800198e <RCCEx_PLLSAI1_Config+0xde>
 80019c6:	e7cd      	b.n	8001964 <RCCEx_PLLSAI1_Config+0xb4>
 80019c8:	40021000 	.word	0x40021000

080019cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80019cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <RCCEx_PLLSAI2_Config+0xf8>)
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	f012 0f03 	tst.w	r2, #3
{
 80019d6:	4605      	mov	r5, r0
 80019d8:	460e      	mov	r6, r1
 80019da:	461c      	mov	r4, r3
 80019dc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80019de:	d028      	beq.n	8001a32 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	f002 0203 	and.w	r2, r2, #3
 80019e6:	4282      	cmp	r2, r0
 80019e8:	d13a      	bne.n	8001a60 <RCCEx_PLLSAI2_Config+0x94>
       ||
 80019ea:	2a00      	cmp	r2, #0
 80019ec:	d038      	beq.n	8001a60 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80019ee:	68db      	ldr	r3, [r3, #12]
       ||
 80019f0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80019f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80019f6:	3301      	adds	r3, #1
       ||
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d131      	bne.n	8001a60 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a04:	f7fe fdf2 	bl	80005ec <HAL_GetTick>
 8001a08:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	009a      	lsls	r2, r3, #2
 8001a0e:	d430      	bmi.n	8001a72 <RCCEx_PLLSAI2_Config+0xa6>
 8001a10:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001a12:	2e00      	cmp	r6, #0
 8001a14:	d034      	beq.n	8001a80 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001a16:	6963      	ldr	r3, [r4, #20]
 8001a18:	6929      	ldr	r1, [r5, #16]
 8001a1a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001a1e:	0849      	lsrs	r1, r1, #1
 8001a20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001a24:	3901      	subs	r1, #1
 8001a26:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001a2a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001a2e:	6163      	str	r3, [r4, #20]
 8001a30:	e032      	b.n	8001a98 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001a32:	2802      	cmp	r0, #2
 8001a34:	d010      	beq.n	8001a58 <RCCEx_PLLSAI2_Config+0x8c>
 8001a36:	2803      	cmp	r0, #3
 8001a38:	d014      	beq.n	8001a64 <RCCEx_PLLSAI2_Config+0x98>
 8001a3a:	2801      	cmp	r0, #1
 8001a3c:	d110      	bne.n	8001a60 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	079f      	lsls	r7, r3, #30
 8001a42:	d538      	bpl.n	8001ab6 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001a44:	68e3      	ldr	r3, [r4, #12]
 8001a46:	686a      	ldr	r2, [r5, #4]
 8001a48:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001a4c:	3a01      	subs	r2, #1
 8001a4e:	4318      	orrs	r0, r3
 8001a50:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001a54:	60e0      	str	r0, [r4, #12]
 8001a56:	e7d1      	b.n	80019fc <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001a5e:	d1f1      	bne.n	8001a44 <RCCEx_PLLSAI2_Config+0x78>
 8001a60:	2001      	movs	r0, #1
 8001a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	0391      	lsls	r1, r2, #14
 8001a68:	d4ec      	bmi.n	8001a44 <RCCEx_PLLSAI2_Config+0x78>
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001a70:	e7f5      	b.n	8001a5e <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001a72:	f7fe fdbb 	bl	80005ec <HAL_GetTick>
 8001a76:	1bc0      	subs	r0, r0, r7
 8001a78:	2802      	cmp	r0, #2
 8001a7a:	d9c6      	bls.n	8001a0a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001a80:	6962      	ldr	r2, [r4, #20]
 8001a82:	68eb      	ldr	r3, [r5, #12]
 8001a84:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001a88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a8c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001a96:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7fe fda4 	bl	80005ec <HAL_GetTick>
 8001aa4:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	d505      	bpl.n	8001ab8 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001aac:	6963      	ldr	r3, [r4, #20]
 8001aae:	696a      	ldr	r2, [r5, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	6163      	str	r3, [r4, #20]
 8001ab4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001ab8:	f7fe fd98 	bl	80005ec <HAL_GetTick>
 8001abc:	1b80      	subs	r0, r0, r6
 8001abe:	2802      	cmp	r0, #2
 8001ac0:	d9f1      	bls.n	8001aa6 <RCCEx_PLLSAI2_Config+0xda>
 8001ac2:	e7db      	b.n	8001a7c <RCCEx_PLLSAI2_Config+0xb0>
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001ac8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001acc:	6806      	ldr	r6, [r0, #0]
 8001ace:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001ad2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ad4:	d024      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001ad6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001ad8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001adc:	d02c      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001ade:	d802      	bhi.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ae0:	b1c1      	cbz	r1, 8001b14 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001ae2:	2601      	movs	r6, #1
 8001ae4:	e01c      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001ae6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001aea:	d00d      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001aec:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001af0:	d1f7      	bne.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001af2:	4a53      	ldr	r2, [pc, #332]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001af4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001af6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001afa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001afe:	430b      	orrs	r3, r1
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001b04:	2600      	movs	r6, #0
 8001b06:	e00b      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b08:	4a4d      	ldr	r2, [pc, #308]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001b0a:	68d3      	ldr	r3, [r2, #12]
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	60d3      	str	r3, [r2, #12]
      break;
 8001b12:	e7ee      	b.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b14:	3004      	adds	r0, #4
 8001b16:	f7ff fecb 	bl	80018b0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b1a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d0e8      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	04d8      	lsls	r0, r3, #19
 8001b24:	d506      	bpl.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001b26:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001b28:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001b2c:	d07c      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001b2e:	d808      	bhi.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001b30:	b1a9      	cbz	r1, 8001b5e <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001b32:	2601      	movs	r6, #1
 8001b34:	4635      	mov	r5, r6
 8001b36:	e021      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	3020      	adds	r0, #32
 8001b3c:	f7ff ff46 	bl	80019cc <RCCEx_PLLSAI2_Config>
 8001b40:	e7eb      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001b42:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001b46:	d004      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001b48:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001b4c:	d1f1      	bne.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001b4e:	4635      	mov	r5, r6
 8001b50:	e009      	b.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b52:	4a3b      	ldr	r2, [pc, #236]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001b54:	68d3      	ldr	r3, [r2, #12]
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5a:	60d3      	str	r3, [r2, #12]
 8001b5c:	e7f7      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b5e:	1d20      	adds	r0, r4, #4
 8001b60:	f7ff fea6 	bl	80018b0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b64:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001b66:	2d00      	cmp	r5, #0
 8001b68:	d164      	bne.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b6a:	4a35      	ldr	r2, [pc, #212]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001b6c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001b6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b72:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001b76:	430b      	orrs	r3, r1
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	0399      	lsls	r1, r3, #14
 8001b80:	f140 815b 	bpl.w	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b84:	4f2e      	ldr	r7, [pc, #184]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b88:	00da      	lsls	r2, r3, #3
 8001b8a:	d455      	bmi.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b92:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b9e:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001c44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001ba6:	f8d9 3000 	ldr.w	r3, [r9]
 8001baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bae:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001bb2:	f7fe fd1b 	bl	80005ec <HAL_GetTick>
 8001bb6:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001bb8:	f8d9 3000 	ldr.w	r3, [r9]
 8001bbc:	05db      	lsls	r3, r3, #23
 8001bbe:	d543      	bpl.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 8001bc0:	2d00      	cmp	r5, #0
 8001bc2:	d148      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bc8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001bcc:	d015      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001bce:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d011      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bda:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001bde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001be2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001be6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bf2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bfa:	07d8      	lsls	r0, r3, #31
 8001bfc:	d509      	bpl.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fcf5 	bl	80005ec <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c06:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c0c:	0799      	lsls	r1, r3, #30
 8001c0e:	f140 810d 	bpl.w	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c16:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c24:	4635      	mov	r5, r6
 8001c26:	e016      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c28:	2100      	movs	r1, #0
 8001c2a:	f104 0020 	add.w	r0, r4, #32
 8001c2e:	f7ff fecd 	bl	80019cc <RCCEx_PLLSAI2_Config>
 8001c32:	e797      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001c34:	462e      	mov	r6, r5
 8001c36:	e7a1      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8001c38:	f04f 0800 	mov.w	r8, #0
 8001c3c:	e7b1      	b.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c48:	f7fe fcd0 	bl	80005ec <HAL_GetTick>
 8001c4c:	eba0 000a 	sub.w	r0, r0, sl
 8001c50:	2802      	cmp	r0, #2
 8001c52:	d9b1      	bls.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8001c54:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001c56:	f1b8 0f00 	cmp.w	r8, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c62:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	07da      	lsls	r2, r3, #31
 8001c68:	d508      	bpl.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c6a:	498a      	ldr	r1, [pc, #552]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001c6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001c72:	f022 0203 	bic.w	r2, r2, #3
 8001c76:	4302      	orrs	r2, r0
 8001c78:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c7c:	079f      	lsls	r7, r3, #30
 8001c7e:	d508      	bpl.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c80:	4984      	ldr	r1, [pc, #528]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001c82:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001c84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001c88:	f022 020c 	bic.w	r2, r2, #12
 8001c8c:	4302      	orrs	r2, r0
 8001c8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c92:	075e      	lsls	r6, r3, #29
 8001c94:	d508      	bpl.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c96:	497f      	ldr	r1, [pc, #508]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001c98:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001c9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001c9e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001ca2:	4302      	orrs	r2, r0
 8001ca4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ca8:	0718      	lsls	r0, r3, #28
 8001caa:	d508      	bpl.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cac:	4979      	ldr	r1, [pc, #484]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001cae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001cb0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001cb4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001cbe:	06d9      	lsls	r1, r3, #27
 8001cc0:	d508      	bpl.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cc2:	4974      	ldr	r1, [pc, #464]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001cc4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001cc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001cca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001cce:	4302      	orrs	r2, r0
 8001cd0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cd4:	069a      	lsls	r2, r3, #26
 8001cd6:	d508      	bpl.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cd8:	496e      	ldr	r1, [pc, #440]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001cda:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001cdc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ce0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001ce4:	4302      	orrs	r2, r0
 8001ce6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cea:	059f      	lsls	r7, r3, #22
 8001cec:	d508      	bpl.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cee:	4969      	ldr	r1, [pc, #420]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001cf0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001cf2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001cf6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001cfa:	4302      	orrs	r2, r0
 8001cfc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d00:	055e      	lsls	r6, r3, #21
 8001d02:	d508      	bpl.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d04:	4963      	ldr	r1, [pc, #396]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001d06:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001d08:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d0c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001d10:	4302      	orrs	r2, r0
 8001d12:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d16:	0658      	lsls	r0, r3, #25
 8001d18:	d508      	bpl.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d1a:	495e      	ldr	r1, [pc, #376]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001d1c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001d1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d22:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001d26:	4302      	orrs	r2, r0
 8001d28:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d2c:	0619      	lsls	r1, r3, #24
 8001d2e:	d508      	bpl.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d30:	4958      	ldr	r1, [pc, #352]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d38:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001d3c:	4302      	orrs	r2, r0
 8001d3e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d42:	05da      	lsls	r2, r3, #23
 8001d44:	d508      	bpl.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d46:	4953      	ldr	r1, [pc, #332]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d4a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d4e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001d52:	4302      	orrs	r2, r0
 8001d54:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d58:	049b      	lsls	r3, r3, #18
 8001d5a:	d50f      	bpl.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d5c:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001d5e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001d60:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d64:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001d68:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d6a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d72:	d164      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d74:	68d3      	ldr	r3, [r2, #12]
 8001d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d7a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	031f      	lsls	r7, r3, #12
 8001d80:	d50f      	bpl.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d82:	4a44      	ldr	r2, [pc, #272]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001d84:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001d86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d8a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001d8e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001d90:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001d98:	d15c      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d9a:	68d3      	ldr	r3, [r2, #12]
 8001d9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001da0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	035e      	lsls	r6, r3, #13
 8001da6:	d50f      	bpl.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001da8:	4a3a      	ldr	r2, [pc, #232]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001daa:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001dac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001db0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001db4:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001db6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001dba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001dbe:	d154      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dc0:	68d3      	ldr	r3, [r2, #12]
 8001dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dc6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	0458      	lsls	r0, r3, #17
 8001dcc:	d512      	bpl.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dce:	4931      	ldr	r1, [pc, #196]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001dd0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001dd2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001dd6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001dda:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001ddc:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001de4:	d14c      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001de6:	2102      	movs	r1, #2
 8001de8:	1d20      	adds	r0, r4, #4
 8001dea:	f7ff fd61 	bl	80018b0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001dee:	2800      	cmp	r0, #0
 8001df0:	bf18      	it	ne
 8001df2:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	0411      	lsls	r1, r2, #16
 8001df8:	d508      	bpl.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001dfa:	4926      	ldr	r1, [pc, #152]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001dfc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001dfe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e06:	4303      	orrs	r3, r0
 8001e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e0c:	03d3      	lsls	r3, r2, #15
 8001e0e:	d509      	bpl.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e10:	4a20      	ldr	r2, [pc, #128]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e12:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001e16:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001e24:	4628      	mov	r0, r5
 8001e26:	b002      	add	sp, #8
 8001e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe fbde 	bl	80005ec <HAL_GetTick>
 8001e30:	1b40      	subs	r0, r0, r5
 8001e32:	4548      	cmp	r0, r9
 8001e34:	f67f aee8 	bls.w	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001e38:	e70c      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001e3a:	4635      	mov	r5, r6
 8001e3c:	e712      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001e3e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001e42:	d19b      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e44:	2101      	movs	r1, #1
 8001e46:	1d20      	adds	r0, r4, #4
 8001e48:	f7ff fd32 	bl	80018b0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	bf18      	it	ne
 8001e50:	4605      	movne	r5, r0
 8001e52:	e793      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001e54:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001e58:	d1a3      	bne.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	1d20      	adds	r0, r4, #4
 8001e5e:	f7ff fd27 	bl	80018b0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001e62:	2800      	cmp	r0, #0
 8001e64:	bf18      	it	ne
 8001e66:	4605      	movne	r5, r0
 8001e68:	e79b      	b.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001e6a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001e6e:	d1ab      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x300>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e70:	2101      	movs	r1, #1
 8001e72:	1d20      	adds	r0, r4, #4
 8001e74:	f7ff fd1c 	bl	80018b0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	bf18      	it	ne
 8001e7c:	4605      	movne	r5, r0
 8001e7e:	e7a3      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001e80:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001e84:	d1b6      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001e86:	2102      	movs	r1, #2
 8001e88:	f104 0020 	add.w	r0, r4, #32
 8001e8c:	f7ff fd9e 	bl	80019cc <RCCEx_PLLSAI2_Config>
 8001e90:	e7ad      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x326>
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000

08001e98 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001e98:	4a02      	ldr	r2, [pc, #8]	; (8001ea4 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8001e9a:	6813      	ldr	r3, [r2, #0]
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4770      	bx	lr
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ea8:	6803      	ldr	r3, [r0, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001eb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eb2:	6842      	ldr	r2, [r0, #4]
 8001eb4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001eb8:	d10a      	bne.n	8001ed0 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8001eba:	6882      	ldr	r2, [r0, #8]
 8001ebc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ec0:	d002      	beq.n	8001ec8 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ec2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001ec6:	d103      	bne.n	8001ed0 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ed0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001ed2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001ed6:	d107      	bne.n	8001ee8 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ee6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	4770      	bx	lr

08001ef8 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	4605      	mov	r5, r0
 8001efc:	460c      	mov	r4, r1
 8001efe:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f00:	682b      	ldr	r3, [r5, #0]
 8001f02:	6898      	ldr	r0, [r3, #8]
 8001f04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001f08:	d00d      	beq.n	8001f26 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8001f0a:	1c62      	adds	r2, r4, #1
 8001f0c:	d0f9      	beq.n	8001f02 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001f0e:	b924      	cbnz	r4, 8001f1a <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8001f10:	4628      	mov	r0, r5
}
 8001f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001f16:	f7ff bfc7 	b.w	8001ea8 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001f1a:	f7fe fb67 	bl	80005ec <HAL_GetTick>
 8001f1e:	1b80      	subs	r0, r0, r6
 8001f20:	4284      	cmp	r4, r0
 8001f22:	d8ed      	bhi.n	8001f00 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8001f24:	e7f4      	b.n	8001f10 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 8001f26:	bd70      	pop	{r4, r5, r6, pc}

08001f28 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f2a:	4606      	mov	r6, r0
 8001f2c:	460c      	mov	r4, r1
 8001f2e:	4615      	mov	r5, r2
 8001f30:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001f32:	6831      	ldr	r1, [r6, #0]
 8001f34:	6888      	ldr	r0, [r1, #8]
 8001f36:	4020      	ands	r0, r4
 8001f38:	d00e      	beq.n	8001f58 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f3a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001f3e:	bf01      	itttt	eq
 8001f40:	7b0a      	ldrbeq	r2, [r1, #12]
 8001f42:	b2d2      	uxtbeq	r2, r2
 8001f44:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8001f48:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8001f4c:	1c6b      	adds	r3, r5, #1
 8001f4e:	d0f1      	beq.n	8001f34 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001f50:	b925      	cbnz	r5, 8001f5c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 8001f52:	4630      	mov	r0, r6
 8001f54:	f7ff ffa8 	bl	8001ea8 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001f58:	b003      	add	sp, #12
 8001f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001f5c:	f7fe fb46 	bl	80005ec <HAL_GetTick>
 8001f60:	1bc0      	subs	r0, r0, r7
 8001f62:	4285      	cmp	r5, r0
 8001f64:	d8e5      	bhi.n	8001f32 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8001f66:	e7f4      	b.n	8001f52 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08001f68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f68:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f6a:	4613      	mov	r3, r2
{
 8001f6c:	460d      	mov	r5, r1
 8001f6e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f70:	460a      	mov	r2, r1
 8001f72:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8001f76:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f78:	f7ff ffd6 	bl	8001f28 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001f7c:	b128      	cbz	r0, 8001f8a <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f80:	f043 0320 	orr.w	r3, r3, #32
 8001f84:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001f86:	2003      	movs	r0, #3
 8001f88:	e00f      	b.n	8001faa <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f8a:	4632      	mov	r2, r6
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f7ff ffb2 	bl	8001ef8 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001f94:	2800      	cmp	r0, #0
 8001f96:	d1f2      	bne.n	8001f7e <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f98:	4633      	mov	r3, r6
 8001f9a:	462a      	mov	r2, r5
 8001f9c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7ff ffc1 	bl	8001f28 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	d1e9      	bne.n	8001f7e <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001faa:	bd70      	pop	{r4, r5, r6, pc}

08001fac <SPI_EndRxTransaction>:
{
 8001fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fae:	6843      	ldr	r3, [r0, #4]
 8001fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	460e      	mov	r6, r1
 8001fb8:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fba:	d10b      	bne.n	8001fd4 <SPI_EndRxTransaction+0x28>
 8001fbc:	6883      	ldr	r3, [r0, #8]
 8001fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fc2:	d002      	beq.n	8001fca <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc8:	d104      	bne.n	8001fd4 <SPI_EndRxTransaction+0x28>
    __HAL_SPI_DISABLE(hspi);
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd2:	601a      	str	r2, [r3, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd4:	463a      	mov	r2, r7
 8001fd6:	4631      	mov	r1, r6
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff ff8d 	bl	8001ef8 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001fde:	4605      	mov	r5, r0
 8001fe0:	b128      	cbz	r0, 8001fee <SPI_EndRxTransaction+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fe2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001fea:	2503      	movs	r5, #3
 8001fec:	e013      	b.n	8002016 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fee:	6863      	ldr	r3, [r4, #4]
 8001ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ff4:	d10f      	bne.n	8002016 <SPI_EndRxTransaction+0x6a>
 8001ff6:	68a3      	ldr	r3, [r4, #8]
 8001ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ffc:	d002      	beq.n	8002004 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002002:	d108      	bne.n	8002016 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002004:	463b      	mov	r3, r7
 8002006:	4632      	mov	r2, r6
 8002008:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800200c:	4620      	mov	r0, r4
 800200e:	f7ff ff8b 	bl	8001f28 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002012:	2800      	cmp	r0, #0
 8002014:	d1e5      	bne.n	8001fe2 <SPI_EndRxTransaction+0x36>
}
 8002016:	4628      	mov	r0, r5
 8002018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800201a <HAL_SPI_Init>:
{
 800201a:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800201c:	4604      	mov	r4, r0
 800201e:	2800      	cmp	r0, #0
 8002020:	d04a      	beq.n	80020b8 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002026:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800202a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800202e:	b91b      	cbnz	r3, 8002038 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002030:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002034:	f001 fc40 	bl	80038b8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002038:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800203a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800203c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002040:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002042:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002048:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800204c:	600b      	str	r3, [r1, #0]
 800204e:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002052:	d92e      	bls.n	80020b2 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002054:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002056:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205a:	bf18      	it	ne
 800205c:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800205e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002060:	b92b      	cbnz	r3, 800206e <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002062:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002066:	bf8c      	ite	hi
 8002068:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800206a:	2301      	movls	r3, #1
 800206c:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800206e:	68a6      	ldr	r6, [r4, #8]
 8002070:	6863      	ldr	r3, [r4, #4]
 8002072:	69a5      	ldr	r5, [r4, #24]
 8002074:	4333      	orrs	r3, r6
 8002076:	6926      	ldr	r6, [r4, #16]
 8002078:	4333      	orrs	r3, r6
 800207a:	6966      	ldr	r6, [r4, #20]
 800207c:	4333      	orrs	r3, r6
 800207e:	69e6      	ldr	r6, [r4, #28]
 8002080:	4333      	orrs	r3, r6
 8002082:	6a26      	ldr	r6, [r4, #32]
 8002084:	4333      	orrs	r3, r6
 8002086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002088:	4333      	orrs	r3, r6
 800208a:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800208e:	4333      	orrs	r3, r6
 8002090:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002094:	431a      	orrs	r2, r3
 8002096:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002098:	0c2d      	lsrs	r5, r5, #16
 800209a:	431a      	orrs	r2, r3
 800209c:	f005 0504 	and.w	r5, r5, #4
 80020a0:	432a      	orrs	r2, r5
 80020a2:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 80020a4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020a6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80020a8:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020aa:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020ac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80020b0:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020b6:	e7d0      	b.n	800205a <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80020b8:	2001      	movs	r0, #1
}
 80020ba:	bd70      	pop	{r4, r5, r6, pc}

080020bc <HAL_SPI_DeInit>:
{
 80020bc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80020be:	4604      	mov	r4, r0
 80020c0:	b180      	cbz	r0, 80020e4 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 80020c2:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80020c4:	2302      	movs	r3, #2
 80020c6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020d0:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80020d2:	f001 fc39 	bl	8003948 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020d6:	2000      	movs	r0, #0
 80020d8:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 80020da:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 80020de:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  return HAL_OK;
 80020e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020e4:	2001      	movs	r0, #1
}
 80020e6:	bd10      	pop	{r4, pc}

080020e8 <HAL_SPI_Transmit>:
{
 80020e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80020ec:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80020ee:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80020f2:	2b01      	cmp	r3, #1
{
 80020f4:	4604      	mov	r4, r0
 80020f6:	460d      	mov	r5, r1
 80020f8:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80020fa:	f000 80b1 	beq.w	8002260 <HAL_SPI_Transmit+0x178>
 80020fe:	2301      	movs	r3, #1
 8002100:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002104:	f7fe fa72 	bl	80005ec <HAL_GetTick>
 8002108:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800210a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800210e:	b2c0      	uxtb	r0, r0
 8002110:	2801      	cmp	r0, #1
 8002112:	f040 80a3 	bne.w	800225c <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8002116:	2d00      	cmp	r5, #0
 8002118:	d057      	beq.n	80021ca <HAL_SPI_Transmit+0xe2>
 800211a:	f1b8 0f00 	cmp.w	r8, #0
 800211e:	d054      	beq.n	80021ca <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002120:	2303      	movs	r3, #3
 8002122:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002126:	2300      	movs	r3, #0
 8002128:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800212a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800212c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8002130:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002134:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002138:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800213a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800213c:	68a3      	ldr	r3, [r4, #8]
 800213e:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002140:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002146:	bf08      	it	eq
 8002148:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 800214a:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 800214e:	bf04      	itt	eq
 8002150:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002154:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002156:	6803      	ldr	r3, [r0, #0]
 8002158:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800215a:	bf5e      	ittt	pl
 800215c:	6803      	ldrpl	r3, [r0, #0]
 800215e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002162:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002164:	68e3      	ldr	r3, [r4, #12]
 8002166:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800216a:	6863      	ldr	r3, [r4, #4]
 800216c:	d93e      	bls.n	80021ec <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800216e:	b11b      	cbz	r3, 8002178 <HAL_SPI_Transmit+0x90>
 8002170:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 8002178:	f835 3b02 	ldrh.w	r3, [r5], #2
 800217c:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800217e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002180:	3b01      	subs	r3, #1
 8002182:	b29b      	uxth	r3, r3
 8002184:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002186:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002188:	b29b      	uxth	r3, r3
 800218a:	b9a3      	cbnz	r3, 80021b6 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800218c:	463a      	mov	r2, r7
 800218e:	4631      	mov	r1, r6
 8002190:	4620      	mov	r0, r4
 8002192:	f7ff fee9 	bl	8001f68 <SPI_EndRxTxTransaction>
 8002196:	2800      	cmp	r0, #0
 8002198:	d15d      	bne.n	8002256 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800219a:	68a3      	ldr	r3, [r4, #8]
 800219c:	b933      	cbnz	r3, 80021ac <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	9201      	str	r2, [sp, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ac:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80021ae:	3000      	adds	r0, #0
 80021b0:	bf18      	it	ne
 80021b2:	2001      	movne	r0, #1
 80021b4:	e009      	b.n	80021ca <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	0790      	lsls	r0, r2, #30
 80021bc:	d503      	bpl.n	80021c6 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 80021be:	f835 2b02 	ldrh.w	r2, [r5], #2
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	e7db      	b.n	800217e <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80021c6:	b94e      	cbnz	r6, 80021dc <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 80021c8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80021d0:	2300      	movs	r3, #0
 80021d2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80021d6:	b002      	add	sp, #8
 80021d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80021dc:	1c71      	adds	r1, r6, #1
 80021de:	d0d2      	beq.n	8002186 <HAL_SPI_Transmit+0x9e>
 80021e0:	f7fe fa04 	bl	80005ec <HAL_GetTick>
 80021e4:	1bc0      	subs	r0, r0, r7
 80021e6:	4286      	cmp	r6, r0
 80021e8:	d8cd      	bhi.n	8002186 <HAL_SPI_Transmit+0x9e>
 80021ea:	e7ed      	b.n	80021c8 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80021ec:	b11b      	cbz	r3, 80021f6 <HAL_SPI_Transmit+0x10e>
 80021ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d10a      	bne.n	800220c <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 80021f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d916      	bls.n	800222c <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 80021fe:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002202:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 8002204:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002206:	3b02      	subs	r3, #2
 8002208:	b29b      	uxth	r3, r3
 800220a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800220c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0bb      	beq.n	800218c <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	0792      	lsls	r2, r2, #30
 800221a:	d512      	bpl.n	8002242 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 800221c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800221e:	b292      	uxth	r2, r2
 8002220:	2a01      	cmp	r2, #1
 8002222:	d90b      	bls.n	800223c <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 8002224:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	e7eb      	b.n	8002204 <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800222c:	782b      	ldrb	r3, [r5, #0]
 800222e:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 8002230:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002232:	3b01      	subs	r3, #1
 8002234:	b29b      	uxth	r3, r3
 8002236:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002238:	3501      	adds	r5, #1
 800223a:	e7e7      	b.n	800220c <HAL_SPI_Transmit+0x124>
 800223c:	782a      	ldrb	r2, [r5, #0]
 800223e:	731a      	strb	r2, [r3, #12]
 8002240:	e7f6      	b.n	8002230 <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002242:	2e00      	cmp	r6, #0
 8002244:	d0c0      	beq.n	80021c8 <HAL_SPI_Transmit+0xe0>
 8002246:	1c73      	adds	r3, r6, #1
 8002248:	d0e0      	beq.n	800220c <HAL_SPI_Transmit+0x124>
 800224a:	f7fe f9cf 	bl	80005ec <HAL_GetTick>
 800224e:	1bc0      	subs	r0, r0, r7
 8002250:	4286      	cmp	r6, r0
 8002252:	d8db      	bhi.n	800220c <HAL_SPI_Transmit+0x124>
 8002254:	e7b8      	b.n	80021c8 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002256:	2320      	movs	r3, #32
 8002258:	6623      	str	r3, [r4, #96]	; 0x60
 800225a:	e79e      	b.n	800219a <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 800225c:	2002      	movs	r0, #2
 800225e:	e7b4      	b.n	80021ca <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 8002260:	2002      	movs	r0, #2
 8002262:	e7b8      	b.n	80021d6 <HAL_SPI_Transmit+0xee>

08002264 <HAL_SPI_TransmitReceive>:
{
 8002264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002268:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800226a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800226e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002272:	2b01      	cmp	r3, #1
{
 8002274:	4604      	mov	r4, r0
 8002276:	460d      	mov	r5, r1
 8002278:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800227a:	f000 8112 	beq.w	80024a2 <HAL_SPI_TransmitReceive+0x23e>
 800227e:	2301      	movs	r3, #1
 8002280:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002284:	f7fe f9b2 	bl	80005ec <HAL_GetTick>
  tmp  = hspi->State;
 8002288:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 800228c:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 800228e:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002290:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002292:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002294:	d00a      	beq.n	80022ac <HAL_SPI_TransmitReceive+0x48>
 8002296:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800229a:	f040 8100 	bne.w	800249e <HAL_SPI_TransmitReceive+0x23a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800229e:	68a2      	ldr	r2, [r4, #8]
 80022a0:	2a00      	cmp	r2, #0
 80022a2:	f040 80fc 	bne.w	800249e <HAL_SPI_TransmitReceive+0x23a>
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	f040 80f9 	bne.w	800249e <HAL_SPI_TransmitReceive+0x23a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022ac:	2d00      	cmp	r5, #0
 80022ae:	d04b      	beq.n	8002348 <HAL_SPI_TransmitReceive+0xe4>
 80022b0:	2e00      	cmp	r6, #0
 80022b2:	d049      	beq.n	8002348 <HAL_SPI_TransmitReceive+0xe4>
 80022b4:	2f00      	cmp	r7, #0
 80022b6:	d047      	beq.n	8002348 <HAL_SPI_TransmitReceive+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022b8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80022bc:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022be:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022c0:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022c2:	bf1c      	itt	ne
 80022c4:	2305      	movne	r3, #5
 80022c6:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022ca:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80022cc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022d0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80022d2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80022d4:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80022d8:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80022da:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022de:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80022e0:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80022e2:	87a7      	strh	r7, [r4, #60]	; 0x3c
 80022e4:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80022e6:	d804      	bhi.n	80022f2 <HAL_SPI_TransmitReceive+0x8e>
 80022e8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80022ec:	b292      	uxth	r2, r2
 80022ee:	2a01      	cmp	r2, #1
 80022f0:	d92c      	bls.n	800234c <HAL_SPI_TransmitReceive+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022f8:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80022fe:	bf5e      	ittt	pl
 8002300:	681a      	ldrpl	r2, [r3, #0]
 8002302:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002306:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002308:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800230c:	d956      	bls.n	80023bc <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800230e:	b119      	cbz	r1, 8002318 <HAL_SPI_TransmitReceive+0xb4>
 8002310:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002312:	b292      	uxth	r2, r2
 8002314:	2a01      	cmp	r2, #1
 8002316:	d106      	bne.n	8002326 <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002318:	f835 2b02 	ldrh.w	r2, [r5], #2
 800231c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800231e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002320:	3b01      	subs	r3, #1
 8002322:	b29b      	uxth	r3, r3
 8002324:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002326:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002328:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800232a:	b29b      	uxth	r3, r3
 800232c:	b993      	cbnz	r3, 8002354 <HAL_SPI_TransmitReceive+0xf0>
 800232e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002332:	b29b      	uxth	r3, r3
 8002334:	b973      	cbnz	r3, 8002354 <HAL_SPI_TransmitReceive+0xf0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002336:	464a      	mov	r2, r9
 8002338:	4641      	mov	r1, r8
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff fe14 	bl	8001f68 <SPI_EndRxTxTransaction>
 8002340:	2800      	cmp	r0, #0
 8002342:	d033      	beq.n	80023ac <HAL_SPI_TransmitReceive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002344:	2320      	movs	r3, #32
 8002346:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002348:	2001      	movs	r0, #1
 800234a:	e02f      	b.n	80023ac <HAL_SPI_TransmitReceive+0x148>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002352:	e7d1      	b.n	80022f8 <HAL_SPI_TransmitReceive+0x94>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002354:	b177      	cbz	r7, 8002374 <HAL_SPI_TransmitReceive+0x110>
 8002356:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002358:	b29b      	uxth	r3, r3
 800235a:	b15b      	cbz	r3, 8002374 <HAL_SPI_TransmitReceive+0x110>
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	0792      	lsls	r2, r2, #30
 8002362:	d507      	bpl.n	8002374 <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002364:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002368:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800236a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800236c:	3b01      	subs	r3, #1
 800236e:	b29b      	uxth	r3, r3
 8002370:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002372:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002374:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002378:	b29b      	uxth	r3, r3
 800237a:	b16b      	cbz	r3, 8002398 <HAL_SPI_TransmitReceive+0x134>
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	07d0      	lsls	r0, r2, #31
 8002382:	d509      	bpl.n	8002398 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800238a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800238e:	3b01      	subs	r3, #1
 8002390:	b29b      	uxth	r3, r3
 8002392:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002396:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002398:	f1b8 3fff 	cmp.w	r8, #4294967295
 800239c:	d0c4      	beq.n	8002328 <HAL_SPI_TransmitReceive+0xc4>
 800239e:	f7fe f925 	bl	80005ec <HAL_GetTick>
 80023a2:	eba0 0009 	sub.w	r0, r0, r9
 80023a6:	4580      	cmp	r8, r0
 80023a8:	d8be      	bhi.n	8002328 <HAL_SPI_TransmitReceive+0xc4>
        errorcode = HAL_TIMEOUT;
 80023aa:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80023ac:	2301      	movs	r3, #1
 80023ae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80023b2:	2300      	movs	r3, #0
 80023b4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80023b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80023bc:	b119      	cbz	r1, 80023c6 <HAL_SPI_TransmitReceive+0x162>
 80023be:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80023c0:	b292      	uxth	r2, r2
 80023c2:	2a01      	cmp	r2, #1
 80023c4:	d10a      	bne.n	80023dc <HAL_SPI_TransmitReceive+0x178>
      if (hspi->TxXferCount > 1U)
 80023c6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80023c8:	b292      	uxth	r2, r2
 80023ca:	2a01      	cmp	r2, #1
 80023cc:	d94d      	bls.n	800246a <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80023ce:	f835 2b02 	ldrh.w	r2, [r5], #2
 80023d2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80023d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023d6:	3b02      	subs	r3, #2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80023dc:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b923      	cbnz	r3, 80023ee <HAL_SPI_TransmitReceive+0x18a>
 80023e4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0a3      	beq.n	8002336 <HAL_SPI_TransmitReceive+0xd2>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80023ee:	b197      	cbz	r7, 8002416 <HAL_SPI_TransmitReceive+0x1b2>
 80023f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	b17b      	cbz	r3, 8002416 <HAL_SPI_TransmitReceive+0x1b2>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	0791      	lsls	r1, r2, #30
 80023fc:	d50b      	bpl.n	8002416 <HAL_SPI_TransmitReceive+0x1b2>
        if (hspi->TxXferCount > 1U)
 80023fe:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002400:	b292      	uxth	r2, r2
 8002402:	2a01      	cmp	r2, #1
 8002404:	d939      	bls.n	800247a <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002406:	f835 2b02 	ldrh.w	r2, [r5], #2
 800240a:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800240c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800240e:	3b02      	subs	r3, #2
 8002410:	b29b      	uxth	r3, r3
 8002412:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002414:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002416:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800241a:	b29b      	uxth	r3, r3
 800241c:	b1db      	cbz	r3, 8002456 <HAL_SPI_TransmitReceive+0x1f2>
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	07d2      	lsls	r2, r2, #31
 8002424:	d517      	bpl.n	8002456 <HAL_SPI_TransmitReceive+0x1f2>
        if (hspi->RxXferCount > 1U)
 8002426:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800242a:	b292      	uxth	r2, r2
 800242c:	2a01      	cmp	r2, #1
 800242e:	d92c      	bls.n	800248a <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 8002436:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800243a:	3a02      	subs	r2, #2
 800243c:	b292      	uxth	r2, r2
 800243e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002442:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002446:	b292      	uxth	r2, r2
 8002448:	2a01      	cmp	r2, #1
 800244a:	d803      	bhi.n	8002454 <HAL_SPI_TransmitReceive+0x1f0>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002452:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8002454:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002456:	f1b8 3fff 	cmp.w	r8, #4294967295
 800245a:	d0c0      	beq.n	80023de <HAL_SPI_TransmitReceive+0x17a>
 800245c:	f7fe f8c6 	bl	80005ec <HAL_GetTick>
 8002460:	eba0 0009 	sub.w	r0, r0, r9
 8002464:	4580      	cmp	r8, r0
 8002466:	d8ba      	bhi.n	80023de <HAL_SPI_TransmitReceive+0x17a>
 8002468:	e79f      	b.n	80023aa <HAL_SPI_TransmitReceive+0x146>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800246a:	782a      	ldrb	r2, [r5, #0]
 800246c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800246e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002470:	3b01      	subs	r3, #1
 8002472:	b29b      	uxth	r3, r3
 8002474:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002476:	3501      	adds	r5, #1
 8002478:	e7b0      	b.n	80023dc <HAL_SPI_TransmitReceive+0x178>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800247a:	782a      	ldrb	r2, [r5, #0]
 800247c:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800247e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002480:	3b01      	subs	r3, #1
 8002482:	b29b      	uxth	r3, r3
 8002484:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002486:	3501      	adds	r5, #1
 8002488:	e7c4      	b.n	8002414 <HAL_SPI_TransmitReceive+0x1b0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800248a:	7b1b      	ldrb	r3, [r3, #12]
 800248c:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 800248e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002492:	3b01      	subs	r3, #1
 8002494:	b29b      	uxth	r3, r3
 8002496:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800249a:	3601      	adds	r6, #1
 800249c:	e7da      	b.n	8002454 <HAL_SPI_TransmitReceive+0x1f0>
    errorcode = HAL_BUSY;
 800249e:	2002      	movs	r0, #2
 80024a0:	e784      	b.n	80023ac <HAL_SPI_TransmitReceive+0x148>
  __HAL_LOCK(hspi);
 80024a2:	2002      	movs	r0, #2
}
 80024a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080024a8 <HAL_SPI_Receive>:
{
 80024a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80024ac:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024ae:	6843      	ldr	r3, [r0, #4]
 80024b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80024b4:	4604      	mov	r4, r0
 80024b6:	460e      	mov	r6, r1
 80024b8:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024ba:	d10c      	bne.n	80024d6 <HAL_SPI_Receive+0x2e>
 80024bc:	6883      	ldr	r3, [r0, #8]
 80024be:	b953      	cbnz	r3, 80024d6 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024c0:	2304      	movs	r3, #4
 80024c2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80024c6:	4613      	mov	r3, r2
 80024c8:	9500      	str	r5, [sp, #0]
 80024ca:	460a      	mov	r2, r1
 80024cc:	f7ff feca 	bl	8002264 <HAL_SPI_TransmitReceive>
}
 80024d0:	b002      	add	sp, #8
 80024d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80024d6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80024da:	2b01      	cmp	r3, #1
 80024dc:	f000 808b 	beq.w	80025f6 <HAL_SPI_Receive+0x14e>
 80024e0:	2301      	movs	r3, #1
 80024e2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80024e6:	f7fe f881 	bl	80005ec <HAL_GetTick>
 80024ea:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80024ec:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80024f0:	b2c0      	uxtb	r0, r0
 80024f2:	2801      	cmp	r0, #1
 80024f4:	d17d      	bne.n	80025f2 <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 80024f6:	2e00      	cmp	r6, #0
 80024f8:	d05f      	beq.n	80025ba <HAL_SPI_Receive+0x112>
 80024fa:	f1b8 0f00 	cmp.w	r8, #0
 80024fe:	d05c      	beq.n	80025ba <HAL_SPI_Receive+0x112>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002500:	2304      	movs	r3, #4
 8002502:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8002506:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002508:	68e2      	ldr	r2, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800250a:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800250c:	2300      	movs	r3, #0
 800250e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8002510:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002514:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002516:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002518:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800251a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800251c:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800251e:	684b      	ldr	r3, [r1, #4]
  hspi->RxXferSize  = Size;
 8002520:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002524:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002528:	bf8c      	ite	hi
 800252a:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800252e:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8002532:	604b      	str	r3, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002534:	68a3      	ldr	r3, [r4, #8]
 8002536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800253a:	bf02      	ittt	eq
 800253c:	680b      	ldreq	r3, [r1, #0]
 800253e:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 8002542:	600b      	streq	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002544:	680b      	ldr	r3, [r1, #0]
 8002546:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002548:	bf5e      	ittt	pl
 800254a:	680b      	ldrpl	r3, [r1, #0]
 800254c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002550:	600b      	strpl	r3, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002552:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8002556:	d91e      	bls.n	8002596 <HAL_SPI_Receive+0xee>
    while (hspi->RxXferCount > 0U)
 8002558:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800255c:	b29b      	uxth	r3, r3
 800255e:	b1fb      	cbz	r3, 80025a0 <HAL_SPI_Receive+0xf8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	07d2      	lsls	r2, r2, #31
 8002566:	d537      	bpl.n	80025d8 <HAL_SPI_Receive+0x130>
        *((uint16_t *)pData) = hspi->Instance->DR;
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800256e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002572:	3b01      	subs	r3, #1
 8002574:	b29b      	uxth	r3, r3
 8002576:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800257a:	e7ed      	b.n	8002558 <HAL_SPI_Receive+0xb0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	07d0      	lsls	r0, r2, #31
 8002582:	d518      	bpl.n	80025b6 <HAL_SPI_Receive+0x10e>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002584:	7b1b      	ldrb	r3, [r3, #12]
 8002586:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 800258a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800258e:	3b01      	subs	r3, #1
 8002590:	b29b      	uxth	r3, r3
 8002592:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8002596:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ed      	bne.n	800257c <HAL_SPI_Receive+0xd4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025a0:	463a      	mov	r2, r7
 80025a2:	4629      	mov	r1, r5
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff fd01 	bl	8001fac <SPI_EndRxTransaction>
 80025aa:	b9f8      	cbnz	r0, 80025ec <HAL_SPI_Receive+0x144>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025ac:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80025ae:	3000      	adds	r0, #0
 80025b0:	bf18      	it	ne
 80025b2:	2001      	movne	r0, #1
 80025b4:	e001      	b.n	80025ba <HAL_SPI_Receive+0x112>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80025b6:	b93d      	cbnz	r5, 80025c8 <HAL_SPI_Receive+0x120>
          errorcode = HAL_TIMEOUT;
 80025b8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80025c0:	2300      	movs	r3, #0
 80025c2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 80025c6:	e783      	b.n	80024d0 <HAL_SPI_Receive+0x28>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80025c8:	1c69      	adds	r1, r5, #1
 80025ca:	d0e4      	beq.n	8002596 <HAL_SPI_Receive+0xee>
 80025cc:	f7fe f80e 	bl	80005ec <HAL_GetTick>
 80025d0:	1bc0      	subs	r0, r0, r7
 80025d2:	4285      	cmp	r5, r0
 80025d4:	d8df      	bhi.n	8002596 <HAL_SPI_Receive+0xee>
 80025d6:	e7ef      	b.n	80025b8 <HAL_SPI_Receive+0x110>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80025d8:	2d00      	cmp	r5, #0
 80025da:	d0ed      	beq.n	80025b8 <HAL_SPI_Receive+0x110>
 80025dc:	1c6b      	adds	r3, r5, #1
 80025de:	d0bb      	beq.n	8002558 <HAL_SPI_Receive+0xb0>
 80025e0:	f7fe f804 	bl	80005ec <HAL_GetTick>
 80025e4:	1bc0      	subs	r0, r0, r7
 80025e6:	4285      	cmp	r5, r0
 80025e8:	d8b6      	bhi.n	8002558 <HAL_SPI_Receive+0xb0>
 80025ea:	e7e5      	b.n	80025b8 <HAL_SPI_Receive+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ec:	2320      	movs	r3, #32
 80025ee:	6623      	str	r3, [r4, #96]	; 0x60
 80025f0:	e7dc      	b.n	80025ac <HAL_SPI_Receive+0x104>
    errorcode = HAL_BUSY;
 80025f2:	2002      	movs	r0, #2
 80025f4:	e7e1      	b.n	80025ba <HAL_SPI_Receive+0x112>
  __HAL_LOCK(hspi);
 80025f6:	2002      	movs	r0, #2
 80025f8:	e76a      	b.n	80024d0 <HAL_SPI_Receive+0x28>

080025fa <HAL_SPIEx_FlushRxFifo>:
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 80025fa:	6802      	ldr	r2, [r0, #0]
{
 80025fc:	b082      	sub	sp, #8
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 80025fe:	2304      	movs	r3, #4
 8002600:	6890      	ldr	r0, [r2, #8]
 8002602:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 8002606:	d101      	bne.n	800260c <HAL_SPIEx_FlushRxFifo+0x12>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8002608:	b002      	add	sp, #8
 800260a:	4770      	bx	lr
    tmpreg = hspi->Instance->DR;
 800260c:	68d1      	ldr	r1, [r2, #12]
 800260e:	9101      	str	r1, [sp, #4]
 8002610:	3b01      	subs	r3, #1
    if (count == SPI_FIFO_SIZE)
 8002612:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    UNUSED(tmpreg); /* To avoid GCC warning */
 8002616:	9901      	ldr	r1, [sp, #4]
    if (count == SPI_FIFO_SIZE)
 8002618:	d1f2      	bne.n	8002600 <HAL_SPIEx_FlushRxFifo+0x6>
      return HAL_TIMEOUT;
 800261a:	2003      	movs	r0, #3
 800261c:	e7f4      	b.n	8002608 <HAL_SPIEx_FlushRxFifo+0xe>
	...

08002620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002620:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability
    */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002622:	4a2f      	ldr	r2, [pc, #188]	; (80026e0 <SystemClock_Config+0xc0>)
 8002624:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
{
 8002628:	b0b8      	sub	sp, #224	; 0xe0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800262a:	f023 0318 	bic.w	r3, r3, #24
 800262e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002632:	2314      	movs	r3, #20
 8002634:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800263a:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800263c:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800263e:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002640:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002642:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002644:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002646:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002648:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800264a:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800264c:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800264e:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002650:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002652:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002654:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002656:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002658:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265a:	f7fe fe3b 	bl	80012d4 <HAL_RCC_OscConfig>
 800265e:	b100      	cbz	r0, 8002662 <SystemClock_Config+0x42>
 8002660:	e7fe      	b.n	8002660 <SystemClock_Config+0x40>

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002662:	220f      	movs	r2, #15
 8002664:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002666:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002668:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800266a:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800266c:	2104      	movs	r1, #4
 800266e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002670:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002674:	f7ff f860 	bl	8001738 <HAL_RCC_ClockConfig>
 8002678:	b100      	cbz	r0, 800267c <SystemClock_Config+0x5c>
 800267a:	e7fe      	b.n	800267a <SystemClock_Config+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 800267c:	f242 0301 	movw	r3, #8193	; 0x2001
 8002680:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002682:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002686:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002688:	2318      	movs	r3, #24
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800268a:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800268c:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800268e:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002690:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002694:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002696:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002698:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800269a:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800269c:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800269e:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026a0:	f7ff fa12 	bl	8001ac8 <HAL_RCCEx_PeriphCLKConfig>
 80026a4:	b100      	cbz	r0, 80026a8 <SystemClock_Config+0x88>
 80026a6:	e7fe      	b.n	80026a6 <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80026a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80026ac:	f7fe fd34 	bl	8001118 <HAL_PWREx_ControlVoltageScaling>
 80026b0:	4604      	mov	r4, r0
 80026b2:	b100      	cbz	r0, 80026b6 <SystemClock_Config+0x96>
 80026b4:	e7fe      	b.n	80026b4 <SystemClock_Config+0x94>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80026b6:	f7ff f8f5 	bl	80018a4 <HAL_RCC_GetHCLKFreq>
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	fbb0 f0f3 	udiv	r0, r0, r3
 80026c2:	f7fd fff7 	bl	80006b4 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80026c6:	2004      	movs	r0, #4
 80026c8:	f7fe f80a 	bl	80006e0 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration
    */
  HAL_RCCEx_EnableMSIPLLMode();
 80026cc:	f7ff fbe4 	bl	8001e98 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026d0:	4622      	mov	r2, r4
 80026d2:	4621      	mov	r1, r4
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f7fd ffac 	bl	8000634 <HAL_NVIC_SetPriority>
}
 80026dc:	b038      	add	sp, #224	; 0xe0
 80026de:	bd70      	pop	{r4, r5, r6, pc}
 80026e0:	40021000 	.word	0x40021000

080026e4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80026e4:	e7fe      	b.n	80026e4 <_Error_Handler>
	...

080026e8 <thingSpeakUpdate>:
}

/*send 3 fields to Thingspeak
 * @param wifi_xmit: the string of fields to be updated
 */
void thingSpeakUpdate(uint8_t* wifi_xmit){
 80026e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026ea:	4605      	mov	r5, r0
	static uint8_t WIFI_connection[250];
	sprintf(WIFI_connection, "POST /update HTTP/1.1\n"
 80026ec:	f7fd fd70 	bl	80001d0 <strlen>
 80026f0:	4c0d      	ldr	r4, [pc, #52]	; (8002728 <thingSpeakUpdate+0x40>)
 80026f2:	490e      	ldr	r1, [pc, #56]	; (800272c <thingSpeakUpdate+0x44>)
 80026f4:	4602      	mov	r2, r0
 80026f6:	4620      	mov	r0, r4
 80026f8:	f001 fa86 	bl	8003c08 <siprintf>
			                 "Host: api.thingspeak.com\n"
							 "Connection: close\n"
							 "X-THINGSPEAKAPIKEY: YF7HOW1VSKR4Y8H8\n"
							 "Content-Type: application/x-www-form-urlencoded\n"
							 "Content-Length: %d\n\n", strlen(wifi_xmit));
	sprintf(strchr(WIFI_connection, '\0'), wifi_xmit);
 80026fc:	2100      	movs	r1, #0
 80026fe:	4620      	mov	r0, r4
 8002700:	f001 faa6 	bl	8003c50 <strchr>
 8002704:	4629      	mov	r1, r5
 8002706:	f001 fa7f 	bl	8003c08 <siprintf>
	WIFI_SendData((uint8_t)0, WIFI_connection, strlen(WIFI_connection), &XferSize, Timeout);
 800270a:	4620      	mov	r0, r4
 800270c:	f7fd fd60 	bl	80001d0 <strlen>
 8002710:	f242 7310 	movw	r3, #10000	; 0x2710
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	b282      	uxth	r2, r0
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <thingSpeakUpdate+0x48>)
 800271a:	4621      	mov	r1, r4
 800271c:	2000      	movs	r0, #0
 800271e:	f001 fa07 	bl	8003b30 <WIFI_SendData>
}
 8002722:	b003      	add	sp, #12
 8002724:	bd30      	pop	{r4, r5, pc}
 8002726:	bf00      	nop
 8002728:	200000a0 	.word	0x200000a0
 800272c:	080045a4 	.word	0x080045a4
 8002730:	2000019a 	.word	0x2000019a

08002734 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt) 
{
 8002734:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;
    
    if (*ptr == '-') {                                		/* Check for minus character */
 8002736:	7803      	ldrb	r3, [r0, #0]
 8002738:	2b2d      	cmp	r3, #45	; 0x2d
        minus = 1;
        ptr++;
 800273a:	bf06      	itte	eq
 800273c:	3001      	addeq	r0, #1
        minus = 1;
 800273e:	2501      	moveq	r5, #1
    uint8_t minus = 0, i = 0;
 8002740:	2500      	movne	r5, #0
 8002742:	1e43      	subs	r3, r0, #1
 8002744:	462a      	mov	r2, r5
 8002746:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8002748:	270a      	movs	r7, #10
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800274a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800274e:	3c30      	subs	r4, #48	; 0x30
 8002750:	b2e6      	uxtb	r6, r4
 8002752:	2e09      	cmp	r6, #9
 8002754:	d904      	bls.n	8002760 <ParseNumber+0x2c>
        ptr++;
        i++;
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8002756:	b101      	cbz	r1, 800275a <ParseNumber+0x26>
        *cnt = i;
 8002758:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 800275a:	b105      	cbz	r5, 800275e <ParseNumber+0x2a>
        return 0 - sum;
 800275c:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 800275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        i++;
 8002760:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 8002762:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	e7ef      	b.n	800274a <ParseNumber+0x16>

0800276a <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr) 
{
 800276a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800276e:	4604      	mov	r4, r0
 8002770:	460f      	mov	r7, r1
  uint8_t hexnum = 0, hexcnt;
 8002772:	2500      	movs	r5, #0
  
  while(* ptr) { 
    hexcnt = 1;
 8002774:	f04f 0801 	mov.w	r8, #1
  while(* ptr) { 
 8002778:	7823      	ldrb	r3, [r4, #0]
 800277a:	b913      	cbnz	r3, 8002782 <ParseIP+0x18>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 800277c:	b002      	add	sp, #8
 800277e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*ptr != '.')
 8002782:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8002784:	f88d 8007 	strb.w	r8, [sp, #7]
    if(*ptr != '.')
 8002788:	d008      	beq.n	800279c <ParseIP+0x32>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800278a:	f10d 0107 	add.w	r1, sp, #7
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff ffd0 	bl	8002734 <ParseNumber>
 8002794:	1c6e      	adds	r6, r5, #1
 8002796:	b2f6      	uxtb	r6, r6
 8002798:	5578      	strb	r0, [r7, r5]
 800279a:	4635      	mov	r5, r6
    ptr = ptr + hexcnt;
 800279c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027a0:	441c      	add	r4, r3
 80027a2:	e7e9      	b.n	8002778 <ParseIP+0xe>

080027a4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80027a4:	b570      	push	{r4, r5, r6, lr}
 80027a6:	4604      	mov	r4, r0
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80027a8:	4608      	mov	r0, r1
{
 80027aa:	460e      	mov	r6, r1
 80027ac:	4615      	mov	r5, r2
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80027ae:	f7fd fd0f 	bl	80001d0 <strlen>
 80027b2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80027b6:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 80027ba:	b281      	uxth	r1, r0
 80027bc:	4630      	mov	r0, r6
 80027be:	4798      	blx	r3
 80027c0:	2800      	cmp	r0, #0
 80027c2:	dd14      	ble.n	80027ee <AT_ExecuteCommand+0x4a>
  {
    int16_t n=Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80027c4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80027c8:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 80027cc:	2100      	movs	r1, #0
 80027ce:	4628      	mov	r0, r5
 80027d0:	4798      	blx	r3
    if(n > 0)
 80027d2:	2800      	cmp	r0, #0
 80027d4:	dd0b      	ble.n	80027ee <AT_ExecuteCommand+0x4a>
    {
      *(pdata+n)=0;
 80027d6:	2400      	movs	r4, #0
 80027d8:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <AT_ExecuteCommand+0x58>)
 80027dc:	4628      	mov	r0, r5
 80027de:	f001 fa62 	bl	8003ca6 <strstr>
 80027e2:	b930      	cbnz	r0, 80027f2 <AT_ExecuteCommand+0x4e>
      {
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80027e4:	4906      	ldr	r1, [pc, #24]	; (8002800 <AT_ExecuteCommand+0x5c>)
 80027e6:	4628      	mov	r0, r5
 80027e8:	f001 fa5d 	bl	8003ca6 <strstr>
 80027ec:	b918      	cbnz	r0, 80027f6 <AT_ExecuteCommand+0x52>
      {
        return ES_WIFI_STATUS_ERROR;
      }      
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80027ee:	2004      	movs	r0, #4
 80027f0:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 80027f2:	4620      	mov	r0, r4
 80027f4:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_ERROR;
 80027f6:	2002      	movs	r0, #2
}
 80027f8:	bd70      	pop	{r4, r5, r6, pc}
 80027fa:	bf00      	nop
 80027fc:	0800464f 	.word	0x0800464f
 8002800:	08004658 	.word	0x08004658

08002804 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8002804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  
  Obj->Timeout = ES_WIFI_TIMEOUT;
 8002808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800280c:	f8c0 3760 	str.w	r3, [r0, #1888]	; 0x760
  
  if (Obj->fops.IO_Init() == 0)
 8002810:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
{
 8002814:	4604      	mov	r4, r0
  if (Obj->fops.IO_Init() == 0)
 8002816:	4798      	blx	r3
 8002818:	2800      	cmp	r0, #0
 800281a:	d14b      	bne.n	80028b4 <ES_WIFI_Init+0xb0>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800281c:	f504 7290 	add.w	r2, r4, #288	; 0x120
 8002820:	4925      	ldr	r1, [pc, #148]	; (80028b8 <ES_WIFI_Init+0xb4>)
 8002822:	4620      	mov	r0, r4
 8002824:	f7ff ffbe 	bl	80027a4 <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8002828:	4605      	mov	r5, r0
 800282a:	b960      	cbnz	r0, 8002846 <ES_WIFI_Init+0x42>
  ptr = strtok((char *)pdata + 2, ",");  
 800282c:	4923      	ldr	r1, [pc, #140]	; (80028bc <ES_WIFI_Init+0xb8>)
      ptr = strtok(ptr, "\r"); 
 800282e:	4f24      	ldr	r7, [pc, #144]	; (80028c0 <ES_WIFI_Init+0xbc>)
    ptr = strtok(NULL, ","); 
 8002830:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80028bc <ES_WIFI_Init+0xb8>
  ptr = strtok((char *)pdata + 2, ",");  
 8002834:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8002838:	f001 fa50 	bl	8003cdc <strtok>
 800283c:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 800283e:	f104 0860 	add.w	r8, r4, #96	; 0x60
 8002842:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8002844:	b910      	cbnz	r0, 800284c <ES_WIFI_Init+0x48>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 8002846:	4628      	mov	r0, r5
 8002848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) { 
 800284c:	2b06      	cmp	r3, #6
 800284e:	d824      	bhi.n	800289a <ES_WIFI_Init+0x96>
 8002850:	e8df f003 	tbb	[pc, r3]
 8002854:	140f0a04 	.word	0x140f0a04
 8002858:	1e19      	.short	0x1e19
 800285a:	29          	.byte	0x29
 800285b:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 800285c:	4601      	mov	r1, r0
 800285e:	2220      	movs	r2, #32
 8002860:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8002862:	f001 fa0b 	bl	8003c7c <strncpy>
 8002866:	e018      	b.n	800289a <ES_WIFI_Init+0x96>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8002868:	4601      	mov	r1, r0
 800286a:	2210      	movs	r2, #16
 800286c:	f104 0020 	add.w	r0, r4, #32
 8002870:	e7f7      	b.n	8002862 <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);      
 8002872:	4601      	mov	r1, r0
 8002874:	2210      	movs	r2, #16
 8002876:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800287a:	e7f2      	b.n	8002862 <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);   
 800287c:	4601      	mov	r1, r0
 800287e:	2210      	movs	r2, #16
 8002880:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002884:	e7ed      	b.n	8002862 <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);        
 8002886:	4601      	mov	r1, r0
 8002888:	2210      	movs	r2, #16
 800288a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800288e:	e7e8      	b.n	8002862 <ES_WIFI_Init+0x5e>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8002890:	2100      	movs	r1, #0
 8002892:	f7ff ff4f 	bl	8002734 <ParseNumber>
 8002896:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    ptr = strtok(NULL, ","); 
 800289a:	4649      	mov	r1, r9
 800289c:	2000      	movs	r0, #0
 800289e:	f001 fa1d 	bl	8003cdc <strtok>
 80028a2:	3601      	adds	r6, #1
 80028a4:	e7cd      	b.n	8002842 <ES_WIFI_Init+0x3e>
      ptr = strtok(ptr, "\r"); 
 80028a6:	4639      	mov	r1, r7
 80028a8:	f001 fa18 	bl	8003cdc <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 80028ac:	2220      	movs	r2, #32
 80028ae:	4601      	mov	r1, r0
 80028b0:	4640      	mov	r0, r8
 80028b2:	e7d6      	b.n	8002862 <ES_WIFI_Init+0x5e>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80028b4:	2502      	movs	r5, #2
 80028b6:	e7c6      	b.n	8002846 <ES_WIFI_Init+0x42>
 80028b8:	0800467d 	.word	0x0800467d
 80028bc:	08004682 	.word	0x08004682
 80028c0:	080046d0 	.word	0x080046d0

080028c4 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,  
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 80028c4:	b530      	push	{r4, r5, lr}
 80028c6:	9d03      	ldr	r5, [sp, #12]
 80028c8:	9c04      	ldr	r4, [sp, #16]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80028ca:	b168      	cbz	r0, 80028e8 <ES_WIFI_RegisterBusIO+0x24>
 80028cc:	b161      	cbz	r1, 80028e8 <ES_WIFI_RegisterBusIO+0x24>
 80028ce:	b15a      	cbz	r2, 80028e8 <ES_WIFI_RegisterBusIO+0x24>
 80028d0:	b155      	cbz	r5, 80028e8 <ES_WIFI_RegisterBusIO+0x24>
 80028d2:	b14c      	cbz	r4, 80028e8 <ES_WIFI_RegisterBusIO+0x24>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 80028d4:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
  Obj->fops.IO_Send = IO_Send;
 80028d8:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
  Obj->fops.IO_Receive = IO_Receive;
 80028dc:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
  Obj->fops.IO_Delay = IO_Delay;  
 80028e0:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
  
  return ES_WIFI_STATUS_OK;
 80028e4:	2000      	movs	r0, #0
 80028e6:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 80028e8:	2002      	movs	r0, #2
}
 80028ea:	bd30      	pop	{r4, r5, pc}

080028ec <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID, 
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80028ee:	f500 7490 	add.w	r4, r0, #288	; 0x120
{
 80028f2:	4605      	mov	r5, r0
 80028f4:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80028f6:	4620      	mov	r0, r4
 80028f8:	460a      	mov	r2, r1
 80028fa:	4918      	ldr	r1, [pc, #96]	; (800295c <ES_WIFI_Connect+0x70>)
{
 80028fc:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80028fe:	f001 f983 	bl	8003c08 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002902:	4622      	mov	r2, r4
 8002904:	4621      	mov	r1, r4
 8002906:	4628      	mov	r0, r5
 8002908:	f7ff ff4c 	bl	80027a4 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 800290c:	bb20      	cbnz	r0, 8002958 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800290e:	463a      	mov	r2, r7
 8002910:	4913      	ldr	r1, [pc, #76]	; (8002960 <ES_WIFI_Connect+0x74>)
 8002912:	4620      	mov	r0, r4
 8002914:	f001 f978 	bl	8003c08 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002918:	4622      	mov	r2, r4
 800291a:	4621      	mov	r1, r4
 800291c:	4628      	mov	r0, r5
 800291e:	f7ff ff41 	bl	80027a4 <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8002922:	b9c8      	cbnz	r0, 8002958 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8002924:	4632      	mov	r2, r6
 8002926:	490f      	ldr	r1, [pc, #60]	; (8002964 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8002928:	f885 6084 	strb.w	r6, [r5, #132]	; 0x84
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800292c:	4620      	mov	r0, r4
 800292e:	f001 f96b 	bl	8003c08 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002932:	4622      	mov	r2, r4
 8002934:	4621      	mov	r1, r4
 8002936:	4628      	mov	r0, r5
 8002938:	f7ff ff34 	bl	80027a4 <AT_ExecuteCommand>
      
      if(ret == ES_WIFI_STATUS_OK)
 800293c:	b960      	cbnz	r0, 8002958 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800293e:	490a      	ldr	r1, [pc, #40]	; (8002968 <ES_WIFI_Connect+0x7c>)
 8002940:	4620      	mov	r0, r4
 8002942:	f001 f993 	bl	8003c6c <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);  
 8002946:	4622      	mov	r2, r4
 8002948:	4621      	mov	r1, r4
 800294a:	4628      	mov	r0, r5
 800294c:	f7ff ff2a 	bl	80027a4 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8002950:	b910      	cbnz	r0, 8002958 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	f885 30ca 	strb.w	r3, [r5, #202]	; 0xca
        }
      }    
    }
  }
  return ret;
}
 8002958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800295a:	bf00      	nop
 800295c:	08004660 	.word	0x08004660
 8002960:	08004667 	.word	0x08004667
 8002964:	0800466e 	.word	0x0800466e
 8002968:	08004675 	.word	0x08004675

0800296c <ES_WIFI_GetNetworkSettings>:
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C?\r");
 800296c:	f500 7290 	add.w	r2, r0, #288	; 0x120
{
 8002970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8002974:	4937      	ldr	r1, [pc, #220]	; (8002a54 <ES_WIFI_GetNetworkSettings+0xe8>)
{
 8002976:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8002978:	4610      	mov	r0, r2
 800297a:	f001 f977 	bl	8003c6c <strcpy>
 800297e:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002980:	4601      	mov	r1, r0
 8002982:	4620      	mov	r0, r4
 8002984:	f7ff ff0e 	bl	80027a4 <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8002988:	4606      	mov	r6, r0
 800298a:	b960      	cbnz	r0, 80029a6 <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");   
 800298c:	4932      	ldr	r1, [pc, #200]	; (8002a58 <ES_WIFI_GetNetworkSettings+0xec>)
    ptr = strtok(NULL, ",");
 800298e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002a58 <ES_WIFI_GetNetworkSettings+0xec>
  ptr = strtok(pdata + 2, ",");   
 8002992:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8002996:	f001 f9a1 	bl	8003cdc <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800299a:	f104 0785 	add.w	r7, r4, #133	; 0x85
  uint8_t num = 0;
 800299e:	46b2      	mov	sl, r6
      ParseIP(ptr, NetSettings->DNS2);
 80029a0:	f104 08dd 	add.w	r8, r4, #221	; 0xdd
  while (ptr != NULL) {
 80029a4:	b910      	cbnz	r0, 80029ac <ES_WIFI_GetNetworkSettings+0x40>
  }  
  return ret;
}
 80029a6:	4630      	mov	r0, r6
 80029a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (num++) {      
 80029ac:	f10a 0501 	add.w	r5, sl, #1
 80029b0:	b2ed      	uxtb	r5, r5
 80029b2:	f1ba 0f0b 	cmp.w	sl, #11
 80029b6:	d80c      	bhi.n	80029d2 <ES_WIFI_GetNetworkSettings+0x66>
 80029b8:	e8df f00a 	tbb	[pc, sl]
 80029bc:	241e1906 	.word	0x241e1906
 80029c0:	3835302a 	.word	0x3835302a
 80029c4:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1); 
 80029c8:	4601      	mov	r1, r0
 80029ca:	2221      	movs	r2, #33	; 0x21
 80029cc:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 80029ce:	f001 f955 	bl	8003c7c <strncpy>
    ptr = strtok(NULL, ",");
 80029d2:	4649      	mov	r1, r9
 80029d4:	2000      	movs	r0, #0
 80029d6:	f001 f981 	bl	8003cdc <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 80029da:	b130      	cbz	r0, 80029ea <ES_WIFI_GetNetworkSettings+0x7e>
 80029dc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80029e0:	2b2c      	cmp	r3, #44	; 0x2c
      num++;
 80029e2:	bf04      	itt	eq
 80029e4:	f10a 0502 	addeq.w	r5, sl, #2
 80029e8:	b2ed      	uxtbeq	r5, r5
{
 80029ea:	46aa      	mov	sl, r5
 80029ec:	e7da      	b.n	80029a4 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 80029ee:	4601      	mov	r1, r0
 80029f0:	2221      	movs	r2, #33	; 0x21
 80029f2:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
 80029f6:	e7ea      	b.n	80029ce <ES_WIFI_GetNetworkSettings+0x62>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80029f8:	2100      	movs	r1, #0
 80029fa:	f7ff fe9b 	bl	8002734 <ParseNumber>
 80029fe:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
 8002a02:	e7e6      	b.n	80029d2 <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8002a04:	2100      	movs	r1, #0
 8002a06:	f7ff fe95 	bl	8002734 <ParseNumber>
 8002a0a:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
 8002a0e:	e7e0      	b.n	80029d2 <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8002a10:	2100      	movs	r1, #0
 8002a12:	f7ff fe8f 	bl	8002734 <ParseNumber>
 8002a16:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
 8002a1a:	e7da      	b.n	80029d2 <ES_WIFI_GetNetworkSettings+0x66>
      ParseIP(ptr, NetSettings->IP_Addr);
 8002a1c:	f104 01cd 	add.w	r1, r4, #205	; 0xcd
      ParseIP(ptr, NetSettings->IP_Mask);
 8002a20:	f7ff fea3 	bl	800276a <ParseIP>
 8002a24:	e7d5      	b.n	80029d2 <ES_WIFI_GetNetworkSettings+0x66>
 8002a26:	f104 01d1 	add.w	r1, r4, #209	; 0xd1
 8002a2a:	e7f9      	b.n	8002a20 <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8002a2c:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
 8002a30:	e7f6      	b.n	8002a20 <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->DNS1);
 8002a32:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8002a36:	e7f3      	b.n	8002a20 <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->DNS2);
 8002a38:	4641      	mov	r1, r8
 8002a3a:	e7f1      	b.n	8002a20 <ES_WIFI_GetNetworkSettings+0xb4>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	f7ff fe79 	bl	8002734 <ParseNumber>
 8002a42:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
 8002a46:	e7c4      	b.n	80029d2 <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8002a48:	2100      	movs	r1, #0
 8002a4a:	f7ff fe73 	bl	8002734 <ParseNumber>
 8002a4e:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
 8002a52:	e7be      	b.n	80029d2 <ES_WIFI_GetNetworkSettings+0x66>
 8002a54:	08004679 	.word	0x08004679
 8002a58:	08004682 	.word	0x08004682

08002a5c <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8002a5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret;

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002a5e:	f500 7490 	add.w	r4, r0, #288	; 0x120
 8002a62:	784a      	ldrb	r2, [r1, #1]
{
 8002a64:	4606      	mov	r6, r0
 8002a66:	460d      	mov	r5, r1
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002a68:	4620      	mov	r0, r4
 8002a6a:	4928      	ldr	r1, [pc, #160]	; (8002b0c <ES_WIFI_StartClientConnection+0xb0>)
 8002a6c:	f001 f8cc 	bl	8003c08 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a70:	4622      	mov	r2, r4
 8002a72:	4621      	mov	r1, r4
 8002a74:	4630      	mov	r0, r6
 8002a76:	f7ff fe95 	bl	80027a4 <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d144      	bne.n	8002b08 <ES_WIFI_StartClientConnection+0xac>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8002a7e:	782a      	ldrb	r2, [r5, #0]
 8002a80:	4923      	ldr	r1, [pc, #140]	; (8002b10 <ES_WIFI_StartClientConnection+0xb4>)
 8002a82:	4620      	mov	r0, r4
 8002a84:	f001 f8c0 	bl	8003c08 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a88:	4622      	mov	r2, r4
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	4630      	mov	r0, r6
 8002a8e:	f7ff fe89 	bl	80027a4 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d138      	bne.n	8002b08 <ES_WIFI_StartClientConnection+0xac>
    {
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0)) 
 8002a96:	782b      	ldrb	r3, [r5, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d026      	beq.n	8002aea <ES_WIFI_StartClientConnection+0x8e>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
        {
          return ES_WIFI_STATUS_ERROR;
        }
      }
      sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8002a9c:	886a      	ldrh	r2, [r5, #2]
 8002a9e:	491d      	ldr	r1, [pc, #116]	; (8002b14 <ES_WIFI_StartClientConnection+0xb8>)
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f001 f8b1 	bl	8003c08 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	4630      	mov	r0, r6
 8002aac:	f7ff fe7a 	bl	80027a4 <AT_ExecuteCommand>
      
      if(ret == ES_WIFI_STATUS_OK)
 8002ab0:	bb50      	cbnz	r0, 8002b08 <ES_WIFI_StartClientConnection+0xac>
      {
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002ab2:	7a69      	ldrb	r1, [r5, #9]
 8002ab4:	9101      	str	r1, [sp, #4]
 8002ab6:	7a29      	ldrb	r1, [r5, #8]
 8002ab8:	79aa      	ldrb	r2, [r5, #6]
 8002aba:	9100      	str	r1, [sp, #0]
 8002abc:	79eb      	ldrb	r3, [r5, #7]
 8002abe:	4916      	ldr	r1, [pc, #88]	; (8002b18 <ES_WIFI_StartClientConnection+0xbc>)
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f001 f8a1 	bl	8003c08 <siprintf>
                conn->RemoteIP[2],conn->RemoteIP[3]);
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData); 
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	4621      	mov	r1, r4
 8002aca:	4630      	mov	r0, r6
 8002acc:	f7ff fe6a 	bl	80027a4 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8002ad0:	b9d0      	cbnz	r0, 8002b08 <ES_WIFI_StartClientConnection+0xac>
        {
          sprintf((char*)Obj->CmdData,"P6=1\r");
 8002ad2:	4912      	ldr	r1, [pc, #72]	; (8002b1c <ES_WIFI_StartClientConnection+0xc0>)
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f001 f8c9 	bl	8003c6c <strcpy>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);         
 8002ada:	4622      	mov	r2, r4
 8002adc:	4621      	mov	r1, r4
 8002ade:	4630      	mov	r0, r6
        }          
      }           
    }
  }
  return ret;
}
 8002ae0:	b002      	add	sp, #8
 8002ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);         
 8002ae6:	f7ff be5d 	b.w	80027a4 <AT_ExecuteCommand>
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0)) 
 8002aea:	88ab      	ldrh	r3, [r5, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0d5      	beq.n	8002a9c <ES_WIFI_StartClientConnection+0x40>
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->RemotePort);
 8002af0:	886a      	ldrh	r2, [r5, #2]
 8002af2:	490b      	ldr	r1, [pc, #44]	; (8002b20 <ES_WIFI_StartClientConnection+0xc4>)
 8002af4:	4620      	mov	r0, r4
 8002af6:	f001 f887 	bl	8003c08 <siprintf>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
 8002afa:	4622      	mov	r2, r4
 8002afc:	4621      	mov	r1, r4
 8002afe:	4630      	mov	r0, r6
 8002b00:	f7ff fe50 	bl	80027a4 <AT_ExecuteCommand>
 8002b04:	2802      	cmp	r0, #2
 8002b06:	d1c9      	bne.n	8002a9c <ES_WIFI_StartClientConnection+0x40>
}
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd70      	pop	{r4, r5, r6, pc}
 8002b0c:	0800469a 	.word	0x0800469a
 8002b10:	080046a1 	.word	0x080046a1
 8002b14:	080046a8 	.word	0x080046a8
 8002b18:	080046b6 	.word	0x080046b6
 8002b1c:	080046c6 	.word	0x080046c6
 8002b20:	080046af 	.word	0x080046af

08002b24 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8002b24:	b538      	push	{r3, r4, r5, lr}
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002b26:	f500 7490 	add.w	r4, r0, #288	; 0x120
 8002b2a:	784a      	ldrb	r2, [r1, #1]
 8002b2c:	490b      	ldr	r1, [pc, #44]	; (8002b5c <ES_WIFI_StopClientConnection+0x38>)
{
 8002b2e:	4605      	mov	r5, r0
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002b30:	4620      	mov	r0, r4
 8002b32:	f001 f869 	bl	8003c08 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002b36:	4622      	mov	r2, r4
 8002b38:	4621      	mov	r1, r4
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f7ff fe32 	bl	80027a4 <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8002b40:	b950      	cbnz	r0, 8002b58 <ES_WIFI_StopClientConnection+0x34>
  {  
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8002b42:	4907      	ldr	r1, [pc, #28]	; (8002b60 <ES_WIFI_StopClientConnection+0x3c>)
 8002b44:	4620      	mov	r0, r4
 8002b46:	f001 f891 	bl	8003c6c <strcpy>
    ret =  AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);     
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	4628      	mov	r0, r5
  }
  return ret;
}
 8002b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret =  AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);     
 8002b54:	f7ff be26 	b.w	80027a4 <AT_ExecuteCommand>
}
 8002b58:	bd38      	pop	{r3, r4, r5, pc}
 8002b5a:	bf00      	nop
 8002b5c:	0800469a 	.word	0x0800469a
 8002b60:	080046cc 	.word	0x080046cc

08002b64 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8002b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b68:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002b6c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8002b70:	bf28      	it	cs
 8002b72:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
  
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
  
  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002b76:	f500 7490 	add.w	r4, r0, #288	; 0x120
{
 8002b7a:	4605      	mov	r5, r0
  *SentLen = Reqlen;
 8002b7c:	f8a8 3000 	strh.w	r3, [r8]
{
 8002b80:	4692      	mov	sl, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002b82:	4620      	mov	r0, r4
 8002b84:	460a      	mov	r2, r1
 8002b86:	492f      	ldr	r1, [pc, #188]	; (8002c44 <ES_WIFI_SendData+0xe0>)
 8002b88:	461f      	mov	r7, r3
 8002b8a:	f001 f83d 	bl	8003c08 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002b8e:	4622      	mov	r2, r4
 8002b90:	4621      	mov	r1, r4
 8002b92:	4628      	mov	r0, r5
 8002b94:	f7ff fe06 	bl	80027a4 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8002b98:	4606      	mov	r6, r0
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d141      	bne.n	8002c22 <ES_WIFI_SendData+0xbe>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 8002b9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ba0:	4929      	ldr	r1, [pc, #164]	; (8002c48 <ES_WIFI_SendData+0xe4>)
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f001 f830 	bl	8003c08 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002ba8:	4622      	mov	r2, r4
 8002baa:	4621      	mov	r1, r4
 8002bac:	4628      	mov	r0, r5
 8002bae:	f7ff fdf9 	bl	80027a4 <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8002bb2:	4606      	mov	r6, r0
 8002bb4:	bba8      	cbnz	r0, 8002c22 <ES_WIFI_SendData+0xbe>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8002bb6:	463a      	mov	r2, r7
 8002bb8:	4924      	ldr	r1, [pc, #144]	; (8002c4c <ES_WIFI_SendData+0xe8>)
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f001 f824 	bl	8003c08 <siprintf>
  uint16_t n=strlen((char*)cmd);
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7fd fb05 	bl	80001d0 <strlen>
  if (n &1 ) return ES_WIFI_STATUS_ERROR;
 8002bc6:	f010 0901 	ands.w	r9, r0, #1
 8002bca:	fa1f fb80 	uxth.w	fp, r0
 8002bce:	d12a      	bne.n	8002c26 <ES_WIFI_SendData+0xc2>
  if(Obj->fops.IO_Send(cmd, n, Obj->Timeout) == n)
 8002bd0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8002bd4:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8002bd8:	4659      	mov	r1, fp
 8002bda:	4620      	mov	r0, r4
 8002bdc:	4798      	blx	r3
 8002bde:	4583      	cmp	fp, r0
 8002be0:	d11d      	bne.n	8002c1e <ES_WIFI_SendData+0xba>
    int16_t n=Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8002be2:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8002be6:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8002bea:	4639      	mov	r1, r7
 8002bec:	4650      	mov	r0, sl
 8002bee:	4798      	blx	r3
    if(n == len)
 8002bf0:	4287      	cmp	r7, r0
 8002bf2:	d118      	bne.n	8002c26 <ES_WIFI_SendData+0xc2>
      n = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8002bf4:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8002bf8:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	4620      	mov	r0, r4
 8002c00:	4798      	blx	r3
      if(n > 0)
 8002c02:	2800      	cmp	r0, #0
 8002c04:	dd0b      	ble.n	8002c1e <ES_WIFI_SendData+0xba>
        *(pdata+n)=0;
 8002c06:	f804 9000 	strb.w	r9, [r4, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8002c0a:	4911      	ldr	r1, [pc, #68]	; (8002c50 <ES_WIFI_SendData+0xec>)
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f001 f84a 	bl	8003ca6 <strstr>
 8002c12:	b968      	cbnz	r0, 8002c30 <ES_WIFI_SendData+0xcc>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8002c14:	490f      	ldr	r1, [pc, #60]	; (8002c54 <ES_WIFI_SendData+0xf0>)
 8002c16:	4620      	mov	r0, r4
 8002c18:	f001 f845 	bl	8003ca6 <strstr>
 8002c1c:	b918      	cbnz	r0, 8002c26 <ES_WIFI_SendData+0xc2>
        }
      }
    }
  }
  
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 8002c1e:	2604      	movs	r6, #4
  return ret;  
 8002c20:	e00c      	b.n	8002c3c <ES_WIFI_SendData+0xd8>
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 8002c22:	2e02      	cmp	r6, #2
 8002c24:	d10a      	bne.n	8002c3c <ES_WIFI_SendData+0xd8>
 8002c26:	2300      	movs	r3, #0
 8002c28:	f8a8 3000 	strh.w	r3, [r8]
 8002c2c:	2602      	movs	r6, #2
 8002c2e:	e005      	b.n	8002c3c <ES_WIFI_SendData+0xd8>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8002c30:	4909      	ldr	r1, [pc, #36]	; (8002c58 <ES_WIFI_SendData+0xf4>)
 8002c32:	4620      	mov	r0, r4
 8002c34:	f001 f837 	bl	8003ca6 <strstr>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d1f4      	bne.n	8002c26 <ES_WIFI_SendData+0xc2>
}
 8002c3c:	4630      	mov	r0, r6
 8002c3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c42:	bf00      	nop
 8002c44:	0800469a 	.word	0x0800469a
 8002c48:	08004684 	.word	0x08004684
 8002c4c:	0800468c 	.word	0x0800468c
 8002c50:	0800464f 	.word	0x0800464f
 8002c54:	08004658 	.word	0x08004658
 8002c58:	08004695 	.word	0x08004695

08002c5c <SPI_WIFI_MspInit>:
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002c5c:	4b44      	ldr	r3, [pc, #272]	; (8002d70 <SPI_WIFI_MspInit+0x114>)
{
 8002c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002c62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8002c64:	4e43      	ldr	r6, [pc, #268]	; (8002d74 <SPI_WIFI_MspInit+0x118>)
  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002c66:	4f44      	ldr	r7, [pc, #272]	; (8002d78 <SPI_WIFI_MspInit+0x11c>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6c:	659a      	str	r2, [r3, #88]	; 0x58
 8002c6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8002c70:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002c72:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002c76:	9201      	str	r2, [sp, #4]
 8002c78:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c7c:	f042 0202 	orr.w	r2, r2, #2
 8002c80:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c84:	f002 0202 	and.w	r2, r2, #2
 8002c88:	9202      	str	r2, [sp, #8]
 8002c8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c8e:	f042 0204 	orr.w	r2, r2, #4
 8002c92:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c96:	f002 0204 	and.w	r2, r2, #4
 8002c9a:	9203      	str	r2, [sp, #12]
 8002c9c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ca0:	f042 0210 	orr.w	r2, r2, #16
 8002ca4:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8002cac:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cae:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002cb6:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002cb8:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cba:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8002cbc:	f7fd fe9e 	bl	80009fc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002cc4:	a905      	add	r1, sp, #20
 8002cc6:	4630      	mov	r0, r6
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002cc8:	9305      	str	r3, [sp, #20]
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002cca:	2602      	movs	r6, #2
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ccc:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002cce:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002cd0:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002cd2:	f7fd fd17 	bl	8000704 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002cd6:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <SPI_WIFI_MspInit+0x120>)
 8002cd8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002cda:	a905      	add	r1, sp, #20
 8002cdc:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002cde:	9605      	str	r6, [sp, #20]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002ce0:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002ce2:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002ce4:	f7fd fd0e 	bl	8000704 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8002ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  GPIO_Init.Alternate = 0;
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002cec:	a905      	add	r1, sp, #20
 8002cee:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_8;
 8002cf0:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002cf2:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002cf4:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002cf6:	9508      	str	r5, [sp, #32]
  GPIO_Init.Alternate = 0;
 8002cf8:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002cfa:	f7fd fd03 	bl	8000704 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE, GPIO_PIN_0, GPIO_PIN_SET ); 
 8002cfe:	4622      	mov	r2, r4
 8002d00:	4621      	mov	r1, r4
 8002d02:	4638      	mov	r0, r7
 8002d04:	f7fd fe7a 	bl	80009fc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_0;
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002d08:	a905      	add	r1, sp, #20
 8002d0a:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_10;
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002d0c:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002d10:	f04f 0806 	mov.w	r8, #6
  GPIO_Init.Pin       = GPIO_PIN_0;
 8002d14:	9405      	str	r4, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d16:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002d18:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002d1a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002d1c:	f7fd fcf2 	bl	8000704 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_10;
 8002d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002d24:	a905      	add	r1, sp, #20
 8002d26:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_10;
 8002d28:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002d2a:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002d2c:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002d2e:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002d30:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002d34:	f7fd fce6 	bl	8000704 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002d3c:	a905      	add	r1, sp, #20
 8002d3e:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002d40:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002d42:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002d44:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002d46:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002d48:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002d4c:	f7fd fcda 	bl	8000704 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002d50:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002d54:	a905      	add	r1, sp, #20
 8002d56:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002d58:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002d5a:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002d5c:	9407      	str	r4, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002d5e:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002d60:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002d64:	f7fd fcce 	bl	8000704 <HAL_GPIO_Init>
}
 8002d68:	b00a      	add	sp, #40	; 0x28
 8002d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	48000400 	.word	0x48000400
 8002d78:	48001000 	.word	0x48001000
 8002d7c:	10110000 	.word	0x10110000

08002d80 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(void)
{
 8002d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8002d82:	f7fd fc33 	bl	80005ec <HAL_GetTick>
  uint8_t Prompt[6];
  uint8_t count = 0;
  HAL_StatusTypeDef  Status;
  
  hspi.Instance               = SPI3;
 8002d86:	4c41      	ldr	r4, [pc, #260]	; (8002e8c <SPI_WIFI_Init+0x10c>)
 8002d88:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <SPI_WIFI_Init+0x110>)
 8002d8a:	6023      	str	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8002d8c:	4606      	mov	r6, r0
  SPI_WIFI_MspInit(&hspi);
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f7ff ff64 	bl	8002c5c <SPI_WIFI_MspInit>
  
  hspi.Init.Mode              = SPI_MODE_MASTER;
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002d94:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  hspi.Init.Mode              = SPI_MODE_MASTER;
 8002d98:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002d9c:	60e2      	str	r2, [r4, #12]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
  hspi.Init.NSS               = SPI_NSS_SOFT;
 8002d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi.Init.Mode              = SPI_MODE_MASTER;
 8002da2:	6063      	str	r3, [r4, #4]
  hspi.Init.NSS               = SPI_NSS_SOFT;
 8002da4:	61a2      	str	r2, [r4, #24]
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002da6:	2300      	movs	r3, #0
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8002da8:	2210      	movs	r2, #16
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
  hspi.Init.CRCPolynomial     = 0;
  
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002daa:	4620      	mov	r0, r4
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002dac:	60a3      	str	r3, [r4, #8]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002dae:	6123      	str	r3, [r4, #16]
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002db0:	6163      	str	r3, [r4, #20]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8002db2:	61e2      	str	r2, [r4, #28]
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002db4:	6223      	str	r3, [r4, #32]
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002db6:	6263      	str	r3, [r4, #36]	; 0x24
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002db8:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi.Init.CRCPolynomial     = 0;
 8002dba:	62e3      	str	r3, [r4, #44]	; 0x2c
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002dbc:	f7ff f92d 	bl	800201a <HAL_SPI_Init>
 8002dc0:	4605      	mov	r5, r0
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d15c      	bne.n	8002e80 <SPI_WIFI_Init+0x100>
  {
    return -1;
  }
  
  WIFI_RESET_MODULE();
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dcc:	4831      	ldr	r0, [pc, #196]	; (8002e94 <SPI_WIFI_Init+0x114>)
 8002dce:	f7fd fe15 	bl	80009fc <HAL_GPIO_WritePin>
 8002dd2:	200a      	movs	r0, #10
 8002dd4:	f7fd fc10 	bl	80005f8 <HAL_Delay>
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dde:	482d      	ldr	r0, [pc, #180]	; (8002e94 <SPI_WIFI_Init+0x114>)
 8002de0:	f7fd fe0c 	bl	80009fc <HAL_GPIO_WritePin>
 8002de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002de8:	f7fd fc06 	bl	80005f8 <HAL_Delay>
  
  WIFI_ENABLE_NSS(); 
 8002dec:	4829      	ldr	r0, [pc, #164]	; (8002e94 <SPI_WIFI_Init+0x114>)
 8002dee:	462a      	mov	r2, r5
 8002df0:	2101      	movs	r1, #1
 8002df2:	f7fd fe03 	bl	80009fc <HAL_GPIO_WritePin>
 8002df6:	200a      	movs	r0, #10
 8002df8:	f7fd fbfe 	bl	80005f8 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4825      	ldr	r0, [pc, #148]	; (8002e94 <SPI_WIFI_Init+0x114>)
 8002e00:	f7fd fdf6 	bl	80009f0 <HAL_GPIO_ReadPin>
 8002e04:	2801      	cmp	r0, #1
 8002e06:	4602      	mov	r2, r0
 8002e08:	d022      	beq.n	8002e50 <SPI_WIFI_Init+0xd0>
      WIFI_DISABLE_NSS(); 
      return -1;
    }    
  }
  
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8002e0a:	f89d 3000 	ldrb.w	r3, [sp]
 8002e0e:	2b15      	cmp	r3, #21
 8002e10:	d12e      	bne.n	8002e70 <SPI_WIFI_Init+0xf0>
 8002e12:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002e16:	2b15      	cmp	r3, #21
 8002e18:	d12a      	bne.n	8002e70 <SPI_WIFI_Init+0xf0>
 8002e1a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002e1e:	2b0d      	cmp	r3, #13
 8002e20:	d126      	bne.n	8002e70 <SPI_WIFI_Init+0xf0>
 8002e22:	f89d 4003 	ldrb.w	r4, [sp, #3]
 8002e26:	2c0a      	cmp	r4, #10
 8002e28:	d122      	bne.n	8002e70 <SPI_WIFI_Init+0xf0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8002e2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8002e30:	d11e      	bne.n	8002e70 <SPI_WIFI_Init+0xf0>
 8002e32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d11a      	bne.n	8002e70 <SPI_WIFI_Init+0xf0>
  {
    WIFI_DISABLE_NSS(); 
    return -1;
  }    
   
  WIFI_DISABLE_NSS(); 
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4815      	ldr	r0, [pc, #84]	; (8002e94 <SPI_WIFI_Init+0x114>)
 8002e40:	f7fd fddc 	bl	80009fc <HAL_GPIO_WritePin>
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7fd fbd7 	bl	80005f8 <HAL_Delay>
  return 0;
 8002e4a:	2000      	movs	r0, #0
}
 8002e4c:	b003      	add	sp, #12
 8002e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8002e50:	eb0d 0105 	add.w	r1, sp, r5
 8002e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f7ff fb25 	bl	80024a8 <HAL_SPI_Receive>
 8002e5e:	4607      	mov	r7, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8002e60:	f7fd fbc4 	bl	80005ec <HAL_GetTick>
 8002e64:	1b80      	subs	r0, r0, r6
    count += 2;
 8002e66:	3502      	adds	r5, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8002e68:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8002e6c:	b2ed      	uxtb	r5, r5
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8002e6e:	d30a      	bcc.n	8002e86 <SPI_WIFI_Init+0x106>
      WIFI_DISABLE_NSS(); 
 8002e70:	2201      	movs	r2, #1
 8002e72:	4808      	ldr	r0, [pc, #32]	; (8002e94 <SPI_WIFI_Init+0x114>)
 8002e74:	4611      	mov	r1, r2
 8002e76:	f7fd fdc1 	bl	80009fc <HAL_GPIO_WritePin>
 8002e7a:	200a      	movs	r0, #10
 8002e7c:	f7fd fbbc 	bl	80005f8 <HAL_Delay>
    return -1;
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	e7e2      	b.n	8002e4c <SPI_WIFI_Init+0xcc>
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8002e86:	2f00      	cmp	r7, #0
 8002e88:	d0b8      	beq.n	8002dfc <SPI_WIFI_Init+0x7c>
 8002e8a:	e7f1      	b.n	8002e70 <SPI_WIFI_Init+0xf0>
 8002e8c:	200002c8 	.word	0x200002c8
 8002e90:	40003c00 	.word	0x40003c00
 8002e94:	48001000 	.word	0x48001000

08002e98 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002e98:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8002e9a:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <SPI_WIFI_DeInit+0xc>)
 8002e9c:	f7ff f90e 	bl	80020bc <HAL_SPI_DeInit>
  return 0;
}
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	bd08      	pop	{r3, pc}
 8002ea4:	200002c8 	.word	0x200002c8

08002ea8 <SPI_WIFI_ReceiveData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8002ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eac:	468a      	mov	sl, r1
 8002eae:	4616      	mov	r6, r2
 8002eb0:	4680      	mov	r8, r0
  uint32_t tickstart = HAL_GetTick();
 8002eb2:	f7fd fb9b 	bl	80005ec <HAL_GetTick>
 8002eb6:	4681      	mov	r9, r0
  int16_t length = 0;
  uint8_t tmp[2];
  
  HAL_SPIEx_FlushRxFifo(&hspi);
 8002eb8:	4837      	ldr	r0, [pc, #220]	; (8002f98 <SPI_WIFI_ReceiveData+0xf0>)
  
  WIFI_DISABLE_NSS(); 
  
  while (!WIFI_IS_CMDDATA_READY())
 8002eba:	4c38      	ldr	r4, [pc, #224]	; (8002f9c <SPI_WIFI_ReceiveData+0xf4>)
  HAL_SPIEx_FlushRxFifo(&hspi);
 8002ebc:	f7ff fb9d 	bl	80025fa <HAL_SPIEx_FlushRxFifo>
  WIFI_DISABLE_NSS(); 
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4835      	ldr	r0, [pc, #212]	; (8002f9c <SPI_WIFI_ReceiveData+0xf4>)
 8002ec6:	f7fd fd99 	bl	80009fc <HAL_GPIO_WritePin>
 8002eca:	200a      	movs	r0, #10
 8002ecc:	f7fd fb94 	bl	80005f8 <HAL_Delay>
  while (!WIFI_IS_CMDDATA_READY())
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f7fd fd8c 	bl	80009f0 <HAL_GPIO_ReadPin>
 8002ed8:	2801      	cmp	r0, #1
 8002eda:	4601      	mov	r1, r0
 8002edc:	d141      	bne.n	8002f62 <SPI_WIFI_ReceiveData+0xba>
    {
      return -1;
    }
  }
  
  WIFI_ENABLE_NSS(); 
 8002ede:	2200      	movs	r2, #0
 8002ee0:	482e      	ldr	r0, [pc, #184]	; (8002f9c <SPI_WIFI_ReceiveData+0xf4>)
  
  while (WIFI_IS_CMDDATA_READY())
 8002ee2:	4f2e      	ldr	r7, [pc, #184]	; (8002f9c <SPI_WIFI_ReceiveData+0xf4>)
  WIFI_ENABLE_NSS(); 
 8002ee4:	f7fd fd8a 	bl	80009fc <HAL_GPIO_WritePin>
 8002ee8:	200a      	movs	r0, #10
 8002eea:	f7fd fb85 	bl	80005f8 <HAL_Delay>
  while (WIFI_IS_CMDDATA_READY())
 8002eee:	4644      	mov	r4, r8
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	f7fd fd7c 	bl	80009f0 <HAL_GPIO_ReadPin>
 8002ef8:	eba4 0508 	sub.w	r5, r4, r8
 8002efc:	b2ad      	uxth	r5, r5
 8002efe:	2801      	cmp	r0, #1
 8002f00:	fa0f fb85 	sxth.w	fp, r5
 8002f04:	d121      	bne.n	8002f4a <SPI_WIFI_ReceiveData+0xa2>
  {
    if((length < len) || (!len))
 8002f06:	45d3      	cmp	fp, sl
 8002f08:	db02      	blt.n	8002f10 <SPI_WIFI_ReceiveData+0x68>
 8002f0a:	f1ba 0f00 	cmp.w	sl, #0
 8002f0e:	d11c      	bne.n	8002f4a <SPI_WIFI_ReceiveData+0xa2>
    {
      HAL_SPI_Receive(&hspi, tmp, 1, timeout) ;	   
 8002f10:	4633      	mov	r3, r6
 8002f12:	2201      	movs	r2, #1
 8002f14:	a901      	add	r1, sp, #4
 8002f16:	4820      	ldr	r0, [pc, #128]	; (8002f98 <SPI_WIFI_ReceiveData+0xf0>)
 8002f18:	f7ff fac6 	bl	80024a8 <HAL_SPI_Receive>
      /* let some time to hardware to change CMDDATA signal */
      if(tmp[1] == 0x15)
 8002f1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002f20:	2b15      	cmp	r3, #21
 8002f22:	d102      	bne.n	8002f2a <SPI_WIFI_ReceiveData+0x82>
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8002f24:	2001      	movs	r0, #1
 8002f26:	f7fd fb67 	bl	80005f8 <HAL_Delay>
      if(!WIFI_IS_CMDDATA_READY())
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	4638      	mov	r0, r7
 8002f2e:	f7fd fd5f 	bl	80009f0 <HAL_GPIO_ReadPin>
 8002f32:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002f36:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pData[0] = tmp[0];
 8002f3a:	7022      	strb	r2, [r4, #0]
      if(!WIFI_IS_CMDDATA_READY())
 8002f3c:	2801      	cmp	r0, #1
 8002f3e:	d019      	beq.n	8002f74 <SPI_WIFI_ReceiveData+0xcc>
        if(tmp[1] == 0x15)
 8002f40:	2b15      	cmp	r3, #21
 8002f42:	d117      	bne.n	8002f74 <SPI_WIFI_ReceiveData+0xcc>
          length++;
 8002f44:	3501      	adds	r5, #1
 8002f46:	fa0f fb85 	sxth.w	fp, r5
  WIFI_DISABLE_NSS(); 
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4813      	ldr	r0, [pc, #76]	; (8002f9c <SPI_WIFI_ReceiveData+0xf4>)
 8002f4e:	4611      	mov	r1, r2
 8002f50:	f7fd fd54 	bl	80009fc <HAL_GPIO_WritePin>
 8002f54:	200a      	movs	r0, #10
 8002f56:	f7fd fb4f 	bl	80005f8 <HAL_Delay>
}
 8002f5a:	4658      	mov	r0, fp
 8002f5c:	b003      	add	sp, #12
 8002f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 8002f62:	f7fd fb43 	bl	80005ec <HAL_GetTick>
 8002f66:	eba0 0009 	sub.w	r0, r0, r9
 8002f6a:	42b0      	cmp	r0, r6
 8002f6c:	d9b0      	bls.n	8002ed0 <SPI_WIFI_ReceiveData+0x28>
      return -1;
 8002f6e:	f04f 3bff 	mov.w	fp, #4294967295
 8002f72:	e7f2      	b.n	8002f5a <SPI_WIFI_ReceiveData+0xb2>
      pData[1] = tmp[1];
 8002f74:	7063      	strb	r3, [r4, #1]
      if((HAL_GetTick() - tickstart ) > timeout)
 8002f76:	f7fd fb39 	bl	80005ec <HAL_GetTick>
 8002f7a:	eba0 0009 	sub.w	r0, r0, r9
 8002f7e:	4286      	cmp	r6, r0
      pData  += 2;
 8002f80:	f104 0402 	add.w	r4, r4, #2
      if((HAL_GetTick() - tickstart ) > timeout)
 8002f84:	d2b4      	bcs.n	8002ef0 <SPI_WIFI_ReceiveData+0x48>
        WIFI_DISABLE_NSS(); 
 8002f86:	2201      	movs	r2, #1
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4804      	ldr	r0, [pc, #16]	; (8002f9c <SPI_WIFI_ReceiveData+0xf4>)
 8002f8c:	f7fd fd36 	bl	80009fc <HAL_GPIO_WritePin>
 8002f90:	200a      	movs	r0, #10
 8002f92:	f7fd fb31 	bl	80005f8 <HAL_Delay>
 8002f96:	e7ea      	b.n	8002f6e <SPI_WIFI_ReceiveData+0xc6>
 8002f98:	200002c8 	.word	0x200002c8
 8002f9c:	48001000 	.word	0x48001000

08002fa0 <SPI_WIFI_SendData>:
{
 8002fa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	460c      	mov	r4, r1
 8002fa8:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8002faa:	f7fd fb1f 	bl	80005ec <HAL_GetTick>
  while (!WIFI_IS_CMDDATA_READY())
 8002fae:	4f1f      	ldr	r7, [pc, #124]	; (800302c <SPI_WIFI_SendData+0x8c>)
  uint32_t tickstart = HAL_GetTick();
 8002fb0:	4680      	mov	r8, r0
  while (!WIFI_IS_CMDDATA_READY())
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	f7fd fd1b 	bl	80009f0 <HAL_GPIO_ReadPin>
 8002fba:	2801      	cmp	r0, #1
 8002fbc:	4601      	mov	r1, r0
 8002fbe:	d122      	bne.n	8003006 <SPI_WIFI_SendData+0x66>
  WIFI_ENABLE_NSS(); 
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	481a      	ldr	r0, [pc, #104]	; (800302c <SPI_WIFI_SendData+0x8c>)
 8002fc4:	f7fd fd1a 	bl	80009fc <HAL_GPIO_WritePin>
 8002fc8:	200a      	movs	r0, #10
 8002fca:	f7fd fb15 	bl	80005f8 <HAL_Delay>
  if (len > 1)
 8002fce:	2c01      	cmp	r4, #1
 8002fd0:	d906      	bls.n	8002fe0 <SPI_WIFI_SendData+0x40>
   if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, timeout) != HAL_OK)
 8002fd2:	4633      	mov	r3, r6
 8002fd4:	0862      	lsrs	r2, r4, #1
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	4815      	ldr	r0, [pc, #84]	; (8003030 <SPI_WIFI_SendData+0x90>)
 8002fda:	f7ff f885 	bl	80020e8 <HAL_SPI_Transmit>
 8002fde:	b9c0      	cbnz	r0, 8003012 <SPI_WIFI_SendData+0x72>
  if ( len & 1)
 8002fe0:	07e3      	lsls	r3, r4, #31
 8002fe2:	d50e      	bpl.n	8003002 <SPI_WIFI_SendData+0x62>
    Padding[0] = pdata[len-1];
 8002fe4:	4425      	add	r5, r4
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 8002fe6:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 8002fe8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002fec:	f88d 3004 	strb.w	r3, [sp, #4]
    Padding[1] = '\n';
 8002ff0:	230a      	movs	r3, #10
 8002ff2:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 8002ff6:	a901      	add	r1, sp, #4
 8002ff8:	4633      	mov	r3, r6
 8002ffa:	480d      	ldr	r0, [pc, #52]	; (8003030 <SPI_WIFI_SendData+0x90>)
 8002ffc:	f7ff f874 	bl	80020e8 <HAL_SPI_Transmit>
 8003000:	b938      	cbnz	r0, 8003012 <SPI_WIFI_SendData+0x72>
  return len;
 8003002:	b220      	sxth	r0, r4
 8003004:	e00f      	b.n	8003026 <SPI_WIFI_SendData+0x86>
    if((HAL_GetTick() - tickstart ) > timeout)
 8003006:	f7fd faf1 	bl	80005ec <HAL_GetTick>
 800300a:	eba0 0008 	sub.w	r0, r0, r8
 800300e:	42b0      	cmp	r0, r6
 8003010:	d9cf      	bls.n	8002fb2 <SPI_WIFI_SendData+0x12>
      WIFI_DISABLE_NSS();       
 8003012:	2201      	movs	r2, #1
 8003014:	4611      	mov	r1, r2
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <SPI_WIFI_SendData+0x8c>)
 8003018:	f7fd fcf0 	bl	80009fc <HAL_GPIO_WritePin>
 800301c:	200a      	movs	r0, #10
 800301e:	f7fd faeb 	bl	80005f8 <HAL_Delay>
      return -1;
 8003022:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003026:	b002      	add	sp, #8
 8003028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800302c:	48001000 	.word	0x48001000
 8003030:	200002c8 	.word	0x200002c8

08003034 <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 8003034:	f7fd bae0 	b.w	80005f8 <HAL_Delay>

08003038 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003038:	4b9a      	ldr	r3, [pc, #616]	; (80032a4 <MX_GPIO_Init+0x26c>)
{
 800303a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800303e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8003040:	4e99      	ldr	r6, [pc, #612]	; (80032a8 <MX_GPIO_Init+0x270>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPBTLE_RF_RST_Pin|ARD_D9_Pin|ARD_D11_Pin|ARD_D12_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8003042:	f8df 926c 	ldr.w	r9, [pc, #620]	; 80032b0 <MX_GPIO_Init+0x278>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8003046:	f8df a26c 	ldr.w	sl, [pc, #620]	; 80032b4 <MX_GPIO_Init+0x27c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin|ARD_A3_Pin, GPIO_PIN_RESET);
 800304a:	f8df 826c 	ldr.w	r8, [pc, #620]	; 80032b8 <MX_GPIO_Init+0x280>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800304e:	f8df b26c 	ldr.w	fp, [pc, #620]	; 80032bc <MX_GPIO_Init+0x284>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003052:	f042 0210 	orr.w	r2, r2, #16
 8003056:	64da      	str	r2, [r3, #76]	; 0x4c
 8003058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 800305a:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800305c:	f002 0210 	and.w	r2, r2, #16
 8003060:	9202      	str	r2, [sp, #8]
 8003062:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003066:	f042 0204 	orr.w	r2, r2, #4
 800306a:	64da      	str	r2, [r3, #76]	; 0x4c
 800306c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800306e:	f002 0204 	and.w	r2, r2, #4
 8003072:	9203      	str	r2, [sp, #12]
 8003074:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	64da      	str	r2, [r3, #76]	; 0x4c
 800307e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003080:	f002 0201 	and.w	r2, r2, #1
 8003084:	9204      	str	r2, [sp, #16]
 8003086:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003088:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800308a:	f042 0202 	orr.w	r2, r2, #2
 800308e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003090:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003092:	f002 0202 	and.w	r2, r2, #2
 8003096:	9205      	str	r2, [sp, #20]
 8003098:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800309a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800309c:	f042 0208 	orr.w	r2, r2, #8
 80030a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80030aa:	4630      	mov	r0, r6
 80030ac:	2200      	movs	r2, #0
 80030ae:	f240 1115 	movw	r1, #277	; 0x115
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80030b4:	f7fd fca2 	bl	80009fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SPBTLE_RF_RST_Pin|ARD_D9_Pin|ARD_D11_Pin|ARD_D12_Pin, GPIO_PIN_RESET);
 80030b8:	2200      	movs	r2, #0
 80030ba:	f248 11c0 	movw	r1, #33216	; 0x81c0
 80030be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c2:	f7fd fc9b 	bl	80009fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin, GPIO_PIN_SET);
 80030c6:	2201      	movs	r2, #1
 80030c8:	2104      	movs	r1, #4
 80030ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ce:	f7fd fc95 	bl	80009fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80030d2:	4648      	mov	r0, r9
 80030d4:	2200      	movs	r2, #0
 80030d6:	f24f 0134 	movw	r1, #61492	; 0xf034
 80030da:	f7fd fc8f 	bl	80009fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80030de:	4650      	mov	r0, sl
 80030e0:	2200      	movs	r2, #0
 80030e2:	f243 0181 	movw	r1, #12417	; 0x3081
 80030e6:	f7fd fc89 	bl	80009fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin|ARD_A3_Pin, GPIO_PIN_RESET);
 80030ea:	2200      	movs	r2, #0
 80030ec:	4640      	mov	r0, r8
 80030ee:	f44f 7111 	mov.w	r1, #580	; 0x244
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin|ARD_A3_Pin, GPIO_PIN_RESET);
 80030f4:	f7fd fc82 	bl	80009fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f8:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80030fa:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030fe:	a907      	add	r1, sp, #28
 8003100:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8003102:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003104:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800310a:	f7fd fafb 	bl	8000704 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800310e:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003110:	a907      	add	r1, sp, #28
 8003112:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8003114:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003116:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800311c:	f7fd faf2 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8003120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003124:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003126:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003128:	4b60      	ldr	r3, [pc, #384]	; (80032ac <MX_GPIO_Init+0x274>)
 800312a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800312c:	4640      	mov	r0, r8

  /*configure GPIO pins: a0-a3 for relays & actuator & button*/
  GPIO_InitStruct.Pin = ARD_A3_Pin|ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312e:	2703      	movs	r7, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003132:	f7fd fae7 	bl	8000704 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A3_Pin|ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
 8003136:	233c      	movs	r3, #60	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003138:	a907      	add	r1, sp, #28
 800313a:	4640      	mov	r0, r8

  /*configure GPIO pins: a4 as input for window state*/
  GPIO_InitStruct.Pin = ARD_A4_Pin;
 800313c:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = ARD_A3_Pin|ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
 800313e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003140:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003144:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003146:	f7fd fadd 	bl	8000704 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800314a:	a907      	add	r1, sp, #28
 800314c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ARD_A4_Pin;
 800314e:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003150:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003156:	f7fd fad5 	bl	8000704 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800315a:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800315c:	a907      	add	r1, sp, #28
 800315e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8003162:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003164:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800316a:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800316c:	f7fd faca 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003170:	220b      	movs	r2, #11
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003172:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003174:	a907      	add	r1, sp, #28
 8003176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800317a:	9208      	str	r2, [sp, #32]
 800317c:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800317e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003182:	f7fd fabf 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pins SPI1: PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D11_Pin|ARD_D10_Pin;
 8003186:	23a4      	movs	r3, #164	; 0xa4
 8003188:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800318c:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003192:	930b      	str	r3, [sp, #44]	; 0x2c
 8003194:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319a:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319c:	f7fd fab2 	bl	8000704 <HAL_GPIO_Init>

  /*spi interrupt start transmission*/
  GPIO_InitStruct.Pin = ARD_D12_Pin;
 80031a0:	2140      	movs	r1, #64	; 0x40
 80031a2:	9107      	str	r1, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031aa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b0:	f7fd faa8 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80031b4:	a907      	add	r1, sp, #28
 80031b6:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80031b8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031ba:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80031c0:	f7fd faa0 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80031c4:	9a01      	ldr	r2, [sp, #4]
 80031c6:	9208      	str	r2, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80031c8:	a907      	add	r1, sp, #28
 80031ca:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80031cc:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80031d0:	f7fd fa98 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80031d4:	f24f 0234 	movw	r2, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d8:	a907      	add	r1, sp, #28
 80031da:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80031dc:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031de:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e4:	f7fd fa8e 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80031e8:	f64c 4204 	movw	r2, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ec:	a907      	add	r1, sp, #28
 80031ee:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80031f0:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031f2:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031f8:	f7fd fa84 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80031fc:	f243 0281 	movw	r2, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003200:	a907      	add	r1, sp, #28
 8003202:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8003204:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003206:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800320c:	f7fd fa7a 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8003210:	f44f 7210 	mov.w	r2, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003214:	a907      	add	r1, sp, #28
 8003216:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8003218:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800321a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003220:	f7fd fa70 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8003224:	f44f 72c0 	mov.w	r2, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003228:	a907      	add	r1, sp, #28
 800322a:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800322c:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800322e:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003234:	f7fd fa66 	bl	8000704 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003238:	9b00      	ldr	r3, [sp, #0]
 800323a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800323c:	a907      	add	r1, sp, #28
 800323e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8003240:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003246:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003248:	f7fd fa5c 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800324c:	2378      	movs	r3, #120	; 0x78
 800324e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003250:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003252:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003254:	4650      	mov	r0, sl
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003256:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003258:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800325e:	f7fd fa51 	bl	8000704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003262:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003266:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003268:	2312      	movs	r3, #18
 800326a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800326e:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003270:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003272:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003274:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003276:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003278:	f7fd fa44 	bl	8000704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800327c:	4622      	mov	r2, r4
 800327e:	4621      	mov	r1, r4
 8003280:	2017      	movs	r0, #23
 8003282:	f7fd f9d7 	bl	8000634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003286:	2017      	movs	r0, #23
 8003288:	f7fd fa08 	bl	800069c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800328c:	4622      	mov	r2, r4
 800328e:	4621      	mov	r1, r4
 8003290:	2028      	movs	r0, #40	; 0x28
 8003292:	f7fd f9cf 	bl	8000634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003296:	2028      	movs	r0, #40	; 0x28
 8003298:	f7fd fa00 	bl	800069c <HAL_NVIC_EnableIRQ>

}
 800329c:	b00d      	add	sp, #52	; 0x34
 800329e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	48001000 	.word	0x48001000
 80032ac:	10210000 	.word	0x10210000
 80032b0:	48000400 	.word	0x48000400
 80032b4:	48000c00 	.word	0x48000c00
 80032b8:	48000800 	.word	0x48000800
 80032bc:	10110000 	.word	0x10110000

080032c0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80032c0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80032c2:	4815      	ldr	r0, [pc, #84]	; (8003318 <MX_I2C2_Init+0x58>)
  hi2c2.Init.Timing = 0x10909CEC;
 80032c4:	4b15      	ldr	r3, [pc, #84]	; (800331c <MX_I2C2_Init+0x5c>)
 80032c6:	4916      	ldr	r1, [pc, #88]	; (8003320 <MX_I2C2_Init+0x60>)
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032c8:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x10909CEC;
 80032ca:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032d2:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032d4:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80032d6:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032d8:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032da:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032dc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80032de:	f7fd fce6 	bl	8000cae <HAL_I2C_Init>
 80032e2:	b118      	cbz	r0, 80032ec <MX_I2C2_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80032e4:	2142      	movs	r1, #66	; 0x42
 80032e6:	480f      	ldr	r0, [pc, #60]	; (8003324 <MX_I2C2_Init+0x64>)
 80032e8:	f7ff f9fc 	bl	80026e4 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032ec:	2100      	movs	r1, #0
 80032ee:	480a      	ldr	r0, [pc, #40]	; (8003318 <MX_I2C2_Init+0x58>)
 80032f0:	f7fd febe 	bl	8001070 <HAL_I2CEx_ConfigAnalogFilter>
 80032f4:	b118      	cbz	r0, 80032fe <MX_I2C2_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80032f6:	2149      	movs	r1, #73	; 0x49
 80032f8:	480a      	ldr	r0, [pc, #40]	; (8003324 <MX_I2C2_Init+0x64>)
 80032fa:	f7ff f9f3 	bl	80026e4 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80032fe:	2100      	movs	r1, #0
 8003300:	4805      	ldr	r0, [pc, #20]	; (8003318 <MX_I2C2_Init+0x58>)
 8003302:	f7fd fedb 	bl	80010bc <HAL_I2CEx_ConfigDigitalFilter>
 8003306:	b128      	cbz	r0, 8003314 <MX_I2C2_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003308:	2150      	movs	r1, #80	; 0x50
 800330a:	4806      	ldr	r0, [pc, #24]	; (8003324 <MX_I2C2_Init+0x64>)
  }

}
 800330c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003310:	f7ff b9e8 	b.w	80026e4 <_Error_Handler>
 8003314:	bd08      	pop	{r3, pc}
 8003316:	bf00      	nop
 8003318:	2000032c 	.word	0x2000032c
 800331c:	10909cec 	.word	0x10909cec
 8003320:	40005800 	.word	0x40005800
 8003324:	080046d2 	.word	0x080046d2

08003328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003328:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C2)
 800332a:	6802      	ldr	r2, [r0, #0]
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <HAL_I2C_MspInit+0x44>)
 800332e:	429a      	cmp	r2, r3
 8003330:	d119      	bne.n	8003366 <HAL_I2C_MspInit+0x3e>
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003332:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003336:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003338:	2312      	movs	r3, #18
 800333a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800333c:	2301      	movs	r3, #1
 800333e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003340:	2303      	movs	r3, #3
 8003342:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003344:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003346:	eb0d 0103 	add.w	r1, sp, r3
 800334a:	4809      	ldr	r0, [pc, #36]	; (8003370 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800334c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334e:	f7fd f9d9 	bl	8000704 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <HAL_I2C_MspInit+0x4c>)
 8003354:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003356:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800335a:	659a      	str	r2, [r3, #88]	; 0x58
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003366:	b007      	add	sp, #28
 8003368:	f85d fb04 	ldr.w	pc, [sp], #4
 800336c:	40005800 	.word	0x40005800
 8003370:	48000400 	.word	0x48000400
 8003374:	40021000 	.word	0x40021000

08003378 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C2)
 8003378:	6802      	ldr	r2, [r0, #0]
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <HAL_I2C_MspDeInit+0x20>)
 800337c:	429a      	cmp	r2, r3
 800337e:	d109      	bne.n	8003394 <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003380:	4a06      	ldr	r2, [pc, #24]	; (800339c <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8003382:	4807      	ldr	r0, [pc, #28]	; (80033a0 <HAL_I2C_MspDeInit+0x28>)
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003384:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003386:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800338a:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 800338c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003390:	f7fd ba94 	b.w	80008bc <HAL_GPIO_DeInit>
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40005800 	.word	0x40005800
 800339c:	40021000 	.word	0x40021000
 80033a0:	48000400 	.word	0x48000400

080033a4 <openWindow>:
static uint8_t errorNum = NO_ERROR;
static uint8_t windowState = CLOSED;
static uint8_t errorCorrection = 0;

/* Private functions -----------------------------------------------*/
void openWindow(){
 80033a4:	b538      	push	{r3, r4, r5, lr}
	//manual pin toggling
	for (uint8_t count = 0; count < 50; count++){
		HAL_GPIO_WritePin(GPIOC,ARD_A2_Pin,GPIO_PIN_SET);
 80033a6:	4d0b      	ldr	r5, [pc, #44]	; (80033d4 <openWindow+0x30>)
void openWindow(){
 80033a8:	2432      	movs	r4, #50	; 0x32
		HAL_GPIO_WritePin(GPIOC,ARD_A2_Pin,GPIO_PIN_SET);
 80033aa:	2201      	movs	r2, #1
 80033ac:	2108      	movs	r1, #8
 80033ae:	4628      	mov	r0, r5
 80033b0:	f7fd fb24 	bl	80009fc <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80033b4:	2002      	movs	r0, #2
 80033b6:	f7fd f91f 	bl	80005f8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC,ARD_A2_Pin,GPIO_PIN_RESET);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2108      	movs	r1, #8
 80033be:	4628      	mov	r0, r5
 80033c0:	f7fd fb1c 	bl	80009fc <HAL_GPIO_WritePin>
 80033c4:	3c01      	subs	r4, #1
		HAL_Delay(2);
 80033c6:	2002      	movs	r0, #2
 80033c8:	f7fd f916 	bl	80005f8 <HAL_Delay>
	for (uint8_t count = 0; count < 50; count++){
 80033cc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80033d0:	d1eb      	bne.n	80033aa <openWindow+0x6>
	}
}
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
 80033d4:	48000800 	.word	0x48000800

080033d8 <closeWindow>:

void closeWindow(){
 80033d8:	b538      	push	{r3, r4, r5, lr}
	//manually toggling pin
	for (uint8_t count = 0; count < 50; count++){
		HAL_GPIO_WritePin(GPIOC,ARD_A2_Pin,GPIO_PIN_SET);
 80033da:	4d0b      	ldr	r5, [pc, #44]	; (8003408 <closeWindow+0x30>)
void closeWindow(){
 80033dc:	2432      	movs	r4, #50	; 0x32
		HAL_GPIO_WritePin(GPIOC,ARD_A2_Pin,GPIO_PIN_SET);
 80033de:	2201      	movs	r2, #1
 80033e0:	2108      	movs	r1, #8
 80033e2:	4628      	mov	r0, r5
 80033e4:	f7fd fb0a 	bl	80009fc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80033e8:	2001      	movs	r0, #1
 80033ea:	f7fd f905 	bl	80005f8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC,ARD_A2_Pin,GPIO_PIN_RESET);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2108      	movs	r1, #8
 80033f2:	4628      	mov	r0, r5
 80033f4:	f7fd fb02 	bl	80009fc <HAL_GPIO_WritePin>
 80033f8:	3c01      	subs	r4, #1
		HAL_Delay(1);
 80033fa:	2001      	movs	r0, #1
 80033fc:	f7fd f8fc 	bl	80005f8 <HAL_Delay>
	for (uint8_t count = 0; count < 50; count++){
 8003400:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003404:	d1eb      	bne.n	80033de <closeWindow+0x6>
	}
}
 8003406:	bd38      	pop	{r3, r4, r5, pc}
 8003408:	48000800 	.word	0x48000800

0800340c <furnaceON>:

void furnaceON(){
	HAL_GPIO_WritePin(GPIOC,ARD_A0_Pin,GPIO_PIN_SET);
 800340c:	2201      	movs	r2, #1
 800340e:	2120      	movs	r1, #32
 8003410:	4801      	ldr	r0, [pc, #4]	; (8003418 <furnaceON+0xc>)
 8003412:	f7fd baf3 	b.w	80009fc <HAL_GPIO_WritePin>
 8003416:	bf00      	nop
 8003418:	48000800 	.word	0x48000800

0800341c <furnaceOFF>:
}

void furnaceOFF(){
	HAL_GPIO_WritePin(GPIOC,ARD_A0_Pin,GPIO_PIN_RESET);
 800341c:	2200      	movs	r2, #0
 800341e:	2120      	movs	r1, #32
 8003420:	4801      	ldr	r0, [pc, #4]	; (8003428 <furnaceOFF+0xc>)
 8003422:	f7fd baeb 	b.w	80009fc <HAL_GPIO_WritePin>
 8003426:	bf00      	nop
 8003428:	48000800 	.word	0x48000800

0800342c <acON>:
}

void acON(){
	HAL_GPIO_WritePin(GPIOC,ARD_A1_Pin,GPIO_PIN_RESET);
 800342c:	2200      	movs	r2, #0
 800342e:	2110      	movs	r1, #16
 8003430:	4801      	ldr	r0, [pc, #4]	; (8003438 <acON+0xc>)
 8003432:	f7fd bae3 	b.w	80009fc <HAL_GPIO_WritePin>
 8003436:	bf00      	nop
 8003438:	48000800 	.word	0x48000800

0800343c <acOFF>:
}

void acOFF(){
	HAL_GPIO_WritePin(GPIOC,ARD_A1_Pin,GPIO_PIN_SET);
 800343c:	2201      	movs	r2, #1
 800343e:	2110      	movs	r1, #16
 8003440:	4801      	ldr	r0, [pc, #4]	; (8003448 <acOFF+0xc>)
 8003442:	f7fd badb 	b.w	80009fc <HAL_GPIO_WritePin>
 8003446:	bf00      	nop
 8003448:	48000800 	.word	0x48000800

0800344c <getExtTemp>:
//	else{
//		return -1;
//	}
//}

float getExtTemp(){
 800344c:	b510      	push	{r4, lr}
 800344e:	ed2d 8b02 	vpush	{d8}
 8003452:	b082      	sub	sp, #8
	float temp = -1;
 8003454:	ac02      	add	r4, sp, #8
 8003456:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 800345a:	ed24 8a01 	vstmdb	r4!, {s16}
	HAL_GPIO_WritePin(GPIOA,ARD_D12_Pin,GPIO_PIN_SET);
 800345e:	2201      	movs	r2, #1
 8003460:	2140      	movs	r1, #64	; 0x40
 8003462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003466:	f7fd fac9 	bl	80009fc <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Receive(&hspi1, &temp, 4, 1000);
 800346a:	4621      	mov	r1, r4
 800346c:	2204      	movs	r2, #4
 800346e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003472:	480a      	ldr	r0, [pc, #40]	; (800349c <getExtTemp+0x50>)
 8003474:	f7ff f818 	bl	80024a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA,ARD_D12_Pin,GPIO_PIN_RESET);
 8003478:	2200      	movs	r2, #0
	HAL_StatusTypeDef status = HAL_SPI_Receive(&hspi1, &temp, 4, 1000);
 800347a:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOA,ARD_D12_Pin,GPIO_PIN_RESET);
 800347c:	2140      	movs	r1, #64	; 0x40
 800347e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003482:	f7fd fabb 	bl	80009fc <HAL_GPIO_WritePin>
	if (status == HAL_OK){
 8003486:	b92c      	cbnz	r4, 8003494 <getExtTemp+0x48>
		return temp;
 8003488:	ed9d 0a01 	vldr	s0, [sp, #4]
	}
	else{
		return -1;
	}
}
 800348c:	b002      	add	sp, #8
 800348e:	ecbd 8b02 	vpop	{d8}
 8003492:	bd10      	pop	{r4, pc}
		return -1;
 8003494:	eeb0 0a48 	vmov.f32	s0, s16
 8003498:	e7f8      	b.n	800348c <getExtTemp+0x40>
 800349a:	bf00      	nop
 800349c:	20000378 	.word	0x20000378

080034a0 <getWindowState>:

uint8_t getWindowState(){
 80034a0:	b510      	push	{r4, lr}
	uint8_t state = 2;
	HAL_GPIO_WritePin(GPIOC,ARD_A3_Pin,GPIO_PIN_SET);
 80034a2:	2201      	movs	r2, #1
 80034a4:	2104      	movs	r1, #4
 80034a6:	480d      	ldr	r0, [pc, #52]	; (80034dc <getWindowState+0x3c>)
 80034a8:	f7fd faa8 	bl	80009fc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80034ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034b0:	f7fd f8a2 	bl	80005f8 <HAL_Delay>
	GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOC,ARD_A4_Pin);
 80034b4:	2102      	movs	r1, #2
 80034b6:	4809      	ldr	r0, [pc, #36]	; (80034dc <getWindowState+0x3c>)
 80034b8:	f7fd fa9a 	bl	80009f0 <HAL_GPIO_ReadPin>
	HAL_GPIO_WritePin(GPIOC,ARD_A3_Pin,GPIO_PIN_RESET);
 80034bc:	2200      	movs	r2, #0
	GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOC,ARD_A4_Pin);
 80034be:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOC,ARD_A3_Pin,GPIO_PIN_RESET);
 80034c0:	2104      	movs	r1, #4
 80034c2:	4806      	ldr	r0, [pc, #24]	; (80034dc <getWindowState+0x3c>)
 80034c4:	f7fd fa9a 	bl	80009fc <HAL_GPIO_WritePin>
	if (pinState == GPIO_PIN_SET){
 80034c8:	2c01      	cmp	r4, #1
 80034ca:	d004      	beq.n	80034d6 <getWindowState+0x36>
		state = CLOSED;
	}
	else if (pinState == GPIO_PIN_RESET){
 80034cc:	2c00      	cmp	r4, #0
		state = OPEN;
 80034ce:	bf14      	ite	ne
 80034d0:	2002      	movne	r0, #2
 80034d2:	2000      	moveq	r0, #0
 80034d4:	bd10      	pop	{r4, pc}
		state = CLOSED;
 80034d6:	4620      	mov	r0, r4
	}
	return state;
}
 80034d8:	bd10      	pop	{r4, pc}
 80034da:	bf00      	nop
 80034dc:	48000800 	.word	0x48000800

080034e0 <fixWindow>:

void fixWindow(){
 80034e0:	b508      	push	{r3, lr}
	switch (errorNum){
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <fixWindow+0x2c>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d00c      	beq.n	8003504 <fixWindow+0x24>
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d101      	bne.n	80034f2 <fixWindow+0x12>
	case WINDOW_NOT_OPEN:
		openWindow();
 80034ee:	f7ff ff59 	bl	80033a4 <openWindow>
		closeWindow();
		break;
	default:
		break;
	}
	HAL_Delay(15000);  //takes ~12 sec
 80034f2:	f643 2098 	movw	r0, #15000	; 0x3a98
 80034f6:	f7fd f87f 	bl	80005f8 <HAL_Delay>
	windowState = getWindowState();
 80034fa:	f7ff ffd1 	bl	80034a0 <getWindowState>
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <fixWindow+0x30>)
 8003500:	7018      	strb	r0, [r3, #0]
 8003502:	bd08      	pop	{r3, pc}
		closeWindow();
 8003504:	f7ff ff68 	bl	80033d8 <closeWindow>
		break;
 8003508:	e7f3      	b.n	80034f2 <fixWindow+0x12>
 800350a:	bf00      	nop
 800350c:	200001e1 	.word	0x200001e1
 8003510:	20000018 	.word	0x20000018

08003514 <main>:
  * action as required
  *
  * @retval None
  */
int main(void)
{
 8003514:	e92d 489f 	stmdb	sp!, {r0, r1, r2, r3, r4, r7, fp, lr}
  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003518:	f7fd f854 	bl	80005c4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800351c:	f7ff f880 	bl	8002620 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_SPI1_Init();
 8003520:	f000 f932 	bl	8003788 <MX_SPI1_Init>
  MX_GPIO_Init();
 8003524:	f7ff fd88 	bl	8003038 <MX_GPIO_Init>
  MX_I2C2_Init();
 8003528:	f7ff feca 	bl	80032c0 <MX_I2C2_Init>
  BSP_TSENSOR_Init();
 800352c:	f000 f960 	bl	80037f0 <BSP_TSENSOR_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003530:	2101      	movs	r1, #1
 8003532:	2000      	movs	r0, #0
 8003534:	f7fc ff3a 	bl	80003ac <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8003538:	2000      	movs	r0, #0
 800353a:	f7fc ff01 	bl	8000340 <BSP_LED_Init>
  SPI_WIFI_Init();
 800353e:	f7ff fc1f 	bl	8002d80 <SPI_WIFI_Init>
  WIFI_Init();
 8003542:	f000 fa85 	bl	8003a50 <WIFI_Init>
//  furnaceOFF();
//  acON();
//  acOFF();

  //Connect to Access Point
  stat = WIFI_Connect("LukeandMichelle","10122010",  WIFI_ECN_WPA2_PSK);
 8003546:	2203      	movs	r2, #3
 8003548:	497f      	ldr	r1, [pc, #508]	; (8003748 <main+0x234>)
 800354a:	4880      	ldr	r0, [pc, #512]	; (800374c <main+0x238>)
 800354c:	f000 faa4 	bl	8003a98 <WIFI_Connect>
 8003550:	4b7f      	ldr	r3, [pc, #508]	; (8003750 <main+0x23c>)
 8003552:	7018      	strb	r0, [r3, #0]
 8003554:	4698      	mov	r8, r3
  if (stat != WIFI_STATUS_OK){
 8003556:	b130      	cbz	r0, 8003566 <main+0x52>
	  stat = WIFI_Connect("iotclass","myiotclass",  WIFI_ECN_WPA2_PSK);
 8003558:	2203      	movs	r2, #3
 800355a:	497e      	ldr	r1, [pc, #504]	; (8003754 <main+0x240>)
 800355c:	487e      	ldr	r0, [pc, #504]	; (8003758 <main+0x244>)
 800355e:	f000 fa9b 	bl	8003a98 <WIFI_Connect>
 8003562:	f888 0000 	strb.w	r0, [r8]
  }

  while (1){
	  BSP_TSENSOR_ReadTemp(&int_temp);
 8003566:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8003780 <main+0x26c>
	  ext_temp = getExtTemp();
 800356a:	4f7c      	ldr	r7, [pc, #496]	; (800375c <main+0x248>)
 800356c:	46ca      	mov	sl, r9
	  BSP_TSENSOR_ReadTemp(&int_temp);
 800356e:	4648      	mov	r0, r9
 8003570:	f000 f950 	bl	8003814 <BSP_TSENSOR_ReadTemp>
	  ext_temp = getExtTemp();
 8003574:	f7ff ff6a 	bl	800344c <getExtTemp>
 8003578:	ed87 0a00 	vstr	s0, [r7]
	  windowState = getWindowState();
 800357c:	f7ff ff90 	bl	80034a0 <getWindowState>
 8003580:	4d77      	ldr	r5, [pc, #476]	; (8003760 <main+0x24c>)
 8003582:	7028      	strb	r0, [r5, #0]

	  if (windowState){
 8003584:	b108      	cbz	r0, 800358a <main+0x76>
		  ext_temp = 40;
 8003586:	4b77      	ldr	r3, [pc, #476]	; (8003764 <main+0x250>)
 8003588:	603b      	str	r3, [r7, #0]
	  }

	  //check temp
	  if (int_temp < desired_temp - 1 || int_temp > desired_temp + 1){
 800358a:	edd9 7a00 	vldr	s15, [r9]
 800358e:	4c76      	ldr	r4, [pc, #472]	; (8003768 <main+0x254>)
 8003590:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359c:	d406      	bmi.n	80035ac <main+0x98>
 800359e:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80035a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035aa:	dd58      	ble.n	800365e <main+0x14a>
		  switch (mode){
 80035ac:	7823      	ldrb	r3, [r4, #0]
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d83a      	bhi.n	8003628 <main+0x114>
 80035b2:	e8df f003 	tbb	[pc, r3]
 80035b6:	2903      	.short	0x2903
 80035b8:	4e39      	.short	0x4e39
 80035ba:	52          	.byte	0x52
 80035bb:	00          	.byte	0x00
		  case ALL_OFF:
			  if (int_temp > desired_temp){ //too hot
 80035bc:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 80035c0:	eef4 7ac7 	vcmpe.f32	s15, s14
				  if (ext_temp < int_temp){ //cool outside
 80035c4:	ed97 7a00 	vldr	s14, [r7]
			  if (int_temp > desired_temp){ //too hot
 80035c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				  if (ext_temp < int_temp){ //cool outside
 80035cc:	eef4 7ac7 	vcmpe.f32	s15, s14
			  if (int_temp > desired_temp){ //too hot
 80035d0:	dd0d      	ble.n	80035ee <main+0xda>
				  if (ext_temp < int_temp){ //cool outside
 80035d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d6:	dd04      	ble.n	80035e2 <main+0xce>
					  openWindow();
 80035d8:	f7ff fee4 	bl	80033a4 <openWindow>
					  mode = WINDOW_COOL;
 80035dc:	2301      	movs	r3, #1
		  //if (windowState != CLOSED){
			  closeWindow();
		  //}
		  acOFF();
		  furnaceOFF();
		  mode = ALL_OFF;
 80035de:	7023      	strb	r3, [r4, #0]
 80035e0:	e022      	b.n	8003628 <main+0x114>
						  closeWindow();
 80035e2:	f7ff fef9 	bl	80033d8 <closeWindow>
					  acON();
 80035e6:	f7ff ff21 	bl	800342c <acON>
					  mode = AC_ON;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e7f7      	b.n	80035de <main+0xca>
				  if (ext_temp > int_temp){ //hot outside
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d503      	bpl.n	80035fc <main+0xe8>
					  openWindow();
 80035f4:	f7ff fed6 	bl	80033a4 <openWindow>
					  mode = WINDOW_HEAT;
 80035f8:	2302      	movs	r3, #2
 80035fa:	e7f0      	b.n	80035de <main+0xca>
						  closeWindow();
 80035fc:	f7ff feec 	bl	80033d8 <closeWindow>
					  furnaceON();
 8003600:	f7ff ff04 	bl	800340c <furnaceON>
					  mode = FURNACE_ON;
 8003604:	2304      	movs	r3, #4
 8003606:	e7ea      	b.n	80035de <main+0xca>
 8003608:	4e58      	ldr	r6, [pc, #352]	; (800376c <main+0x258>)
			  if (windowState != OPEN){
 800360a:	b158      	cbz	r0, 8003624 <main+0x110>
				  windowState = getWindowState();
 800360c:	f7ff ff48 	bl	80034a0 <getWindowState>
				  if (windowState == CLOSED){
 8003610:	2801      	cmp	r0, #1
				  windowState = getWindowState();
 8003612:	7028      	strb	r0, [r5, #0]
				  if (windowState == CLOSED){
 8003614:	d105      	bne.n	8003622 <main+0x10e>
					  errorNum = WINDOW_NOT_OPEN;
 8003616:	2302      	movs	r3, #2
					  BSP_LED_On(LED2);
 8003618:	2000      	movs	r0, #0
					  errorNum = WINDOW_UNK;
 800361a:	7033      	strb	r3, [r6, #0]
					  BSP_LED_On(LED2);
 800361c:	f7fc feb2 	bl	8000384 <BSP_LED_On>
 8003620:	e002      	b.n	8003628 <main+0x114>
				  else if (windowState == OPEN){
 8003622:	b9a0      	cbnz	r0, 800364e <main+0x13a>
					  errorNum = NO_ERROR;
 8003624:	2300      	movs	r3, #0
 8003626:	7033      	strb	r3, [r6, #0]
	  }

	  //error correction
	  if (errorCorrection){
 8003628:	f8df b158 	ldr.w	fp, [pc, #344]	; 8003784 <main+0x270>
 800362c:	f89b 3000 	ldrb.w	r3, [fp]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d043      	beq.n	80036bc <main+0x1a8>
		  switch (errorNum){
 8003634:	4e4d      	ldr	r6, [pc, #308]	; (800376c <main+0x258>)
 8003636:	7833      	ldrb	r3, [r6, #0]
 8003638:	3b01      	subs	r3, #1
 800363a:	2200      	movs	r2, #0
 800363c:	2b08      	cmp	r3, #8
 800363e:	d837      	bhi.n	80036b0 <main+0x19c>
 8003640:	e8df f003 	tbb	[pc, r3]
 8003644:	7418242f 	.word	0x7418242f
 8003648:	7d7a8077 	.word	0x7d7a8077
 800364c:	80          	.byte	0x80
 800364d:	00          	.byte	0x00
					  errorNum = WINDOW_UNK;
 800364e:	2303      	movs	r3, #3
 8003650:	e7e2      	b.n	8003618 <main+0x104>
			  errorNum = AC_UNK;
 8003652:	2209      	movs	r2, #9
			  errorNum = FURNACE_UNK;
 8003654:	4b45      	ldr	r3, [pc, #276]	; (800376c <main+0x258>)
 8003656:	701a      	strb	r2, [r3, #0]
			  break;
 8003658:	e7e6      	b.n	8003628 <main+0x114>
			  errorNum = FURNACE_UNK;
 800365a:	2206      	movs	r2, #6
 800365c:	e7fa      	b.n	8003654 <main+0x140>
	  else if (mode != ALL_OFF) {
 800365e:	7823      	ldrb	r3, [r4, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0e1      	beq.n	8003628 <main+0x114>
			  closeWindow();
 8003664:	f7ff feb8 	bl	80033d8 <closeWindow>
		  acOFF();
 8003668:	f7ff fee8 	bl	800343c <acOFF>
		  furnaceOFF();
 800366c:	f7ff fed6 	bl	800341c <furnaceOFF>
		  mode = ALL_OFF;
 8003670:	2300      	movs	r3, #0
 8003672:	e7b4      	b.n	80035de <main+0xca>
			  if (windowState == OPEN){
				  errorNum = NO_ERROR;
			  }
			  break;
		  case WINDOW_UNK:
			  windowState = getWindowState();
 8003674:	f7ff ff14 	bl	80034a0 <getWindowState>
 8003678:	7028      	strb	r0, [r5, #0]
			  switch(windowState){
 800367a:	b160      	cbz	r0, 8003696 <main+0x182>
 800367c:	2801      	cmp	r0, #1
 800367e:	d117      	bne.n	80036b0 <main+0x19c>
						  errorNum = NO_ERROR;
					  }
				  }
				  break;
			  case CLOSED:
				  if (mode == WINDOW_COOL || mode == WINDOW_HEAT){
 8003680:	7823      	ldrb	r3, [r4, #0]
 8003682:	3b01      	subs	r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d811      	bhi.n	80036ac <main+0x198>
					 errorNum = WINDOW_NOT_OPEN;
 8003688:	2302      	movs	r3, #2
 800368a:	7033      	strb	r3, [r6, #0]
					 fixWindow();
 800368c:	f7ff ff28 	bl	80034e0 <fixWindow>
					 if (windowState == OPEN){
 8003690:	782b      	ldrb	r3, [r5, #0]
 8003692:	b15b      	cbz	r3, 80036ac <main+0x198>
 8003694:	e00c      	b.n	80036b0 <main+0x19c>
				  if (mode == WINDOW_COOL || mode == WINDOW_HEAT){
 8003696:	7823      	ldrb	r3, [r4, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d906      	bls.n	80036ac <main+0x198>
					  errorNum = WINDOW_NOT_CLOSED;
 800369e:	2301      	movs	r3, #1
 80036a0:	7033      	strb	r3, [r6, #0]
			  fixWindow();
 80036a2:	f7ff ff1d 	bl	80034e0 <fixWindow>
			  if (windowState == CLOSED){
 80036a6:	782b      	ldrb	r3, [r5, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <main+0x19c>
				  errorNum = NO_ERROR;
 80036ac:	2300      	movs	r3, #0
 80036ae:	7033      	strb	r3, [r6, #0]
			  break;
		  case AC_UNK:
			  errorNum = NO_ERROR;
			  break;
		  }
		  BSP_LED_Off(LED2);
 80036b0:	2000      	movs	r0, #0
 80036b2:	f7fc fe71 	bl	8000398 <BSP_LED_Off>
		  errorCorrection = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f88b 3000 	strb.w	r3, [fp]
	  }


	  //reporting
	  if (stat == WIFI_STATUS_OK){
 80036bc:	f898 5000 	ldrb.w	r5, [r8]
 80036c0:	bb7d      	cbnz	r5, 8003722 <main+0x20e>
		  HAL_Delay(5000);
 80036c2:	f241 3088 	movw	r0, #5000	; 0x1388
 80036c6:	f7fc ff97 	bl	80005f8 <HAL_Delay>
		  sprintf(WIFI_xmit, "field1=%u&field2=%u&field3=%u&field4=%u",
		  (int8_t)int_temp, (int8_t)ext_temp, mode, errorNum);
 80036ca:	edd7 7a00 	vldr	s15, [r7]
		  sprintf(WIFI_xmit, "field1=%u&field2=%u&field3=%u&field4=%u",
 80036ce:	4b27      	ldr	r3, [pc, #156]	; (800376c <main+0x258>)
 80036d0:	4927      	ldr	r1, [pc, #156]	; (8003770 <main+0x25c>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4827      	ldr	r0, [pc, #156]	; (8003774 <main+0x260>)
		  (int8_t)int_temp, (int8_t)ext_temp, mode, errorNum);
 80036d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036da:	edcd 7a02 	vstr	s15, [sp, #8]
 80036de:	edda 7a00 	vldr	s15, [sl]
		  sprintf(WIFI_xmit, "field1=%u&field2=%u&field3=%u&field4=%u",
 80036e2:	9301      	str	r3, [sp, #4]
		  (int8_t)int_temp, (int8_t)ext_temp, mode, errorNum);
 80036e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		  sprintf(WIFI_xmit, "field1=%u&field2=%u&field3=%u&field4=%u",
 80036e8:	7823      	ldrb	r3, [r4, #0]
		  (int8_t)int_temp, (int8_t)ext_temp, mode, errorNum);
 80036ea:	edcd 7a03 	vstr	s15, [sp, #12]
		  sprintf(WIFI_xmit, "field1=%u&field2=%u&field3=%u&field4=%u",
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 80036f4:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 80036f8:	f000 fa86 	bl	8003c08 <siprintf>
		  WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, server, IP_Addr, 80, 0);
 80036fc:	2350      	movs	r3, #80	; 0x50
 80036fe:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <main+0x264>)
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	4629      	mov	r1, r5
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <main+0x268>)
 8003706:	9501      	str	r5, [sp, #4]
 8003708:	4628      	mov	r0, r5
 800370a:	f000 f9d9 	bl	8003ac0 <WIFI_OpenClientConnection>
		  thingSpeakUpdate(WIFI_xmit);
 800370e:	4819      	ldr	r0, [pc, #100]	; (8003774 <main+0x260>)
 8003710:	f7fe ffea 	bl	80026e8 <thingSpeakUpdate>
		  WIFI_CloseClientConnection(0);
 8003714:	4628      	mov	r0, r5
 8003716:	f000 f9fb 	bl	8003b10 <WIFI_CloseClientConnection>
		  HAL_Delay(5000);
 800371a:	f241 3088 	movw	r0, #5000	; 0x1388
 800371e:	f7fc ff6b 	bl	80005f8 <HAL_Delay>
	  }
	  HAL_Delay(5000);
 8003722:	f241 3088 	movw	r0, #5000	; 0x1388
 8003726:	f7fc ff67 	bl	80005f8 <HAL_Delay>
	  BSP_TSENSOR_ReadTemp(&int_temp);
 800372a:	e720      	b.n	800356e <main+0x5a>
			  furnaceOFF();
 800372c:	f7ff fe76 	bl	800341c <furnaceOFF>
			  break;
 8003730:	e7be      	b.n	80036b0 <main+0x19c>
			  furnaceON();
 8003732:	f7ff fe6b 	bl	800340c <furnaceON>
			  break;
 8003736:	e7bb      	b.n	80036b0 <main+0x19c>
			  acOFF();
 8003738:	f7ff fe80 	bl	800343c <acOFF>
			  break;
 800373c:	e7b8      	b.n	80036b0 <main+0x19c>
			  acON();
 800373e:	f7ff fe75 	bl	800342c <acON>
			  break;
 8003742:	e7b5      	b.n	80036b0 <main+0x19c>
			  errorNum = NO_ERROR;
 8003744:	7032      	strb	r2, [r6, #0]
			  break;
 8003746:	e7b3      	b.n	80036b0 <main+0x19c>
 8003748:	080046e3 	.word	0x080046e3
 800374c:	080046ec 	.word	0x080046ec
 8003750:	200001ed 	.word	0x200001ed
 8003754:	080046fc 	.word	0x080046fc
 8003758:	080046fe 	.word	0x080046fe
 800375c:	200001e4 	.word	0x200001e4
 8003760:	20000018 	.word	0x20000018
 8003764:	42200000 	.word	0x42200000
 8003768:	200001ec 	.word	0x200001ec
 800376c:	200001e1 	.word	0x200001e1
 8003770:	08004707 	.word	0x08004707
 8003774:	2000019c 	.word	0x2000019c
 8003778:	0800472f 	.word	0x0800472f
 800377c:	080046df 	.word	0x080046df
 8003780:	200001e8 	.word	0x200001e8
 8003784:	200001e0 	.word	0x200001e0

08003788 <MX_SPI1_Init>:
}

/* SPI1 init function */
void MX_SPI1_Init(void)
{
  __HAL_RCC_SPI1_CLK_ENABLE();
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <MX_SPI1_Init+0x58>)
{
 800378a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SPI1_CLK_ENABLE();
 800378c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800378e:	4815      	ldr	r0, [pc, #84]	; (80037e4 <MX_SPI1_Init+0x5c>)
  __HAL_RCC_SPI1_CLK_ENABLE();
 8003790:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003794:	661a      	str	r2, [r3, #96]	; 0x60
 8003796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  hspi1.Init.Mode = SPI_MODE_SLAVE;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800379c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  __HAL_RCC_SPI1_CLK_ENABLE();
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	9b01      	ldr	r3, [sp, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037a4:	60c2      	str	r2, [r0, #12]
  hspi1.Instance = SPI1;
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <MX_SPI1_Init+0x60>)
 80037a8:	6003      	str	r3, [r0, #0]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80037aa:	2201      	movs	r2, #1
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80037ac:	2300      	movs	r3, #0
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80037ae:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80037b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80037b4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037b6:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b8:	6103      	str	r3, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80037ba:	6182      	str	r2, [r0, #24]
  //hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037bc:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037be:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80037c2:	2207      	movs	r2, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037c4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037c6:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 80037c8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037ca:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037cc:	f7fe fc25 	bl	800201a <HAL_SPI_Init>
 80037d0:	b118      	cbz	r0, 80037da <MX_SPI1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 80037d2:	2162      	movs	r1, #98	; 0x62
 80037d4:	4805      	ldr	r0, [pc, #20]	; (80037ec <MX_SPI1_Init+0x64>)
 80037d6:	f7fe ff85 	bl	80026e4 <_Error_Handler>
  }
}
 80037da:	b003      	add	sp, #12
 80037dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80037e0:	40021000 	.word	0x40021000
 80037e4:	20000378 	.word	0x20000378
 80037e8:	40013000 	.word	0x40013000
 80037ec:	08004742 	.word	0x08004742

080037f0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80037f0:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80037f2:	4c06      	ldr	r4, [pc, #24]	; (800380c <BSP_TSENSOR_Init+0x1c>)
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <BSP_TSENSOR_Init+0x20>)
 80037f6:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80037f8:	f7fc fe14 	bl	8000424 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	2100      	movs	r1, #0
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	20be      	movs	r0, #190	; 0xbe
 8003804:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8003806:	2000      	movs	r0, #0
 8003808:	bd10      	pop	{r4, pc}
 800380a:	bf00      	nop
 800380c:	200001f0 	.word	0x200001f0
 8003810:	20000008 	.word	0x20000008

08003814 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
void BSP_TSENSOR_ReadTemp(float* tmp)
{ 
  *tmp = tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <BSP_TSENSOR_ReadTemp+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
{ 
 8003818:	b510      	push	{r4, lr}
  *tmp = tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800381a:	68db      	ldr	r3, [r3, #12]
{ 
 800381c:	4604      	mov	r4, r0
  *tmp = tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800381e:	20be      	movs	r0, #190	; 0xbe
 8003820:	4798      	blx	r3
 8003822:	ed84 0a00 	vstr	s0, [r4]
 8003826:	bd10      	pop	{r4, pc}
 8003828:	200001f0 	.word	0x200001f0

0800382c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382c:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <HAL_MspInit+0x88>)
{
 800382e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003830:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	661a      	str	r2, [r3, #96]	; 0x60
 8003838:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800383a:	f002 0201 	and.w	r2, r2, #1
 800383e:	9200      	str	r2, [sp, #0]
 8003840:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003844:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003848:	659a      	str	r2, [r3, #88]	; 0x58
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003852:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003854:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003856:	f7fc fedb 	bl	8000610 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800385a:	2200      	movs	r2, #0
 800385c:	4611      	mov	r1, r2
 800385e:	f06f 000b 	mvn.w	r0, #11
 8003862:	f7fc fee7 	bl	8000634 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003866:	2200      	movs	r2, #0
 8003868:	4611      	mov	r1, r2
 800386a:	f06f 000a 	mvn.w	r0, #10
 800386e:	f7fc fee1 	bl	8000634 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003872:	2200      	movs	r2, #0
 8003874:	4611      	mov	r1, r2
 8003876:	f06f 0009 	mvn.w	r0, #9
 800387a:	f7fc fedb 	bl	8000634 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800387e:	2200      	movs	r2, #0
 8003880:	4611      	mov	r1, r2
 8003882:	f06f 0004 	mvn.w	r0, #4
 8003886:	f7fc fed5 	bl	8000634 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	4611      	mov	r1, r2
 800388e:	f06f 0003 	mvn.w	r0, #3
 8003892:	f7fc fecf 	bl	8000634 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003896:	2200      	movs	r2, #0
 8003898:	4611      	mov	r1, r2
 800389a:	f06f 0001 	mvn.w	r0, #1
 800389e:	f7fc fec9 	bl	8000634 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	4611      	mov	r1, r2
 80038a6:	f04f 30ff 	mov.w	r0, #4294967295
 80038aa:	f7fc fec3 	bl	8000634 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ae:	b003      	add	sp, #12
 80038b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80038b4:	40021000 	.word	0x40021000

080038b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038b8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80038ba:	6802      	ldr	r2, [r0, #0]
 80038bc:	4b1f      	ldr	r3, [pc, #124]	; (800393c <HAL_SPI_MspInit+0x84>)
 80038be:	429a      	cmp	r2, r3
{
 80038c0:	b088      	sub	sp, #32
 80038c2:	4604      	mov	r4, r0
  if(hspi->Instance==SPI1)
 80038c4:	d119      	bne.n	80038fa <HAL_SPI_MspInit+0x42>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038c6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ca:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038d2:	661a      	str	r2, [r3, #96]	; 0x60
 80038d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80038de:	2370      	movs	r3, #112	; 0x70
 80038e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ea:	2303      	movs	r3, #3
 80038ec:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038f2:	2305      	movs	r3, #5
 80038f4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f6:	f7fc ff05 	bl	8000704 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

  if(hspi->Instance==SPI3)
 80038fa:	6822      	ldr	r2, [r4, #0]
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <HAL_SPI_MspInit+0x88>)
 80038fe:	429a      	cmp	r2, r3
 8003900:	d119      	bne.n	8003936 <HAL_SPI_MspInit+0x7e>
   {
   /* USER CODE BEGIN SPI3_MspInit 0 */

   /* USER CODE END SPI3_MspInit 0 */
     /* SPI3 clock enable */
     __HAL_RCC_SPI3_CLK_ENABLE();
 8003902:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
     GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
     GPIO_InitStruct.Pull = GPIO_NOPULL;
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
     GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003906:	a903      	add	r1, sp, #12
     __HAL_RCC_SPI3_CLK_ENABLE();
 8003908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390a:	480e      	ldr	r0, [pc, #56]	; (8003944 <HAL_SPI_MspInit+0x8c>)
     __HAL_RCC_SPI3_CLK_ENABLE();
 800390c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003910:	659a      	str	r2, [r3, #88]	; 0x58
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003918:	9302      	str	r3, [sp, #8]
 800391a:	9b02      	ldr	r3, [sp, #8]
     GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800391c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003920:	9303      	str	r3, [sp, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003922:	2302      	movs	r3, #2
 8003924:	9304      	str	r3, [sp, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	9305      	str	r3, [sp, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392a:	2303      	movs	r3, #3
 800392c:	9306      	str	r3, [sp, #24]
     GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800392e:	2306      	movs	r3, #6
 8003930:	9307      	str	r3, [sp, #28]
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003932:	f7fc fee7 	bl	8000704 <HAL_GPIO_Init>
   /* USER CODE BEGIN SPI3_MspInit 1 */

   /* USER CODE END SPI3_MspInit 1 */
   }

}
 8003936:	b008      	add	sp, #32
 8003938:	bd10      	pop	{r4, pc}
 800393a:	bf00      	nop
 800393c:	40013000 	.word	0x40013000
 8003940:	40003c00 	.word	0x40003c00
 8003944:	48000800 	.word	0x48000800

08003948 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{

  if(hspi->Instance==SPI1)
 8003948:	6802      	ldr	r2, [r0, #0]
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_SPI_MspDeInit+0x44>)
 800394c:	429a      	cmp	r2, r3
{
 800394e:	b510      	push	{r4, lr}
 8003950:	4604      	mov	r4, r0
  if(hspi->Instance==SPI1)
 8003952:	d109      	bne.n	8003968 <HAL_SPI_MspDeInit+0x20>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003954:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <HAL_SPI_MspDeInit+0x48>)
 8003956:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8003958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800395c:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 800395e:	2170      	movs	r1, #112	; 0x70
 8003960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003964:	f7fc ffaa 	bl	80008bc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

  if(hspi->Instance==SPI3)
 8003968:	6822      	ldr	r2, [r4, #0]
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_SPI_MspDeInit+0x4c>)
 800396c:	429a      	cmp	r2, r3
 800396e:	d10b      	bne.n	8003988 <HAL_SPI_MspDeInit+0x40>
    {
    /* USER CODE BEGIN SPI3_MspDeInit 0 */

    /* USER CODE END SPI3_MspDeInit 0 */
      /* Peripheral clock disable */
      __HAL_RCC_SPI3_CLK_DISABLE();
 8003970:	4a07      	ldr	r2, [pc, #28]	; (8003990 <HAL_SPI_MspDeInit+0x48>)
      /**SPI3 GPIO Configuration
      PC10     ------> SPI3_SCK
      PC11     ------> SPI3_MISO
      PC12     ------> SPI3_MOSI
      */
      HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8003972:	4809      	ldr	r0, [pc, #36]	; (8003998 <HAL_SPI_MspDeInit+0x50>)
      __HAL_RCC_SPI3_CLK_DISABLE();
 8003974:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003976:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800397a:	6593      	str	r3, [r2, #88]	; 0x58
      HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800397c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
    /* USER CODE BEGIN SPI3_MspDeInit 1 */

    /* USER CODE END SPI3_MspDeInit 1 */
    }

}
 8003980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8003984:	f7fc bf9a 	b.w	80008bc <HAL_GPIO_DeInit>
 8003988:	bd10      	pop	{r4, pc}
 800398a:	bf00      	nop
 800398c:	40013000 	.word	0x40013000
 8003990:	40021000 	.word	0x40021000
 8003994:	40003c00 	.word	0x40003c00
 8003998:	48000800 	.word	0x48000800

0800399c <NMI_Handler>:
 800399c:	4770      	bx	lr

0800399e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800399e:	e7fe      	b.n	800399e <HardFault_Handler>

080039a0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80039a0:	e7fe      	b.n	80039a0 <MemManage_Handler>

080039a2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80039a2:	e7fe      	b.n	80039a2 <BusFault_Handler>

080039a4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80039a4:	e7fe      	b.n	80039a4 <UsageFault_Handler>

080039a6 <SVC_Handler>:
 80039a6:	4770      	bx	lr

080039a8 <DebugMon_Handler>:
 80039a8:	4770      	bx	lr

080039aa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80039aa:	4770      	bx	lr

080039ac <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80039ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ae:	f7fc fe15 	bl	80005dc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80039b6:	f7fc bea0 	b.w	80006fa <HAL_SYSTICK_IRQHandler>

080039ba <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 80039ba:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80039bc:	2020      	movs	r0, #32
 80039be:	f7fd f823 	bl	8000a08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80039c2:	2040      	movs	r0, #64	; 0x40
 80039c4:	f7fd f820 	bl	8000a08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80039c8:	2080      	movs	r0, #128	; 0x80
 80039ca:	f7fd f81d 	bl	8000a08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80039ce:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80039d6:	f7fd b817 	b.w	8000a08 <HAL_GPIO_EXTI_IRQHandler>

080039da <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80039da:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80039dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80039e0:	f7fd f812 	bl	8000a08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80039e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039e8:	f7fd f80e 	bl	8000a08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80039ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039f0:	f7fd f80a 	bl	8000a08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80039f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039f8:	f7fd f806 	bl	8000a08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80039fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003a04:	f7fd b800 	b.w	8000a08 <HAL_GPIO_EXTI_IRQHandler>

08003a08 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a08:	490f      	ldr	r1, [pc, #60]	; (8003a48 <SystemInit+0x40>)
 8003a0a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003a0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003a16:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <SystemInit+0x44>)
 8003a18:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003a1a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003a1c:	f042 0201 	orr.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003a22:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003a2a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003a30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003a3e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a44:	608b      	str	r3, [r1, #8]
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00
 8003a4c:	40021000 	.word	0x40021000

08003a50 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003a50:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <WIFI_Init+0x30>)
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <WIFI_Init+0x34>)
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	4a0b      	ldr	r2, [pc, #44]	; (8003a88 <WIFI_Init+0x38>)
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <WIFI_Init+0x3c>)
 8003a5e:	490c      	ldr	r1, [pc, #48]	; (8003a90 <WIFI_Init+0x40>)
 8003a60:	480c      	ldr	r0, [pc, #48]	; (8003a94 <WIFI_Init+0x44>)
 8003a62:	f7fe ff2f 	bl	80028c4 <ES_WIFI_RegisterBusIO>
 8003a66:	b940      	cbnz	r0, 8003a7a <WIFI_Init+0x2a>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003a68:	480a      	ldr	r0, [pc, #40]	; (8003a94 <WIFI_Init+0x44>)
 8003a6a:	f7fe fecb 	bl	8002804 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003a6e:	3000      	adds	r0, #0
 8003a70:	bf18      	it	ne
 8003a72:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8003a74:	b003      	add	sp, #12
 8003a76:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	e7fa      	b.n	8003a74 <WIFI_Init+0x24>
 8003a7e:	bf00      	nop
 8003a80:	08002ea9 	.word	0x08002ea9
 8003a84:	08002fa1 	.word	0x08002fa1
 8003a88:	08002e99 	.word	0x08002e99
 8003a8c:	08003035 	.word	0x08003035
 8003a90:	08002d81 	.word	0x08002d81
 8003a94:	200003dc 	.word	0x200003dc

08003a98 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8003a98:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	460a      	mov	r2, r1
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	4806      	ldr	r0, [pc, #24]	; (8003abc <WIFI_Connect+0x24>)
 8003aa2:	f7fe ff23 	bl	80028ec <ES_WIFI_Connect>
 8003aa6:	b930      	cbnz	r0, 8003ab6 <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003aa8:	4804      	ldr	r0, [pc, #16]	; (8003abc <WIFI_Connect+0x24>)
 8003aaa:	f7fe ff5f 	bl	800296c <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8003aae:	3000      	adds	r0, #0
 8003ab0:	bf18      	it	ne
 8003ab2:	2001      	movne	r0, #1
 8003ab4:	bd08      	pop	{r3, pc}
 8003ab6:	2001      	movs	r0, #1
       ret = WIFI_STATUS_OK;
    }
    
  }
  return ret;
}
 8003ab8:	bd08      	pop	{r3, pc}
 8003aba:	bf00      	nop
 8003abc:	200003dc 	.word	0x200003dc

08003ac0 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char* name, uint8_t* ipaddr, uint16_t port, uint16_t local_port)
{
 8003ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 8003ac2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8003ac6:	f8ad 2002 	strh.w	r2, [sp, #2]
  conn.LocalPort = local_port;
 8003aca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8003ace:	f8ad 2004 	strh.w	r2, [sp, #4]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003ad2:	3100      	adds	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8003ad4:	781a      	ldrb	r2, [r3, #0]
 8003ad6:	f88d 2006 	strb.w	r2, [sp, #6]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003ada:	bf18      	it	ne
 8003adc:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8003ade:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 8003ae0:	f88d 0001 	strb.w	r0, [sp, #1]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003ae4:	f88d 1000 	strb.w	r1, [sp]
  conn.RemoteIP[1] = ipaddr[1];
 8003ae8:	f88d 2007 	strb.w	r2, [sp, #7]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003aec:	4669      	mov	r1, sp
  conn.RemoteIP[2] = ipaddr[2];
 8003aee:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003af0:	4806      	ldr	r0, [pc, #24]	; (8003b0c <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 8003af2:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8003af4:	f88d 2008 	strb.w	r2, [sp, #8]
  conn.RemoteIP[3] = ipaddr[3];
 8003af8:	f88d 3009 	strb.w	r3, [sp, #9]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003afc:	f7fe ffae 	bl	8002a5c <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8003b00:	3000      	adds	r0, #0
 8003b02:	bf18      	it	ne
 8003b04:	2001      	movne	r0, #1
 8003b06:	b005      	add	sp, #20
 8003b08:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b0c:	200003dc 	.word	0x200003dc

08003b10 <WIFI_CloseClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8003b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8003b12:	f88d 0001 	strb.w	r0, [sp, #1]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003b16:	4669      	mov	r1, sp
 8003b18:	4804      	ldr	r0, [pc, #16]	; (8003b2c <WIFI_CloseClientConnection+0x1c>)
 8003b1a:	f7ff f803 	bl	8002b24 <ES_WIFI_StopClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret; 
}
 8003b1e:	3000      	adds	r0, #0
 8003b20:	bf18      	it	ne
 8003b22:	2001      	movne	r0, #1
 8003b24:	b005      	add	sp, #20
 8003b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b2a:	bf00      	nop
 8003b2c:	200003dc 	.word	0x200003dc

08003b30 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8003b30:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003b32:	9c04      	ldr	r4, [sp, #16]
 8003b34:	e88d 0018 	stmia.w	sp, {r3, r4}
 8003b38:	4613      	mov	r3, r2
 8003b3a:	460a      	mov	r2, r1
 8003b3c:	4601      	mov	r1, r0
 8003b3e:	4804      	ldr	r0, [pc, #16]	; (8003b50 <WIFI_SendData+0x20>)
 8003b40:	f7ff f810 	bl	8002b64 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8003b44:	3000      	adds	r0, #0
 8003b46:	bf18      	it	ne
 8003b48:	2001      	movne	r0, #1
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd10      	pop	{r4, pc}
 8003b4e:	bf00      	nop
 8003b50:	200003dc 	.word	0x200003dc

08003b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b5a:	e003      	b.n	8003b64 <LoopCopyDataInit>

08003b5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b62:	3104      	adds	r1, #4

08003b64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b64:	480b      	ldr	r0, [pc, #44]	; (8003b94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b6c:	d3f6      	bcc.n	8003b5c <CopyDataInit>
	ldr	r2, =_sbss
 8003b6e:	4a0b      	ldr	r2, [pc, #44]	; (8003b9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b70:	e002      	b.n	8003b78 <LoopFillZerobss>

08003b72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b74:	f842 3b04 	str.w	r3, [r2], #4

08003b78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <LoopForever+0x16>)
	cmp	r2, r3
 8003b7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b7c:	d3f9      	bcc.n	8003b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b7e:	f7ff ff43 	bl	8003a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b82:	f000 f811 	bl	8003ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b86:	f7ff fcc5 	bl	8003514 <main>

08003b8a <LoopForever>:

LoopForever:
    b LoopForever
 8003b8a:	e7fe      	b.n	8003b8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003b90:	080047cc 	.word	0x080047cc
	ldr	r0, =_sdata
 8003b94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b98:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8003b9c:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8003ba0:	20000b48 	.word	0x20000b48

08003ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ba4:	e7fe      	b.n	8003ba4 <ADC1_2_IRQHandler>
	...

08003ba8 <__libc_init_array>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	4e0d      	ldr	r6, [pc, #52]	; (8003be0 <__libc_init_array+0x38>)
 8003bac:	4c0d      	ldr	r4, [pc, #52]	; (8003be4 <__libc_init_array+0x3c>)
 8003bae:	1ba4      	subs	r4, r4, r6
 8003bb0:	10a4      	asrs	r4, r4, #2
 8003bb2:	2500      	movs	r5, #0
 8003bb4:	42a5      	cmp	r5, r4
 8003bb6:	d109      	bne.n	8003bcc <__libc_init_array+0x24>
 8003bb8:	4e0b      	ldr	r6, [pc, #44]	; (8003be8 <__libc_init_array+0x40>)
 8003bba:	4c0c      	ldr	r4, [pc, #48]	; (8003bec <__libc_init_array+0x44>)
 8003bbc:	f000 fce6 	bl	800458c <_init>
 8003bc0:	1ba4      	subs	r4, r4, r6
 8003bc2:	10a4      	asrs	r4, r4, #2
 8003bc4:	2500      	movs	r5, #0
 8003bc6:	42a5      	cmp	r5, r4
 8003bc8:	d105      	bne.n	8003bd6 <__libc_init_array+0x2e>
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bd0:	4798      	blx	r3
 8003bd2:	3501      	adds	r5, #1
 8003bd4:	e7ee      	b.n	8003bb4 <__libc_init_array+0xc>
 8003bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bda:	4798      	blx	r3
 8003bdc:	3501      	adds	r5, #1
 8003bde:	e7f2      	b.n	8003bc6 <__libc_init_array+0x1e>
 8003be0:	080047c4 	.word	0x080047c4
 8003be4:	080047c4 	.word	0x080047c4
 8003be8:	080047c4 	.word	0x080047c4
 8003bec:	080047c8 	.word	0x080047c8

08003bf0 <memcpy>:
 8003bf0:	b510      	push	{r4, lr}
 8003bf2:	1e43      	subs	r3, r0, #1
 8003bf4:	440a      	add	r2, r1
 8003bf6:	4291      	cmp	r1, r2
 8003bf8:	d100      	bne.n	8003bfc <memcpy+0xc>
 8003bfa:	bd10      	pop	{r4, pc}
 8003bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c04:	e7f7      	b.n	8003bf6 <memcpy+0x6>
	...

08003c08 <siprintf>:
 8003c08:	b40e      	push	{r1, r2, r3}
 8003c0a:	b500      	push	{lr}
 8003c0c:	b09c      	sub	sp, #112	; 0x70
 8003c0e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003c12:	ab1d      	add	r3, sp, #116	; 0x74
 8003c14:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003c18:	9002      	str	r0, [sp, #8]
 8003c1a:	9006      	str	r0, [sp, #24]
 8003c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c20:	480a      	ldr	r0, [pc, #40]	; (8003c4c <siprintf+0x44>)
 8003c22:	9104      	str	r1, [sp, #16]
 8003c24:	9107      	str	r1, [sp, #28]
 8003c26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c2e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003c32:	6800      	ldr	r0, [r0, #0]
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	a902      	add	r1, sp, #8
 8003c38:	f000 f9b4 	bl	8003fa4 <_svfiprintf_r>
 8003c3c:	9b02      	ldr	r3, [sp, #8]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	b01c      	add	sp, #112	; 0x70
 8003c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c48:	b003      	add	sp, #12
 8003c4a:	4770      	bx	lr
 8003c4c:	20000020 	.word	0x20000020

08003c50 <strchr>:
 8003c50:	b2c9      	uxtb	r1, r1
 8003c52:	4603      	mov	r3, r0
 8003c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c58:	b11a      	cbz	r2, 8003c62 <strchr+0x12>
 8003c5a:	4291      	cmp	r1, r2
 8003c5c:	d1f9      	bne.n	8003c52 <strchr+0x2>
 8003c5e:	4618      	mov	r0, r3
 8003c60:	4770      	bx	lr
 8003c62:	2900      	cmp	r1, #0
 8003c64:	bf0c      	ite	eq
 8003c66:	4618      	moveq	r0, r3
 8003c68:	2000      	movne	r0, #0
 8003c6a:	4770      	bx	lr

08003c6c <strcpy>:
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c72:	f803 2b01 	strb.w	r2, [r3], #1
 8003c76:	2a00      	cmp	r2, #0
 8003c78:	d1f9      	bne.n	8003c6e <strcpy+0x2>
 8003c7a:	4770      	bx	lr

08003c7c <strncpy>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	4604      	mov	r4, r0
 8003c80:	b902      	cbnz	r2, 8003c84 <strncpy+0x8>
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	4623      	mov	r3, r4
 8003c86:	f811 5b01 	ldrb.w	r5, [r1], #1
 8003c8a:	f803 5b01 	strb.w	r5, [r3], #1
 8003c8e:	1e56      	subs	r6, r2, #1
 8003c90:	b91d      	cbnz	r5, 8003c9a <strncpy+0x1e>
 8003c92:	4414      	add	r4, r2
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	d103      	bne.n	8003ca0 <strncpy+0x24>
 8003c98:	bd70      	pop	{r4, r5, r6, pc}
 8003c9a:	461c      	mov	r4, r3
 8003c9c:	4632      	mov	r2, r6
 8003c9e:	e7ef      	b.n	8003c80 <strncpy+0x4>
 8003ca0:	f803 5b01 	strb.w	r5, [r3], #1
 8003ca4:	e7f6      	b.n	8003c94 <strncpy+0x18>

08003ca6 <strstr>:
 8003ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca8:	7803      	ldrb	r3, [r0, #0]
 8003caa:	b133      	cbz	r3, 8003cba <strstr+0x14>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	1c5e      	adds	r6, r3, #1
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	b933      	cbnz	r3, 8003cc4 <strstr+0x1e>
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cba:	780b      	ldrb	r3, [r1, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf18      	it	ne
 8003cc0:	2000      	movne	r0, #0
 8003cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc4:	1e4d      	subs	r5, r1, #1
 8003cc6:	1e44      	subs	r4, r0, #1
 8003cc8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003ccc:	2a00      	cmp	r2, #0
 8003cce:	d0f3      	beq.n	8003cb8 <strstr+0x12>
 8003cd0:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8003cd4:	4297      	cmp	r7, r2
 8003cd6:	4633      	mov	r3, r6
 8003cd8:	d0f6      	beq.n	8003cc8 <strstr+0x22>
 8003cda:	e7e8      	b.n	8003cae <strstr+0x8>

08003cdc <strtok>:
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <strtok+0x50>)
 8003cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce2:	681d      	ldr	r5, [r3, #0]
 8003ce4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003ce6:	4606      	mov	r6, r0
 8003ce8:	460f      	mov	r7, r1
 8003cea:	b9b4      	cbnz	r4, 8003d1a <strtok+0x3e>
 8003cec:	2050      	movs	r0, #80	; 0x50
 8003cee:	f000 f849 	bl	8003d84 <malloc>
 8003cf2:	65a8      	str	r0, [r5, #88]	; 0x58
 8003cf4:	6004      	str	r4, [r0, #0]
 8003cf6:	6044      	str	r4, [r0, #4]
 8003cf8:	6084      	str	r4, [r0, #8]
 8003cfa:	60c4      	str	r4, [r0, #12]
 8003cfc:	6104      	str	r4, [r0, #16]
 8003cfe:	6144      	str	r4, [r0, #20]
 8003d00:	6184      	str	r4, [r0, #24]
 8003d02:	6284      	str	r4, [r0, #40]	; 0x28
 8003d04:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003d06:	6304      	str	r4, [r0, #48]	; 0x30
 8003d08:	6344      	str	r4, [r0, #52]	; 0x34
 8003d0a:	6384      	str	r4, [r0, #56]	; 0x38
 8003d0c:	63c4      	str	r4, [r0, #60]	; 0x3c
 8003d0e:	6404      	str	r4, [r0, #64]	; 0x40
 8003d10:	6444      	str	r4, [r0, #68]	; 0x44
 8003d12:	6484      	str	r4, [r0, #72]	; 0x48
 8003d14:	64c4      	str	r4, [r0, #76]	; 0x4c
 8003d16:	7704      	strb	r4, [r0, #28]
 8003d18:	6244      	str	r4, [r0, #36]	; 0x24
 8003d1a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	4630      	mov	r0, r6
 8003d20:	2301      	movs	r3, #1
 8003d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d26:	f000 b803 	b.w	8003d30 <__strtok_r>
 8003d2a:	bf00      	nop
 8003d2c:	20000020 	.word	0x20000020

08003d30 <__strtok_r>:
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d32:	b918      	cbnz	r0, 8003d3c <__strtok_r+0xc>
 8003d34:	6810      	ldr	r0, [r2, #0]
 8003d36:	b908      	cbnz	r0, 8003d3c <__strtok_r+0xc>
 8003d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	460f      	mov	r7, r1
 8003d40:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003d44:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003d48:	b91e      	cbnz	r6, 8003d52 <__strtok_r+0x22>
 8003d4a:	b965      	cbnz	r5, 8003d66 <__strtok_r+0x36>
 8003d4c:	6015      	str	r5, [r2, #0]
 8003d4e:	4628      	mov	r0, r5
 8003d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d52:	42b5      	cmp	r5, r6
 8003d54:	d1f6      	bne.n	8003d44 <__strtok_r+0x14>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ef      	bne.n	8003d3a <__strtok_r+0xa>
 8003d5a:	6014      	str	r4, [r2, #0]
 8003d5c:	7003      	strb	r3, [r0, #0]
 8003d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d60:	461c      	mov	r4, r3
 8003d62:	e00c      	b.n	8003d7e <__strtok_r+0x4e>
 8003d64:	b915      	cbnz	r5, 8003d6c <__strtok_r+0x3c>
 8003d66:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003d6a:	460e      	mov	r6, r1
 8003d6c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003d70:	42ab      	cmp	r3, r5
 8003d72:	d1f7      	bne.n	8003d64 <__strtok_r+0x34>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f3      	beq.n	8003d60 <__strtok_r+0x30>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003d7e:	6014      	str	r4, [r2, #0]
 8003d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d84 <malloc>:
 8003d84:	4b02      	ldr	r3, [pc, #8]	; (8003d90 <malloc+0xc>)
 8003d86:	4601      	mov	r1, r0
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	f000 b851 	b.w	8003e30 <_malloc_r>
 8003d8e:	bf00      	nop
 8003d90:	20000020 	.word	0x20000020

08003d94 <_free_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4605      	mov	r5, r0
 8003d98:	2900      	cmp	r1, #0
 8003d9a:	d045      	beq.n	8003e28 <_free_r+0x94>
 8003d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003da0:	1f0c      	subs	r4, r1, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bfb8      	it	lt
 8003da6:	18e4      	addlt	r4, r4, r3
 8003da8:	f000 fbb0 	bl	800450c <__malloc_lock>
 8003dac:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <_free_r+0x98>)
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	4610      	mov	r0, r2
 8003db2:	b933      	cbnz	r3, 8003dc2 <_free_r+0x2e>
 8003db4:	6063      	str	r3, [r4, #4]
 8003db6:	6014      	str	r4, [r2, #0]
 8003db8:	4628      	mov	r0, r5
 8003dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dbe:	f000 bba6 	b.w	800450e <__malloc_unlock>
 8003dc2:	42a3      	cmp	r3, r4
 8003dc4:	d90c      	bls.n	8003de0 <_free_r+0x4c>
 8003dc6:	6821      	ldr	r1, [r4, #0]
 8003dc8:	1862      	adds	r2, r4, r1
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	bf04      	itt	eq
 8003dce:	681a      	ldreq	r2, [r3, #0]
 8003dd0:	685b      	ldreq	r3, [r3, #4]
 8003dd2:	6063      	str	r3, [r4, #4]
 8003dd4:	bf04      	itt	eq
 8003dd6:	1852      	addeq	r2, r2, r1
 8003dd8:	6022      	streq	r2, [r4, #0]
 8003dda:	6004      	str	r4, [r0, #0]
 8003ddc:	e7ec      	b.n	8003db8 <_free_r+0x24>
 8003dde:	4613      	mov	r3, r2
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	b10a      	cbz	r2, 8003de8 <_free_r+0x54>
 8003de4:	42a2      	cmp	r2, r4
 8003de6:	d9fa      	bls.n	8003dde <_free_r+0x4a>
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	1858      	adds	r0, r3, r1
 8003dec:	42a0      	cmp	r0, r4
 8003dee:	d10b      	bne.n	8003e08 <_free_r+0x74>
 8003df0:	6820      	ldr	r0, [r4, #0]
 8003df2:	4401      	add	r1, r0
 8003df4:	1858      	adds	r0, r3, r1
 8003df6:	4282      	cmp	r2, r0
 8003df8:	6019      	str	r1, [r3, #0]
 8003dfa:	d1dd      	bne.n	8003db8 <_free_r+0x24>
 8003dfc:	6810      	ldr	r0, [r2, #0]
 8003dfe:	6852      	ldr	r2, [r2, #4]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	4401      	add	r1, r0
 8003e04:	6019      	str	r1, [r3, #0]
 8003e06:	e7d7      	b.n	8003db8 <_free_r+0x24>
 8003e08:	d902      	bls.n	8003e10 <_free_r+0x7c>
 8003e0a:	230c      	movs	r3, #12
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	e7d3      	b.n	8003db8 <_free_r+0x24>
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	1821      	adds	r1, r4, r0
 8003e14:	428a      	cmp	r2, r1
 8003e16:	bf04      	itt	eq
 8003e18:	6811      	ldreq	r1, [r2, #0]
 8003e1a:	6852      	ldreq	r2, [r2, #4]
 8003e1c:	6062      	str	r2, [r4, #4]
 8003e1e:	bf04      	itt	eq
 8003e20:	1809      	addeq	r1, r1, r0
 8003e22:	6021      	streq	r1, [r4, #0]
 8003e24:	605c      	str	r4, [r3, #4]
 8003e26:	e7c7      	b.n	8003db8 <_free_r+0x24>
 8003e28:	bd38      	pop	{r3, r4, r5, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200001f4 	.word	0x200001f4

08003e30 <_malloc_r>:
 8003e30:	b570      	push	{r4, r5, r6, lr}
 8003e32:	1ccd      	adds	r5, r1, #3
 8003e34:	f025 0503 	bic.w	r5, r5, #3
 8003e38:	3508      	adds	r5, #8
 8003e3a:	2d0c      	cmp	r5, #12
 8003e3c:	bf38      	it	cc
 8003e3e:	250c      	movcc	r5, #12
 8003e40:	2d00      	cmp	r5, #0
 8003e42:	4606      	mov	r6, r0
 8003e44:	db01      	blt.n	8003e4a <_malloc_r+0x1a>
 8003e46:	42a9      	cmp	r1, r5
 8003e48:	d903      	bls.n	8003e52 <_malloc_r+0x22>
 8003e4a:	230c      	movs	r3, #12
 8003e4c:	6033      	str	r3, [r6, #0]
 8003e4e:	2000      	movs	r0, #0
 8003e50:	bd70      	pop	{r4, r5, r6, pc}
 8003e52:	f000 fb5b 	bl	800450c <__malloc_lock>
 8003e56:	4a23      	ldr	r2, [pc, #140]	; (8003ee4 <_malloc_r+0xb4>)
 8003e58:	6814      	ldr	r4, [r2, #0]
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	b991      	cbnz	r1, 8003e84 <_malloc_r+0x54>
 8003e5e:	4c22      	ldr	r4, [pc, #136]	; (8003ee8 <_malloc_r+0xb8>)
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	b91b      	cbnz	r3, 8003e6c <_malloc_r+0x3c>
 8003e64:	4630      	mov	r0, r6
 8003e66:	f000 fb27 	bl	80044b8 <_sbrk_r>
 8003e6a:	6020      	str	r0, [r4, #0]
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f000 fb22 	bl	80044b8 <_sbrk_r>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d126      	bne.n	8003ec6 <_malloc_r+0x96>
 8003e78:	230c      	movs	r3, #12
 8003e7a:	6033      	str	r3, [r6, #0]
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	f000 fb46 	bl	800450e <__malloc_unlock>
 8003e82:	e7e4      	b.n	8003e4e <_malloc_r+0x1e>
 8003e84:	680b      	ldr	r3, [r1, #0]
 8003e86:	1b5b      	subs	r3, r3, r5
 8003e88:	d41a      	bmi.n	8003ec0 <_malloc_r+0x90>
 8003e8a:	2b0b      	cmp	r3, #11
 8003e8c:	d90f      	bls.n	8003eae <_malloc_r+0x7e>
 8003e8e:	600b      	str	r3, [r1, #0]
 8003e90:	50cd      	str	r5, [r1, r3]
 8003e92:	18cc      	adds	r4, r1, r3
 8003e94:	4630      	mov	r0, r6
 8003e96:	f000 fb3a 	bl	800450e <__malloc_unlock>
 8003e9a:	f104 000b 	add.w	r0, r4, #11
 8003e9e:	1d23      	adds	r3, r4, #4
 8003ea0:	f020 0007 	bic.w	r0, r0, #7
 8003ea4:	1ac3      	subs	r3, r0, r3
 8003ea6:	d01b      	beq.n	8003ee0 <_malloc_r+0xb0>
 8003ea8:	425a      	negs	r2, r3
 8003eaa:	50e2      	str	r2, [r4, r3]
 8003eac:	bd70      	pop	{r4, r5, r6, pc}
 8003eae:	428c      	cmp	r4, r1
 8003eb0:	bf0d      	iteet	eq
 8003eb2:	6863      	ldreq	r3, [r4, #4]
 8003eb4:	684b      	ldrne	r3, [r1, #4]
 8003eb6:	6063      	strne	r3, [r4, #4]
 8003eb8:	6013      	streq	r3, [r2, #0]
 8003eba:	bf18      	it	ne
 8003ebc:	460c      	movne	r4, r1
 8003ebe:	e7e9      	b.n	8003e94 <_malloc_r+0x64>
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	6849      	ldr	r1, [r1, #4]
 8003ec4:	e7ca      	b.n	8003e5c <_malloc_r+0x2c>
 8003ec6:	1cc4      	adds	r4, r0, #3
 8003ec8:	f024 0403 	bic.w	r4, r4, #3
 8003ecc:	42a0      	cmp	r0, r4
 8003ece:	d005      	beq.n	8003edc <_malloc_r+0xac>
 8003ed0:	1a21      	subs	r1, r4, r0
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	f000 faf0 	bl	80044b8 <_sbrk_r>
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d0cd      	beq.n	8003e78 <_malloc_r+0x48>
 8003edc:	6025      	str	r5, [r4, #0]
 8003ede:	e7d9      	b.n	8003e94 <_malloc_r+0x64>
 8003ee0:	bd70      	pop	{r4, r5, r6, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200001f4 	.word	0x200001f4
 8003ee8:	200001f8 	.word	0x200001f8

08003eec <__ssputs_r>:
 8003eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef0:	688e      	ldr	r6, [r1, #8]
 8003ef2:	429e      	cmp	r6, r3
 8003ef4:	4682      	mov	sl, r0
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	4691      	mov	r9, r2
 8003efa:	4698      	mov	r8, r3
 8003efc:	d835      	bhi.n	8003f6a <__ssputs_r+0x7e>
 8003efe:	898a      	ldrh	r2, [r1, #12]
 8003f00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f04:	d031      	beq.n	8003f6a <__ssputs_r+0x7e>
 8003f06:	6825      	ldr	r5, [r4, #0]
 8003f08:	6909      	ldr	r1, [r1, #16]
 8003f0a:	1a6f      	subs	r7, r5, r1
 8003f0c:	6965      	ldr	r5, [r4, #20]
 8003f0e:	2302      	movs	r3, #2
 8003f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f14:	fb95 f5f3 	sdiv	r5, r5, r3
 8003f18:	f108 0301 	add.w	r3, r8, #1
 8003f1c:	443b      	add	r3, r7
 8003f1e:	429d      	cmp	r5, r3
 8003f20:	bf38      	it	cc
 8003f22:	461d      	movcc	r5, r3
 8003f24:	0553      	lsls	r3, r2, #21
 8003f26:	d531      	bpl.n	8003f8c <__ssputs_r+0xa0>
 8003f28:	4629      	mov	r1, r5
 8003f2a:	f7ff ff81 	bl	8003e30 <_malloc_r>
 8003f2e:	4606      	mov	r6, r0
 8003f30:	b950      	cbnz	r0, 8003f48 <__ssputs_r+0x5c>
 8003f32:	230c      	movs	r3, #12
 8003f34:	f8ca 3000 	str.w	r3, [sl]
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f3e:	81a3      	strh	r3, [r4, #12]
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295
 8003f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f48:	463a      	mov	r2, r7
 8003f4a:	6921      	ldr	r1, [r4, #16]
 8003f4c:	f7ff fe50 	bl	8003bf0 <memcpy>
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5a:	81a3      	strh	r3, [r4, #12]
 8003f5c:	6126      	str	r6, [r4, #16]
 8003f5e:	6165      	str	r5, [r4, #20]
 8003f60:	443e      	add	r6, r7
 8003f62:	1bed      	subs	r5, r5, r7
 8003f64:	6026      	str	r6, [r4, #0]
 8003f66:	60a5      	str	r5, [r4, #8]
 8003f68:	4646      	mov	r6, r8
 8003f6a:	4546      	cmp	r6, r8
 8003f6c:	bf28      	it	cs
 8003f6e:	4646      	movcs	r6, r8
 8003f70:	4632      	mov	r2, r6
 8003f72:	4649      	mov	r1, r9
 8003f74:	6820      	ldr	r0, [r4, #0]
 8003f76:	f000 faaf 	bl	80044d8 <memmove>
 8003f7a:	68a3      	ldr	r3, [r4, #8]
 8003f7c:	1b9b      	subs	r3, r3, r6
 8003f7e:	60a3      	str	r3, [r4, #8]
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	441e      	add	r6, r3
 8003f84:	6026      	str	r6, [r4, #0]
 8003f86:	2000      	movs	r0, #0
 8003f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f8c:	462a      	mov	r2, r5
 8003f8e:	f000 fabf 	bl	8004510 <_realloc_r>
 8003f92:	4606      	mov	r6, r0
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d1e1      	bne.n	8003f5c <__ssputs_r+0x70>
 8003f98:	6921      	ldr	r1, [r4, #16]
 8003f9a:	4650      	mov	r0, sl
 8003f9c:	f7ff fefa 	bl	8003d94 <_free_r>
 8003fa0:	e7c7      	b.n	8003f32 <__ssputs_r+0x46>
	...

08003fa4 <_svfiprintf_r>:
 8003fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa8:	b09d      	sub	sp, #116	; 0x74
 8003faa:	4680      	mov	r8, r0
 8003fac:	9303      	str	r3, [sp, #12]
 8003fae:	898b      	ldrh	r3, [r1, #12]
 8003fb0:	061c      	lsls	r4, r3, #24
 8003fb2:	460d      	mov	r5, r1
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	d50f      	bpl.n	8003fd8 <_svfiprintf_r+0x34>
 8003fb8:	690b      	ldr	r3, [r1, #16]
 8003fba:	b96b      	cbnz	r3, 8003fd8 <_svfiprintf_r+0x34>
 8003fbc:	2140      	movs	r1, #64	; 0x40
 8003fbe:	f7ff ff37 	bl	8003e30 <_malloc_r>
 8003fc2:	6028      	str	r0, [r5, #0]
 8003fc4:	6128      	str	r0, [r5, #16]
 8003fc6:	b928      	cbnz	r0, 8003fd4 <_svfiprintf_r+0x30>
 8003fc8:	230c      	movs	r3, #12
 8003fca:	f8c8 3000 	str.w	r3, [r8]
 8003fce:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd2:	e0c5      	b.n	8004160 <_svfiprintf_r+0x1bc>
 8003fd4:	2340      	movs	r3, #64	; 0x40
 8003fd6:	616b      	str	r3, [r5, #20]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9309      	str	r3, [sp, #36]	; 0x24
 8003fdc:	2320      	movs	r3, #32
 8003fde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fe2:	2330      	movs	r3, #48	; 0x30
 8003fe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fe8:	f04f 0b01 	mov.w	fp, #1
 8003fec:	4637      	mov	r7, r6
 8003fee:	463c      	mov	r4, r7
 8003ff0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d13c      	bne.n	8004072 <_svfiprintf_r+0xce>
 8003ff8:	ebb7 0a06 	subs.w	sl, r7, r6
 8003ffc:	d00b      	beq.n	8004016 <_svfiprintf_r+0x72>
 8003ffe:	4653      	mov	r3, sl
 8004000:	4632      	mov	r2, r6
 8004002:	4629      	mov	r1, r5
 8004004:	4640      	mov	r0, r8
 8004006:	f7ff ff71 	bl	8003eec <__ssputs_r>
 800400a:	3001      	adds	r0, #1
 800400c:	f000 80a3 	beq.w	8004156 <_svfiprintf_r+0x1b2>
 8004010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004012:	4453      	add	r3, sl
 8004014:	9309      	str	r3, [sp, #36]	; 0x24
 8004016:	783b      	ldrb	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 809c 	beq.w	8004156 <_svfiprintf_r+0x1b2>
 800401e:	2300      	movs	r3, #0
 8004020:	f04f 32ff 	mov.w	r2, #4294967295
 8004024:	9304      	str	r3, [sp, #16]
 8004026:	9307      	str	r3, [sp, #28]
 8004028:	9205      	str	r2, [sp, #20]
 800402a:	9306      	str	r3, [sp, #24]
 800402c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004030:	931a      	str	r3, [sp, #104]	; 0x68
 8004032:	2205      	movs	r2, #5
 8004034:	7821      	ldrb	r1, [r4, #0]
 8004036:	4850      	ldr	r0, [pc, #320]	; (8004178 <_svfiprintf_r+0x1d4>)
 8004038:	f7fc f8d2 	bl	80001e0 <memchr>
 800403c:	1c67      	adds	r7, r4, #1
 800403e:	9b04      	ldr	r3, [sp, #16]
 8004040:	b9d8      	cbnz	r0, 800407a <_svfiprintf_r+0xd6>
 8004042:	06d9      	lsls	r1, r3, #27
 8004044:	bf44      	itt	mi
 8004046:	2220      	movmi	r2, #32
 8004048:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800404c:	071a      	lsls	r2, r3, #28
 800404e:	bf44      	itt	mi
 8004050:	222b      	movmi	r2, #43	; 0x2b
 8004052:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004056:	7822      	ldrb	r2, [r4, #0]
 8004058:	2a2a      	cmp	r2, #42	; 0x2a
 800405a:	d016      	beq.n	800408a <_svfiprintf_r+0xe6>
 800405c:	9a07      	ldr	r2, [sp, #28]
 800405e:	2100      	movs	r1, #0
 8004060:	200a      	movs	r0, #10
 8004062:	4627      	mov	r7, r4
 8004064:	3401      	adds	r4, #1
 8004066:	783b      	ldrb	r3, [r7, #0]
 8004068:	3b30      	subs	r3, #48	; 0x30
 800406a:	2b09      	cmp	r3, #9
 800406c:	d951      	bls.n	8004112 <_svfiprintf_r+0x16e>
 800406e:	b1c9      	cbz	r1, 80040a4 <_svfiprintf_r+0x100>
 8004070:	e011      	b.n	8004096 <_svfiprintf_r+0xf2>
 8004072:	2b25      	cmp	r3, #37	; 0x25
 8004074:	d0c0      	beq.n	8003ff8 <_svfiprintf_r+0x54>
 8004076:	4627      	mov	r7, r4
 8004078:	e7b9      	b.n	8003fee <_svfiprintf_r+0x4a>
 800407a:	4a3f      	ldr	r2, [pc, #252]	; (8004178 <_svfiprintf_r+0x1d4>)
 800407c:	1a80      	subs	r0, r0, r2
 800407e:	fa0b f000 	lsl.w	r0, fp, r0
 8004082:	4318      	orrs	r0, r3
 8004084:	9004      	str	r0, [sp, #16]
 8004086:	463c      	mov	r4, r7
 8004088:	e7d3      	b.n	8004032 <_svfiprintf_r+0x8e>
 800408a:	9a03      	ldr	r2, [sp, #12]
 800408c:	1d11      	adds	r1, r2, #4
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	9103      	str	r1, [sp, #12]
 8004092:	2a00      	cmp	r2, #0
 8004094:	db01      	blt.n	800409a <_svfiprintf_r+0xf6>
 8004096:	9207      	str	r2, [sp, #28]
 8004098:	e004      	b.n	80040a4 <_svfiprintf_r+0x100>
 800409a:	4252      	negs	r2, r2
 800409c:	f043 0302 	orr.w	r3, r3, #2
 80040a0:	9207      	str	r2, [sp, #28]
 80040a2:	9304      	str	r3, [sp, #16]
 80040a4:	783b      	ldrb	r3, [r7, #0]
 80040a6:	2b2e      	cmp	r3, #46	; 0x2e
 80040a8:	d10e      	bne.n	80040c8 <_svfiprintf_r+0x124>
 80040aa:	787b      	ldrb	r3, [r7, #1]
 80040ac:	2b2a      	cmp	r3, #42	; 0x2a
 80040ae:	f107 0101 	add.w	r1, r7, #1
 80040b2:	d132      	bne.n	800411a <_svfiprintf_r+0x176>
 80040b4:	9b03      	ldr	r3, [sp, #12]
 80040b6:	1d1a      	adds	r2, r3, #4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	9203      	str	r2, [sp, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bfb8      	it	lt
 80040c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80040c4:	3702      	adds	r7, #2
 80040c6:	9305      	str	r3, [sp, #20]
 80040c8:	4c2c      	ldr	r4, [pc, #176]	; (800417c <_svfiprintf_r+0x1d8>)
 80040ca:	7839      	ldrb	r1, [r7, #0]
 80040cc:	2203      	movs	r2, #3
 80040ce:	4620      	mov	r0, r4
 80040d0:	f7fc f886 	bl	80001e0 <memchr>
 80040d4:	b138      	cbz	r0, 80040e6 <_svfiprintf_r+0x142>
 80040d6:	2340      	movs	r3, #64	; 0x40
 80040d8:	1b00      	subs	r0, r0, r4
 80040da:	fa03 f000 	lsl.w	r0, r3, r0
 80040de:	9b04      	ldr	r3, [sp, #16]
 80040e0:	4303      	orrs	r3, r0
 80040e2:	9304      	str	r3, [sp, #16]
 80040e4:	3701      	adds	r7, #1
 80040e6:	7839      	ldrb	r1, [r7, #0]
 80040e8:	4825      	ldr	r0, [pc, #148]	; (8004180 <_svfiprintf_r+0x1dc>)
 80040ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040ee:	2206      	movs	r2, #6
 80040f0:	1c7e      	adds	r6, r7, #1
 80040f2:	f7fc f875 	bl	80001e0 <memchr>
 80040f6:	2800      	cmp	r0, #0
 80040f8:	d035      	beq.n	8004166 <_svfiprintf_r+0x1c2>
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <_svfiprintf_r+0x1e0>)
 80040fc:	b9fb      	cbnz	r3, 800413e <_svfiprintf_r+0x19a>
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	3307      	adds	r3, #7
 8004102:	f023 0307 	bic.w	r3, r3, #7
 8004106:	3308      	adds	r3, #8
 8004108:	9303      	str	r3, [sp, #12]
 800410a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410c:	444b      	add	r3, r9
 800410e:	9309      	str	r3, [sp, #36]	; 0x24
 8004110:	e76c      	b.n	8003fec <_svfiprintf_r+0x48>
 8004112:	fb00 3202 	mla	r2, r0, r2, r3
 8004116:	2101      	movs	r1, #1
 8004118:	e7a3      	b.n	8004062 <_svfiprintf_r+0xbe>
 800411a:	2300      	movs	r3, #0
 800411c:	9305      	str	r3, [sp, #20]
 800411e:	4618      	mov	r0, r3
 8004120:	240a      	movs	r4, #10
 8004122:	460f      	mov	r7, r1
 8004124:	3101      	adds	r1, #1
 8004126:	783a      	ldrb	r2, [r7, #0]
 8004128:	3a30      	subs	r2, #48	; 0x30
 800412a:	2a09      	cmp	r2, #9
 800412c:	d903      	bls.n	8004136 <_svfiprintf_r+0x192>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ca      	beq.n	80040c8 <_svfiprintf_r+0x124>
 8004132:	9005      	str	r0, [sp, #20]
 8004134:	e7c8      	b.n	80040c8 <_svfiprintf_r+0x124>
 8004136:	fb04 2000 	mla	r0, r4, r0, r2
 800413a:	2301      	movs	r3, #1
 800413c:	e7f1      	b.n	8004122 <_svfiprintf_r+0x17e>
 800413e:	ab03      	add	r3, sp, #12
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	462a      	mov	r2, r5
 8004144:	4b10      	ldr	r3, [pc, #64]	; (8004188 <_svfiprintf_r+0x1e4>)
 8004146:	a904      	add	r1, sp, #16
 8004148:	4640      	mov	r0, r8
 800414a:	f3af 8000 	nop.w
 800414e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004152:	4681      	mov	r9, r0
 8004154:	d1d9      	bne.n	800410a <_svfiprintf_r+0x166>
 8004156:	89ab      	ldrh	r3, [r5, #12]
 8004158:	065b      	lsls	r3, r3, #25
 800415a:	f53f af38 	bmi.w	8003fce <_svfiprintf_r+0x2a>
 800415e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004160:	b01d      	add	sp, #116	; 0x74
 8004162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004166:	ab03      	add	r3, sp, #12
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	462a      	mov	r2, r5
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <_svfiprintf_r+0x1e4>)
 800416e:	a904      	add	r1, sp, #16
 8004170:	4640      	mov	r0, r8
 8004172:	f000 f881 	bl	8004278 <_printf_i>
 8004176:	e7ea      	b.n	800414e <_svfiprintf_r+0x1aa>
 8004178:	08004790 	.word	0x08004790
 800417c:	08004796 	.word	0x08004796
 8004180:	0800479a 	.word	0x0800479a
 8004184:	00000000 	.word	0x00000000
 8004188:	08003eed 	.word	0x08003eed

0800418c <_printf_common>:
 800418c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004190:	4691      	mov	r9, r2
 8004192:	461f      	mov	r7, r3
 8004194:	688a      	ldr	r2, [r1, #8]
 8004196:	690b      	ldr	r3, [r1, #16]
 8004198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800419c:	4293      	cmp	r3, r2
 800419e:	bfb8      	it	lt
 80041a0:	4613      	movlt	r3, r2
 80041a2:	f8c9 3000 	str.w	r3, [r9]
 80041a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041aa:	4606      	mov	r6, r0
 80041ac:	460c      	mov	r4, r1
 80041ae:	b112      	cbz	r2, 80041b6 <_printf_common+0x2a>
 80041b0:	3301      	adds	r3, #1
 80041b2:	f8c9 3000 	str.w	r3, [r9]
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	0699      	lsls	r1, r3, #26
 80041ba:	bf42      	ittt	mi
 80041bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80041c0:	3302      	addmi	r3, #2
 80041c2:	f8c9 3000 	strmi.w	r3, [r9]
 80041c6:	6825      	ldr	r5, [r4, #0]
 80041c8:	f015 0506 	ands.w	r5, r5, #6
 80041cc:	d107      	bne.n	80041de <_printf_common+0x52>
 80041ce:	f104 0a19 	add.w	sl, r4, #25
 80041d2:	68e3      	ldr	r3, [r4, #12]
 80041d4:	f8d9 2000 	ldr.w	r2, [r9]
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	429d      	cmp	r5, r3
 80041dc:	db29      	blt.n	8004232 <_printf_common+0xa6>
 80041de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	3300      	adds	r3, #0
 80041e6:	bf18      	it	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	0692      	lsls	r2, r2, #26
 80041ec:	d42e      	bmi.n	800424c <_printf_common+0xc0>
 80041ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041f2:	4639      	mov	r1, r7
 80041f4:	4630      	mov	r0, r6
 80041f6:	47c0      	blx	r8
 80041f8:	3001      	adds	r0, #1
 80041fa:	d021      	beq.n	8004240 <_printf_common+0xb4>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	68e5      	ldr	r5, [r4, #12]
 8004200:	f8d9 2000 	ldr.w	r2, [r9]
 8004204:	f003 0306 	and.w	r3, r3, #6
 8004208:	2b04      	cmp	r3, #4
 800420a:	bf08      	it	eq
 800420c:	1aad      	subeq	r5, r5, r2
 800420e:	68a3      	ldr	r3, [r4, #8]
 8004210:	6922      	ldr	r2, [r4, #16]
 8004212:	bf0c      	ite	eq
 8004214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004218:	2500      	movne	r5, #0
 800421a:	4293      	cmp	r3, r2
 800421c:	bfc4      	itt	gt
 800421e:	1a9b      	subgt	r3, r3, r2
 8004220:	18ed      	addgt	r5, r5, r3
 8004222:	f04f 0900 	mov.w	r9, #0
 8004226:	341a      	adds	r4, #26
 8004228:	454d      	cmp	r5, r9
 800422a:	d11b      	bne.n	8004264 <_printf_common+0xd8>
 800422c:	2000      	movs	r0, #0
 800422e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004232:	2301      	movs	r3, #1
 8004234:	4652      	mov	r2, sl
 8004236:	4639      	mov	r1, r7
 8004238:	4630      	mov	r0, r6
 800423a:	47c0      	blx	r8
 800423c:	3001      	adds	r0, #1
 800423e:	d103      	bne.n	8004248 <_printf_common+0xbc>
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004248:	3501      	adds	r5, #1
 800424a:	e7c2      	b.n	80041d2 <_printf_common+0x46>
 800424c:	18e1      	adds	r1, r4, r3
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	2030      	movs	r0, #48	; 0x30
 8004252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004256:	4422      	add	r2, r4
 8004258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800425c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004260:	3302      	adds	r3, #2
 8004262:	e7c4      	b.n	80041ee <_printf_common+0x62>
 8004264:	2301      	movs	r3, #1
 8004266:	4622      	mov	r2, r4
 8004268:	4639      	mov	r1, r7
 800426a:	4630      	mov	r0, r6
 800426c:	47c0      	blx	r8
 800426e:	3001      	adds	r0, #1
 8004270:	d0e6      	beq.n	8004240 <_printf_common+0xb4>
 8004272:	f109 0901 	add.w	r9, r9, #1
 8004276:	e7d7      	b.n	8004228 <_printf_common+0x9c>

08004278 <_printf_i>:
 8004278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800427c:	4617      	mov	r7, r2
 800427e:	7e0a      	ldrb	r2, [r1, #24]
 8004280:	b085      	sub	sp, #20
 8004282:	2a6e      	cmp	r2, #110	; 0x6e
 8004284:	4698      	mov	r8, r3
 8004286:	4606      	mov	r6, r0
 8004288:	460c      	mov	r4, r1
 800428a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800428c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004290:	f000 80bc 	beq.w	800440c <_printf_i+0x194>
 8004294:	d81a      	bhi.n	80042cc <_printf_i+0x54>
 8004296:	2a63      	cmp	r2, #99	; 0x63
 8004298:	d02e      	beq.n	80042f8 <_printf_i+0x80>
 800429a:	d80a      	bhi.n	80042b2 <_printf_i+0x3a>
 800429c:	2a00      	cmp	r2, #0
 800429e:	f000 80c8 	beq.w	8004432 <_printf_i+0x1ba>
 80042a2:	2a58      	cmp	r2, #88	; 0x58
 80042a4:	f000 808a 	beq.w	80043bc <_printf_i+0x144>
 80042a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80042b0:	e02a      	b.n	8004308 <_printf_i+0x90>
 80042b2:	2a64      	cmp	r2, #100	; 0x64
 80042b4:	d001      	beq.n	80042ba <_printf_i+0x42>
 80042b6:	2a69      	cmp	r2, #105	; 0x69
 80042b8:	d1f6      	bne.n	80042a8 <_printf_i+0x30>
 80042ba:	6821      	ldr	r1, [r4, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80042c2:	d023      	beq.n	800430c <_printf_i+0x94>
 80042c4:	1d11      	adds	r1, r2, #4
 80042c6:	6019      	str	r1, [r3, #0]
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	e027      	b.n	800431c <_printf_i+0xa4>
 80042cc:	2a73      	cmp	r2, #115	; 0x73
 80042ce:	f000 80b4 	beq.w	800443a <_printf_i+0x1c2>
 80042d2:	d808      	bhi.n	80042e6 <_printf_i+0x6e>
 80042d4:	2a6f      	cmp	r2, #111	; 0x6f
 80042d6:	d02a      	beq.n	800432e <_printf_i+0xb6>
 80042d8:	2a70      	cmp	r2, #112	; 0x70
 80042da:	d1e5      	bne.n	80042a8 <_printf_i+0x30>
 80042dc:	680a      	ldr	r2, [r1, #0]
 80042de:	f042 0220 	orr.w	r2, r2, #32
 80042e2:	600a      	str	r2, [r1, #0]
 80042e4:	e003      	b.n	80042ee <_printf_i+0x76>
 80042e6:	2a75      	cmp	r2, #117	; 0x75
 80042e8:	d021      	beq.n	800432e <_printf_i+0xb6>
 80042ea:	2a78      	cmp	r2, #120	; 0x78
 80042ec:	d1dc      	bne.n	80042a8 <_printf_i+0x30>
 80042ee:	2278      	movs	r2, #120	; 0x78
 80042f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80042f4:	496e      	ldr	r1, [pc, #440]	; (80044b0 <_printf_i+0x238>)
 80042f6:	e064      	b.n	80043c2 <_printf_i+0x14a>
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80042fe:	1d11      	adds	r1, r2, #4
 8004300:	6019      	str	r1, [r3, #0]
 8004302:	6813      	ldr	r3, [r2, #0]
 8004304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004308:	2301      	movs	r3, #1
 800430a:	e0a3      	b.n	8004454 <_printf_i+0x1dc>
 800430c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004310:	f102 0104 	add.w	r1, r2, #4
 8004314:	6019      	str	r1, [r3, #0]
 8004316:	d0d7      	beq.n	80042c8 <_printf_i+0x50>
 8004318:	f9b2 3000 	ldrsh.w	r3, [r2]
 800431c:	2b00      	cmp	r3, #0
 800431e:	da03      	bge.n	8004328 <_printf_i+0xb0>
 8004320:	222d      	movs	r2, #45	; 0x2d
 8004322:	425b      	negs	r3, r3
 8004324:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004328:	4962      	ldr	r1, [pc, #392]	; (80044b4 <_printf_i+0x23c>)
 800432a:	220a      	movs	r2, #10
 800432c:	e017      	b.n	800435e <_printf_i+0xe6>
 800432e:	6820      	ldr	r0, [r4, #0]
 8004330:	6819      	ldr	r1, [r3, #0]
 8004332:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004336:	d003      	beq.n	8004340 <_printf_i+0xc8>
 8004338:	1d08      	adds	r0, r1, #4
 800433a:	6018      	str	r0, [r3, #0]
 800433c:	680b      	ldr	r3, [r1, #0]
 800433e:	e006      	b.n	800434e <_printf_i+0xd6>
 8004340:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004344:	f101 0004 	add.w	r0, r1, #4
 8004348:	6018      	str	r0, [r3, #0]
 800434a:	d0f7      	beq.n	800433c <_printf_i+0xc4>
 800434c:	880b      	ldrh	r3, [r1, #0]
 800434e:	4959      	ldr	r1, [pc, #356]	; (80044b4 <_printf_i+0x23c>)
 8004350:	2a6f      	cmp	r2, #111	; 0x6f
 8004352:	bf14      	ite	ne
 8004354:	220a      	movne	r2, #10
 8004356:	2208      	moveq	r2, #8
 8004358:	2000      	movs	r0, #0
 800435a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800435e:	6865      	ldr	r5, [r4, #4]
 8004360:	60a5      	str	r5, [r4, #8]
 8004362:	2d00      	cmp	r5, #0
 8004364:	f2c0 809c 	blt.w	80044a0 <_printf_i+0x228>
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	f020 0004 	bic.w	r0, r0, #4
 800436e:	6020      	str	r0, [r4, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d13f      	bne.n	80043f4 <_printf_i+0x17c>
 8004374:	2d00      	cmp	r5, #0
 8004376:	f040 8095 	bne.w	80044a4 <_printf_i+0x22c>
 800437a:	4675      	mov	r5, lr
 800437c:	2a08      	cmp	r2, #8
 800437e:	d10b      	bne.n	8004398 <_printf_i+0x120>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	07da      	lsls	r2, r3, #31
 8004384:	d508      	bpl.n	8004398 <_printf_i+0x120>
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	6862      	ldr	r2, [r4, #4]
 800438a:	429a      	cmp	r2, r3
 800438c:	bfde      	ittt	le
 800438e:	2330      	movle	r3, #48	; 0x30
 8004390:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004394:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004398:	ebae 0305 	sub.w	r3, lr, r5
 800439c:	6123      	str	r3, [r4, #16]
 800439e:	f8cd 8000 	str.w	r8, [sp]
 80043a2:	463b      	mov	r3, r7
 80043a4:	aa03      	add	r2, sp, #12
 80043a6:	4621      	mov	r1, r4
 80043a8:	4630      	mov	r0, r6
 80043aa:	f7ff feef 	bl	800418c <_printf_common>
 80043ae:	3001      	adds	r0, #1
 80043b0:	d155      	bne.n	800445e <_printf_i+0x1e6>
 80043b2:	f04f 30ff 	mov.w	r0, #4294967295
 80043b6:	b005      	add	sp, #20
 80043b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80043c0:	493c      	ldr	r1, [pc, #240]	; (80044b4 <_printf_i+0x23c>)
 80043c2:	6822      	ldr	r2, [r4, #0]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80043ca:	f100 0504 	add.w	r5, r0, #4
 80043ce:	601d      	str	r5, [r3, #0]
 80043d0:	d001      	beq.n	80043d6 <_printf_i+0x15e>
 80043d2:	6803      	ldr	r3, [r0, #0]
 80043d4:	e002      	b.n	80043dc <_printf_i+0x164>
 80043d6:	0655      	lsls	r5, r2, #25
 80043d8:	d5fb      	bpl.n	80043d2 <_printf_i+0x15a>
 80043da:	8803      	ldrh	r3, [r0, #0]
 80043dc:	07d0      	lsls	r0, r2, #31
 80043de:	bf44      	itt	mi
 80043e0:	f042 0220 	orrmi.w	r2, r2, #32
 80043e4:	6022      	strmi	r2, [r4, #0]
 80043e6:	b91b      	cbnz	r3, 80043f0 <_printf_i+0x178>
 80043e8:	6822      	ldr	r2, [r4, #0]
 80043ea:	f022 0220 	bic.w	r2, r2, #32
 80043ee:	6022      	str	r2, [r4, #0]
 80043f0:	2210      	movs	r2, #16
 80043f2:	e7b1      	b.n	8004358 <_printf_i+0xe0>
 80043f4:	4675      	mov	r5, lr
 80043f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80043fa:	fb02 3310 	mls	r3, r2, r0, r3
 80043fe:	5ccb      	ldrb	r3, [r1, r3]
 8004400:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004404:	4603      	mov	r3, r0
 8004406:	2800      	cmp	r0, #0
 8004408:	d1f5      	bne.n	80043f6 <_printf_i+0x17e>
 800440a:	e7b7      	b.n	800437c <_printf_i+0x104>
 800440c:	6808      	ldr	r0, [r1, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	6949      	ldr	r1, [r1, #20]
 8004412:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004416:	d004      	beq.n	8004422 <_printf_i+0x1aa>
 8004418:	1d10      	adds	r0, r2, #4
 800441a:	6018      	str	r0, [r3, #0]
 800441c:	6813      	ldr	r3, [r2, #0]
 800441e:	6019      	str	r1, [r3, #0]
 8004420:	e007      	b.n	8004432 <_printf_i+0x1ba>
 8004422:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004426:	f102 0004 	add.w	r0, r2, #4
 800442a:	6018      	str	r0, [r3, #0]
 800442c:	6813      	ldr	r3, [r2, #0]
 800442e:	d0f6      	beq.n	800441e <_printf_i+0x1a6>
 8004430:	8019      	strh	r1, [r3, #0]
 8004432:	2300      	movs	r3, #0
 8004434:	6123      	str	r3, [r4, #16]
 8004436:	4675      	mov	r5, lr
 8004438:	e7b1      	b.n	800439e <_printf_i+0x126>
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	1d11      	adds	r1, r2, #4
 800443e:	6019      	str	r1, [r3, #0]
 8004440:	6815      	ldr	r5, [r2, #0]
 8004442:	6862      	ldr	r2, [r4, #4]
 8004444:	2100      	movs	r1, #0
 8004446:	4628      	mov	r0, r5
 8004448:	f7fb feca 	bl	80001e0 <memchr>
 800444c:	b108      	cbz	r0, 8004452 <_printf_i+0x1da>
 800444e:	1b40      	subs	r0, r0, r5
 8004450:	6060      	str	r0, [r4, #4]
 8004452:	6863      	ldr	r3, [r4, #4]
 8004454:	6123      	str	r3, [r4, #16]
 8004456:	2300      	movs	r3, #0
 8004458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800445c:	e79f      	b.n	800439e <_printf_i+0x126>
 800445e:	6923      	ldr	r3, [r4, #16]
 8004460:	462a      	mov	r2, r5
 8004462:	4639      	mov	r1, r7
 8004464:	4630      	mov	r0, r6
 8004466:	47c0      	blx	r8
 8004468:	3001      	adds	r0, #1
 800446a:	d0a2      	beq.n	80043b2 <_printf_i+0x13a>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	079b      	lsls	r3, r3, #30
 8004470:	d507      	bpl.n	8004482 <_printf_i+0x20a>
 8004472:	2500      	movs	r5, #0
 8004474:	f104 0919 	add.w	r9, r4, #25
 8004478:	68e3      	ldr	r3, [r4, #12]
 800447a:	9a03      	ldr	r2, [sp, #12]
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	429d      	cmp	r5, r3
 8004480:	db05      	blt.n	800448e <_printf_i+0x216>
 8004482:	68e0      	ldr	r0, [r4, #12]
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	4298      	cmp	r0, r3
 8004488:	bfb8      	it	lt
 800448a:	4618      	movlt	r0, r3
 800448c:	e793      	b.n	80043b6 <_printf_i+0x13e>
 800448e:	2301      	movs	r3, #1
 8004490:	464a      	mov	r2, r9
 8004492:	4639      	mov	r1, r7
 8004494:	4630      	mov	r0, r6
 8004496:	47c0      	blx	r8
 8004498:	3001      	adds	r0, #1
 800449a:	d08a      	beq.n	80043b2 <_printf_i+0x13a>
 800449c:	3501      	adds	r5, #1
 800449e:	e7eb      	b.n	8004478 <_printf_i+0x200>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1a7      	bne.n	80043f4 <_printf_i+0x17c>
 80044a4:	780b      	ldrb	r3, [r1, #0]
 80044a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044ae:	e765      	b.n	800437c <_printf_i+0x104>
 80044b0:	080047b2 	.word	0x080047b2
 80044b4:	080047a1 	.word	0x080047a1

080044b8 <_sbrk_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4c06      	ldr	r4, [pc, #24]	; (80044d4 <_sbrk_r+0x1c>)
 80044bc:	2300      	movs	r3, #0
 80044be:	4605      	mov	r5, r0
 80044c0:	4608      	mov	r0, r1
 80044c2:	6023      	str	r3, [r4, #0]
 80044c4:	f000 f854 	bl	8004570 <_sbrk>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d102      	bne.n	80044d2 <_sbrk_r+0x1a>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	b103      	cbz	r3, 80044d2 <_sbrk_r+0x1a>
 80044d0:	602b      	str	r3, [r5, #0]
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	20000b44 	.word	0x20000b44

080044d8 <memmove>:
 80044d8:	4288      	cmp	r0, r1
 80044da:	b510      	push	{r4, lr}
 80044dc:	eb01 0302 	add.w	r3, r1, r2
 80044e0:	d803      	bhi.n	80044ea <memmove+0x12>
 80044e2:	1e42      	subs	r2, r0, #1
 80044e4:	4299      	cmp	r1, r3
 80044e6:	d10c      	bne.n	8004502 <memmove+0x2a>
 80044e8:	bd10      	pop	{r4, pc}
 80044ea:	4298      	cmp	r0, r3
 80044ec:	d2f9      	bcs.n	80044e2 <memmove+0xa>
 80044ee:	1881      	adds	r1, r0, r2
 80044f0:	1ad2      	subs	r2, r2, r3
 80044f2:	42d3      	cmn	r3, r2
 80044f4:	d100      	bne.n	80044f8 <memmove+0x20>
 80044f6:	bd10      	pop	{r4, pc}
 80044f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004500:	e7f7      	b.n	80044f2 <memmove+0x1a>
 8004502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004506:	f802 4f01 	strb.w	r4, [r2, #1]!
 800450a:	e7eb      	b.n	80044e4 <memmove+0xc>

0800450c <__malloc_lock>:
 800450c:	4770      	bx	lr

0800450e <__malloc_unlock>:
 800450e:	4770      	bx	lr

08004510 <_realloc_r>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	4607      	mov	r7, r0
 8004514:	4614      	mov	r4, r2
 8004516:	460e      	mov	r6, r1
 8004518:	b921      	cbnz	r1, 8004524 <_realloc_r+0x14>
 800451a:	4611      	mov	r1, r2
 800451c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004520:	f7ff bc86 	b.w	8003e30 <_malloc_r>
 8004524:	b922      	cbnz	r2, 8004530 <_realloc_r+0x20>
 8004526:	f7ff fc35 	bl	8003d94 <_free_r>
 800452a:	4625      	mov	r5, r4
 800452c:	4628      	mov	r0, r5
 800452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004530:	f000 f814 	bl	800455c <_malloc_usable_size_r>
 8004534:	4284      	cmp	r4, r0
 8004536:	d90f      	bls.n	8004558 <_realloc_r+0x48>
 8004538:	4621      	mov	r1, r4
 800453a:	4638      	mov	r0, r7
 800453c:	f7ff fc78 	bl	8003e30 <_malloc_r>
 8004540:	4605      	mov	r5, r0
 8004542:	2800      	cmp	r0, #0
 8004544:	d0f2      	beq.n	800452c <_realloc_r+0x1c>
 8004546:	4631      	mov	r1, r6
 8004548:	4622      	mov	r2, r4
 800454a:	f7ff fb51 	bl	8003bf0 <memcpy>
 800454e:	4631      	mov	r1, r6
 8004550:	4638      	mov	r0, r7
 8004552:	f7ff fc1f 	bl	8003d94 <_free_r>
 8004556:	e7e9      	b.n	800452c <_realloc_r+0x1c>
 8004558:	4635      	mov	r5, r6
 800455a:	e7e7      	b.n	800452c <_realloc_r+0x1c>

0800455c <_malloc_usable_size_r>:
 800455c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004560:	2800      	cmp	r0, #0
 8004562:	f1a0 0004 	sub.w	r0, r0, #4
 8004566:	bfbc      	itt	lt
 8004568:	580b      	ldrlt	r3, [r1, r0]
 800456a:	18c0      	addlt	r0, r0, r3
 800456c:	4770      	bx	lr
	...

08004570 <_sbrk>:
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <_sbrk+0x14>)
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	4602      	mov	r2, r0
 8004576:	b909      	cbnz	r1, 800457c <_sbrk+0xc>
 8004578:	4903      	ldr	r1, [pc, #12]	; (8004588 <_sbrk+0x18>)
 800457a:	6019      	str	r1, [r3, #0]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	4402      	add	r2, r0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	4770      	bx	lr
 8004584:	200001fc 	.word	0x200001fc
 8004588:	20000b48 	.word	0x20000b48

0800458c <_init>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr

08004598 <_fini>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	bf00      	nop
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr
