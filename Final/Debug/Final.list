
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000487c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004c34  08004c34  00014c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08004c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f30  20000080  08004cb8  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000fb0  08004cb8  00020fb0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002957b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000445a  00000000  00000000  0004962b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d83b  00000000  00000000  0004da85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010c0  00000000  00000000  0005b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001550  00000000  00000000  0005c380  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009a3f  00000000  00000000  0005d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000063fe  00000000  00000000  0006730f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006d70d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000036d8  00000000  00000000  0006d78c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049f4 	.word	0x080049f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080049f4 	.word	0x080049f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <I2Cx_Init.constprop.8>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 80005f0:	b5f0      	push	{r4, r5, r6, r7, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
  i2c_handler->Init.OwnAddress1      = 0;
 80005f2:	482a      	ldr	r0, [pc, #168]	; (800069c <I2Cx_Init.constprop.8+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80005f4:	4c2a      	ldr	r4, [pc, #168]	; (80006a0 <I2Cx_Init.constprop.8+0xb0>)
  i2c_handler->Init.OwnAddress1      = 0;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <I2Cx_Init.constprop.8+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80005f8:	4d2b      	ldr	r5, [pc, #172]	; (80006a8 <I2Cx_Init.constprop.8+0xb8>)
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80005fa:	4f2c      	ldr	r7, [pc, #176]	; (80006ac <I2Cx_Init.constprop.8+0xbc>)
  i2c_handler->Init.OwnAddress1      = 0;
 80005fc:	2600      	movs	r6, #0
 80005fe:	e884 0049 	stmia.w	r4, {r0, r3, r6}
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000602:	2201      	movs	r2, #1
 8000604:	60e2      	str	r2, [r4, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000606:	6126      	str	r6, [r4, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000608:	6166      	str	r6, [r4, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800060a:	61e6      	str	r6, [r4, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800060c:	6226      	str	r6, [r4, #32]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800060e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000616:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000618:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000622:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000624:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000628:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800062a:	2312      	movs	r3, #18
 800062c:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062e:	2303      	movs	r3, #3
 8000630:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000632:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000634:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000636:	4638      	mov	r0, r7
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000638:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800063a:	f000 f9e7 	bl	8000a0c <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800063e:	a903      	add	r1, sp, #12
 8000640:	4638      	mov	r0, r7
 8000642:	f000 f9e3 	bl	8000a0c <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000646:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800064c:	65ab      	str	r3, [r5, #88]	; 0x58
 800064e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8000658:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800065a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800065e:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000660:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000662:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000666:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000668:	4632      	mov	r2, r6
 800066a:	210f      	movs	r1, #15
 800066c:	2021      	movs	r0, #33	; 0x21
 800066e:	f000 f965 	bl	800093c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000672:	2021      	movs	r0, #33	; 0x21
 8000674:	f000 f996 	bl	80009a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000678:	4632      	mov	r2, r6
 800067a:	210f      	movs	r1, #15
 800067c:	2022      	movs	r0, #34	; 0x22
 800067e:	f000 f95d 	bl	800093c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000682:	2022      	movs	r0, #34	; 0x22
 8000684:	f000 f98e 	bl	80009a4 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8000688:	4620      	mov	r0, r4
 800068a:	f000 fc94 	bl	8000fb6 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800068e:	4631      	mov	r1, r6
 8000690:	4620      	mov	r0, r4
 8000692:	f000 fe71 	bl	8001378 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000696:	b009      	add	sp, #36	; 0x24
 8000698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800069a:	bf00      	nop
 800069c:	40005800 	.word	0x40005800
 80006a0:	20000270 	.word	0x20000270
 80006a4:	00702681 	.word	0x00702681
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48000400 	.word	0x48000400

080006b0 <BSP_PB_Init>:
{
 80006b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <BSP_PB_Init+0x6c>)
 80006b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b6:	f042 0204 	orr.w	r2, r2, #4
 80006ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 80006c6:	b981      	cbnz	r1, 80006ea <BSP_PB_Init+0x3a>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80006c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006cc:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2302      	movs	r3, #2
 80006d4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <BSP_PB_Init+0x70>)
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80006d8:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80006da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80006de:	a901      	add	r1, sp, #4
 80006e0:	f000 f994 	bl	8000a0c <HAL_GPIO_Init>
}
 80006e4:	b007      	add	sp, #28
 80006e6:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 80006ea:	2901      	cmp	r1, #1
 80006ec:	d1fa      	bne.n	80006e4 <BSP_PB_Init+0x34>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80006ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f2:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <BSP_PB_Init+0x74>)
 80006fa:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <BSP_PB_Init+0x70>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 80006fe:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000700:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000704:	a901      	add	r1, sp, #4
 8000706:	f000 f981 	bl	8000a0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800070a:	2200      	movs	r2, #0
 800070c:	210f      	movs	r1, #15
 800070e:	2028      	movs	r0, #40	; 0x28
 8000710:	f000 f914 	bl	800093c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000714:	2028      	movs	r0, #40	; 0x28
 8000716:	f000 f945 	bl	80009a4 <HAL_NVIC_EnableIRQ>
}
 800071a:	e7e3      	b.n	80006e4 <BSP_PB_Init+0x34>
 800071c:	40021000 	.word	0x40021000
 8000720:	20000000 	.word	0x20000000
 8000724:	10110000 	.word	0x10110000

08000728 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8000728:	f7ff bf62 	b.w	80005f0 <I2Cx_Init.constprop.8>

0800072c <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800072c:	b510      	push	{r4, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000736:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	2301      	movs	r3, #1
 800073e:	460a      	mov	r2, r1
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	4601      	mov	r1, r0
 8000744:	9400      	str	r4, [sp, #0]
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <SENSOR_IO_Write+0x30>)
 8000748:	f000 fc9f 	bl	800108a <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800074c:	b120      	cbz	r0, 8000758 <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <SENSOR_IO_Write+0x30>)
 8000750:	f000 fc82 	bl	8001058 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000754:	f7ff ff4c 	bl	80005f0 <I2Cx_Init.constprop.8>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8000758:	b006      	add	sp, #24
 800075a:	bd10      	pop	{r4, pc}
 800075c:	20000270 	.word	0x20000270

08000760 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000760:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 8000762:	aa06      	add	r2, sp, #24
 8000764:	2300      	movs	r3, #0
 8000766:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	2301      	movs	r3, #1
 8000772:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000776:	460a      	mov	r2, r1
 8000778:	4601      	mov	r1, r0
 800077a:	4807      	ldr	r0, [pc, #28]	; (8000798 <SENSOR_IO_Read+0x38>)
 800077c:	f000 fd3e 	bl	80011fc <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000780:	b120      	cbz	r0, 800078c <SENSOR_IO_Read+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <SENSOR_IO_Read+0x38>)
 8000784:	f000 fc68 	bl	8001058 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000788:	f7ff ff32 	bl	80005f0 <I2Cx_Init.constprop.8>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 800078c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000790:	b007      	add	sp, #28
 8000792:	f85d fb04 	ldr.w	pc, [sp], #4
 8000796:	bf00      	nop
 8000798:	20000270 	.word	0x20000270

0800079c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800079c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800079e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80007a2:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 80007a6:	460a      	mov	r2, r1
 80007a8:	2301      	movs	r3, #1
 80007aa:	4601      	mov	r1, r0
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <SENSOR_IO_ReadMultiple+0x2c>)
 80007ae:	f000 fd25 	bl	80011fc <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80007b2:	4604      	mov	r4, r0
 80007b4:	b120      	cbz	r0, 80007c0 <SENSOR_IO_ReadMultiple+0x24>
  HAL_I2C_DeInit(i2c_handler);
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <SENSOR_IO_ReadMultiple+0x2c>)
 80007b8:	f000 fc4e 	bl	8001058 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80007bc:	f7ff ff18 	bl	80005f0 <I2Cx_Init.constprop.8>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 80007c0:	4620      	mov	r0, r4
 80007c2:	b004      	add	sp, #16
 80007c4:	bd10      	pop	{r4, pc}
 80007c6:	bf00      	nop
 80007c8:	20000270 	.word	0x20000270

080007cc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80007cc:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80007ce:	b2c4      	uxtb	r4, r0
 80007d0:	2120      	movs	r1, #32
 80007d2:	4620      	mov	r0, r4
 80007d4:	f7ff ffc4 	bl	8000760 <SENSOR_IO_Read>
 80007d8:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80007dc:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 80007e0:	4620      	mov	r0, r4
 80007e2:	2120      	movs	r1, #32
}
 80007e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80007e8:	f7ff bfa0 	b.w	800072c <SENSOR_IO_Write>

080007ec <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80007ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80007f0:	fa5f f880 	uxtb.w	r8, r0
 80007f4:	aa01      	add	r2, sp, #4
 80007f6:	2302      	movs	r3, #2
 80007f8:	21b2      	movs	r1, #178	; 0xb2
 80007fa:	4640      	mov	r0, r8
 80007fc:	f7ff ffce 	bl	800079c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8000800:	2135      	movs	r1, #53	; 0x35
 8000802:	4640      	mov	r0, r8
 8000804:	f7ff ffac 	bl	8000760 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000808:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800080a:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800080e:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000812:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000814:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000818:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 800081c:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 800081e:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000820:	2304      	movs	r3, #4
 8000822:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8000826:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000828:	21bc      	movs	r1, #188	; 0xbc
 800082a:	4640      	mov	r0, r8
 800082c:	f7ff ffb6 	bl	800079c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000830:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8000834:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000838:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800083c:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000840:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000844:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000846:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800084a:	21aa      	movs	r1, #170	; 0xaa
 800084c:	2302      	movs	r3, #2
 800084e:	4640      	mov	r0, r8
 8000850:	f7ff ffa4 	bl	800079c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000854:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000858:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800085c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000860:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000862:	b21b      	sxth	r3, r3
 8000864:	1bdb      	subs	r3, r3, r7
  T0_degC = T0_degC_x8_u16 >> 3;
 8000866:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	1bab      	subs	r3, r5, r6
 800086e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000872:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000876:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800087c:	1be4      	subs	r4, r4, r7
 800087e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000882:	ee07 4a10 	vmov	s14, r4
 8000886:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800088a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800088e:	ee07 6a90 	vmov	s15, r6
 8000892:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 8000896:	ee36 0a80 	vadd.f32	s0, s13, s0
 800089a:	b002      	add	sp, #8
 800089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_InitTick+0x24>)
{
 80008a4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80008b0:	f000 f884 	bl	80009bc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	4621      	mov	r1, r4
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f000 f83e 	bl	800093c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80008c0:	2000      	movs	r0, #0
 80008c2:	bd10      	pop	{r4, pc}
 80008c4:	20000018 	.word	0x20000018

080008c8 <HAL_Init>:
{
 80008c8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ca:	2003      	movs	r0, #3
 80008cc:	f000 f824 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff ffe5 	bl	80008a0 <HAL_InitTick>
  HAL_MspInit();
 80008d6:	f003 f9dd 	bl	8003c94 <HAL_MspInit>
}
 80008da:	2000      	movs	r0, #0
 80008dc:	bd08      	pop	{r3, pc}
	...

080008e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80008e0:	4a02      	ldr	r2, [pc, #8]	; (80008ec <HAL_IncTick+0xc>)
 80008e2:	6813      	ldr	r3, [r2, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	200002bc 	.word	0x200002bc

080008f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008f0:	4b01      	ldr	r3, [pc, #4]	; (80008f8 <HAL_GetTick+0x8>)
 80008f2:	6818      	ldr	r0, [r3, #0]
}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	200002bc 	.word	0x200002bc

080008fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008fc:	b538      	push	{r3, r4, r5, lr}
 80008fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000900:	f7ff fff6 	bl	80008f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000904:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000906:	4605      	mov	r5, r0
  {
    wait++;
 8000908:	bf18      	it	ne
 800090a:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 800090c:	f7ff fff0 	bl	80008f0 <HAL_GetTick>
 8000910:	1b40      	subs	r0, r0, r5
 8000912:	4284      	cmp	r4, r0
 8000914:	d8fa      	bhi.n	800090c <HAL_Delay+0x10>
  {
  }
}
 8000916:	bd38      	pop	{r3, r4, r5, pc}

08000918 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800091a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000920:	041b      	lsls	r3, r3, #16
 8000922:	0c1b      	lsrs	r3, r3, #16
 8000924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000928:	0200      	lsls	r0, r0, #8
 800092a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000932:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000934:	60d3      	str	r3, [r2, #12]
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093e:	b530      	push	{r4, r5, lr}
 8000940:	68dc      	ldr	r4, [r3, #12]
 8000942:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000946:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	2b04      	cmp	r3, #4
 800094e:	bf28      	it	cs
 8000950:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000952:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	f04f 0501 	mov.w	r5, #1
 8000958:	fa05 f303 	lsl.w	r3, r5, r3
 800095c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000960:	bf8c      	ite	hi
 8000962:	3c03      	subhi	r4, #3
 8000964:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000966:	4019      	ands	r1, r3
 8000968:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096a:	fa05 f404 	lsl.w	r4, r5, r4
 800096e:	3c01      	subs	r4, #1
 8000970:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000972:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	ea42 0201 	orr.w	r2, r2, r1
 8000978:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	bfaf      	iteee	ge
 800097e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	f000 000f 	andlt.w	r0, r0, #15
 8000986:	4b06      	ldrlt	r3, [pc, #24]	; (80009a0 <HAL_NVIC_SetPriority+0x64>)
 8000988:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	bfa5      	ittet	ge
 800098c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000990:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000998:	bd30      	pop	{r4, r5, pc}
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00
 80009a0:	e000ed14 	.word	0xe000ed14

080009a4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009a4:	0942      	lsrs	r2, r0, #5
 80009a6:	2301      	movs	r3, #1
 80009a8:	f000 001f 	and.w	r0, r0, #31
 80009ac:	fa03 f000 	lsl.w	r0, r3, r0
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <HAL_NVIC_EnableIRQ+0x14>)
 80009b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100

080009bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	3801      	subs	r0, #1
 80009be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009c2:	d20a      	bcs.n	80009da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	21f0      	movs	r1, #240	; 0xf0
 80009cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e010 	.word	0xe000e010
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009ea:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80009ec:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009ee:	bf0c      	ite	eq
 80009f0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009f4:	f022 0204 	bicne.w	r2, r2, #4
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	4770      	bx	lr
 80009fc:	e000e010 	.word	0xe000e010

08000a00 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a00:	4770      	bx	lr

08000a02 <HAL_SYSTICK_IRQHandler>:
{
 8000a02:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000a04:	f7ff fffc 	bl	8000a00 <HAL_SYSTICK_Callback>
 8000a08:	bd08      	pop	{r3, pc}
	...

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a10:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a12:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a14:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000bc0 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a18:	4c67      	ldr	r4, [pc, #412]	; (8000bb8 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a1a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8000a1c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a1e:	9a01      	ldr	r2, [sp, #4]
 8000a20:	40da      	lsrs	r2, r3
 8000a22:	d102      	bne.n	8000a2a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8000a24:	b005      	add	sp, #20
 8000a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a2a:	2601      	movs	r6, #1
    if(iocurrent)
 8000a2c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a2e:	409e      	lsls	r6, r3
    if(iocurrent)
 8000a30:	ea12 0e06 	ands.w	lr, r2, r6
 8000a34:	f000 80b1 	beq.w	8000b9a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a38:	684a      	ldr	r2, [r1, #4]
 8000a3a:	f022 0710 	bic.w	r7, r2, #16
 8000a3e:	2f02      	cmp	r7, #2
 8000a40:	d116      	bne.n	8000a70 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000a42:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000a46:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a4a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000a4e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a52:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000a56:	f04f 0c0f 	mov.w	ip, #15
 8000a5a:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000a5e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000a62:	690d      	ldr	r5, [r1, #16]
 8000a64:	fa05 f50a 	lsl.w	r5, r5, sl
 8000a68:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000a6c:	f8c9 5020 	str.w	r5, [r9, #32]
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000a74:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000a76:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000a7a:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a7e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a80:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000a84:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a88:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a8c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a8e:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a92:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000a94:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a98:	d811      	bhi.n	8000abe <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000a9a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000a9c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000aa0:	68cf      	ldr	r7, [r1, #12]
 8000aa2:	fa07 f70c 	lsl.w	r7, r7, ip
 8000aa6:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000aaa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000aac:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aae:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ab2:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000ab6:	409f      	lsls	r7, r3
 8000ab8:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000abc:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000abe:	f1ba 0f03 	cmp.w	sl, #3
 8000ac2:	d107      	bne.n	8000ad4 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000ac4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ac6:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000aca:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000ace:	409f      	lsls	r7, r3
 8000ad0:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000ad2:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000ad4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000ad6:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ad8:	688e      	ldr	r6, [r1, #8]
 8000ada:	fa06 f60c 	lsl.w	r6, r6, ip
 8000ade:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000ae0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae2:	00d5      	lsls	r5, r2, #3
 8000ae4:	d559      	bpl.n	8000b9a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000aea:	f045 0501 	orr.w	r5, r5, #1
 8000aee:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000af2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000af6:	f023 0603 	bic.w	r6, r3, #3
 8000afa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000afe:	f005 0501 	and.w	r5, r5, #1
 8000b02:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000b06:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b08:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000b0e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b14:	270f      	movs	r7, #15
 8000b16:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000b1a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b1e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000b22:	d03c      	beq.n	8000b9e <HAL_GPIO_Init+0x192>
 8000b24:	4d25      	ldr	r5, [pc, #148]	; (8000bbc <HAL_GPIO_Init+0x1b0>)
 8000b26:	42a8      	cmp	r0, r5
 8000b28:	d03b      	beq.n	8000ba2 <HAL_GPIO_Init+0x196>
 8000b2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b2e:	42a8      	cmp	r0, r5
 8000b30:	d039      	beq.n	8000ba6 <HAL_GPIO_Init+0x19a>
 8000b32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b36:	42a8      	cmp	r0, r5
 8000b38:	d037      	beq.n	8000baa <HAL_GPIO_Init+0x19e>
 8000b3a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b3e:	42a8      	cmp	r0, r5
 8000b40:	d035      	beq.n	8000bae <HAL_GPIO_Init+0x1a2>
 8000b42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b46:	42a8      	cmp	r0, r5
 8000b48:	d033      	beq.n	8000bb2 <HAL_GPIO_Init+0x1a6>
 8000b4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b4e:	42a8      	cmp	r0, r5
 8000b50:	bf14      	ite	ne
 8000b52:	2507      	movne	r5, #7
 8000b54:	2506      	moveq	r5, #6
 8000b56:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b5a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b5c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000b5e:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b60:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b64:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8000b66:	bf54      	ite	pl
 8000b68:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000b6a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000b6e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000b70:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b72:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8000b74:	bf54      	ite	pl
 8000b76:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000b78:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000b7c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000b7e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b80:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8000b82:	bf54      	ite	pl
 8000b84:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000b86:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000b8a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000b8c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b8e:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8000b90:	bf54      	ite	pl
 8000b92:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000b94:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000b98:	60e5      	str	r5, [r4, #12]
    position++;
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	e73f      	b.n	8000a1e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000b9e:	2500      	movs	r5, #0
 8000ba0:	e7d9      	b.n	8000b56 <HAL_GPIO_Init+0x14a>
 8000ba2:	2501      	movs	r5, #1
 8000ba4:	e7d7      	b.n	8000b56 <HAL_GPIO_Init+0x14a>
 8000ba6:	2502      	movs	r5, #2
 8000ba8:	e7d5      	b.n	8000b56 <HAL_GPIO_Init+0x14a>
 8000baa:	2503      	movs	r5, #3
 8000bac:	e7d3      	b.n	8000b56 <HAL_GPIO_Init+0x14a>
 8000bae:	2504      	movs	r5, #4
 8000bb0:	e7d1      	b.n	8000b56 <HAL_GPIO_Init+0x14a>
 8000bb2:	2505      	movs	r5, #5
 8000bb4:	e7cf      	b.n	8000b56 <HAL_GPIO_Init+0x14a>
 8000bb6:	bf00      	nop
 8000bb8:	40010400 	.word	0x40010400
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8000bc8:	4c47      	ldr	r4, [pc, #284]	; (8000ce8 <HAL_GPIO_DeInit+0x124>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8000bca:	f8df a124 	ldr.w	sl, [pc, #292]	; 8000cf0 <HAL_GPIO_DeInit+0x12c>
 8000bce:	f8df b124 	ldr.w	fp, [pc, #292]	; 8000cf4 <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00;
 8000bd2:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1U << position);
 8000bd4:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8000bd8:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != RESET)
 8000bdc:	fa31 f203 	lsrs.w	r2, r1, r3
 8000be0:	d102      	bne.n	8000be8 <HAL_GPIO_DeInit+0x24>
      }
    }
    
    position++;
  }
}
 8000be2:	b003      	add	sp, #12
 8000be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8000be8:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent)
 8000bec:	ea11 0206 	ands.w	r2, r1, r6
 8000bf0:	9201      	str	r2, [sp, #4]
 8000bf2:	d06a      	beq.n	8000cca <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8000bf4:	6807      	ldr	r7, [r0, #0]
 8000bf6:	005a      	lsls	r2, r3, #1
 8000bf8:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000bfc:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8000c00:	4317      	orrs	r7, r2
 8000c02:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000c06:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c08:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8000c0c:	f003 0e07 	and.w	lr, r3, #7
 8000c10:	463d      	mov	r5, r7
 8000c12:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c16:	270f      	movs	r7, #15
 8000c18:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000c1c:	ea25 0e0e 	bic.w	lr, r5, lr
 8000c20:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000c24:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8000c28:	43d2      	mvns	r2, r2
 8000c2a:	ea0e 0e02 	and.w	lr, lr, r2
 8000c2e:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c32:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000c36:	43f6      	mvns	r6, r6
 8000c38:	ea0e 0e06 	and.w	lr, lr, r6
 8000c3c:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000c40:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8000c44:	ea02 020e 	and.w	r2, r2, lr
 8000c48:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000c4a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000c4c:	4016      	ands	r6, r2
 8000c4e:	62c6      	str	r6, [r0, #44]	; 0x2c
 8000c50:	f023 0603 	bic.w	r6, r3, #3
 8000c54:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000c58:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c5c:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8000c60:	68b2      	ldr	r2, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c62:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c66:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8000c6a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c6e:	ea02 0c07 	and.w	ip, r2, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8000c72:	d02c      	beq.n	8000cce <HAL_GPIO_DeInit+0x10a>
 8000c74:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <HAL_GPIO_DeInit+0x128>)
 8000c76:	4290      	cmp	r0, r2
 8000c78:	d02b      	beq.n	8000cd2 <HAL_GPIO_DeInit+0x10e>
 8000c7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	d029      	beq.n	8000cd6 <HAL_GPIO_DeInit+0x112>
 8000c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d027      	beq.n	8000cda <HAL_GPIO_DeInit+0x116>
 8000c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	d025      	beq.n	8000cde <HAL_GPIO_DeInit+0x11a>
 8000c92:	4550      	cmp	r0, sl
 8000c94:	d025      	beq.n	8000ce2 <HAL_GPIO_DeInit+0x11e>
 8000c96:	4558      	cmp	r0, fp
 8000c98:	bf0c      	ite	eq
 8000c9a:	2206      	moveq	r2, #6
 8000c9c:	2207      	movne	r2, #7
 8000c9e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ca2:	4594      	cmp	ip, r2
 8000ca4:	d111      	bne.n	8000cca <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000ca6:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8000ca8:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000caa:	ea22 0707 	bic.w	r7, r2, r7
 8000cae:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8000cb0:	6822      	ldr	r2, [r4, #0]
 8000cb2:	43ed      	mvns	r5, r5
 8000cb4:	402a      	ands	r2, r5
 8000cb6:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 8000cb8:	6862      	ldr	r2, [r4, #4]
 8000cba:	402a      	ands	r2, r5
 8000cbc:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 8000cbe:	68a2      	ldr	r2, [r4, #8]
 8000cc0:	402a      	ands	r2, r5
 8000cc2:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 8000cc4:	68e2      	ldr	r2, [r4, #12]
 8000cc6:	4015      	ands	r5, r2
 8000cc8:	60e5      	str	r5, [r4, #12]
    position++;
 8000cca:	3301      	adds	r3, #1
 8000ccc:	e786      	b.n	8000bdc <HAL_GPIO_DeInit+0x18>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8000cce:	2200      	movs	r2, #0
 8000cd0:	e7e5      	b.n	8000c9e <HAL_GPIO_DeInit+0xda>
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	e7e3      	b.n	8000c9e <HAL_GPIO_DeInit+0xda>
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	e7e1      	b.n	8000c9e <HAL_GPIO_DeInit+0xda>
 8000cda:	2203      	movs	r2, #3
 8000cdc:	e7df      	b.n	8000c9e <HAL_GPIO_DeInit+0xda>
 8000cde:	2204      	movs	r2, #4
 8000ce0:	e7dd      	b.n	8000c9e <HAL_GPIO_DeInit+0xda>
 8000ce2:	2205      	movs	r2, #5
 8000ce4:	e7db      	b.n	8000c9e <HAL_GPIO_DeInit+0xda>
 8000ce6:	bf00      	nop
 8000ce8:	40010400 	.word	0x40010400
 8000cec:	48000400 	.word	0x48000400
 8000cf0:	48001400 	.word	0x48001400
 8000cf4:	48001800 	.word	0x48001800

08000cf8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cf8:	6903      	ldr	r3, [r0, #16]
 8000cfa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000cfc:	bf14      	ite	ne
 8000cfe:	2001      	movne	r0, #1
 8000d00:	2000      	moveq	r0, #0
 8000d02:	4770      	bx	lr

08000d04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d04:	b10a      	cbz	r2, 8000d0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d06:	6181      	str	r1, [r0, #24]
 8000d08:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d0a:	6281      	str	r1, [r0, #40]	; 0x28
 8000d0c:	4770      	bx	lr

08000d0e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d0e:	4770      	bx	lr

08000d10 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000d10:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000d14:	6959      	ldr	r1, [r3, #20]
 8000d16:	4201      	tst	r1, r0
 8000d18:	d002      	beq.n	8000d20 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d1a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d1c:	f7ff fff7 	bl	8000d0e <HAL_GPIO_EXTI_Callback>
 8000d20:	bd08      	pop	{r3, pc}
 8000d22:	bf00      	nop
 8000d24:	40010400 	.word	0x40010400

08000d28 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000d28:	6803      	ldr	r3, [r0, #0]
 8000d2a:	699a      	ldr	r2, [r3, #24]
 8000d2c:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000d2e:	bf44      	itt	mi
 8000d30:	2200      	movmi	r2, #0
 8000d32:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000d34:	699a      	ldr	r2, [r3, #24]
 8000d36:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000d38:	bf5e      	ittt	pl
 8000d3a:	699a      	ldrpl	r2, [r3, #24]
 8000d3c:	f042 0201 	orrpl.w	r2, r2, #1
 8000d40:	619a      	strpl	r2, [r3, #24]
 8000d42:	4770      	bx	lr

08000d44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000d44:	b530      	push	{r4, r5, lr}
 8000d46:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000d48:	6805      	ldr	r5, [r0, #0]
 8000d4a:	4323      	orrs	r3, r4
 8000d4c:	0d64      	lsrs	r4, r4, #21
 8000d4e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000d52:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000d56:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000d5a:	6868      	ldr	r0, [r5, #4]
 8000d5c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000d60:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000d64:	4319      	orrs	r1, r3
 8000d66:	f044 0403 	orr.w	r4, r4, #3
 8000d6a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d6e:	ea20 0404 	bic.w	r4, r0, r4
 8000d72:	4321      	orrs	r1, r4
 8000d74:	6069      	str	r1, [r5, #4]
 8000d76:	bd30      	pop	{r4, r5, pc}

08000d78 <I2C_WaitOnFlagUntilTimeout>:
{
 8000d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7c:	9f06      	ldr	r7, [sp, #24]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	4616      	mov	r6, r2
 8000d84:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d86:	6822      	ldr	r2, [r4, #0]
 8000d88:	6993      	ldr	r3, [r2, #24]
 8000d8a:	ea38 0303 	bics.w	r3, r8, r3
 8000d8e:	bf0c      	ite	eq
 8000d90:	2301      	moveq	r3, #1
 8000d92:	2300      	movne	r3, #0
 8000d94:	42b3      	cmp	r3, r6
 8000d96:	d002      	beq.n	8000d9e <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000d98:	2000      	movs	r0, #0
}
 8000d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000d9e:	1c6b      	adds	r3, r5, #1
 8000da0:	d0f2      	beq.n	8000d88 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000da2:	b955      	cbnz	r5, 8000dba <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 8000da4:	2320      	movs	r3, #32
 8000da6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000db0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000db4:	2003      	movs	r0, #3
 8000db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000dba:	f7ff fd99 	bl	80008f0 <HAL_GetTick>
 8000dbe:	1bc0      	subs	r0, r0, r7
 8000dc0:	4285      	cmp	r5, r0
 8000dc2:	d2e0      	bcs.n	8000d86 <I2C_WaitOnFlagUntilTimeout+0xe>
 8000dc4:	e7ee      	b.n	8000da4 <I2C_WaitOnFlagUntilTimeout+0x2c>

08000dc6 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000dc6:	6803      	ldr	r3, [r0, #0]
{
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000dcc:	6998      	ldr	r0, [r3, #24]
 8000dce:	f010 0010 	ands.w	r0, r0, #16
{
 8000dd2:	460d      	mov	r5, r1
 8000dd4:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000dd6:	d112      	bne.n	8000dfe <I2C_IsAcknowledgeFailed+0x38>
 8000dd8:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000dda:	1c69      	adds	r1, r5, #1
 8000ddc:	d010      	beq.n	8000e00 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000dde:	b94d      	cbnz	r5, 8000df4 <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 8000de0:	2320      	movs	r3, #32
 8000de2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000dec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8000df0:	2003      	movs	r0, #3
 8000df2:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000df4:	f7ff fd7c 	bl	80008f0 <HAL_GetTick>
 8000df8:	1b80      	subs	r0, r0, r6
 8000dfa:	4285      	cmp	r5, r0
 8000dfc:	d3f0      	bcc.n	8000de0 <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	6999      	ldr	r1, [r3, #24]
 8000e02:	068a      	lsls	r2, r1, #26
 8000e04:	d5e9      	bpl.n	8000dda <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e06:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e08:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e0a:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000e0c:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e0e:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000e10:	f7ff ff8a 	bl	8000d28 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000e14:	6822      	ldr	r2, [r4, #0]
 8000e16:	6853      	ldr	r3, [r2, #4]
 8000e18:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000e1c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000e20:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000e24:	f023 0301 	bic.w	r3, r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e2e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e30:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8000e3c:	2001      	movs	r0, #1
}
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}

08000e40 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	4604      	mov	r4, r0
 8000e44:	460d      	mov	r5, r1
 8000e46:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	079b      	lsls	r3, r3, #30
 8000e4e:	d501      	bpl.n	8000e54 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000e50:	2000      	movs	r0, #0
 8000e52:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e54:	4632      	mov	r2, r6
 8000e56:	4629      	mov	r1, r5
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f7ff ffb4 	bl	8000dc6 <I2C_IsAcknowledgeFailed>
 8000e5e:	b9b0      	cbnz	r0, 8000e8e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000e60:	1c6a      	adds	r2, r5, #1
 8000e62:	d0f1      	beq.n	8000e48 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e64:	b96d      	cbnz	r5, 8000e82 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000e6e:	2320      	movs	r3, #32
 8000e70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000e7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000e7e:	2003      	movs	r0, #3
 8000e80:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e82:	f7ff fd35 	bl	80008f0 <HAL_GetTick>
 8000e86:	1b80      	subs	r0, r0, r6
 8000e88:	4285      	cmp	r5, r0
 8000e8a:	d2dd      	bcs.n	8000e48 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8000e8c:	e7eb      	b.n	8000e66 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8000e8e:	2001      	movs	r0, #1
}
 8000e90:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e94 <I2C_RequestMemoryWrite>:
{
 8000e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e96:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000e98:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <I2C_RequestMemoryWrite+0x68>)
 8000e9c:	9300      	str	r3, [sp, #0]
{
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ea6:	b2fa      	uxtb	r2, r7
 8000ea8:	f7ff ff4c 	bl	8000d44 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000eac:	4632      	mov	r2, r6
 8000eae:	9908      	ldr	r1, [sp, #32]
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f7ff ffc5 	bl	8000e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8000eb6:	b128      	cbz	r0, 8000ec4 <I2C_RequestMemoryWrite+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000eb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d110      	bne.n	8000ee0 <I2C_RequestMemoryWrite+0x4c>
      return HAL_ERROR;
 8000ebe:	2001      	movs	r0, #1
}
 8000ec0:	b003      	add	sp, #12
 8000ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000ec4:	2f01      	cmp	r7, #1
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	d10c      	bne.n	8000ee4 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000eca:	b2ed      	uxtb	r5, r5
 8000ecc:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000ece:	9b08      	ldr	r3, [sp, #32]
 8000ed0:	9600      	str	r6, [sp, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f7ff ff4e 	bl	8000d78 <I2C_WaitOnFlagUntilTimeout>
 8000edc:	2800      	cmp	r0, #0
 8000ede:	d0ef      	beq.n	8000ec0 <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	e7ed      	b.n	8000ec0 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000ee4:	0a2a      	lsrs	r2, r5, #8
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ee8:	9908      	ldr	r1, [sp, #32]
 8000eea:	4632      	mov	r2, r6
 8000eec:	4620      	mov	r0, r4
 8000eee:	f7ff ffa7 	bl	8000e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	d1e0      	bne.n	8000eb8 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	e7e7      	b.n	8000eca <I2C_RequestMemoryWrite+0x36>
 8000efa:	bf00      	nop
 8000efc:	80002000 	.word	0x80002000

08000f00 <I2C_RequestMemoryRead>:
{
 8000f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f02:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000f04:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <I2C_RequestMemoryRead+0x64>)
 8000f08:	9300      	str	r3, [sp, #0]
{
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f0e:	2300      	movs	r3, #0
 8000f10:	b2fa      	uxtb	r2, r7
 8000f12:	f7ff ff17 	bl	8000d44 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f16:	4632      	mov	r2, r6
 8000f18:	9908      	ldr	r1, [sp, #32]
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f7ff ff90 	bl	8000e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f20:	b128      	cbz	r0, 8000f2e <I2C_RequestMemoryRead+0x2e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d110      	bne.n	8000f4a <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 8000f28:	2001      	movs	r0, #1
}
 8000f2a:	b003      	add	sp, #12
 8000f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f2e:	2f01      	cmp	r7, #1
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	d10c      	bne.n	8000f4e <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f34:	b2ed      	uxtb	r5, r5
 8000f36:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000f38:	9b08      	ldr	r3, [sp, #32]
 8000f3a:	9600      	str	r6, [sp, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2140      	movs	r1, #64	; 0x40
 8000f40:	4620      	mov	r0, r4
 8000f42:	f7ff ff19 	bl	8000d78 <I2C_WaitOnFlagUntilTimeout>
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d0ef      	beq.n	8000f2a <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	e7ed      	b.n	8000f2a <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000f4e:	0a2a      	lsrs	r2, r5, #8
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f52:	9908      	ldr	r1, [sp, #32]
 8000f54:	4632      	mov	r2, r6
 8000f56:	4620      	mov	r0, r4
 8000f58:	f7ff ff72 	bl	8000e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d1e0      	bne.n	8000f22 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	e7e7      	b.n	8000f34 <I2C_RequestMemoryRead+0x34>
 8000f64:	80002000 	.word	0x80002000

08000f68 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	460d      	mov	r5, r1
 8000f6e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	069b      	lsls	r3, r3, #26
 8000f76:	d501      	bpl.n	8000f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000f78:	2000      	movs	r0, #0
 8000f7a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f7c:	4632      	mov	r2, r6
 8000f7e:	4629      	mov	r1, r5
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff ff20 	bl	8000dc6 <I2C_IsAcknowledgeFailed>
 8000f86:	b9a0      	cbnz	r0, 8000fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f88:	b96d      	cbnz	r5, 8000fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f8c:	f043 0320 	orr.w	r3, r3, #32
 8000f90:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000f92:	2320      	movs	r3, #32
 8000f94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000f9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000fa6:	f7ff fca3 	bl	80008f0 <HAL_GetTick>
 8000faa:	1b80      	subs	r0, r0, r6
 8000fac:	4285      	cmp	r5, r0
 8000fae:	d2df      	bcs.n	8000f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8000fb0:	e7eb      	b.n	8000f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000fb2:	2001      	movs	r0, #1
}
 8000fb4:	bd70      	pop	{r4, r5, r6, pc}

08000fb6 <HAL_I2C_Init>:
{
 8000fb6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000fb8:	4604      	mov	r4, r0
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	d04a      	beq.n	8001054 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fbe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fc6:	b91b      	cbnz	r3, 8000fd0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000fc8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000fcc:	f002 fc28 	bl	8003820 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd0:	2324      	movs	r3, #36	; 0x24
 8000fd2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000fd6:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fd8:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	f022 0201 	bic.w	r2, r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fe2:	6862      	ldr	r2, [r4, #4]
 8000fe4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fe8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fea:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fec:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ff6:	d124      	bne.n	8001042 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ff8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ffe:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001000:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001002:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800100a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001012:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001014:	6922      	ldr	r2, [r4, #16]
 8001016:	430a      	orrs	r2, r1
 8001018:	69a1      	ldr	r1, [r4, #24]
 800101a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800101e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001020:	6a21      	ldr	r1, [r4, #32]
 8001022:	69e2      	ldr	r2, [r4, #28]
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001030:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001032:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001034:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001036:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800103a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800103c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001040:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001042:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001046:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001048:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800104a:	bf04      	itt	eq
 800104c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001050:	605a      	streq	r2, [r3, #4]
 8001052:	e7d4      	b.n	8000ffe <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
}
 8001056:	bd10      	pop	{r4, pc}

08001058 <HAL_I2C_DeInit>:
{
 8001058:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800105a:	4604      	mov	r4, r0
 800105c:	b198      	cbz	r0, 8001086 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800105e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001060:	2324      	movs	r3, #36	; 0x24
 8001062:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001066:	6813      	ldr	r3, [r2, #0]
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800106e:	f002 fbff 	bl	8003870 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001072:	2000      	movs	r0, #0
 8001074:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8001076:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800107a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800107e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001080:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001084:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001086:	2001      	movs	r0, #1
}
 8001088:	bd10      	pop	{r4, pc}

0800108a <HAL_I2C_Mem_Write>:
{
 800108a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800108e:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001090:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001094:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001096:	2b20      	cmp	r3, #32
{
 8001098:	4604      	mov	r4, r0
 800109a:	460f      	mov	r7, r1
 800109c:	9203      	str	r2, [sp, #12]
 800109e:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80010a2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a6:	f040 80a6 	bne.w	80011f6 <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 80010aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80010ac:	b91b      	cbnz	r3, 80010b6 <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 80010ae:	2001      	movs	r0, #1
}
 80010b0:	b005      	add	sp, #20
 80010b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 80010b6:	f1ba 0f00 	cmp.w	sl, #0
 80010ba:	d0f8      	beq.n	80010ae <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 80010bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	f000 8098 	beq.w	80011f6 <HAL_I2C_Mem_Write+0x16c>
 80010c6:	2501      	movs	r5, #1
 80010c8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80010cc:	f7ff fc10 	bl	80008f0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010d0:	2319      	movs	r3, #25
 80010d2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80010d4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010d6:	462a      	mov	r2, r5
 80010d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010dc:	4620      	mov	r0, r4
 80010de:	f7ff fe4b 	bl	8000d78 <I2C_WaitOnFlagUntilTimeout>
 80010e2:	4680      	mov	r8, r0
 80010e4:	b9d0      	cbnz	r0, 800111c <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010e6:	2321      	movs	r3, #33	; 0x21
 80010e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80010f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010f4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80010f6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80010f8:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80010fa:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010fe:	9601      	str	r6, [sp, #4]
 8001100:	f8cd 9000 	str.w	r9, [sp]
 8001104:	465b      	mov	r3, fp
 8001106:	9a03      	ldr	r2, [sp, #12]
 8001108:	4639      	mov	r1, r7
 800110a:	4620      	mov	r0, r4
 800110c:	f7ff fec2 	bl	8000e94 <I2C_RequestMemoryWrite>
 8001110:	b130      	cbz	r0, 8001120 <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001112:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001114:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001118:	2b04      	cmp	r3, #4
 800111a:	d0c8      	beq.n	80010ae <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 800111c:	2003      	movs	r0, #3
 800111e:	e7c7      	b.n	80010b0 <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001120:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001122:	b29b      	uxth	r3, r3
 8001124:	2bff      	cmp	r3, #255	; 0xff
 8001126:	d910      	bls.n	800114a <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001128:	22ff      	movs	r2, #255	; 0xff
 800112a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800112c:	9000      	str	r0, [sp, #0]
 800112e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001132:	4639      	mov	r1, r7
 8001134:	4620      	mov	r0, r4
 8001136:	f7ff fe05 	bl	8000d44 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800113a:	4632      	mov	r2, r6
 800113c:	4649      	mov	r1, r9
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff fe7e 	bl	8000e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001144:	b148      	cbz	r0, 800115a <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001146:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001148:	e7e6      	b.n	8001118 <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 800114a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800114c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800114e:	b292      	uxth	r2, r2
 8001150:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	e7eb      	b.n	8001132 <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800115a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800115c:	6822      	ldr	r2, [r4, #0]
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	6261      	str	r1, [r4, #36]	; 0x24
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001166:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001168:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800116a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800116c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800116e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001170:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001172:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001174:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001176:	b9ba      	cbnz	r2, 80011a8 <HAL_I2C_Mem_Write+0x11e>
 8001178:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800117a:	b29b      	uxth	r3, r3
 800117c:	b1a3      	cbz	r3, 80011a8 <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800117e:	9600      	str	r6, [sp, #0]
 8001180:	464b      	mov	r3, r9
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff fdf7 	bl	8000d78 <I2C_WaitOnFlagUntilTimeout>
 800118a:	2800      	cmp	r0, #0
 800118c:	d1c6      	bne.n	800111c <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800118e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001190:	b29b      	uxth	r3, r3
 8001192:	2bff      	cmp	r3, #255	; 0xff
 8001194:	d927      	bls.n	80011e6 <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800119a:	9000      	str	r0, [sp, #0]
 800119c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011a0:	4639      	mov	r1, r7
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff fdce 	bl	8000d44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80011a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1c4      	bne.n	800113a <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011b0:	4632      	mov	r2, r6
 80011b2:	4649      	mov	r1, r9
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff fed7 	bl	8000f68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d1c3      	bne.n	8001146 <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	2120      	movs	r1, #32
 80011c2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80011ca:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80011ce:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80011d8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80011dc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011e0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80011e4:	e764      	b.n	80010b0 <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 80011e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011e8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80011ea:	b292      	uxth	r2, r2
 80011ec:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	e7d4      	b.n	80011a0 <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 80011f6:	2002      	movs	r0, #2
 80011f8:	e75a      	b.n	80010b0 <HAL_I2C_Mem_Write+0x26>
	...

080011fc <HAL_I2C_Mem_Read>:
{
 80011fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001200:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001202:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001206:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001208:	2b20      	cmp	r3, #32
{
 800120a:	4604      	mov	r4, r0
 800120c:	460f      	mov	r7, r1
 800120e:	9203      	str	r2, [sp, #12]
 8001210:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001214:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001218:	f040 80a9 	bne.w	800136e <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 800121c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800121e:	b91b      	cbnz	r3, 8001228 <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 8001220:	2001      	movs	r0, #1
}
 8001222:	b005      	add	sp, #20
 8001224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8001228:	f1ba 0f00 	cmp.w	sl, #0
 800122c:	d0f8      	beq.n	8001220 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 800122e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001232:	2b01      	cmp	r3, #1
 8001234:	f000 809b 	beq.w	800136e <HAL_I2C_Mem_Read+0x172>
 8001238:	2501      	movs	r5, #1
 800123a:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800123e:	f7ff fb57 	bl	80008f0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001242:	2319      	movs	r3, #25
 8001244:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001246:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001248:	462a      	mov	r2, r5
 800124a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800124e:	4620      	mov	r0, r4
 8001250:	f7ff fd92 	bl	8000d78 <I2C_WaitOnFlagUntilTimeout>
 8001254:	4680      	mov	r8, r0
 8001256:	b9d0      	cbnz	r0, 800128e <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001258:	2322      	movs	r3, #34	; 0x22
 800125a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800125e:	2340      	movs	r3, #64	; 0x40
 8001260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001266:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001268:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800126a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800126c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001270:	9601      	str	r6, [sp, #4]
 8001272:	f8cd 9000 	str.w	r9, [sp]
 8001276:	465b      	mov	r3, fp
 8001278:	9a03      	ldr	r2, [sp, #12]
 800127a:	4639      	mov	r1, r7
 800127c:	4620      	mov	r0, r4
 800127e:	f7ff fe3f 	bl	8000f00 <I2C_RequestMemoryRead>
 8001282:	b130      	cbz	r0, 8001292 <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001284:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001286:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800128a:	2b04      	cmp	r3, #4
 800128c:	d0c8      	beq.n	8001220 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 800128e:	2003      	movs	r0, #3
 8001290:	e7c7      	b.n	8001222 <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001292:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001294:	b29b      	uxth	r3, r3
 8001296:	2bff      	cmp	r3, #255	; 0xff
 8001298:	4b36      	ldr	r3, [pc, #216]	; (8001374 <HAL_I2C_Mem_Read+0x178>)
 800129a:	d944      	bls.n	8001326 <HAL_I2C_Mem_Read+0x12a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800129c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800129e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80012a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012a6:	4639      	mov	r1, r7
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff fd4b 	bl	8000d44 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80012ae:	9600      	str	r6, [sp, #0]
 80012b0:	464b      	mov	r3, r9
 80012b2:	2200      	movs	r2, #0
 80012b4:	2104      	movs	r1, #4
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff fd5e 	bl	8000d78 <I2C_WaitOnFlagUntilTimeout>
 80012bc:	2800      	cmp	r0, #0
 80012be:	d1e6      	bne.n	800128e <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80012c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	6262      	str	r2, [r4, #36]	; 0x24
 80012c6:	6822      	ldr	r2, [r4, #0]
 80012c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012ca:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80012cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80012ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80012d0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80012d2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80012d4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80012d6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80012d8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80012da:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80012dc:	b9ba      	cbnz	r2, 800130e <HAL_I2C_Mem_Read+0x112>
 80012de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	b1a3      	cbz	r3, 800130e <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012e4:	9600      	str	r6, [sp, #0]
 80012e6:	464b      	mov	r3, r9
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff fd44 	bl	8000d78 <I2C_WaitOnFlagUntilTimeout>
 80012f0:	2800      	cmp	r0, #0
 80012f2:	d1cc      	bne.n	800128e <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	2bff      	cmp	r3, #255	; 0xff
 80012fa:	d91c      	bls.n	8001336 <HAL_I2C_Mem_Read+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012fc:	22ff      	movs	r2, #255	; 0xff
 80012fe:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001300:	9000      	str	r0, [sp, #0]
 8001302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001306:	4639      	mov	r1, r7
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fd1b 	bl	8000d44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800130e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001310:	b29b      	uxth	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1cb      	bne.n	80012ae <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001316:	4632      	mov	r2, r6
 8001318:	4649      	mov	r1, r9
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff fe24 	bl	8000f68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001320:	b188      	cbz	r0, 8001346 <HAL_I2C_Mem_Read+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001322:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001324:	e7b1      	b.n	800128a <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8001326:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001328:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800132a:	b292      	uxth	r2, r2
 800132c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800132e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	e7b7      	b.n	80012a6 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8001336:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001338:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800133a:	b292      	uxth	r2, r2
 800133c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800133e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	e7df      	b.n	8001306 <HAL_I2C_Mem_Read+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	2120      	movs	r1, #32
 800134a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001352:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001356:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001360:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001364:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001368:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800136c:	e759      	b.n	8001222 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 800136e:	2002      	movs	r0, #2
 8001370:	e757      	b.n	8001222 <HAL_I2C_Mem_Read+0x26>
 8001372:	bf00      	nop
 8001374:	80002400 	.word	0x80002400

08001378 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001378:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	2a20      	cmp	r2, #32
{
 8001380:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001382:	d11d      	bne.n	80013c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001384:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001388:	2b01      	cmp	r3, #1
 800138a:	d019      	beq.n	80013c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800138c:	2324      	movs	r3, #36	; 0x24
 800138e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001392:	6803      	ldr	r3, [r0, #0]
 8001394:	681c      	ldr	r4, [r3, #0]
 8001396:	f024 0401 	bic.w	r4, r4, #1
 800139a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800139c:	681c      	ldr	r4, [r3, #0]
 800139e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80013a2:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013a4:	681c      	ldr	r4, [r3, #0]
 80013a6:	4321      	orrs	r1, r4
 80013a8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013aa:	6819      	ldr	r1, [r3, #0]
 80013ac:	f041 0101 	orr.w	r1, r1, #1
 80013b0:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80013b4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80013b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80013bc:	4618      	mov	r0, r3
 80013be:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80013c0:	2002      	movs	r0, #2
  }
}
 80013c2:	bd10      	pop	{r4, pc}

080013c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013c4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013c6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80013ca:	b2e4      	uxtb	r4, r4
 80013cc:	2c20      	cmp	r4, #32
 80013ce:	d11c      	bne.n	800140a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d018      	beq.n	800140a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013d8:	2324      	movs	r3, #36	; 0x24
 80013da:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013de:	6803      	ldr	r3, [r0, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013e8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013ea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013ee:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013f2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013fc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80013fe:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001402:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001406:	4618      	mov	r0, r3
 8001408:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800140a:	2002      	movs	r0, #2
  }
}
 800140c:	bd10      	pop	{r4, pc}
	...

08001410 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <HAL_PWREx_GetVoltageRange+0xc>)
 8001412:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001414:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000

08001420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001422:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001424:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001428:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800142c:	d11a      	bne.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800142e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001432:	d013      	beq.n	800145c <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001434:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001436:	4912      	ldr	r1, [pc, #72]	; (8001480 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001438:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800143c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001440:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	fbb2 f1f1 	udiv	r1, r2, r1
 800144a:	2232      	movs	r2, #50	; 0x32
 800144c:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800144e:	b112      	cbz	r2, 8001456 <HAL_PWREx_ControlVoltageScaling+0x36>
 8001450:	6959      	ldr	r1, [r3, #20]
 8001452:	0549      	lsls	r1, r1, #21
 8001454:	d404      	bmi.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	055b      	lsls	r3, r3, #21
 800145a:	d40d      	bmi.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 800145c:	2000      	movs	r0, #0
 800145e:	4770      	bx	lr
        wait_loop_index--;
 8001460:	3a01      	subs	r2, #1
 8001462:	e7f4      	b.n	800144e <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001464:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001468:	bf1f      	itttt	ne
 800146a:	681a      	ldrne	r2, [r3, #0]
 800146c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001470:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001474:	601a      	strne	r2, [r3, #0]
 8001476:	e7f1      	b.n	800145c <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001478:	2003      	movs	r0, #3
}  
 800147a:	4770      	bx	lr
 800147c:	40007000 	.word	0x40007000
 8001480:	000f4240 	.word	0x000f4240
 8001484:	20000018 	.word	0x20000018

08001488 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001488:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800148a:	4d1e      	ldr	r5, [pc, #120]	; (8001504 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800148c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800148e:	00da      	lsls	r2, r3, #3
{
 8001490:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001492:	d518      	bpl.n	80014c6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001494:	f7ff ffbc 	bl	8001410 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001498:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800149c:	d123      	bne.n	80014e6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800149e:	2c80      	cmp	r4, #128	; 0x80
 80014a0:	d929      	bls.n	80014f6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80014a2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80014a4:	bf8c      	ite	hi
 80014a6:	2002      	movhi	r0, #2
 80014a8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80014aa:	4a17      	ldr	r2, [pc, #92]	; (8001508 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80014ac:	6813      	ldr	r3, [r2, #0]
 80014ae:	f023 0307 	bic.w	r3, r3, #7
 80014b2:	4303      	orrs	r3, r0
 80014b4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 80014b6:	6813      	ldr	r3, [r2, #0]
 80014b8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80014bc:	1a18      	subs	r0, r3, r0
 80014be:	bf18      	it	ne
 80014c0:	2001      	movne	r0, #1
 80014c2:	b003      	add	sp, #12
 80014c4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	65ab      	str	r3, [r5, #88]	; 0x58
 80014ce:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80014d8:	f7ff ff9a 	bl	8001410 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80014dc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e2:	65ab      	str	r3, [r5, #88]	; 0x58
 80014e4:	e7d8      	b.n	8001498 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80014e6:	2c80      	cmp	r4, #128	; 0x80
 80014e8:	d807      	bhi.n	80014fa <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80014ea:	d008      	beq.n	80014fe <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80014ec:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80014f0:	4258      	negs	r0, r3
 80014f2:	4158      	adcs	r0, r3
 80014f4:	e7d9      	b.n	80014aa <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80014f6:	2000      	movs	r0, #0
 80014f8:	e7d7      	b.n	80014aa <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80014fa:	2003      	movs	r0, #3
 80014fc:	e7d5      	b.n	80014aa <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80014fe:	2002      	movs	r0, #2
 8001500:	e7d3      	b.n	80014aa <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	40022000 	.word	0x40022000

0800150c <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	f012 0f0c 	tst.w	r2, #12
{
 8001514:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001516:	d009      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800151e:	2a0c      	cmp	r2, #12
 8001520:	d12d      	bne.n	800157e <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	f002 0203 	and.w	r2, r2, #3
 8001528:	2a01      	cmp	r2, #1
 800152a:	d128      	bne.n	800157e <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800152c:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800152e:	4928      	ldr	r1, [pc, #160]	; (80015d0 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001530:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001532:	bf55      	itete	pl
 8001534:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001538:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800153a:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800153e:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001542:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001546:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001548:	f011 0f0c 	tst.w	r1, #12
 800154c:	bf0c      	ite	eq
 800154e:	4610      	moveq	r0, r2
 8001550:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001552:	6899      	ldr	r1, [r3, #8]
 8001554:	f001 010c 	and.w	r1, r1, #12
 8001558:	290c      	cmp	r1, #12
 800155a:	d130      	bne.n	80015be <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800155c:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800155e:	68d8      	ldr	r0, [r3, #12]
 8001560:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001564:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001566:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 800156a:	2802      	cmp	r0, #2
 800156c:	d019      	beq.n	80015a2 <HAL_RCC_GetSysClockFreq+0x96>
 800156e:	2803      	cmp	r0, #3
 8001570:	d026      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001572:	fbb2 f2f1 	udiv	r2, r2, r1
 8001576:	68d8      	ldr	r0, [r3, #12]
 8001578:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800157c:	e017      	b.n	80015ae <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	f002 020c 	and.w	r2, r2, #12
 8001584:	2a04      	cmp	r2, #4
 8001586:	d007      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	f002 020c 	and.w	r2, r2, #12
 800158e:	2a08      	cmp	r2, #8
 8001590:	d104      	bne.n	800159c <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001592:	4810      	ldr	r0, [pc, #64]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001594:	2200      	movs	r2, #0
 8001596:	e7dc      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001598:	480f      	ldr	r0, [pc, #60]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800159a:	e7fb      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 800159c:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800159e:	4602      	mov	r2, r0
 80015a0:	e7d7      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80015a6:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015aa:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80015b4:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015b6:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80015b8:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80015ba:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80015be:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	4804      	ldr	r0, [pc, #16]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015c4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80015c8:	e7ef      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x9e>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	08004bcc 	.word	0x08004bcc
 80015d4:	007a1200 	.word	0x007a1200
 80015d8:	00f42400 	.word	0x00f42400

080015dc <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015dc:	6803      	ldr	r3, [r0, #0]
{
 80015de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80015e2:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e4:	06d8      	lsls	r0, r3, #27
 80015e6:	d53b      	bpl.n	8001660 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80015e8:	4ca9      	ldr	r4, [pc, #676]	; (8001890 <HAL_RCC_OscConfig+0x2b4>)
 80015ea:	68a3      	ldr	r3, [r4, #8]
 80015ec:	f013 0f0c 	tst.w	r3, #12
 80015f0:	d160      	bne.n	80016b4 <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	0799      	lsls	r1, r3, #30
 80015f6:	d505      	bpl.n	8001604 <HAL_RCC_OscConfig+0x28>
 80015f8:	69ab      	ldr	r3, [r5, #24]
 80015fa:	b91b      	cbnz	r3, 8001604 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 80015fc:	2001      	movs	r0, #1
}
 80015fe:	b002      	add	sp, #8
 8001600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	6a28      	ldr	r0, [r5, #32]
 8001608:	071a      	lsls	r2, r3, #28
 800160a:	bf56      	itet	pl
 800160c:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001610:	6823      	ldrmi	r3, [r4, #0]
 8001612:	091b      	lsrpl	r3, r3, #4
 8001614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001618:	4283      	cmp	r3, r0
 800161a:	d236      	bcs.n	800168a <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800161c:	f7ff ff34 	bl	8001488 <RCC_SetFlashLatencyFromMSIRange>
 8001620:	2800      	cmp	r0, #0
 8001622:	d1eb      	bne.n	80015fc <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	6023      	str	r3, [r4, #0]
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	6a2a      	ldr	r2, [r5, #32]
 8001630:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001634:	4313      	orrs	r3, r2
 8001636:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001638:	6863      	ldr	r3, [r4, #4]
 800163a:	69ea      	ldr	r2, [r5, #28]
 800163c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001640:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001644:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001646:	f7ff ff61 	bl	800150c <HAL_RCC_GetSysClockFreq>
 800164a:	68a3      	ldr	r3, [r4, #8]
 800164c:	4a91      	ldr	r2, [pc, #580]	; (8001894 <HAL_RCC_OscConfig+0x2b8>)
 800164e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	40d8      	lsrs	r0, r3
 8001656:	4b90      	ldr	r3, [pc, #576]	; (8001898 <HAL_RCC_OscConfig+0x2bc>)
 8001658:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff f920 	bl	80008a0 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	07de      	lsls	r6, r3, #31
 8001664:	d45b      	bmi.n	800171e <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	079c      	lsls	r4, r3, #30
 800166a:	f100 80a3 	bmi.w	80017b4 <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166e:	682b      	ldr	r3, [r5, #0]
 8001670:	0719      	lsls	r1, r3, #28
 8001672:	f100 80e1 	bmi.w	8001838 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	075a      	lsls	r2, r3, #29
 800167a:	f100 810f 	bmi.w	800189c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800167e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001680:	2a00      	cmp	r2, #0
 8001682:	f040 8176 	bne.w	8001972 <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8001686:	2000      	movs	r0, #0
 8001688:	e7b9      	b.n	80015fe <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	6023      	str	r3, [r4, #0]
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001698:	4303      	orrs	r3, r0
 800169a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169c:	6863      	ldr	r3, [r4, #4]
 800169e:	69ea      	ldr	r2, [r5, #28]
 80016a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016a8:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016aa:	f7ff feed 	bl	8001488 <RCC_SetFlashLatencyFromMSIRange>
 80016ae:	2800      	cmp	r0, #0
 80016b0:	d0c9      	beq.n	8001646 <HAL_RCC_OscConfig+0x6a>
 80016b2:	e7a3      	b.n	80015fc <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016b4:	69ab      	ldr	r3, [r5, #24]
 80016b6:	b313      	cbz	r3, 80016fe <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 80016b8:	6823      	ldr	r3, [r4, #0]
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016c0:	f7ff f916 	bl	80008f0 <HAL_GetTick>
 80016c4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	079b      	lsls	r3, r3, #30
 80016ca:	d511      	bpl.n	80016f0 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	6023      	str	r3, [r4, #0]
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	6a2a      	ldr	r2, [r5, #32]
 80016d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016dc:	4313      	orrs	r3, r2
 80016de:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e0:	6863      	ldr	r3, [r4, #4]
 80016e2:	69ea      	ldr	r2, [r5, #28]
 80016e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016ec:	6063      	str	r3, [r4, #4]
 80016ee:	e7b7      	b.n	8001660 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f0:	f7ff f8fe 	bl	80008f0 <HAL_GetTick>
 80016f4:	1b80      	subs	r0, r0, r6
 80016f6:	2802      	cmp	r0, #2
 80016f8:	d9e5      	bls.n	80016c6 <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 80016fa:	2003      	movs	r0, #3
 80016fc:	e77f      	b.n	80015fe <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001706:	f7ff f8f3 	bl	80008f0 <HAL_GetTick>
 800170a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	079f      	lsls	r7, r3, #30
 8001710:	d5a6      	bpl.n	8001660 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001712:	f7ff f8ed 	bl	80008f0 <HAL_GetTick>
 8001716:	1b80      	subs	r0, r0, r6
 8001718:	2802      	cmp	r0, #2
 800171a:	d9f7      	bls.n	800170c <HAL_RCC_OscConfig+0x130>
 800171c:	e7ed      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800171e:	4c5c      	ldr	r4, [pc, #368]	; (8001890 <HAL_RCC_OscConfig+0x2b4>)
 8001720:	68a3      	ldr	r3, [r4, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b08      	cmp	r3, #8
 8001728:	d009      	beq.n	800173e <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800172a:	68a3      	ldr	r3, [r4, #8]
 800172c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001730:	2b0c      	cmp	r3, #12
 8001732:	d10b      	bne.n	800174c <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001734:	68e3      	ldr	r3, [r4, #12]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b03      	cmp	r3, #3
 800173c:	d106      	bne.n	800174c <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	0398      	lsls	r0, r3, #14
 8001742:	d590      	bpl.n	8001666 <HAL_RCC_OscConfig+0x8a>
 8001744:	686b      	ldr	r3, [r5, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d18d      	bne.n	8001666 <HAL_RCC_OscConfig+0x8a>
 800174a:	e757      	b.n	80015fc <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174c:	686b      	ldr	r3, [r5, #4]
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001752:	d110      	bne.n	8001776 <HAL_RCC_OscConfig+0x19a>
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800175c:	f7ff f8c8 	bl	80008f0 <HAL_GetTick>
 8001760:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	0399      	lsls	r1, r3, #14
 8001766:	f53f af7e 	bmi.w	8001666 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176a:	f7ff f8c1 	bl	80008f0 <HAL_GetTick>
 800176e:	1b80      	subs	r0, r0, r6
 8001770:	2864      	cmp	r0, #100	; 0x64
 8001772:	d9f6      	bls.n	8001762 <HAL_RCC_OscConfig+0x186>
 8001774:	e7c1      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001776:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800177a:	d104      	bne.n	8001786 <HAL_RCC_OscConfig+0x1aa>
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001782:	6023      	str	r3, [r4, #0]
 8001784:	e7e6      	b.n	8001754 <HAL_RCC_OscConfig+0x178>
 8001786:	6822      	ldr	r2, [r4, #0]
 8001788:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800178c:	6022      	str	r2, [r4, #0]
 800178e:	6822      	ldr	r2, [r4, #0]
 8001790:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001794:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1e0      	bne.n	800175c <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 800179a:	f7ff f8a9 	bl	80008f0 <HAL_GetTick>
 800179e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	039a      	lsls	r2, r3, #14
 80017a4:	f57f af5f 	bpl.w	8001666 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff f8a2 	bl	80008f0 <HAL_GetTick>
 80017ac:	1b80      	subs	r0, r0, r6
 80017ae:	2864      	cmp	r0, #100	; 0x64
 80017b0:	d9f6      	bls.n	80017a0 <HAL_RCC_OscConfig+0x1c4>
 80017b2:	e7a2      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80017b4:	4c36      	ldr	r4, [pc, #216]	; (8001890 <HAL_RCC_OscConfig+0x2b4>)
 80017b6:	68a3      	ldr	r3, [r4, #8]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d009      	beq.n	80017d4 <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017c0:	68a3      	ldr	r3, [r4, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d113      	bne.n	80017f2 <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017ca:	68e3      	ldr	r3, [r4, #12]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d10e      	bne.n	80017f2 <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	055b      	lsls	r3, r3, #21
 80017d8:	d503      	bpl.n	80017e2 <HAL_RCC_OscConfig+0x206>
 80017da:	68eb      	ldr	r3, [r5, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f43f af0d 	beq.w	80015fc <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e2:	6863      	ldr	r3, [r4, #4]
 80017e4:	692a      	ldr	r2, [r5, #16]
 80017e6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80017ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017ee:	6063      	str	r3, [r4, #4]
 80017f0:	e73d      	b.n	800166e <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f2:	68eb      	ldr	r3, [r5, #12]
 80017f4:	b17b      	cbz	r3, 8001816 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017fe:	f7ff f877 	bl	80008f0 <HAL_GetTick>
 8001802:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	055f      	lsls	r7, r3, #21
 8001808:	d4eb      	bmi.n	80017e2 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff f871 	bl	80008f0 <HAL_GetTick>
 800180e:	1b80      	subs	r0, r0, r6
 8001810:	2802      	cmp	r0, #2
 8001812:	d9f7      	bls.n	8001804 <HAL_RCC_OscConfig+0x228>
 8001814:	e771      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800181c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800181e:	f7ff f867 	bl	80008f0 <HAL_GetTick>
 8001822:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	0558      	lsls	r0, r3, #21
 8001828:	f57f af21 	bpl.w	800166e <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182c:	f7ff f860 	bl	80008f0 <HAL_GetTick>
 8001830:	1b80      	subs	r0, r0, r6
 8001832:	2802      	cmp	r0, #2
 8001834:	d9f6      	bls.n	8001824 <HAL_RCC_OscConfig+0x248>
 8001836:	e760      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001838:	696b      	ldr	r3, [r5, #20]
 800183a:	4c15      	ldr	r4, [pc, #84]	; (8001890 <HAL_RCC_OscConfig+0x2b4>)
 800183c:	b19b      	cbz	r3, 8001866 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 800183e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800184a:	f7ff f851 	bl	80008f0 <HAL_GetTick>
 800184e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001850:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001854:	079b      	lsls	r3, r3, #30
 8001856:	f53f af0e 	bmi.w	8001676 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff f849 	bl	80008f0 <HAL_GetTick>
 800185e:	1b80      	subs	r0, r0, r6
 8001860:	2802      	cmp	r0, #2
 8001862:	d9f5      	bls.n	8001850 <HAL_RCC_OscConfig+0x274>
 8001864:	e749      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 8001866:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001872:	f7ff f83d 	bl	80008f0 <HAL_GetTick>
 8001876:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001878:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800187c:	079f      	lsls	r7, r3, #30
 800187e:	f57f aefa 	bpl.w	8001676 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001882:	f7ff f835 	bl	80008f0 <HAL_GetTick>
 8001886:	1b80      	subs	r0, r0, r6
 8001888:	2802      	cmp	r0, #2
 800188a:	d9f5      	bls.n	8001878 <HAL_RCC_OscConfig+0x29c>
 800188c:	e735      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	08004bb9 	.word	0x08004bb9
 8001898:	20000018 	.word	0x20000018
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800189c:	4c66      	ldr	r4, [pc, #408]	; (8001a38 <HAL_RCC_OscConfig+0x45c>)
 800189e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018a0:	00de      	lsls	r6, r3, #3
 80018a2:	d427      	bmi.n	80018f4 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80018ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018b6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b8:	4e60      	ldr	r6, [pc, #384]	; (8001a3c <HAL_RCC_OscConfig+0x460>)
 80018ba:	6833      	ldr	r3, [r6, #0]
 80018bc:	05d8      	lsls	r0, r3, #23
 80018be:	d51b      	bpl.n	80018f8 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c0:	68ab      	ldr	r3, [r5, #8]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d129      	bne.n	800191a <HAL_RCC_OscConfig+0x33e>
 80018c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80018d2:	f7ff f80d 	bl	80008f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018da:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80018dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80018e0:	079a      	lsls	r2, r3, #30
 80018e2:	d540      	bpl.n	8001966 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80018e4:	2f00      	cmp	r7, #0
 80018e6:	f43f aeca 	beq.w	800167e <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80018f2:	e6c4      	b.n	800167e <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 80018f4:	2700      	movs	r7, #0
 80018f6:	e7df      	b.n	80018b8 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018f8:	6833      	ldr	r3, [r6, #0]
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001900:	f7fe fff6 	bl	80008f0 <HAL_GetTick>
 8001904:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001906:	6833      	ldr	r3, [r6, #0]
 8001908:	05d9      	lsls	r1, r3, #23
 800190a:	d4d9      	bmi.n	80018c0 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190c:	f7fe fff0 	bl	80008f0 <HAL_GetTick>
 8001910:	eba0 0008 	sub.w	r0, r0, r8
 8001914:	2802      	cmp	r0, #2
 8001916:	d9f6      	bls.n	8001906 <HAL_RCC_OscConfig+0x32a>
 8001918:	e6ef      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191a:	2b05      	cmp	r3, #5
 800191c:	d106      	bne.n	800192c <HAL_RCC_OscConfig+0x350>
 800191e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800192a:	e7cc      	b.n	80018c6 <HAL_RCC_OscConfig+0x2ea>
 800192c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001938:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800193c:	f022 0204 	bic.w	r2, r2, #4
 8001940:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1c4      	bne.n	80018d2 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001948:	f7fe ffd2 	bl	80008f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001950:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001952:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001956:	079b      	lsls	r3, r3, #30
 8001958:	d5c4      	bpl.n	80018e4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7fe ffc9 	bl	80008f0 <HAL_GetTick>
 800195e:	1b80      	subs	r0, r0, r6
 8001960:	4540      	cmp	r0, r8
 8001962:	d9f6      	bls.n	8001952 <HAL_RCC_OscConfig+0x376>
 8001964:	e6c9      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7fe ffc3 	bl	80008f0 <HAL_GetTick>
 800196a:	1b80      	subs	r0, r0, r6
 800196c:	4540      	cmp	r0, r8
 800196e:	d9b5      	bls.n	80018dc <HAL_RCC_OscConfig+0x300>
 8001970:	e6c3      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001972:	4c31      	ldr	r4, [pc, #196]	; (8001a38 <HAL_RCC_OscConfig+0x45c>)
 8001974:	68a3      	ldr	r3, [r4, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b0c      	cmp	r3, #12
 800197c:	f43f ae3e 	beq.w	80015fc <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8001980:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001982:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001988:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800198a:	d137      	bne.n	80019fc <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 800198c:	f7fe ffb0 	bl	80008f0 <HAL_GetTick>
 8001990:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	019f      	lsls	r7, r3, #6
 8001996:	d42b      	bmi.n	80019f0 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001998:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800199a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800199c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019a0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80019a2:	3a01      	subs	r2, #1
 80019a4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80019a8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80019aa:	0912      	lsrs	r2, r2, #4
 80019ac:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80019b0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80019b2:	0852      	lsrs	r2, r2, #1
 80019b4:	3a01      	subs	r2, #1
 80019b6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80019ba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80019bc:	0852      	lsrs	r2, r2, #1
 80019be:	3a01      	subs	r2, #1
 80019c0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80019c4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019cc:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ce:	68e3      	ldr	r3, [r4, #12]
 80019d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80019d6:	f7fe ff8b 	bl	80008f0 <HAL_GetTick>
 80019da:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	0198      	lsls	r0, r3, #6
 80019e0:	f53f ae51 	bmi.w	8001686 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e4:	f7fe ff84 	bl	80008f0 <HAL_GetTick>
 80019e8:	1b40      	subs	r0, r0, r5
 80019ea:	2802      	cmp	r0, #2
 80019ec:	d9f6      	bls.n	80019dc <HAL_RCC_OscConfig+0x400>
 80019ee:	e684      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7fe ff7e 	bl	80008f0 <HAL_GetTick>
 80019f4:	1b80      	subs	r0, r0, r6
 80019f6:	2802      	cmp	r0, #2
 80019f8:	d9cb      	bls.n	8001992 <HAL_RCC_OscConfig+0x3b6>
 80019fa:	e67e      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	0119      	lsls	r1, r3, #4
 8001a00:	d406      	bmi.n	8001a10 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001a02:	6823      	ldr	r3, [r4, #0]
           &&
 8001a04:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a06:	bf5e      	ittt	pl
 8001a08:	68e3      	ldrpl	r3, [r4, #12]
 8001a0a:	f023 0303 	bicpl.w	r3, r3, #3
 8001a0e:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a10:	68e3      	ldr	r3, [r4, #12]
 8001a12:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001a1c:	f7fe ff68 	bl	80008f0 <HAL_GetTick>
 8001a20:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	019b      	lsls	r3, r3, #6
 8001a26:	f57f ae2e 	bpl.w	8001686 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7fe ff61 	bl	80008f0 <HAL_GetTick>
 8001a2e:	1b40      	subs	r0, r0, r5
 8001a30:	2802      	cmp	r0, #2
 8001a32:	d9f6      	bls.n	8001a22 <HAL_RCC_OscConfig+0x446>
 8001a34:	e661      	b.n	80016fa <HAL_RCC_OscConfig+0x11e>
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40007000 	.word	0x40007000

08001a40 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001a40:	4a56      	ldr	r2, [pc, #344]	; (8001b9c <HAL_RCC_ClockConfig+0x15c>)
 8001a42:	6813      	ldr	r3, [r2, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	428b      	cmp	r3, r1
{
 8001a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a4e:	4605      	mov	r5, r0
 8001a50:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001a52:	d32b      	bcc.n	8001aac <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	07d9      	lsls	r1, r3, #31
 8001a58:	d435      	bmi.n	8001ac6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5a:	6829      	ldr	r1, [r5, #0]
 8001a5c:	078a      	lsls	r2, r1, #30
 8001a5e:	f100 8083 	bmi.w	8001b68 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001a62:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <HAL_RCC_ClockConfig+0x15c>)
 8001a64:	6813      	ldr	r3, [r2, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	429e      	cmp	r6, r3
 8001a6c:	f0c0 8084 	bcc.w	8001b78 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	f011 0f04 	tst.w	r1, #4
 8001a74:	4c4a      	ldr	r4, [pc, #296]	; (8001ba0 <HAL_RCC_ClockConfig+0x160>)
 8001a76:	f040 808a 	bne.w	8001b8e <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7a:	070b      	lsls	r3, r1, #28
 8001a7c:	d506      	bpl.n	8001a8c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7e:	68a3      	ldr	r3, [r4, #8]
 8001a80:	692a      	ldr	r2, [r5, #16]
 8001a82:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a8a:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8c:	f7ff fd3e 	bl	800150c <HAL_RCC_GetSysClockFreq>
 8001a90:	68a3      	ldr	r3, [r4, #8]
 8001a92:	4a44      	ldr	r2, [pc, #272]	; (8001ba4 <HAL_RCC_ClockConfig+0x164>)
 8001a94:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	40d8      	lsrs	r0, r3
 8001a9c:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <HAL_RCC_ClockConfig+0x168>)
 8001a9e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7fe fefd 	bl	80008a0 <HAL_InitTick>
  return HAL_OK;
 8001aa6:	2000      	movs	r0, #0
}
 8001aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aac:	6813      	ldr	r3, [r2, #0]
 8001aae:	f023 0307 	bic.w	r3, r3, #7
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4299      	cmp	r1, r3
 8001abe:	d0c9      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac6:	686a      	ldr	r2, [r5, #4]
 8001ac8:	4c35      	ldr	r4, [pc, #212]	; (8001ba0 <HAL_RCC_ClockConfig+0x160>)
 8001aca:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001acc:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ace:	d11c      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001ad0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ad4:	d0f4      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	68a3      	ldr	r3, [r4, #8]
 8001ad8:	f023 0303 	bic.w	r3, r3, #3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001ae0:	f7fe ff06 	bl	80008f0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae4:	686b      	ldr	r3, [r5, #4]
 8001ae6:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8001ae8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aea:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aee:	d118      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af0:	68a3      	ldr	r3, [r4, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d0af      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afa:	f7fe fef9 	bl	80008f0 <HAL_GetTick>
 8001afe:	1bc0      	subs	r0, r0, r7
 8001b00:	4540      	cmp	r0, r8
 8001b02:	d9f5      	bls.n	8001af0 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001b04:	2003      	movs	r0, #3
 8001b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0a:	2a02      	cmp	r2, #2
 8001b0c:	d102      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001b0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b12:	e7df      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b14:	b912      	cbnz	r2, 8001b1c <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001b16:	f013 0f02 	tst.w	r3, #2
 8001b1a:	e7db      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001b1c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001b20:	e7d8      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d10a      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001b26:	68a3      	ldr	r3, [r4, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d094      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7fe fede 	bl	80008f0 <HAL_GetTick>
 8001b34:	1bc0      	subs	r0, r0, r7
 8001b36:	4540      	cmp	r0, r8
 8001b38:	d9f5      	bls.n	8001b26 <HAL_RCC_ClockConfig+0xe6>
 8001b3a:	e7e3      	b.n	8001b04 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b3c:	b973      	cbnz	r3, 8001b5c <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001b3e:	68a3      	ldr	r3, [r4, #8]
 8001b40:	f013 0f0c 	tst.w	r3, #12
 8001b44:	d089      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b46:	f7fe fed3 	bl	80008f0 <HAL_GetTick>
 8001b4a:	1bc0      	subs	r0, r0, r7
 8001b4c:	4540      	cmp	r0, r8
 8001b4e:	d9f6      	bls.n	8001b3e <HAL_RCC_ClockConfig+0xfe>
 8001b50:	e7d8      	b.n	8001b04 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7fe fecd 	bl	80008f0 <HAL_GetTick>
 8001b56:	1bc0      	subs	r0, r0, r7
 8001b58:	4540      	cmp	r0, r8
 8001b5a:	d8d3      	bhi.n	8001b04 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001b5c:	68a3      	ldr	r3, [r4, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d1f5      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x112>
 8001b66:	e778      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <HAL_RCC_ClockConfig+0x160>)
 8001b6a:	68a8      	ldr	r0, [r5, #8]
 8001b6c:	6893      	ldr	r3, [r2, #8]
 8001b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b72:	4303      	orrs	r3, r0
 8001b74:	6093      	str	r3, [r2, #8]
 8001b76:	e774      	b.n	8001a62 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b78:	6813      	ldr	r3, [r2, #0]
 8001b7a:	f023 0307 	bic.w	r3, r3, #7
 8001b7e:	4333      	orrs	r3, r6
 8001b80:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	429e      	cmp	r6, r3
 8001b8a:	d199      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x80>
 8001b8c:	e770      	b.n	8001a70 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8e:	68a3      	ldr	r3, [r4, #8]
 8001b90:	68ea      	ldr	r2, [r5, #12]
 8001b92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60a3      	str	r3, [r4, #8]
 8001b9a:	e76e      	b.n	8001a7a <HAL_RCC_ClockConfig+0x3a>
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08004bb9 	.word	0x08004bb9
 8001ba8:	20000018 	.word	0x20000018

08001bac <HAL_RCC_GetHCLKFreq>:
}
 8001bac:	4b01      	ldr	r3, [pc, #4]	; (8001bb4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000018 	.word	0x20000018

08001bb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001bba:	4b45      	ldr	r3, [pc, #276]	; (8001cd0 <RCCEx_PLLSAI1_Config+0x118>)
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	f012 0f03 	tst.w	r2, #3
{
 8001bc2:	4605      	mov	r5, r0
 8001bc4:	460e      	mov	r6, r1
 8001bc6:	461c      	mov	r4, r3
 8001bc8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001bca:	d02a      	beq.n	8001c22 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	f002 0203 	and.w	r2, r2, #3
 8001bd2:	4282      	cmp	r2, r0
 8001bd4:	d13c      	bne.n	8001c50 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d03a      	beq.n	8001c50 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001bda:	68db      	ldr	r3, [r3, #12]
       ||
 8001bdc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001bde:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001be2:	3301      	adds	r3, #1
       ||
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d133      	bne.n	8001c50 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001bee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bf0:	f7fe fe7e 	bl	80008f0 <HAL_GetTick>
 8001bf4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	011a      	lsls	r2, r3, #4
 8001bfa:	d432      	bmi.n	8001c62 <RCCEx_PLLSAI1_Config+0xaa>
 8001bfc:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001bfe:	2e00      	cmp	r6, #0
 8001c00:	d036      	beq.n	8001c70 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001c02:	2e01      	cmp	r6, #1
 8001c04:	d150      	bne.n	8001ca8 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001c06:	6922      	ldr	r2, [r4, #16]
 8001c08:	6928      	ldr	r0, [r5, #16]
 8001c0a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001c0e:	0840      	lsrs	r0, r0, #1
 8001c10:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001c14:	3801      	subs	r0, #1
 8001c16:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001c1a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001c1e:	6122      	str	r2, [r4, #16]
 8001c20:	e032      	b.n	8001c88 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001c22:	2802      	cmp	r0, #2
 8001c24:	d010      	beq.n	8001c48 <RCCEx_PLLSAI1_Config+0x90>
 8001c26:	2803      	cmp	r0, #3
 8001c28:	d014      	beq.n	8001c54 <RCCEx_PLLSAI1_Config+0x9c>
 8001c2a:	2801      	cmp	r0, #1
 8001c2c:	d110      	bne.n	8001c50 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	079f      	lsls	r7, r3, #30
 8001c32:	d538      	bpl.n	8001ca6 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001c34:	68e3      	ldr	r3, [r4, #12]
 8001c36:	686a      	ldr	r2, [r5, #4]
 8001c38:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001c3c:	3a01      	subs	r2, #1
 8001c3e:	4318      	orrs	r0, r3
 8001c40:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001c44:	60e0      	str	r0, [r4, #12]
 8001c46:	e7cf      	b.n	8001be8 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001c4e:	d1f1      	bne.n	8001c34 <RCCEx_PLLSAI1_Config+0x7c>
 8001c50:	2001      	movs	r0, #1
 8001c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	0391      	lsls	r1, r2, #14
 8001c58:	d4ec      	bmi.n	8001c34 <RCCEx_PLLSAI1_Config+0x7c>
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001c60:	e7f5      	b.n	8001c4e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001c62:	f7fe fe45 	bl	80008f0 <HAL_GetTick>
 8001c66:	1bc0      	subs	r0, r0, r7
 8001c68:	2802      	cmp	r0, #2
 8001c6a:	d9c4      	bls.n	8001bf6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001c70:	6921      	ldr	r1, [r4, #16]
 8001c72:	68eb      	ldr	r3, [r5, #12]
 8001c74:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001c78:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001c7c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001c86:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c8e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7fe fe2e 	bl	80008f0 <HAL_GetTick>
 8001c94:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	d513      	bpl.n	8001cc4 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001c9c:	6923      	ldr	r3, [r4, #16]
 8001c9e:	69aa      	ldr	r2, [r5, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	6123      	str	r3, [r4, #16]
 8001ca4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ca8:	6923      	ldr	r3, [r4, #16]
 8001caa:	6968      	ldr	r0, [r5, #20]
 8001cac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001cb0:	0840      	lsrs	r0, r0, #1
 8001cb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001cb6:	3801      	subs	r0, #1
 8001cb8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001cbc:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001cc0:	6123      	str	r3, [r4, #16]
 8001cc2:	e7e1      	b.n	8001c88 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001cc4:	f7fe fe14 	bl	80008f0 <HAL_GetTick>
 8001cc8:	1b80      	subs	r0, r0, r6
 8001cca:	2802      	cmp	r0, #2
 8001ccc:	d9e3      	bls.n	8001c96 <RCCEx_PLLSAI1_Config+0xde>
 8001cce:	e7cd      	b.n	8001c6c <RCCEx_PLLSAI1_Config+0xb4>
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <RCCEx_PLLSAI2_Config+0xf8>)
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	f012 0f03 	tst.w	r2, #3
{
 8001cde:	4605      	mov	r5, r0
 8001ce0:	460e      	mov	r6, r1
 8001ce2:	461c      	mov	r4, r3
 8001ce4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ce6:	d028      	beq.n	8001d3a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	4282      	cmp	r2, r0
 8001cf0:	d13a      	bne.n	8001d68 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001cf2:	2a00      	cmp	r2, #0
 8001cf4:	d038      	beq.n	8001d68 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001cf6:	68db      	ldr	r3, [r3, #12]
       ||
 8001cf8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001cfa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001cfe:	3301      	adds	r3, #1
       ||
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d131      	bne.n	8001d68 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d0c:	f7fe fdf0 	bl	80008f0 <HAL_GetTick>
 8001d10:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	009a      	lsls	r2, r3, #2
 8001d16:	d430      	bmi.n	8001d7a <RCCEx_PLLSAI2_Config+0xa6>
 8001d18:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001d1a:	2e00      	cmp	r6, #0
 8001d1c:	d034      	beq.n	8001d88 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001d1e:	6963      	ldr	r3, [r4, #20]
 8001d20:	6929      	ldr	r1, [r5, #16]
 8001d22:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001d26:	0849      	lsrs	r1, r1, #1
 8001d28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d2c:	3901      	subs	r1, #1
 8001d2e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001d32:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001d36:	6163      	str	r3, [r4, #20]
 8001d38:	e032      	b.n	8001da0 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001d3a:	2802      	cmp	r0, #2
 8001d3c:	d010      	beq.n	8001d60 <RCCEx_PLLSAI2_Config+0x8c>
 8001d3e:	2803      	cmp	r0, #3
 8001d40:	d014      	beq.n	8001d6c <RCCEx_PLLSAI2_Config+0x98>
 8001d42:	2801      	cmp	r0, #1
 8001d44:	d110      	bne.n	8001d68 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	079f      	lsls	r7, r3, #30
 8001d4a:	d538      	bpl.n	8001dbe <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001d4c:	68e3      	ldr	r3, [r4, #12]
 8001d4e:	686a      	ldr	r2, [r5, #4]
 8001d50:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001d54:	3a01      	subs	r2, #1
 8001d56:	4318      	orrs	r0, r3
 8001d58:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001d5c:	60e0      	str	r0, [r4, #12]
 8001d5e:	e7d1      	b.n	8001d04 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d66:	d1f1      	bne.n	8001d4c <RCCEx_PLLSAI2_Config+0x78>
 8001d68:	2001      	movs	r0, #1
 8001d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	0391      	lsls	r1, r2, #14
 8001d70:	d4ec      	bmi.n	8001d4c <RCCEx_PLLSAI2_Config+0x78>
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001d78:	e7f5      	b.n	8001d66 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001d7a:	f7fe fdb9 	bl	80008f0 <HAL_GetTick>
 8001d7e:	1bc0      	subs	r0, r0, r7
 8001d80:	2802      	cmp	r0, #2
 8001d82:	d9c6      	bls.n	8001d12 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001d84:	2003      	movs	r0, #3
 8001d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001d88:	6962      	ldr	r2, [r4, #20]
 8001d8a:	68eb      	ldr	r3, [r5, #12]
 8001d8c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001d90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d94:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001d9e:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7fe fda2 	bl	80008f0 <HAL_GetTick>
 8001dac:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	d505      	bpl.n	8001dc0 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001db4:	6963      	ldr	r3, [r4, #20]
 8001db6:	696a      	ldr	r2, [r5, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	6163      	str	r3, [r4, #20]
 8001dbc:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001dc0:	f7fe fd96 	bl	80008f0 <HAL_GetTick>
 8001dc4:	1b80      	subs	r0, r0, r6
 8001dc6:	2802      	cmp	r0, #2
 8001dc8:	d9f1      	bls.n	8001dae <RCCEx_PLLSAI2_Config+0xda>
 8001dca:	e7db      	b.n	8001d84 <RCCEx_PLLSAI2_Config+0xb0>
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001dd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dd4:	6806      	ldr	r6, [r0, #0]
 8001dd6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001dda:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ddc:	d024      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001dde:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001de0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001de4:	d02c      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001de6:	d802      	bhi.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001de8:	b1c1      	cbz	r1, 8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001dea:	2601      	movs	r6, #1
 8001dec:	e01c      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001dee:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001df2:	d00d      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001df4:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001df8:	d1f7      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dfa:	4a53      	ldr	r2, [pc, #332]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001dfc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001dfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e02:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e06:	430b      	orrs	r3, r1
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e0c:	2600      	movs	r6, #0
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e10:	4a4d      	ldr	r2, [pc, #308]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001e12:	68d3      	ldr	r3, [r2, #12]
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	60d3      	str	r3, [r2, #12]
      break;
 8001e1a:	e7ee      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e1c:	3004      	adds	r0, #4
 8001e1e:	f7ff fecb 	bl	8001bb8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e22:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d0e8      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	04d8      	lsls	r0, r3, #19
 8001e2c:	d506      	bpl.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001e2e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001e30:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001e34:	d07c      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001e36:	d808      	bhi.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001e38:	b1a9      	cbz	r1, 8001e66 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001e3a:	2601      	movs	r6, #1
 8001e3c:	4635      	mov	r5, r6
 8001e3e:	e021      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e40:	2100      	movs	r1, #0
 8001e42:	3020      	adds	r0, #32
 8001e44:	f7ff ff46 	bl	8001cd4 <RCCEx_PLLSAI2_Config>
 8001e48:	e7eb      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001e4a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001e4e:	d004      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001e50:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001e54:	d1f1      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001e56:	4635      	mov	r5, r6
 8001e58:	e009      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e5a:	4a3b      	ldr	r2, [pc, #236]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001e5c:	68d3      	ldr	r3, [r2, #12]
 8001e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e62:	60d3      	str	r3, [r2, #12]
 8001e64:	e7f7      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e66:	1d20      	adds	r0, r4, #4
 8001e68:	f7ff fea6 	bl	8001bb8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e6c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001e6e:	2d00      	cmp	r5, #0
 8001e70:	d164      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e72:	4a35      	ldr	r2, [pc, #212]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001e74:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001e76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e7a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	0399      	lsls	r1, r3, #14
 8001e88:	f140 815b 	bpl.w	8002142 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8c:	4f2e      	ldr	r7, [pc, #184]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001e8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e90:	00da      	lsls	r2, r3, #3
 8001e92:	d455      	bmi.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ea6:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eaa:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001f4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001eae:	f8d9 3000 	ldr.w	r3, [r9]
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001eba:	f7fe fd19 	bl	80008f0 <HAL_GetTick>
 8001ebe:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001ec0:	f8d9 3000 	ldr.w	r3, [r9]
 8001ec4:	05db      	lsls	r3, r3, #23
 8001ec6:	d543      	bpl.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 8001ec8:	2d00      	cmp	r5, #0
 8001eca:	d148      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ecc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ed0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ed4:	d015      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001ed6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d011      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ee2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001ee6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001eea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001efa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f02:	07d8      	lsls	r0, r3, #31
 8001f04:	d509      	bpl.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 8001f06:	f7fe fcf3 	bl	80008f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f0e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f14:	0799      	lsls	r1, r3, #30
 8001f16:	f140 810d 	bpl.w	8002134 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f1e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f2c:	4635      	mov	r5, r6
 8001f2e:	e016      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f30:	2100      	movs	r1, #0
 8001f32:	f104 0020 	add.w	r0, r4, #32
 8001f36:	f7ff fecd 	bl	8001cd4 <RCCEx_PLLSAI2_Config>
 8001f3a:	e797      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001f3c:	462e      	mov	r6, r5
 8001f3e:	e7a1      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8001f40:	f04f 0800 	mov.w	r8, #0
 8001f44:	e7b1      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f50:	f7fe fcce 	bl	80008f0 <HAL_GetTick>
 8001f54:	eba0 000a 	sub.w	r0, r0, sl
 8001f58:	2802      	cmp	r0, #2
 8001f5a:	d9b1      	bls.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8001f5c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001f5e:	f1b8 0f00 	cmp.w	r8, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	07da      	lsls	r2, r3, #31
 8001f70:	d508      	bpl.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f72:	498a      	ldr	r1, [pc, #552]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f74:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001f76:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f7a:	f022 0203 	bic.w	r2, r2, #3
 8001f7e:	4302      	orrs	r2, r0
 8001f80:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f84:	079f      	lsls	r7, r3, #30
 8001f86:	d508      	bpl.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f88:	4984      	ldr	r1, [pc, #528]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f8a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001f8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f90:	f022 020c 	bic.w	r2, r2, #12
 8001f94:	4302      	orrs	r2, r0
 8001f96:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f9a:	075e      	lsls	r6, r3, #29
 8001f9c:	d508      	bpl.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f9e:	497f      	ldr	r1, [pc, #508]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fa0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001fa2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fa6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001faa:	4302      	orrs	r2, r0
 8001fac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fb0:	0718      	lsls	r0, r3, #28
 8001fb2:	d508      	bpl.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fb4:	4979      	ldr	r1, [pc, #484]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fb6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001fb8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fbc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001fc0:	4302      	orrs	r2, r0
 8001fc2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fc6:	06d9      	lsls	r1, r3, #27
 8001fc8:	d508      	bpl.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fca:	4974      	ldr	r1, [pc, #464]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fcc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001fce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001fd6:	4302      	orrs	r2, r0
 8001fd8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fdc:	069a      	lsls	r2, r3, #26
 8001fde:	d508      	bpl.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fe0:	496e      	ldr	r1, [pc, #440]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fe2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001fe4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fe8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001fec:	4302      	orrs	r2, r0
 8001fee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ff2:	059f      	lsls	r7, r3, #22
 8001ff4:	d508      	bpl.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ff6:	4969      	ldr	r1, [pc, #420]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ff8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001ffa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ffe:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002002:	4302      	orrs	r2, r0
 8002004:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002008:	055e      	lsls	r6, r3, #21
 800200a:	d508      	bpl.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800200c:	4963      	ldr	r1, [pc, #396]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800200e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002010:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002014:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002018:	4302      	orrs	r2, r0
 800201a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800201e:	0658      	lsls	r0, r3, #25
 8002020:	d508      	bpl.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002022:	495e      	ldr	r1, [pc, #376]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002024:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002026:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800202a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800202e:	4302      	orrs	r2, r0
 8002030:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002034:	0619      	lsls	r1, r3, #24
 8002036:	d508      	bpl.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002038:	4958      	ldr	r1, [pc, #352]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800203a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800203c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002040:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002044:	4302      	orrs	r2, r0
 8002046:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800204a:	05da      	lsls	r2, r3, #23
 800204c:	d508      	bpl.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800204e:	4953      	ldr	r1, [pc, #332]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002052:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002056:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800205a:	4302      	orrs	r2, r0
 800205c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002060:	049b      	lsls	r3, r3, #18
 8002062:	d50f      	bpl.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002064:	4a4d      	ldr	r2, [pc, #308]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002066:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002068:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800206c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002070:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002072:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002076:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800207a:	d164      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800207c:	68d3      	ldr	r3, [r2, #12]
 800207e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002082:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	031f      	lsls	r7, r3, #12
 8002088:	d50f      	bpl.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800208a:	4a44      	ldr	r2, [pc, #272]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800208c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800208e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002092:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002096:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002098:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800209c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020a0:	d15c      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a2:	68d3      	ldr	r3, [r2, #12]
 80020a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	035e      	lsls	r6, r3, #13
 80020ae:	d50f      	bpl.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020b0:	4a3a      	ldr	r2, [pc, #232]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020b2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80020b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020b8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80020bc:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020be:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020c6:	d154      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020c8:	68d3      	ldr	r3, [r2, #12]
 80020ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ce:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	0458      	lsls	r0, r3, #17
 80020d4:	d512      	bpl.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020d6:	4931      	ldr	r1, [pc, #196]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020d8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80020da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020de:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80020e2:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020e4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020ec:	d14c      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80020ee:	2102      	movs	r1, #2
 80020f0:	1d20      	adds	r0, r4, #4
 80020f2:	f7ff fd61 	bl	8001bb8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80020f6:	2800      	cmp	r0, #0
 80020f8:	bf18      	it	ne
 80020fa:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80020fc:	6822      	ldr	r2, [r4, #0]
 80020fe:	0411      	lsls	r1, r2, #16
 8002100:	d508      	bpl.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002102:	4926      	ldr	r1, [pc, #152]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002104:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002106:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800210a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800210e:	4303      	orrs	r3, r0
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002114:	03d3      	lsls	r3, r2, #15
 8002116:	d509      	bpl.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002118:	4a20      	ldr	r2, [pc, #128]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800211a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800211e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002122:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002126:	430b      	orrs	r3, r1
 8002128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800212c:	4628      	mov	r0, r5
 800212e:	b002      	add	sp, #8
 8002130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f7fe fbdc 	bl	80008f0 <HAL_GetTick>
 8002138:	1b40      	subs	r0, r0, r5
 800213a:	4548      	cmp	r0, r9
 800213c:	f67f aee8 	bls.w	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002140:	e70c      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002142:	4635      	mov	r5, r6
 8002144:	e712      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002146:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800214a:	d19b      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800214c:	2101      	movs	r1, #1
 800214e:	1d20      	adds	r0, r4, #4
 8002150:	f7ff fd32 	bl	8001bb8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002154:	2800      	cmp	r0, #0
 8002156:	bf18      	it	ne
 8002158:	4605      	movne	r5, r0
 800215a:	e793      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800215c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002160:	d1a3      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002162:	2101      	movs	r1, #1
 8002164:	1d20      	adds	r0, r4, #4
 8002166:	f7ff fd27 	bl	8001bb8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800216a:	2800      	cmp	r0, #0
 800216c:	bf18      	it	ne
 800216e:	4605      	movne	r5, r0
 8002170:	e79b      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002172:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002176:	d1ab      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002178:	2101      	movs	r1, #1
 800217a:	1d20      	adds	r0, r4, #4
 800217c:	f7ff fd1c 	bl	8001bb8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002180:	2800      	cmp	r0, #0
 8002182:	bf18      	it	ne
 8002184:	4605      	movne	r5, r0
 8002186:	e7a3      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002188:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800218c:	d1b6      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800218e:	2102      	movs	r1, #2
 8002190:	f104 0020 	add.w	r0, r4, #32
 8002194:	f7ff fd9e 	bl	8001cd4 <RCCEx_PLLSAI2_Config>
 8002198:	e7ad      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000

080021a0 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80021a0:	4a02      	ldr	r2, [pc, #8]	; (80021ac <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80021a2:	6813      	ldr	r3, [r2, #0]
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4770      	bx	lr
 80021ac:	40021000 	.word	0x40021000

080021b0 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021b0:	6803      	ldr	r3, [r0, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ba:	6842      	ldr	r2, [r0, #4]
 80021bc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80021c0:	d10a      	bne.n	80021d8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 80021c2:	6882      	ldr	r2, [r0, #8]
 80021c4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80021c8:	d002      	beq.n	80021d0 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80021ce:	d103      	bne.n	80021d8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80021da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80021de:	d107      	bne.n	80021f0 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021f6:	2300      	movs	r3, #0
 80021f8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80021fc:	2003      	movs	r0, #3
 80021fe:	4770      	bx	lr

08002200 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	4605      	mov	r5, r0
 8002204:	460c      	mov	r4, r1
 8002206:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002208:	682b      	ldr	r3, [r5, #0]
 800220a:	6898      	ldr	r0, [r3, #8]
 800220c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002210:	d00d      	beq.n	800222e <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8002212:	1c62      	adds	r2, r4, #1
 8002214:	d0f9      	beq.n	800220a <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002216:	b924      	cbnz	r4, 8002222 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8002218:	4628      	mov	r0, r5
}
 800221a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800221e:	f7ff bfc7 	b.w	80021b0 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002222:	f7fe fb65 	bl	80008f0 <HAL_GetTick>
 8002226:	1b80      	subs	r0, r0, r6
 8002228:	4284      	cmp	r4, r0
 800222a:	d8ed      	bhi.n	8002208 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 800222c:	e7f4      	b.n	8002218 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 800222e:	bd70      	pop	{r4, r5, r6, pc}

08002230 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002232:	4606      	mov	r6, r0
 8002234:	460c      	mov	r4, r1
 8002236:	4615      	mov	r5, r2
 8002238:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800223a:	6831      	ldr	r1, [r6, #0]
 800223c:	6888      	ldr	r0, [r1, #8]
 800223e:	4020      	ands	r0, r4
 8002240:	d00e      	beq.n	8002260 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002242:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002246:	bf01      	itttt	eq
 8002248:	7b0a      	ldrbeq	r2, [r1, #12]
 800224a:	b2d2      	uxtbeq	r2, r2
 800224c:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8002250:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8002254:	1c6b      	adds	r3, r5, #1
 8002256:	d0f1      	beq.n	800223c <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002258:	b925      	cbnz	r5, 8002264 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 800225a:	4630      	mov	r0, r6
 800225c:	f7ff ffa8 	bl	80021b0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8002260:	b003      	add	sp, #12
 8002262:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002264:	f7fe fb44 	bl	80008f0 <HAL_GetTick>
 8002268:	1bc0      	subs	r0, r0, r7
 800226a:	4285      	cmp	r5, r0
 800226c:	d8e5      	bhi.n	800223a <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 800226e:	e7f4      	b.n	800225a <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08002270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002272:	4613      	mov	r3, r2
{
 8002274:	460d      	mov	r5, r1
 8002276:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002278:	460a      	mov	r2, r1
 800227a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800227e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002280:	f7ff ffd6 	bl	8002230 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002284:	b128      	cbz	r0, 8002292 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002286:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002288:	f043 0320 	orr.w	r3, r3, #32
 800228c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800228e:	2003      	movs	r0, #3
 8002290:	e00f      	b.n	80022b2 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002292:	4632      	mov	r2, r6
 8002294:	4629      	mov	r1, r5
 8002296:	4620      	mov	r0, r4
 8002298:	f7ff ffb2 	bl	8002200 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 800229c:	2800      	cmp	r0, #0
 800229e:	d1f2      	bne.n	8002286 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022a0:	4633      	mov	r3, r6
 80022a2:	462a      	mov	r2, r5
 80022a4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80022a8:	4620      	mov	r0, r4
 80022aa:	f7ff ffc1 	bl	8002230 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d1e9      	bne.n	8002286 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80022b2:	bd70      	pop	{r4, r5, r6, pc}

080022b4 <SPI_EndRxTransaction>:
{
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022b6:	6843      	ldr	r3, [r0, #4]
 80022b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80022bc:	4604      	mov	r4, r0
 80022be:	460e      	mov	r6, r1
 80022c0:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022c2:	d10b      	bne.n	80022dc <SPI_EndRxTransaction+0x28>
 80022c4:	6883      	ldr	r3, [r0, #8]
 80022c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ca:	d002      	beq.n	80022d2 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d0:	d104      	bne.n	80022dc <SPI_EndRxTransaction+0x28>
    __HAL_SPI_DISABLE(hspi);
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022da:	601a      	str	r2, [r3, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022dc:	463a      	mov	r2, r7
 80022de:	4631      	mov	r1, r6
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff ff8d 	bl	8002200 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80022e6:	4605      	mov	r5, r0
 80022e8:	b128      	cbz	r0, 80022f6 <SPI_EndRxTransaction+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80022ec:	f043 0320 	orr.w	r3, r3, #32
 80022f0:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80022f2:	2503      	movs	r5, #3
 80022f4:	e013      	b.n	800231e <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022f6:	6863      	ldr	r3, [r4, #4]
 80022f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022fc:	d10f      	bne.n	800231e <SPI_EndRxTransaction+0x6a>
 80022fe:	68a3      	ldr	r3, [r4, #8]
 8002300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002304:	d002      	beq.n	800230c <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230a:	d108      	bne.n	800231e <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800230c:	463b      	mov	r3, r7
 800230e:	4632      	mov	r2, r6
 8002310:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002314:	4620      	mov	r0, r4
 8002316:	f7ff ff8b 	bl	8002230 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 800231a:	2800      	cmp	r0, #0
 800231c:	d1e5      	bne.n	80022ea <SPI_EndRxTransaction+0x36>
}
 800231e:	4628      	mov	r0, r5
 8002320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002322 <HAL_SPI_Init>:
{
 8002322:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002324:	4604      	mov	r4, r0
 8002326:	2800      	cmp	r0, #0
 8002328:	d04a      	beq.n	80023c0 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800232e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002332:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002336:	b91b      	cbnz	r3, 8002340 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002338:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800233c:	f001 fcf0 	bl	8003d20 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002340:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002342:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002344:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002348:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800234a:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800234c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002350:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002354:	600b      	str	r3, [r1, #0]
 8002356:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800235a:	d92e      	bls.n	80023ba <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800235c:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800235e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002362:	bf18      	it	ne
 8002364:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002366:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002368:	b92b      	cbnz	r3, 8002376 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800236a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800236e:	bf8c      	ite	hi
 8002370:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002372:	2301      	movls	r3, #1
 8002374:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002376:	68a6      	ldr	r6, [r4, #8]
 8002378:	6863      	ldr	r3, [r4, #4]
 800237a:	69a5      	ldr	r5, [r4, #24]
 800237c:	4333      	orrs	r3, r6
 800237e:	6926      	ldr	r6, [r4, #16]
 8002380:	4333      	orrs	r3, r6
 8002382:	6966      	ldr	r6, [r4, #20]
 8002384:	4333      	orrs	r3, r6
 8002386:	69e6      	ldr	r6, [r4, #28]
 8002388:	4333      	orrs	r3, r6
 800238a:	6a26      	ldr	r6, [r4, #32]
 800238c:	4333      	orrs	r3, r6
 800238e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002390:	4333      	orrs	r3, r6
 8002392:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8002396:	4333      	orrs	r3, r6
 8002398:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800239a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800239c:	431a      	orrs	r2, r3
 800239e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023a0:	0c2d      	lsrs	r5, r5, #16
 80023a2:	431a      	orrs	r2, r3
 80023a4:	f005 0504 	and.w	r5, r5, #4
 80023a8:	432a      	orrs	r2, r5
 80023aa:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 80023ac:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ae:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80023b0:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023b2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023b4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80023b8:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80023be:	e7d0      	b.n	8002362 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80023c0:	2001      	movs	r0, #1
}
 80023c2:	bd70      	pop	{r4, r5, r6, pc}

080023c4 <HAL_SPI_DeInit>:
{
 80023c4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80023c6:	4604      	mov	r4, r0
 80023c8:	b180      	cbz	r0, 80023ec <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 80023ca:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80023cc:	2302      	movs	r3, #2
 80023ce:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80023d2:	6813      	ldr	r3, [r2, #0]
 80023d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023d8:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80023da:	f001 fce9 	bl	8003db0 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023de:	2000      	movs	r0, #0
 80023e0:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 80023e2:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 80023e6:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  return HAL_OK;
 80023ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023ec:	2001      	movs	r0, #1
}
 80023ee:	bd10      	pop	{r4, pc}

080023f0 <HAL_SPI_Transmit>:
{
 80023f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80023f4:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80023f6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80023fa:	2b01      	cmp	r3, #1
{
 80023fc:	4604      	mov	r4, r0
 80023fe:	460d      	mov	r5, r1
 8002400:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002402:	f000 80b1 	beq.w	8002568 <HAL_SPI_Transmit+0x178>
 8002406:	2301      	movs	r3, #1
 8002408:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800240c:	f7fe fa70 	bl	80008f0 <HAL_GetTick>
 8002410:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002412:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8002416:	b2c0      	uxtb	r0, r0
 8002418:	2801      	cmp	r0, #1
 800241a:	f040 80a3 	bne.w	8002564 <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 800241e:	2d00      	cmp	r5, #0
 8002420:	d057      	beq.n	80024d2 <HAL_SPI_Transmit+0xe2>
 8002422:	f1b8 0f00 	cmp.w	r8, #0
 8002426:	d054      	beq.n	80024d2 <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002428:	2303      	movs	r3, #3
 800242a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800242e:	2300      	movs	r3, #0
 8002430:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002432:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8002434:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8002438:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800243c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002440:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002442:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002444:	68a3      	ldr	r3, [r4, #8]
 8002446:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002448:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800244a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 800244e:	bf08      	it	eq
 8002450:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8002452:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8002456:	bf04      	itt	eq
 8002458:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 800245c:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800245e:	6803      	ldr	r3, [r0, #0]
 8002460:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002462:	bf5e      	ittt	pl
 8002464:	6803      	ldrpl	r3, [r0, #0]
 8002466:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800246a:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800246c:	68e3      	ldr	r3, [r4, #12]
 800246e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002472:	6863      	ldr	r3, [r4, #4]
 8002474:	d93e      	bls.n	80024f4 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002476:	b11b      	cbz	r3, 8002480 <HAL_SPI_Transmit+0x90>
 8002478:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d106      	bne.n	800248e <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 8002480:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002484:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8002486:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002488:	3b01      	subs	r3, #1
 800248a:	b29b      	uxth	r3, r3
 800248c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800248e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	b9a3      	cbnz	r3, 80024be <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002494:	463a      	mov	r2, r7
 8002496:	4631      	mov	r1, r6
 8002498:	4620      	mov	r0, r4
 800249a:	f7ff fee9 	bl	8002270 <SPI_EndRxTxTransaction>
 800249e:	2800      	cmp	r0, #0
 80024a0:	d15d      	bne.n	800255e <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024a2:	68a3      	ldr	r3, [r4, #8]
 80024a4:	b933      	cbnz	r3, 80024b4 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	9201      	str	r2, [sp, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b4:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80024b6:	3000      	adds	r0, #0
 80024b8:	bf18      	it	ne
 80024ba:	2001      	movne	r0, #1
 80024bc:	e009      	b.n	80024d2 <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	0790      	lsls	r0, r2, #30
 80024c4:	d503      	bpl.n	80024ce <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 80024c6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80024ca:	60da      	str	r2, [r3, #12]
 80024cc:	e7db      	b.n	8002486 <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80024ce:	b94e      	cbnz	r6, 80024e4 <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 80024d0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80024d8:	2300      	movs	r3, #0
 80024da:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80024de:	b002      	add	sp, #8
 80024e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80024e4:	1c71      	adds	r1, r6, #1
 80024e6:	d0d2      	beq.n	800248e <HAL_SPI_Transmit+0x9e>
 80024e8:	f7fe fa02 	bl	80008f0 <HAL_GetTick>
 80024ec:	1bc0      	subs	r0, r0, r7
 80024ee:	4286      	cmp	r6, r0
 80024f0:	d8cd      	bhi.n	800248e <HAL_SPI_Transmit+0x9e>
 80024f2:	e7ed      	b.n	80024d0 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80024f4:	b11b      	cbz	r3, 80024fe <HAL_SPI_Transmit+0x10e>
 80024f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d10a      	bne.n	8002514 <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 80024fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d916      	bls.n	8002534 <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 8002506:	f835 3b02 	ldrh.w	r3, [r5], #2
 800250a:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 800250c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800250e:	3b02      	subs	r3, #2
 8002510:	b29b      	uxth	r3, r3
 8002512:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002514:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0bb      	beq.n	8002494 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	0792      	lsls	r2, r2, #30
 8002522:	d512      	bpl.n	800254a <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 8002524:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002526:	b292      	uxth	r2, r2
 8002528:	2a01      	cmp	r2, #1
 800252a:	d90b      	bls.n	8002544 <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 800252c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	e7eb      	b.n	800250c <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002534:	782b      	ldrb	r3, [r5, #0]
 8002536:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 8002538:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800253a:	3b01      	subs	r3, #1
 800253c:	b29b      	uxth	r3, r3
 800253e:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002540:	3501      	adds	r5, #1
 8002542:	e7e7      	b.n	8002514 <HAL_SPI_Transmit+0x124>
 8002544:	782a      	ldrb	r2, [r5, #0]
 8002546:	731a      	strb	r2, [r3, #12]
 8002548:	e7f6      	b.n	8002538 <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800254a:	2e00      	cmp	r6, #0
 800254c:	d0c0      	beq.n	80024d0 <HAL_SPI_Transmit+0xe0>
 800254e:	1c73      	adds	r3, r6, #1
 8002550:	d0e0      	beq.n	8002514 <HAL_SPI_Transmit+0x124>
 8002552:	f7fe f9cd 	bl	80008f0 <HAL_GetTick>
 8002556:	1bc0      	subs	r0, r0, r7
 8002558:	4286      	cmp	r6, r0
 800255a:	d8db      	bhi.n	8002514 <HAL_SPI_Transmit+0x124>
 800255c:	e7b8      	b.n	80024d0 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800255e:	2320      	movs	r3, #32
 8002560:	6623      	str	r3, [r4, #96]	; 0x60
 8002562:	e79e      	b.n	80024a2 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8002564:	2002      	movs	r0, #2
 8002566:	e7b4      	b.n	80024d2 <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 8002568:	2002      	movs	r0, #2
 800256a:	e7b8      	b.n	80024de <HAL_SPI_Transmit+0xee>

0800256c <HAL_SPI_TransmitReceive>:
{
 800256c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002570:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002572:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8002576:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 800257a:	2b01      	cmp	r3, #1
{
 800257c:	4604      	mov	r4, r0
 800257e:	460d      	mov	r5, r1
 8002580:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 8002582:	f000 8112 	beq.w	80027aa <HAL_SPI_TransmitReceive+0x23e>
 8002586:	2301      	movs	r3, #1
 8002588:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800258c:	f7fe f9b0 	bl	80008f0 <HAL_GetTick>
  tmp  = hspi->State;
 8002590:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 8002594:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8002596:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002598:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800259a:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800259c:	d00a      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x48>
 800259e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80025a2:	f040 8100 	bne.w	80027a6 <HAL_SPI_TransmitReceive+0x23a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80025a6:	68a2      	ldr	r2, [r4, #8]
 80025a8:	2a00      	cmp	r2, #0
 80025aa:	f040 80fc 	bne.w	80027a6 <HAL_SPI_TransmitReceive+0x23a>
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	f040 80f9 	bne.w	80027a6 <HAL_SPI_TransmitReceive+0x23a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025b4:	2d00      	cmp	r5, #0
 80025b6:	d04b      	beq.n	8002650 <HAL_SPI_TransmitReceive+0xe4>
 80025b8:	2e00      	cmp	r6, #0
 80025ba:	d049      	beq.n	8002650 <HAL_SPI_TransmitReceive+0xe4>
 80025bc:	2f00      	cmp	r7, #0
 80025be:	d047      	beq.n	8002650 <HAL_SPI_TransmitReceive+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025c0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80025c4:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025c6:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025c8:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025ca:	bf1c      	itt	ne
 80025cc:	2305      	movne	r3, #5
 80025ce:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025d2:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80025d4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025d8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80025da:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80025dc:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80025e0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80025e2:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025e6:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80025e8:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80025ea:	87a7      	strh	r7, [r4, #60]	; 0x3c
 80025ec:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80025ee:	d804      	bhi.n	80025fa <HAL_SPI_TransmitReceive+0x8e>
 80025f0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80025f4:	b292      	uxth	r2, r2
 80025f6:	2a01      	cmp	r2, #1
 80025f8:	d92c      	bls.n	8002654 <HAL_SPI_TransmitReceive+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002600:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002606:	bf5e      	ittt	pl
 8002608:	681a      	ldrpl	r2, [r3, #0]
 800260a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800260e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002610:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002614:	d956      	bls.n	80026c4 <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002616:	b119      	cbz	r1, 8002620 <HAL_SPI_TransmitReceive+0xb4>
 8002618:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800261a:	b292      	uxth	r2, r2
 800261c:	2a01      	cmp	r2, #1
 800261e:	d106      	bne.n	800262e <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002620:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002624:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002626:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002628:	3b01      	subs	r3, #1
 800262a:	b29b      	uxth	r3, r3
 800262c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800262e:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002630:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002632:	b29b      	uxth	r3, r3
 8002634:	b993      	cbnz	r3, 800265c <HAL_SPI_TransmitReceive+0xf0>
 8002636:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800263a:	b29b      	uxth	r3, r3
 800263c:	b973      	cbnz	r3, 800265c <HAL_SPI_TransmitReceive+0xf0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800263e:	464a      	mov	r2, r9
 8002640:	4641      	mov	r1, r8
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff fe14 	bl	8002270 <SPI_EndRxTxTransaction>
 8002648:	2800      	cmp	r0, #0
 800264a:	d033      	beq.n	80026b4 <HAL_SPI_TransmitReceive+0x148>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800264c:	2320      	movs	r3, #32
 800264e:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002650:	2001      	movs	r0, #1
 8002652:	e02f      	b.n	80026b4 <HAL_SPI_TransmitReceive+0x148>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800265a:	e7d1      	b.n	8002600 <HAL_SPI_TransmitReceive+0x94>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800265c:	b177      	cbz	r7, 800267c <HAL_SPI_TransmitReceive+0x110>
 800265e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002660:	b29b      	uxth	r3, r3
 8002662:	b15b      	cbz	r3, 800267c <HAL_SPI_TransmitReceive+0x110>
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	0792      	lsls	r2, r2, #30
 800266a:	d507      	bpl.n	800267c <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800266c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002670:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002672:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002674:	3b01      	subs	r3, #1
 8002676:	b29b      	uxth	r3, r3
 8002678:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800267a:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800267c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002680:	b29b      	uxth	r3, r3
 8002682:	b16b      	cbz	r3, 80026a0 <HAL_SPI_TransmitReceive+0x134>
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	07d0      	lsls	r0, r2, #31
 800268a:	d509      	bpl.n	80026a0 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002692:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002696:	3b01      	subs	r3, #1
 8002698:	b29b      	uxth	r3, r3
 800269a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800269e:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80026a0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80026a4:	d0c4      	beq.n	8002630 <HAL_SPI_TransmitReceive+0xc4>
 80026a6:	f7fe f923 	bl	80008f0 <HAL_GetTick>
 80026aa:	eba0 0009 	sub.w	r0, r0, r9
 80026ae:	4580      	cmp	r8, r0
 80026b0:	d8be      	bhi.n	8002630 <HAL_SPI_TransmitReceive+0xc4>
        errorcode = HAL_TIMEOUT;
 80026b2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80026ba:	2300      	movs	r3, #0
 80026bc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80026c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80026c4:	b119      	cbz	r1, 80026ce <HAL_SPI_TransmitReceive+0x162>
 80026c6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80026c8:	b292      	uxth	r2, r2
 80026ca:	2a01      	cmp	r2, #1
 80026cc:	d10a      	bne.n	80026e4 <HAL_SPI_TransmitReceive+0x178>
      if (hspi->TxXferCount > 1U)
 80026ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80026d0:	b292      	uxth	r2, r2
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d94d      	bls.n	8002772 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80026d6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80026da:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80026dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026de:	3b02      	subs	r3, #2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80026e4:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	b923      	cbnz	r3, 80026f6 <HAL_SPI_TransmitReceive+0x18a>
 80026ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0a3      	beq.n	800263e <HAL_SPI_TransmitReceive+0xd2>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80026f6:	b197      	cbz	r7, 800271e <HAL_SPI_TransmitReceive+0x1b2>
 80026f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	b17b      	cbz	r3, 800271e <HAL_SPI_TransmitReceive+0x1b2>
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	0791      	lsls	r1, r2, #30
 8002704:	d50b      	bpl.n	800271e <HAL_SPI_TransmitReceive+0x1b2>
        if (hspi->TxXferCount > 1U)
 8002706:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002708:	b292      	uxth	r2, r2
 800270a:	2a01      	cmp	r2, #1
 800270c:	d939      	bls.n	8002782 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800270e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002712:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8002714:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002716:	3b02      	subs	r3, #2
 8002718:	b29b      	uxth	r3, r3
 800271a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800271c:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800271e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002722:	b29b      	uxth	r3, r3
 8002724:	b1db      	cbz	r3, 800275e <HAL_SPI_TransmitReceive+0x1f2>
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	07d2      	lsls	r2, r2, #31
 800272c:	d517      	bpl.n	800275e <HAL_SPI_TransmitReceive+0x1f2>
        if (hspi->RxXferCount > 1U)
 800272e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002732:	b292      	uxth	r2, r2
 8002734:	2a01      	cmp	r2, #1
 8002736:	d92c      	bls.n	8002792 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 800273e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002742:	3a02      	subs	r2, #2
 8002744:	b292      	uxth	r2, r2
 8002746:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800274a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800274e:	b292      	uxth	r2, r2
 8002750:	2a01      	cmp	r2, #1
 8002752:	d803      	bhi.n	800275c <HAL_SPI_TransmitReceive+0x1f0>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800275a:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 800275c:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800275e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002762:	d0c0      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x17a>
 8002764:	f7fe f8c4 	bl	80008f0 <HAL_GetTick>
 8002768:	eba0 0009 	sub.w	r0, r0, r9
 800276c:	4580      	cmp	r8, r0
 800276e:	d8ba      	bhi.n	80026e6 <HAL_SPI_TransmitReceive+0x17a>
 8002770:	e79f      	b.n	80026b2 <HAL_SPI_TransmitReceive+0x146>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002772:	782a      	ldrb	r2, [r5, #0]
 8002774:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002776:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002778:	3b01      	subs	r3, #1
 800277a:	b29b      	uxth	r3, r3
 800277c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800277e:	3501      	adds	r5, #1
 8002780:	e7b0      	b.n	80026e4 <HAL_SPI_TransmitReceive+0x178>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002782:	782a      	ldrb	r2, [r5, #0]
 8002784:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8002786:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002788:	3b01      	subs	r3, #1
 800278a:	b29b      	uxth	r3, r3
 800278c:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800278e:	3501      	adds	r5, #1
 8002790:	e7c4      	b.n	800271c <HAL_SPI_TransmitReceive+0x1b0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002792:	7b1b      	ldrb	r3, [r3, #12]
 8002794:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 8002796:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800279a:	3b01      	subs	r3, #1
 800279c:	b29b      	uxth	r3, r3
 800279e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027a2:	3601      	adds	r6, #1
 80027a4:	e7da      	b.n	800275c <HAL_SPI_TransmitReceive+0x1f0>
    errorcode = HAL_BUSY;
 80027a6:	2002      	movs	r0, #2
 80027a8:	e784      	b.n	80026b4 <HAL_SPI_TransmitReceive+0x148>
  __HAL_LOCK(hspi);
 80027aa:	2002      	movs	r0, #2
}
 80027ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080027b0 <HAL_SPI_Receive>:
{
 80027b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80027b4:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027b6:	6843      	ldr	r3, [r0, #4]
 80027b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80027bc:	4604      	mov	r4, r0
 80027be:	460e      	mov	r6, r1
 80027c0:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027c2:	d10c      	bne.n	80027de <HAL_SPI_Receive+0x2e>
 80027c4:	6883      	ldr	r3, [r0, #8]
 80027c6:	b953      	cbnz	r3, 80027de <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027c8:	2304      	movs	r3, #4
 80027ca:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027ce:	4613      	mov	r3, r2
 80027d0:	9500      	str	r5, [sp, #0]
 80027d2:	460a      	mov	r2, r1
 80027d4:	f7ff feca 	bl	800256c <HAL_SPI_TransmitReceive>
}
 80027d8:	b002      	add	sp, #8
 80027da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80027de:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	f000 808b 	beq.w	80028fe <HAL_SPI_Receive+0x14e>
 80027e8:	2301      	movs	r3, #1
 80027ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80027ee:	f7fe f87f 	bl	80008f0 <HAL_GetTick>
 80027f2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80027f4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80027f8:	b2c0      	uxtb	r0, r0
 80027fa:	2801      	cmp	r0, #1
 80027fc:	d17d      	bne.n	80028fa <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 80027fe:	2e00      	cmp	r6, #0
 8002800:	d05f      	beq.n	80028c2 <HAL_SPI_Receive+0x112>
 8002802:	f1b8 0f00 	cmp.w	r8, #0
 8002806:	d05c      	beq.n	80028c2 <HAL_SPI_Receive+0x112>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002808:	2304      	movs	r3, #4
 800280a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800280e:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002810:	68e2      	ldr	r2, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002812:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002814:	2300      	movs	r3, #0
 8002816:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8002818:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800281c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800281e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002820:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8002822:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002824:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002826:	684b      	ldr	r3, [r1, #4]
  hspi->RxXferSize  = Size;
 8002828:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800282c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002830:	bf8c      	ite	hi
 8002832:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002836:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 800283a:	604b      	str	r3, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800283c:	68a3      	ldr	r3, [r4, #8]
 800283e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 8002842:	bf02      	ittt	eq
 8002844:	680b      	ldreq	r3, [r1, #0]
 8002846:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 800284a:	600b      	streq	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800284c:	680b      	ldr	r3, [r1, #0]
 800284e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002850:	bf5e      	ittt	pl
 8002852:	680b      	ldrpl	r3, [r1, #0]
 8002854:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002858:	600b      	strpl	r3, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800285a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800285e:	d91e      	bls.n	800289e <HAL_SPI_Receive+0xee>
    while (hspi->RxXferCount > 0U)
 8002860:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002864:	b29b      	uxth	r3, r3
 8002866:	b1fb      	cbz	r3, 80028a8 <HAL_SPI_Receive+0xf8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	07d2      	lsls	r2, r2, #31
 800286e:	d537      	bpl.n	80028e0 <HAL_SPI_Receive+0x130>
        *((uint16_t *)pData) = hspi->Instance->DR;
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002876:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800287a:	3b01      	subs	r3, #1
 800287c:	b29b      	uxth	r3, r3
 800287e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8002882:	e7ed      	b.n	8002860 <HAL_SPI_Receive+0xb0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	07d0      	lsls	r0, r2, #31
 800288a:	d518      	bpl.n	80028be <HAL_SPI_Receive+0x10e>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800288c:	7b1b      	ldrb	r3, [r3, #12]
 800288e:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 8002892:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002896:	3b01      	subs	r3, #1
 8002898:	b29b      	uxth	r3, r3
 800289a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800289e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ed      	bne.n	8002884 <HAL_SPI_Receive+0xd4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028a8:	463a      	mov	r2, r7
 80028aa:	4629      	mov	r1, r5
 80028ac:	4620      	mov	r0, r4
 80028ae:	f7ff fd01 	bl	80022b4 <SPI_EndRxTransaction>
 80028b2:	b9f8      	cbnz	r0, 80028f4 <HAL_SPI_Receive+0x144>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028b4:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80028b6:	3000      	adds	r0, #0
 80028b8:	bf18      	it	ne
 80028ba:	2001      	movne	r0, #1
 80028bc:	e001      	b.n	80028c2 <HAL_SPI_Receive+0x112>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80028be:	b93d      	cbnz	r5, 80028d0 <HAL_SPI_Receive+0x120>
          errorcode = HAL_TIMEOUT;
 80028c0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80028c8:	2300      	movs	r3, #0
 80028ca:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 80028ce:	e783      	b.n	80027d8 <HAL_SPI_Receive+0x28>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80028d0:	1c69      	adds	r1, r5, #1
 80028d2:	d0e4      	beq.n	800289e <HAL_SPI_Receive+0xee>
 80028d4:	f7fe f80c 	bl	80008f0 <HAL_GetTick>
 80028d8:	1bc0      	subs	r0, r0, r7
 80028da:	4285      	cmp	r5, r0
 80028dc:	d8df      	bhi.n	800289e <HAL_SPI_Receive+0xee>
 80028de:	e7ef      	b.n	80028c0 <HAL_SPI_Receive+0x110>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80028e0:	2d00      	cmp	r5, #0
 80028e2:	d0ed      	beq.n	80028c0 <HAL_SPI_Receive+0x110>
 80028e4:	1c6b      	adds	r3, r5, #1
 80028e6:	d0bb      	beq.n	8002860 <HAL_SPI_Receive+0xb0>
 80028e8:	f7fe f802 	bl	80008f0 <HAL_GetTick>
 80028ec:	1bc0      	subs	r0, r0, r7
 80028ee:	4285      	cmp	r5, r0
 80028f0:	d8b6      	bhi.n	8002860 <HAL_SPI_Receive+0xb0>
 80028f2:	e7e5      	b.n	80028c0 <HAL_SPI_Receive+0x110>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028f4:	2320      	movs	r3, #32
 80028f6:	6623      	str	r3, [r4, #96]	; 0x60
 80028f8:	e7dc      	b.n	80028b4 <HAL_SPI_Receive+0x104>
    errorcode = HAL_BUSY;
 80028fa:	2002      	movs	r0, #2
 80028fc:	e7e1      	b.n	80028c2 <HAL_SPI_Receive+0x112>
  __HAL_LOCK(hspi);
 80028fe:	2002      	movs	r0, #2
 8002900:	e76a      	b.n	80027d8 <HAL_SPI_Receive+0x28>

08002902 <HAL_SPIEx_FlushRxFifo>:
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8002902:	6802      	ldr	r2, [r0, #0]
{
 8002904:	b082      	sub	sp, #8
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8002906:	2304      	movs	r3, #4
 8002908:	6890      	ldr	r0, [r2, #8]
 800290a:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 800290e:	d101      	bne.n	8002914 <HAL_SPIEx_FlushRxFifo+0x12>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8002910:	b002      	add	sp, #8
 8002912:	4770      	bx	lr
    tmpreg = hspi->Instance->DR;
 8002914:	68d1      	ldr	r1, [r2, #12]
 8002916:	9101      	str	r1, [sp, #4]
 8002918:	3b01      	subs	r3, #1
    if (count == SPI_FIFO_SIZE)
 800291a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    UNUSED(tmpreg); /* To avoid GCC warning */
 800291e:	9901      	ldr	r1, [sp, #4]
    if (count == SPI_FIFO_SIZE)
 8002920:	d1f2      	bne.n	8002908 <HAL_SPIEx_FlushRxFifo+0x6>
      return HAL_TIMEOUT;
 8002922:	2003      	movs	r0, #3
 8002924:	e7f4      	b.n	8002910 <HAL_SPIEx_FlushRxFifo+0xe>

08002926 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002926:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8002928:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800292a:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800292c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002930:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002934:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002936:	6083      	str	r3, [r0, #8]
 8002938:	bd10      	pop	{r4, pc}
	...

0800293c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800293c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002940:	2b01      	cmp	r3, #1
{
 8002942:	b570      	push	{r4, r5, r6, lr}
 8002944:	4604      	mov	r4, r0
 8002946:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800294a:	d01a      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002950:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002952:	2301      	movs	r3, #1
 8002954:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002958:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295a:	4b52      	ldr	r3, [pc, #328]	; (8002aa4 <HAL_TIM_ConfigClockSource+0x168>)
 800295c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800295e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002960:	680b      	ldr	r3, [r1, #0]
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d075      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0x116>
 8002966:	d818      	bhi.n	800299a <HAL_TIM_ConfigClockSource+0x5e>
 8002968:	2b10      	cmp	r3, #16
 800296a:	f000 808f 	beq.w	8002a8c <HAL_TIM_ConfigClockSource+0x150>
 800296e:	d809      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x48>
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8085 	beq.w	8002a80 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8002976:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002978:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800297a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800297e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002982:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002984:	2b20      	cmp	r3, #32
 8002986:	f000 8087 	beq.w	8002a98 <HAL_TIM_ConfigClockSource+0x15c>
 800298a:	2b30      	cmp	r3, #48	; 0x30
 800298c:	d1f3      	bne.n	8002976 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 800298e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002994:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002998:	e033      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800299a:	2b70      	cmp	r3, #112	; 0x70
 800299c:	d033      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0xca>
 800299e:	d81b      	bhi.n	80029d8 <HAL_TIM_ConfigClockSource+0x9c>
 80029a0:	2b50      	cmp	r3, #80	; 0x50
 80029a2:	d03f      	beq.n	8002a24 <HAL_TIM_ConfigClockSource+0xe8>
 80029a4:	2b60      	cmp	r3, #96	; 0x60
 80029a6:	d1e6      	bne.n	8002976 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a8:	684d      	ldr	r5, [r1, #4]
 80029aa:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ac:	6a01      	ldr	r1, [r0, #32]
 80029ae:	f021 0110 	bic.w	r1, r1, #16
 80029b2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b4:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80029b6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029b8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 80029c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 80029c4:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80029c8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80029ca:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80029cc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80029d2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80029d6:	e014      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029dc:	d00c      	beq.n	80029f8 <HAL_TIM_ConfigClockSource+0xbc>
 80029de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e2:	d1c8      	bne.n	8002976 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance,
 80029e4:	68cb      	ldr	r3, [r1, #12]
 80029e6:	684a      	ldr	r2, [r1, #4]
 80029e8:	6889      	ldr	r1, [r1, #8]
 80029ea:	f7ff ff9c 	bl	8002926 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ee:	6822      	ldr	r2, [r4, #0]
 80029f0:	6893      	ldr	r3, [r2, #8]
 80029f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f6:	e013      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80029f8:	6883      	ldr	r3, [r0, #8]
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fe:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8002a02:	6083      	str	r3, [r0, #8]
 8002a04:	e7b7      	b.n	8002976 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance,
 8002a06:	68cb      	ldr	r3, [r1, #12]
 8002a08:	684a      	ldr	r2, [r1, #4]
 8002a0a:	6889      	ldr	r1, [r1, #8]
 8002a0c:	f7ff ff8b 	bl	8002926 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a10:	6822      	ldr	r2, [r4, #0]
 8002a12:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a20:	6093      	str	r3, [r2, #8]
    break;
 8002a22:	e7a8      	b.n	8002976 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a24:	684a      	ldr	r2, [r1, #4]
 8002a26:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002a28:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2a:	6a05      	ldr	r5, [r0, #32]
 8002a2c:	f025 0501 	bic.w	r5, r5, #1
 8002a30:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a32:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a34:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002a3c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002a40:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002a42:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a44:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002a46:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a4c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002a50:	e7d7      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a52:	684a      	ldr	r2, [r1, #4]
 8002a54:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002a56:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a58:	6a05      	ldr	r5, [r0, #32]
 8002a5a:	f025 0501 	bic.w	r5, r5, #1
 8002a5e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a60:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a62:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002a6a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002a6e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002a70:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a72:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002a74:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a7a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002a7e:	e7c0      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002a80:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a86:	f043 0307 	orr.w	r3, r3, #7
 8002a8a:	e7ba      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002a8c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a92:	f043 0317 	orr.w	r3, r3, #23
 8002a96:	e7b4      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002a98:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002a9e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8002aa2:	e7ae      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0xc6>
 8002aa4:	fffe0088 	.word	0xfffe0088

08002aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aa8:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability
    */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002aaa:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <SystemClock_Config+0xc0>)
 8002aac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
{
 8002ab0:	b0b8      	sub	sp, #224	; 0xe0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ab2:	f023 0318 	bic.w	r3, r3, #24
 8002ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002aba:	2314      	movs	r3, #20
 8002abc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002ac2:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ac4:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ac6:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002ac8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002aca:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002acc:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ace:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ad0:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002ad2:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ad4:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002ad6:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002ad8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002ada:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002adc:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ade:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ae0:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae2:	f7fe fd7b 	bl	80015dc <HAL_RCC_OscConfig>
 8002ae6:	b100      	cbz	r0, 8002aea <SystemClock_Config+0x42>
 8002ae8:	e7fe      	b.n	8002ae8 <SystemClock_Config+0x40>

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aea:	220f      	movs	r2, #15
 8002aec:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aee:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002af0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002af2:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002af4:	2104      	movs	r1, #4
 8002af6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af8:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002afc:	f7fe ffa0 	bl	8001a40 <HAL_RCC_ClockConfig>
 8002b00:	b100      	cbz	r0, 8002b04 <SystemClock_Config+0x5c>
 8002b02:	e7fe      	b.n	8002b02 <SystemClock_Config+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 8002b04:	f242 0301 	movw	r3, #8193	; 0x2001
 8002b08:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002b0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b0e:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002b10:	2318      	movs	r3, #24
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b12:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002b14:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b16:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002b18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002b1c:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002b1e:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002b20:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002b22:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002b24:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002b26:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b28:	f7ff f952 	bl	8001dd0 <HAL_RCCEx_PeriphCLKConfig>
 8002b2c:	b100      	cbz	r0, 8002b30 <SystemClock_Config+0x88>
 8002b2e:	e7fe      	b.n	8002b2e <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b30:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b34:	f7fe fc74 	bl	8001420 <HAL_PWREx_ControlVoltageScaling>
 8002b38:	4604      	mov	r4, r0
 8002b3a:	b100      	cbz	r0, 8002b3e <SystemClock_Config+0x96>
 8002b3c:	e7fe      	b.n	8002b3c <SystemClock_Config+0x94>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002b3e:	f7ff f835 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 8002b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b46:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b4a:	f7fd ff37 	bl	80009bc <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b4e:	2004      	movs	r0, #4
 8002b50:	f7fd ff4a 	bl	80009e8 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8002b54:	f7ff fb24 	bl	80021a0 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b58:	4622      	mov	r2, r4
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	f7fd feec 	bl	800093c <HAL_NVIC_SetPriority>
}
 8002b64:	b038      	add	sp, #224	; 0xe0
 8002b66:	bd70      	pop	{r4, r5, r6, pc}
 8002b68:	40021000 	.word	0x40021000

08002b6c <tim2_init>:
  }

  HAL_TIM_MspPostInit(&htim2);
}

void tim2_init(void){
 8002b6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//clock config
	TIM_ClockConfigTypeDef sClockSourceConfig;
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b6e:	a906      	add	r1, sp, #24
 8002b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b74:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b78:	480e      	ldr	r0, [pc, #56]	; (8002bb4 <tim2_init+0x48>)
 8002b7a:	f7ff fedf 	bl	800293c <HAL_TIM_ConfigClockSource>
 8002b7e:	b100      	cbz	r0, 8002b82 <tim2_init+0x16>
 8002b80:	e7fe      	b.n	8002b80 <tim2_init+0x14>
	{
	  _Error_Handler(__FILE__, __LINE__);
	}
	__HAL_RCC_TIM2_CLK_ENABLE();
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <tim2_init+0x4c>)
 8002b84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	9b01      	ldr	r3, [sp, #4]

	//reg config
	TIM2->CR1 = TIMER_OFF;
 8002b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b9a:	f44f 7208 	mov.w	r2, #544	; 0x220
 8002b9e:	601a      	str	r2, [r3, #0]
	TIM2->CCMR1 = 0x68;
 8002ba0:	2268      	movs	r2, #104	; 0x68
 8002ba2:	619a      	str	r2, [r3, #24]
	TIM2->CCER = 1;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	621a      	str	r2, [r3, #32]
	TIM2->PSC = 0x3E8;
 8002ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bae:	b007      	add	sp, #28
 8002bb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bb4:	200006f0 	.word	0x200006f0
 8002bb8:	40021000 	.word	0x40021000

08002bbc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002bbc:	e7fe      	b.n	8002bbc <_Error_Handler>
	...

08002bc0 <thingSpeakUpdate>:
}

/*send 3 fields to Thingspeak
 * @param wifi_xmit: the string of fields to be updated
 */
void thingSpeakUpdate(uint8_t* wifi_xmit){
 8002bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002bc2:	4605      	mov	r5, r0
	static uint8_t WIFI_connection[250];
	sprintf(WIFI_connection, "POST /update HTTP/1.1\n"
 8002bc4:	f7fd fb04 	bl	80001d0 <strlen>
 8002bc8:	4c0d      	ldr	r4, [pc, #52]	; (8002c00 <thingSpeakUpdate+0x40>)
 8002bca:	490e      	ldr	r1, [pc, #56]	; (8002c04 <thingSpeakUpdate+0x44>)
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f001 fa4e 	bl	8004070 <siprintf>
			                 "Host: api.thingspeak.com\n"
							 "Connection: close\n"
							 "X-THINGSPEAKAPIKEY: YF7HOW1VSKR4Y8H8\n"
							 "Content-Type: application/x-www-form-urlencoded\n"
							 "Content-Length: %d\n\n", strlen(wifi_xmit));
	sprintf(strchr(WIFI_connection, '\0'), wifi_xmit);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f001 fa6e 	bl	80040b8 <strchr>
 8002bdc:	4629      	mov	r1, r5
 8002bde:	f001 fa47 	bl	8004070 <siprintf>
	WIFI_SendData((uint8_t)0, WIFI_connection, strlen(WIFI_connection), &XferSize, Timeout);
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7fd faf4 	bl	80001d0 <strlen>
 8002be8:	f242 7310 	movw	r3, #10000	; 0x2710
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	b282      	uxth	r2, r0
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <thingSpeakUpdate+0x48>)
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f001 f9cf 	bl	8003f98 <WIFI_SendData>
}
 8002bfa:	b003      	add	sp, #12
 8002bfc:	bd30      	pop	{r4, r5, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000009c 	.word	0x2000009c
 8002c04:	08004a0c 	.word	0x08004a0c
 8002c08:	20000196 	.word	0x20000196

08002c0c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt) 
{
 8002c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;
    
    if (*ptr == '-') {                                		/* Check for minus character */
 8002c0e:	7803      	ldrb	r3, [r0, #0]
 8002c10:	2b2d      	cmp	r3, #45	; 0x2d
        minus = 1;
        ptr++;
 8002c12:	bf06      	itte	eq
 8002c14:	3001      	addeq	r0, #1
        minus = 1;
 8002c16:	2501      	moveq	r5, #1
    uint8_t minus = 0, i = 0;
 8002c18:	2500      	movne	r5, #0
 8002c1a:	1e43      	subs	r3, r0, #1
 8002c1c:	462a      	mov	r2, r5
 8002c1e:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8002c20:	270a      	movs	r7, #10
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8002c22:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8002c26:	3c30      	subs	r4, #48	; 0x30
 8002c28:	b2e6      	uxtb	r6, r4
 8002c2a:	2e09      	cmp	r6, #9
 8002c2c:	d904      	bls.n	8002c38 <ParseNumber+0x2c>
        ptr++;
        i++;
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8002c2e:	b101      	cbz	r1, 8002c32 <ParseNumber+0x26>
        *cnt = i;
 8002c30:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8002c32:	b105      	cbz	r5, 8002c36 <ParseNumber+0x2a>
        return 0 - sum;
 8002c34:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        i++;
 8002c38:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 8002c3a:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	e7ef      	b.n	8002c22 <ParseNumber+0x16>

08002c42 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr) 
{
 8002c42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002c46:	4604      	mov	r4, r0
 8002c48:	460f      	mov	r7, r1
  uint8_t hexnum = 0, hexcnt;
 8002c4a:	2500      	movs	r5, #0
  
  while(* ptr) { 
    hexcnt = 1;
 8002c4c:	f04f 0801 	mov.w	r8, #1
  while(* ptr) { 
 8002c50:	7823      	ldrb	r3, [r4, #0]
 8002c52:	b913      	cbnz	r3, 8002c5a <ParseIP+0x18>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8002c54:	b002      	add	sp, #8
 8002c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*ptr != '.')
 8002c5a:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8002c5c:	f88d 8007 	strb.w	r8, [sp, #7]
    if(*ptr != '.')
 8002c60:	d008      	beq.n	8002c74 <ParseIP+0x32>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8002c62:	f10d 0107 	add.w	r1, sp, #7
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7ff ffd0 	bl	8002c0c <ParseNumber>
 8002c6c:	1c6e      	adds	r6, r5, #1
 8002c6e:	b2f6      	uxtb	r6, r6
 8002c70:	5578      	strb	r0, [r7, r5]
 8002c72:	4635      	mov	r5, r6
    ptr = ptr + hexcnt;
 8002c74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c78:	441c      	add	r4, r3
 8002c7a:	e7e9      	b.n	8002c50 <ParseIP+0xe>

08002c7c <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	4604      	mov	r4, r0
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8002c80:	4608      	mov	r0, r1
{
 8002c82:	460e      	mov	r6, r1
 8002c84:	4615      	mov	r5, r2
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8002c86:	f7fd faa3 	bl	80001d0 <strlen>
 8002c8a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8002c8e:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 8002c92:	b281      	uxth	r1, r0
 8002c94:	4630      	mov	r0, r6
 8002c96:	4798      	blx	r3
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	dd14      	ble.n	8002cc6 <AT_ExecuteCommand+0x4a>
  {
    int16_t n=Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8002c9c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8002ca0:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	4798      	blx	r3
    if(n > 0)
 8002caa:	2800      	cmp	r0, #0
 8002cac:	dd0b      	ble.n	8002cc6 <AT_ExecuteCommand+0x4a>
    {
      *(pdata+n)=0;
 8002cae:	2400      	movs	r4, #0
 8002cb0:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8002cb2:	4908      	ldr	r1, [pc, #32]	; (8002cd4 <AT_ExecuteCommand+0x58>)
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	f001 fa2a 	bl	800410e <strstr>
 8002cba:	b930      	cbnz	r0, 8002cca <AT_ExecuteCommand+0x4e>
      {
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8002cbc:	4906      	ldr	r1, [pc, #24]	; (8002cd8 <AT_ExecuteCommand+0x5c>)
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f001 fa25 	bl	800410e <strstr>
 8002cc4:	b918      	cbnz	r0, 8002cce <AT_ExecuteCommand+0x52>
      {
        return ES_WIFI_STATUS_ERROR;
      }      
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8002cc6:	2004      	movs	r0, #4
 8002cc8:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 8002cca:	4620      	mov	r0, r4
 8002ccc:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_ERROR;
 8002cce:	2002      	movs	r0, #2
}
 8002cd0:	bd70      	pop	{r4, r5, r6, pc}
 8002cd2:	bf00      	nop
 8002cd4:	08004ab7 	.word	0x08004ab7
 8002cd8:	08004ac0 	.word	0x08004ac0

08002cdc <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8002cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  
  Obj->Timeout = ES_WIFI_TIMEOUT;
 8002ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ce4:	f8c0 3760 	str.w	r3, [r0, #1888]	; 0x760
  
  if (Obj->fops.IO_Init() == 0)
 8002ce8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
{
 8002cec:	4604      	mov	r4, r0
  if (Obj->fops.IO_Init() == 0)
 8002cee:	4798      	blx	r3
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d14b      	bne.n	8002d8c <ES_WIFI_Init+0xb0>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8002cf4:	f504 7290 	add.w	r2, r4, #288	; 0x120
 8002cf8:	4925      	ldr	r1, [pc, #148]	; (8002d90 <ES_WIFI_Init+0xb4>)
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f7ff ffbe 	bl	8002c7c <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8002d00:	4605      	mov	r5, r0
 8002d02:	b960      	cbnz	r0, 8002d1e <ES_WIFI_Init+0x42>
  ptr = strtok((char *)pdata + 2, ",");  
 8002d04:	4923      	ldr	r1, [pc, #140]	; (8002d94 <ES_WIFI_Init+0xb8>)
      ptr = strtok(ptr, "\r"); 
 8002d06:	4f24      	ldr	r7, [pc, #144]	; (8002d98 <ES_WIFI_Init+0xbc>)
    ptr = strtok(NULL, ","); 
 8002d08:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002d94 <ES_WIFI_Init+0xb8>
  ptr = strtok((char *)pdata + 2, ",");  
 8002d0c:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8002d10:	f001 fa18 	bl	8004144 <strtok>
 8002d14:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8002d16:	f104 0860 	add.w	r8, r4, #96	; 0x60
 8002d1a:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8002d1c:	b910      	cbnz	r0, 8002d24 <ES_WIFI_Init+0x48>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 8002d1e:	4628      	mov	r0, r5
 8002d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) { 
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d824      	bhi.n	8002d72 <ES_WIFI_Init+0x96>
 8002d28:	e8df f003 	tbb	[pc, r3]
 8002d2c:	140f0a04 	.word	0x140f0a04
 8002d30:	1e19      	.short	0x1e19
 8002d32:	29          	.byte	0x29
 8002d33:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8002d34:	4601      	mov	r1, r0
 8002d36:	2220      	movs	r2, #32
 8002d38:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8002d3a:	f001 f9d3 	bl	80040e4 <strncpy>
 8002d3e:	e018      	b.n	8002d72 <ES_WIFI_Init+0x96>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8002d40:	4601      	mov	r1, r0
 8002d42:	2210      	movs	r2, #16
 8002d44:	f104 0020 	add.w	r0, r4, #32
 8002d48:	e7f7      	b.n	8002d3a <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);      
 8002d4a:	4601      	mov	r1, r0
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002d52:	e7f2      	b.n	8002d3a <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);   
 8002d54:	4601      	mov	r1, r0
 8002d56:	2210      	movs	r2, #16
 8002d58:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002d5c:	e7ed      	b.n	8002d3a <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);        
 8002d5e:	4601      	mov	r1, r0
 8002d60:	2210      	movs	r2, #16
 8002d62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d66:	e7e8      	b.n	8002d3a <ES_WIFI_Init+0x5e>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8002d68:	2100      	movs	r1, #0
 8002d6a:	f7ff ff4f 	bl	8002c0c <ParseNumber>
 8002d6e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    ptr = strtok(NULL, ","); 
 8002d72:	4649      	mov	r1, r9
 8002d74:	2000      	movs	r0, #0
 8002d76:	f001 f9e5 	bl	8004144 <strtok>
 8002d7a:	3601      	adds	r6, #1
 8002d7c:	e7cd      	b.n	8002d1a <ES_WIFI_Init+0x3e>
      ptr = strtok(ptr, "\r"); 
 8002d7e:	4639      	mov	r1, r7
 8002d80:	f001 f9e0 	bl	8004144 <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8002d84:	2220      	movs	r2, #32
 8002d86:	4601      	mov	r1, r0
 8002d88:	4640      	mov	r0, r8
 8002d8a:	e7d6      	b.n	8002d3a <ES_WIFI_Init+0x5e>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002d8c:	2502      	movs	r5, #2
 8002d8e:	e7c6      	b.n	8002d1e <ES_WIFI_Init+0x42>
 8002d90:	08004ae5 	.word	0x08004ae5
 8002d94:	08004aea 	.word	0x08004aea
 8002d98:	08004b38 	.word	0x08004b38

08002d9c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,  
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8002d9c:	b530      	push	{r4, r5, lr}
 8002d9e:	9d03      	ldr	r5, [sp, #12]
 8002da0:	9c04      	ldr	r4, [sp, #16]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8002da2:	b168      	cbz	r0, 8002dc0 <ES_WIFI_RegisterBusIO+0x24>
 8002da4:	b161      	cbz	r1, 8002dc0 <ES_WIFI_RegisterBusIO+0x24>
 8002da6:	b15a      	cbz	r2, 8002dc0 <ES_WIFI_RegisterBusIO+0x24>
 8002da8:	b155      	cbz	r5, 8002dc0 <ES_WIFI_RegisterBusIO+0x24>
 8002daa:	b14c      	cbz	r4, 8002dc0 <ES_WIFI_RegisterBusIO+0x24>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 8002dac:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
  Obj->fops.IO_Send = IO_Send;
 8002db0:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
  Obj->fops.IO_Receive = IO_Receive;
 8002db4:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
  Obj->fops.IO_Delay = IO_Delay;  
 8002db8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
  
  return ES_WIFI_STATUS_OK;
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8002dc0:	2002      	movs	r0, #2
}
 8002dc2:	bd30      	pop	{r4, r5, pc}

08002dc4 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID, 
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8002dc6:	f500 7490 	add.w	r4, r0, #288	; 0x120
{
 8002dca:	4605      	mov	r5, r0
 8002dcc:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8002dce:	4620      	mov	r0, r4
 8002dd0:	460a      	mov	r2, r1
 8002dd2:	4918      	ldr	r1, [pc, #96]	; (8002e34 <ES_WIFI_Connect+0x70>)
{
 8002dd4:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8002dd6:	f001 f94b 	bl	8004070 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002dda:	4622      	mov	r2, r4
 8002ddc:	4621      	mov	r1, r4
 8002dde:	4628      	mov	r0, r5
 8002de0:	f7ff ff4c 	bl	8002c7c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8002de4:	bb20      	cbnz	r0, 8002e30 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8002de6:	463a      	mov	r2, r7
 8002de8:	4913      	ldr	r1, [pc, #76]	; (8002e38 <ES_WIFI_Connect+0x74>)
 8002dea:	4620      	mov	r0, r4
 8002dec:	f001 f940 	bl	8004070 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002df0:	4622      	mov	r2, r4
 8002df2:	4621      	mov	r1, r4
 8002df4:	4628      	mov	r0, r5
 8002df6:	f7ff ff41 	bl	8002c7c <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8002dfa:	b9c8      	cbnz	r0, 8002e30 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8002dfc:	4632      	mov	r2, r6
 8002dfe:	490f      	ldr	r1, [pc, #60]	; (8002e3c <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8002e00:	f885 6084 	strb.w	r6, [r5, #132]	; 0x84
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8002e04:	4620      	mov	r0, r4
 8002e06:	f001 f933 	bl	8004070 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f7ff ff34 	bl	8002c7c <AT_ExecuteCommand>
      
      if(ret == ES_WIFI_STATUS_OK)
 8002e14:	b960      	cbnz	r0, 8002e30 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8002e16:	490a      	ldr	r1, [pc, #40]	; (8002e40 <ES_WIFI_Connect+0x7c>)
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f001 f95b 	bl	80040d4 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);  
 8002e1e:	4622      	mov	r2, r4
 8002e20:	4621      	mov	r1, r4
 8002e22:	4628      	mov	r0, r5
 8002e24:	f7ff ff2a 	bl	8002c7c <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8002e28:	b910      	cbnz	r0, 8002e30 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f885 30ca 	strb.w	r3, [r5, #202]	; 0xca
        }
      }    
    }
  }
  return ret;
}
 8002e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e32:	bf00      	nop
 8002e34:	08004ac8 	.word	0x08004ac8
 8002e38:	08004acf 	.word	0x08004acf
 8002e3c:	08004ad6 	.word	0x08004ad6
 8002e40:	08004add 	.word	0x08004add

08002e44 <ES_WIFI_GetNetworkSettings>:
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C?\r");
 8002e44:	f500 7290 	add.w	r2, r0, #288	; 0x120
{
 8002e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8002e4c:	4937      	ldr	r1, [pc, #220]	; (8002f2c <ES_WIFI_GetNetworkSettings+0xe8>)
{
 8002e4e:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8002e50:	4610      	mov	r0, r2
 8002e52:	f001 f93f 	bl	80040d4 <strcpy>
 8002e56:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002e58:	4601      	mov	r1, r0
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f7ff ff0e 	bl	8002c7c <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8002e60:	4606      	mov	r6, r0
 8002e62:	b960      	cbnz	r0, 8002e7e <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");   
 8002e64:	4932      	ldr	r1, [pc, #200]	; (8002f30 <ES_WIFI_GetNetworkSettings+0xec>)
    ptr = strtok(NULL, ",");
 8002e66:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002f30 <ES_WIFI_GetNetworkSettings+0xec>
  ptr = strtok(pdata + 2, ",");   
 8002e6a:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8002e6e:	f001 f969 	bl	8004144 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002e72:	f104 0785 	add.w	r7, r4, #133	; 0x85
  uint8_t num = 0;
 8002e76:	46b2      	mov	sl, r6
      ParseIP(ptr, NetSettings->DNS2);
 8002e78:	f104 08dd 	add.w	r8, r4, #221	; 0xdd
  while (ptr != NULL) {
 8002e7c:	b910      	cbnz	r0, 8002e84 <ES_WIFI_GetNetworkSettings+0x40>
  }  
  return ret;
}
 8002e7e:	4630      	mov	r0, r6
 8002e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (num++) {      
 8002e84:	f10a 0501 	add.w	r5, sl, #1
 8002e88:	b2ed      	uxtb	r5, r5
 8002e8a:	f1ba 0f0b 	cmp.w	sl, #11
 8002e8e:	d80c      	bhi.n	8002eaa <ES_WIFI_GetNetworkSettings+0x66>
 8002e90:	e8df f00a 	tbb	[pc, sl]
 8002e94:	241e1906 	.word	0x241e1906
 8002e98:	3835302a 	.word	0x3835302a
 8002e9c:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1); 
 8002ea0:	4601      	mov	r1, r0
 8002ea2:	2221      	movs	r2, #33	; 0x21
 8002ea4:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 8002ea6:	f001 f91d 	bl	80040e4 <strncpy>
    ptr = strtok(NULL, ",");
 8002eaa:	4649      	mov	r1, r9
 8002eac:	2000      	movs	r0, #0
 8002eae:	f001 f949 	bl	8004144 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8002eb2:	b130      	cbz	r0, 8002ec2 <ES_WIFI_GetNetworkSettings+0x7e>
 8002eb4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8002eb8:	2b2c      	cmp	r3, #44	; 0x2c
      num++;
 8002eba:	bf04      	itt	eq
 8002ebc:	f10a 0502 	addeq.w	r5, sl, #2
 8002ec0:	b2ed      	uxtbeq	r5, r5
{
 8002ec2:	46aa      	mov	sl, r5
 8002ec4:	e7da      	b.n	8002e7c <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 8002ec6:	4601      	mov	r1, r0
 8002ec8:	2221      	movs	r2, #33	; 0x21
 8002eca:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
 8002ece:	e7ea      	b.n	8002ea6 <ES_WIFI_GetNetworkSettings+0x62>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	f7ff fe9b 	bl	8002c0c <ParseNumber>
 8002ed6:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
 8002eda:	e7e6      	b.n	8002eaa <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8002edc:	2100      	movs	r1, #0
 8002ede:	f7ff fe95 	bl	8002c0c <ParseNumber>
 8002ee2:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
 8002ee6:	e7e0      	b.n	8002eaa <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8002ee8:	2100      	movs	r1, #0
 8002eea:	f7ff fe8f 	bl	8002c0c <ParseNumber>
 8002eee:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
 8002ef2:	e7da      	b.n	8002eaa <ES_WIFI_GetNetworkSettings+0x66>
      ParseIP(ptr, NetSettings->IP_Addr);
 8002ef4:	f104 01cd 	add.w	r1, r4, #205	; 0xcd
      ParseIP(ptr, NetSettings->IP_Mask);
 8002ef8:	f7ff fea3 	bl	8002c42 <ParseIP>
 8002efc:	e7d5      	b.n	8002eaa <ES_WIFI_GetNetworkSettings+0x66>
 8002efe:	f104 01d1 	add.w	r1, r4, #209	; 0xd1
 8002f02:	e7f9      	b.n	8002ef8 <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8002f04:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
 8002f08:	e7f6      	b.n	8002ef8 <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->DNS1);
 8002f0a:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8002f0e:	e7f3      	b.n	8002ef8 <ES_WIFI_GetNetworkSettings+0xb4>
      ParseIP(ptr, NetSettings->DNS2);
 8002f10:	4641      	mov	r1, r8
 8002f12:	e7f1      	b.n	8002ef8 <ES_WIFI_GetNetworkSettings+0xb4>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8002f14:	2100      	movs	r1, #0
 8002f16:	f7ff fe79 	bl	8002c0c <ParseNumber>
 8002f1a:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
 8002f1e:	e7c4      	b.n	8002eaa <ES_WIFI_GetNetworkSettings+0x66>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8002f20:	2100      	movs	r1, #0
 8002f22:	f7ff fe73 	bl	8002c0c <ParseNumber>
 8002f26:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
 8002f2a:	e7be      	b.n	8002eaa <ES_WIFI_GetNetworkSettings+0x66>
 8002f2c:	08004ae1 	.word	0x08004ae1
 8002f30:	08004aea 	.word	0x08004aea

08002f34 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8002f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret;

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002f36:	f500 7490 	add.w	r4, r0, #288	; 0x120
 8002f3a:	784a      	ldrb	r2, [r1, #1]
{
 8002f3c:	4606      	mov	r6, r0
 8002f3e:	460d      	mov	r5, r1
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002f40:	4620      	mov	r0, r4
 8002f42:	4928      	ldr	r1, [pc, #160]	; (8002fe4 <ES_WIFI_StartClientConnection+0xb0>)
 8002f44:	f001 f894 	bl	8004070 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002f48:	4622      	mov	r2, r4
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	f7ff fe95 	bl	8002c7c <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d144      	bne.n	8002fe0 <ES_WIFI_StartClientConnection+0xac>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8002f56:	782a      	ldrb	r2, [r5, #0]
 8002f58:	4923      	ldr	r1, [pc, #140]	; (8002fe8 <ES_WIFI_StartClientConnection+0xb4>)
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f001 f888 	bl	8004070 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002f60:	4622      	mov	r2, r4
 8002f62:	4621      	mov	r1, r4
 8002f64:	4630      	mov	r0, r6
 8002f66:	f7ff fe89 	bl	8002c7c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d138      	bne.n	8002fe0 <ES_WIFI_StartClientConnection+0xac>
    {
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0)) 
 8002f6e:	782b      	ldrb	r3, [r5, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d026      	beq.n	8002fc2 <ES_WIFI_StartClientConnection+0x8e>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
        {
          return ES_WIFI_STATUS_ERROR;
        }
      }
      sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8002f74:	886a      	ldrh	r2, [r5, #2]
 8002f76:	491d      	ldr	r1, [pc, #116]	; (8002fec <ES_WIFI_StartClientConnection+0xb8>)
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f001 f879 	bl	8004070 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002f7e:	4622      	mov	r2, r4
 8002f80:	4621      	mov	r1, r4
 8002f82:	4630      	mov	r0, r6
 8002f84:	f7ff fe7a 	bl	8002c7c <AT_ExecuteCommand>
      
      if(ret == ES_WIFI_STATUS_OK)
 8002f88:	bb50      	cbnz	r0, 8002fe0 <ES_WIFI_StartClientConnection+0xac>
      {
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002f8a:	7a69      	ldrb	r1, [r5, #9]
 8002f8c:	9101      	str	r1, [sp, #4]
 8002f8e:	7a29      	ldrb	r1, [r5, #8]
 8002f90:	79aa      	ldrb	r2, [r5, #6]
 8002f92:	9100      	str	r1, [sp, #0]
 8002f94:	79eb      	ldrb	r3, [r5, #7]
 8002f96:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <ES_WIFI_StartClientConnection+0xbc>)
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f001 f869 	bl	8004070 <siprintf>
                conn->RemoteIP[2],conn->RemoteIP[3]);
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData); 
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f7ff fe6a 	bl	8002c7c <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8002fa8:	b9d0      	cbnz	r0, 8002fe0 <ES_WIFI_StartClientConnection+0xac>
        {
          sprintf((char*)Obj->CmdData,"P6=1\r");
 8002faa:	4912      	ldr	r1, [pc, #72]	; (8002ff4 <ES_WIFI_StartClientConnection+0xc0>)
 8002fac:	4620      	mov	r0, r4
 8002fae:	f001 f891 	bl	80040d4 <strcpy>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);         
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	4630      	mov	r0, r6
        }          
      }           
    }
  }
  return ret;
}
 8002fb8:	b002      	add	sp, #8
 8002fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);         
 8002fbe:	f7ff be5d 	b.w	8002c7c <AT_ExecuteCommand>
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0)) 
 8002fc2:	88ab      	ldrh	r3, [r5, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0d5      	beq.n	8002f74 <ES_WIFI_StartClientConnection+0x40>
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->RemotePort);
 8002fc8:	886a      	ldrh	r2, [r5, #2]
 8002fca:	490b      	ldr	r1, [pc, #44]	; (8002ff8 <ES_WIFI_StartClientConnection+0xc4>)
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f001 f84f 	bl	8004070 <siprintf>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	f7ff fe50 	bl	8002c7c <AT_ExecuteCommand>
 8002fdc:	2802      	cmp	r0, #2
 8002fde:	d1c9      	bne.n	8002f74 <ES_WIFI_StartClientConnection+0x40>
}
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	08004b02 	.word	0x08004b02
 8002fe8:	08004b09 	.word	0x08004b09
 8002fec:	08004b10 	.word	0x08004b10
 8002ff0:	08004b1e 	.word	0x08004b1e
 8002ff4:	08004b2e 	.word	0x08004b2e
 8002ff8:	08004b17 	.word	0x08004b17

08002ffc <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8002ffc:	b538      	push	{r3, r4, r5, lr}
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002ffe:	f500 7490 	add.w	r4, r0, #288	; 0x120
 8003002:	784a      	ldrb	r2, [r1, #1]
 8003004:	490b      	ldr	r1, [pc, #44]	; (8003034 <ES_WIFI_StopClientConnection+0x38>)
{
 8003006:	4605      	mov	r5, r0
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8003008:	4620      	mov	r0, r4
 800300a:	f001 f831 	bl	8004070 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800300e:	4622      	mov	r2, r4
 8003010:	4621      	mov	r1, r4
 8003012:	4628      	mov	r0, r5
 8003014:	f7ff fe32 	bl	8002c7c <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8003018:	b950      	cbnz	r0, 8003030 <ES_WIFI_StopClientConnection+0x34>
  {  
    sprintf((char*)Obj->CmdData,"P6=0\r");
 800301a:	4907      	ldr	r1, [pc, #28]	; (8003038 <ES_WIFI_StopClientConnection+0x3c>)
 800301c:	4620      	mov	r0, r4
 800301e:	f001 f859 	bl	80040d4 <strcpy>
    ret =  AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);     
 8003022:	4622      	mov	r2, r4
 8003024:	4621      	mov	r1, r4
 8003026:	4628      	mov	r0, r5
  }
  return ret;
}
 8003028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret =  AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);     
 800302c:	f7ff be26 	b.w	8002c7c <AT_ExecuteCommand>
}
 8003030:	bd38      	pop	{r3, r4, r5, pc}
 8003032:	bf00      	nop
 8003034:	08004b02 	.word	0x08004b02
 8003038:	08004b34 	.word	0x08004b34

0800303c <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800303c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003040:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003044:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8003048:	bf28      	it	cs
 800304a:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
  
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
  
  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800304e:	f500 7490 	add.w	r4, r0, #288	; 0x120
{
 8003052:	4605      	mov	r5, r0
  *SentLen = Reqlen;
 8003054:	f8a8 3000 	strh.w	r3, [r8]
{
 8003058:	4692      	mov	sl, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800305a:	4620      	mov	r0, r4
 800305c:	460a      	mov	r2, r1
 800305e:	492f      	ldr	r1, [pc, #188]	; (800311c <ES_WIFI_SendData+0xe0>)
 8003060:	461f      	mov	r7, r3
 8003062:	f001 f805 	bl	8004070 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003066:	4622      	mov	r2, r4
 8003068:	4621      	mov	r1, r4
 800306a:	4628      	mov	r0, r5
 800306c:	f7ff fe06 	bl	8002c7c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8003070:	4606      	mov	r6, r0
 8003072:	2800      	cmp	r0, #0
 8003074:	d141      	bne.n	80030fa <ES_WIFI_SendData+0xbe>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 8003076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003078:	4929      	ldr	r1, [pc, #164]	; (8003120 <ES_WIFI_SendData+0xe4>)
 800307a:	4620      	mov	r0, r4
 800307c:	f000 fff8 	bl	8004070 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003080:	4622      	mov	r2, r4
 8003082:	4621      	mov	r1, r4
 8003084:	4628      	mov	r0, r5
 8003086:	f7ff fdf9 	bl	8002c7c <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 800308a:	4606      	mov	r6, r0
 800308c:	bba8      	cbnz	r0, 80030fa <ES_WIFI_SendData+0xbe>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800308e:	463a      	mov	r2, r7
 8003090:	4924      	ldr	r1, [pc, #144]	; (8003124 <ES_WIFI_SendData+0xe8>)
 8003092:	4620      	mov	r0, r4
 8003094:	f000 ffec 	bl	8004070 <siprintf>
  uint16_t n=strlen((char*)cmd);
 8003098:	4620      	mov	r0, r4
 800309a:	f7fd f899 	bl	80001d0 <strlen>
  if (n &1 ) return ES_WIFI_STATUS_ERROR;
 800309e:	f010 0901 	ands.w	r9, r0, #1
 80030a2:	fa1f fb80 	uxth.w	fp, r0
 80030a6:	d12a      	bne.n	80030fe <ES_WIFI_SendData+0xc2>
  if(Obj->fops.IO_Send(cmd, n, Obj->Timeout) == n)
 80030a8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80030ac:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 80030b0:	4659      	mov	r1, fp
 80030b2:	4620      	mov	r0, r4
 80030b4:	4798      	blx	r3
 80030b6:	4583      	cmp	fp, r0
 80030b8:	d11d      	bne.n	80030f6 <ES_WIFI_SendData+0xba>
    int16_t n=Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80030ba:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80030be:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 80030c2:	4639      	mov	r1, r7
 80030c4:	4650      	mov	r0, sl
 80030c6:	4798      	blx	r3
    if(n == len)
 80030c8:	4287      	cmp	r7, r0
 80030ca:	d118      	bne.n	80030fe <ES_WIFI_SendData+0xc2>
      n = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80030cc:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 80030d0:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 80030d4:	4649      	mov	r1, r9
 80030d6:	4620      	mov	r0, r4
 80030d8:	4798      	blx	r3
      if(n > 0)
 80030da:	2800      	cmp	r0, #0
 80030dc:	dd0b      	ble.n	80030f6 <ES_WIFI_SendData+0xba>
        *(pdata+n)=0;
 80030de:	f804 9000 	strb.w	r9, [r4, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80030e2:	4911      	ldr	r1, [pc, #68]	; (8003128 <ES_WIFI_SendData+0xec>)
 80030e4:	4620      	mov	r0, r4
 80030e6:	f001 f812 	bl	800410e <strstr>
 80030ea:	b968      	cbnz	r0, 8003108 <ES_WIFI_SendData+0xcc>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80030ec:	490f      	ldr	r1, [pc, #60]	; (800312c <ES_WIFI_SendData+0xf0>)
 80030ee:	4620      	mov	r0, r4
 80030f0:	f001 f80d 	bl	800410e <strstr>
 80030f4:	b918      	cbnz	r0, 80030fe <ES_WIFI_SendData+0xc2>
        }
      }
    }
  }
  
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 80030f6:	2604      	movs	r6, #4
  return ret;  
 80030f8:	e00c      	b.n	8003114 <ES_WIFI_SendData+0xd8>
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 80030fa:	2e02      	cmp	r6, #2
 80030fc:	d10a      	bne.n	8003114 <ES_WIFI_SendData+0xd8>
 80030fe:	2300      	movs	r3, #0
 8003100:	f8a8 3000 	strh.w	r3, [r8]
 8003104:	2602      	movs	r6, #2
 8003106:	e005      	b.n	8003114 <ES_WIFI_SendData+0xd8>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8003108:	4909      	ldr	r1, [pc, #36]	; (8003130 <ES_WIFI_SendData+0xf4>)
 800310a:	4620      	mov	r0, r4
 800310c:	f000 ffff 	bl	800410e <strstr>
 8003110:	2800      	cmp	r0, #0
 8003112:	d1f4      	bne.n	80030fe <ES_WIFI_SendData+0xc2>
}
 8003114:	4630      	mov	r0, r6
 8003116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311a:	bf00      	nop
 800311c:	08004b02 	.word	0x08004b02
 8003120:	08004aec 	.word	0x08004aec
 8003124:	08004af4 	.word	0x08004af4
 8003128:	08004ab7 	.word	0x08004ab7
 800312c:	08004ac0 	.word	0x08004ac0
 8003130:	08004afd 	.word	0x08004afd

08003134 <SPI_WIFI_MspInit>:
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8003134:	4b44      	ldr	r3, [pc, #272]	; (8003248 <SPI_WIFI_MspInit+0x114>)
{
 8003136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 800313a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 800313c:	4e43      	ldr	r6, [pc, #268]	; (800324c <SPI_WIFI_MspInit+0x118>)
  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800313e:	4f44      	ldr	r7, [pc, #272]	; (8003250 <SPI_WIFI_MspInit+0x11c>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8003140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003144:	659a      	str	r2, [r3, #88]	; 0x58
 8003146:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8003148:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_SPI3_CLK_ENABLE();
 800314a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800314e:	9201      	str	r2, [sp, #4]
 8003150:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003154:	f042 0202 	orr.w	r2, r2, #2
 8003158:	64da      	str	r2, [r3, #76]	; 0x4c
 800315a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800315c:	f002 0202 	and.w	r2, r2, #2
 8003160:	9202      	str	r2, [sp, #8]
 8003162:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003166:	f042 0204 	orr.w	r2, r2, #4
 800316a:	64da      	str	r2, [r3, #76]	; 0x4c
 800316c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800316e:	f002 0204 	and.w	r2, r2, #4
 8003172:	9203      	str	r2, [sp, #12]
 8003174:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003178:	f042 0210 	orr.w	r2, r2, #16
 800317c:	64da      	str	r2, [r3, #76]	; 0x4c
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8003184:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003186:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8003188:	4630      	mov	r0, r6
 800318a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800318e:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003190:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003192:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8003194:	f7fd fdb6 	bl	8000d04 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8003198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800319c:	a905      	add	r1, sp, #20
 800319e:	4630      	mov	r0, r6
  GPIO_Init.Pin       = GPIO_PIN_13;
 80031a0:	9305      	str	r3, [sp, #20]
  GPIO_Init.Pin       = GPIO_PIN_1;
 80031a2:	2602      	movs	r6, #2
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80031a4:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80031a6:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80031a8:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80031aa:	f7fd fc2f 	bl	8000a0c <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80031ae:	4b29      	ldr	r3, [pc, #164]	; (8003254 <SPI_WIFI_MspInit+0x120>)
 80031b0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80031b2:	a905      	add	r1, sp, #20
 80031b4:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_1;
 80031b6:	9605      	str	r6, [sp, #20]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80031b8:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80031ba:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80031bc:	f7fd fc26 	bl	8000a0c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80031c0:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  GPIO_Init.Alternate = 0;
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80031c4:	a905      	add	r1, sp, #20
 80031c6:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_8;
 80031c8:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80031ca:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80031cc:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80031ce:	9508      	str	r5, [sp, #32]
  GPIO_Init.Alternate = 0;
 80031d0:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80031d2:	f7fd fc1b 	bl	8000a0c <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE, GPIO_PIN_0, GPIO_PIN_SET ); 
 80031d6:	4622      	mov	r2, r4
 80031d8:	4621      	mov	r1, r4
 80031da:	4638      	mov	r0, r7
 80031dc:	f7fd fd92 	bl	8000d04 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_0;
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80031e0:	a905      	add	r1, sp, #20
 80031e2:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_10;
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80031e4:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80031e8:	f04f 0806 	mov.w	r8, #6
  GPIO_Init.Pin       = GPIO_PIN_0;
 80031ec:	9405      	str	r4, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80031ee:	9406      	str	r4, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80031f0:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80031f2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80031f4:	f7fd fc0a 	bl	8000a0c <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_10;
 80031f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80031fc:	a905      	add	r1, sp, #20
 80031fe:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_10;
 8003200:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003202:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003204:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003206:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8003208:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800320c:	f7fd fbfe 	bl	8000a0c <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8003210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8003214:	a905      	add	r1, sp, #20
 8003216:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_12;
 8003218:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800321a:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800321c:	9507      	str	r5, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800321e:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8003220:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8003224:	f7fd fbf2 	bl	8000a0c <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8003228:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800322c:	a905      	add	r1, sp, #20
 800322e:	4638      	mov	r0, r7
  GPIO_Init.Pin       = GPIO_PIN_11;
 8003230:	9305      	str	r3, [sp, #20]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003232:	9606      	str	r6, [sp, #24]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8003234:	9407      	str	r4, [sp, #28]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003236:	9408      	str	r4, [sp, #32]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8003238:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800323c:	f7fd fbe6 	bl	8000a0c <HAL_GPIO_Init>
}
 8003240:	b00a      	add	sp, #40	; 0x28
 8003242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	48000400 	.word	0x48000400
 8003250:	48001000 	.word	0x48001000
 8003254:	10110000 	.word	0x10110000

08003258 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(void)
{
 8003258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 800325a:	f7fd fb49 	bl	80008f0 <HAL_GetTick>
  uint8_t Prompt[6];
  uint8_t count = 0;
  HAL_StatusTypeDef  Status;
  
  hspi.Instance               = SPI3;
 800325e:	4c41      	ldr	r4, [pc, #260]	; (8003364 <SPI_WIFI_Init+0x10c>)
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <SPI_WIFI_Init+0x110>)
 8003262:	6023      	str	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8003264:	4606      	mov	r6, r0
  SPI_WIFI_MspInit(&hspi);
 8003266:	4620      	mov	r0, r4
 8003268:	f7ff ff64 	bl	8003134 <SPI_WIFI_MspInit>
  
  hspi.Init.Mode              = SPI_MODE_MASTER;
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800326c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  hspi.Init.Mode              = SPI_MODE_MASTER;
 8003270:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8003274:	60e2      	str	r2, [r4, #12]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
  hspi.Init.NSS               = SPI_NSS_SOFT;
 8003276:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi.Init.Mode              = SPI_MODE_MASTER;
 800327a:	6063      	str	r3, [r4, #4]
  hspi.Init.NSS               = SPI_NSS_SOFT;
 800327c:	61a2      	str	r2, [r4, #24]
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800327e:	2300      	movs	r3, #0
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8003280:	2210      	movs	r2, #16
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
  hspi.Init.CRCPolynomial     = 0;
  
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8003282:	4620      	mov	r0, r4
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8003284:	60a3      	str	r3, [r4, #8]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8003286:	6123      	str	r3, [r4, #16]
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8003288:	6163      	str	r3, [r4, #20]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 800328a:	61e2      	str	r2, [r4, #28]
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800328c:	6223      	str	r3, [r4, #32]
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800328e:	6263      	str	r3, [r4, #36]	; 0x24
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8003290:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi.Init.CRCPolynomial     = 0;
 8003292:	62e3      	str	r3, [r4, #44]	; 0x2c
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8003294:	f7ff f845 	bl	8002322 <HAL_SPI_Init>
 8003298:	4605      	mov	r5, r0
 800329a:	2800      	cmp	r0, #0
 800329c:	d15c      	bne.n	8003358 <SPI_WIFI_Init+0x100>
  {
    return -1;
  }
  
  WIFI_RESET_MODULE();
 800329e:	4602      	mov	r2, r0
 80032a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032a4:	4831      	ldr	r0, [pc, #196]	; (800336c <SPI_WIFI_Init+0x114>)
 80032a6:	f7fd fd2d 	bl	8000d04 <HAL_GPIO_WritePin>
 80032aa:	200a      	movs	r0, #10
 80032ac:	f7fd fb26 	bl	80008fc <HAL_Delay>
 80032b0:	2201      	movs	r2, #1
 80032b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032b6:	482d      	ldr	r0, [pc, #180]	; (800336c <SPI_WIFI_Init+0x114>)
 80032b8:	f7fd fd24 	bl	8000d04 <HAL_GPIO_WritePin>
 80032bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032c0:	f7fd fb1c 	bl	80008fc <HAL_Delay>
  
  WIFI_ENABLE_NSS(); 
 80032c4:	4829      	ldr	r0, [pc, #164]	; (800336c <SPI_WIFI_Init+0x114>)
 80032c6:	462a      	mov	r2, r5
 80032c8:	2101      	movs	r1, #1
 80032ca:	f7fd fd1b 	bl	8000d04 <HAL_GPIO_WritePin>
 80032ce:	200a      	movs	r0, #10
 80032d0:	f7fd fb14 	bl	80008fc <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 80032d4:	2102      	movs	r1, #2
 80032d6:	4825      	ldr	r0, [pc, #148]	; (800336c <SPI_WIFI_Init+0x114>)
 80032d8:	f7fd fd0e 	bl	8000cf8 <HAL_GPIO_ReadPin>
 80032dc:	2801      	cmp	r0, #1
 80032de:	4602      	mov	r2, r0
 80032e0:	d022      	beq.n	8003328 <SPI_WIFI_Init+0xd0>
      WIFI_DISABLE_NSS(); 
      return -1;
    }    
  }
  
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80032e2:	f89d 3000 	ldrb.w	r3, [sp]
 80032e6:	2b15      	cmp	r3, #21
 80032e8:	d12e      	bne.n	8003348 <SPI_WIFI_Init+0xf0>
 80032ea:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80032ee:	2b15      	cmp	r3, #21
 80032f0:	d12a      	bne.n	8003348 <SPI_WIFI_Init+0xf0>
 80032f2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80032f6:	2b0d      	cmp	r3, #13
 80032f8:	d126      	bne.n	8003348 <SPI_WIFI_Init+0xf0>
 80032fa:	f89d 4003 	ldrb.w	r4, [sp, #3]
 80032fe:	2c0a      	cmp	r4, #10
 8003300:	d122      	bne.n	8003348 <SPI_WIFI_Init+0xf0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8003302:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003306:	2b3e      	cmp	r3, #62	; 0x3e
 8003308:	d11e      	bne.n	8003348 <SPI_WIFI_Init+0xf0>
 800330a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800330e:	2b20      	cmp	r3, #32
 8003310:	d11a      	bne.n	8003348 <SPI_WIFI_Init+0xf0>
  {
    WIFI_DISABLE_NSS(); 
    return -1;
  }    
   
  WIFI_DISABLE_NSS(); 
 8003312:	2201      	movs	r2, #1
 8003314:	4611      	mov	r1, r2
 8003316:	4815      	ldr	r0, [pc, #84]	; (800336c <SPI_WIFI_Init+0x114>)
 8003318:	f7fd fcf4 	bl	8000d04 <HAL_GPIO_WritePin>
 800331c:	4620      	mov	r0, r4
 800331e:	f7fd faed 	bl	80008fc <HAL_Delay>
  return 0;
 8003322:	2000      	movs	r0, #0
}
 8003324:	b003      	add	sp, #12
 8003326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8003328:	eb0d 0105 	add.w	r1, sp, r5
 800332c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003330:	4620      	mov	r0, r4
 8003332:	f7ff fa3d 	bl	80027b0 <HAL_SPI_Receive>
 8003336:	4607      	mov	r7, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8003338:	f7fd fada 	bl	80008f0 <HAL_GetTick>
 800333c:	1b80      	subs	r0, r0, r6
    count += 2;
 800333e:	3502      	adds	r5, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8003340:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8003344:	b2ed      	uxtb	r5, r5
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8003346:	d30a      	bcc.n	800335e <SPI_WIFI_Init+0x106>
      WIFI_DISABLE_NSS(); 
 8003348:	2201      	movs	r2, #1
 800334a:	4808      	ldr	r0, [pc, #32]	; (800336c <SPI_WIFI_Init+0x114>)
 800334c:	4611      	mov	r1, r2
 800334e:	f7fd fcd9 	bl	8000d04 <HAL_GPIO_WritePin>
 8003352:	200a      	movs	r0, #10
 8003354:	f7fd fad2 	bl	80008fc <HAL_Delay>
    return -1;
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	e7e2      	b.n	8003324 <SPI_WIFI_Init+0xcc>
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800335e:	2f00      	cmp	r7, #0
 8003360:	d0b8      	beq.n	80032d4 <SPI_WIFI_Init+0x7c>
 8003362:	e7f1      	b.n	8003348 <SPI_WIFI_Init+0xf0>
 8003364:	20000730 	.word	0x20000730
 8003368:	40003c00 	.word	0x40003c00
 800336c:	48001000 	.word	0x48001000

08003370 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8003370:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8003372:	4802      	ldr	r0, [pc, #8]	; (800337c <SPI_WIFI_DeInit+0xc>)
 8003374:	f7ff f826 	bl	80023c4 <HAL_SPI_DeInit>
  return 0;
}
 8003378:	2000      	movs	r0, #0
 800337a:	bd08      	pop	{r3, pc}
 800337c:	20000730 	.word	0x20000730

08003380 <SPI_WIFI_ReceiveData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8003380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003384:	468a      	mov	sl, r1
 8003386:	4616      	mov	r6, r2
 8003388:	4680      	mov	r8, r0
  uint32_t tickstart = HAL_GetTick();
 800338a:	f7fd fab1 	bl	80008f0 <HAL_GetTick>
 800338e:	4681      	mov	r9, r0
  int16_t length = 0;
  uint8_t tmp[2];
  
  HAL_SPIEx_FlushRxFifo(&hspi);
 8003390:	4837      	ldr	r0, [pc, #220]	; (8003470 <SPI_WIFI_ReceiveData+0xf0>)
  
  WIFI_DISABLE_NSS(); 
  
  while (!WIFI_IS_CMDDATA_READY())
 8003392:	4c38      	ldr	r4, [pc, #224]	; (8003474 <SPI_WIFI_ReceiveData+0xf4>)
  HAL_SPIEx_FlushRxFifo(&hspi);
 8003394:	f7ff fab5 	bl	8002902 <HAL_SPIEx_FlushRxFifo>
  WIFI_DISABLE_NSS(); 
 8003398:	2201      	movs	r2, #1
 800339a:	4611      	mov	r1, r2
 800339c:	4835      	ldr	r0, [pc, #212]	; (8003474 <SPI_WIFI_ReceiveData+0xf4>)
 800339e:	f7fd fcb1 	bl	8000d04 <HAL_GPIO_WritePin>
 80033a2:	200a      	movs	r0, #10
 80033a4:	f7fd faaa 	bl	80008fc <HAL_Delay>
  while (!WIFI_IS_CMDDATA_READY())
 80033a8:	2102      	movs	r1, #2
 80033aa:	4620      	mov	r0, r4
 80033ac:	f7fd fca4 	bl	8000cf8 <HAL_GPIO_ReadPin>
 80033b0:	2801      	cmp	r0, #1
 80033b2:	4601      	mov	r1, r0
 80033b4:	d141      	bne.n	800343a <SPI_WIFI_ReceiveData+0xba>
    {
      return -1;
    }
  }
  
  WIFI_ENABLE_NSS(); 
 80033b6:	2200      	movs	r2, #0
 80033b8:	482e      	ldr	r0, [pc, #184]	; (8003474 <SPI_WIFI_ReceiveData+0xf4>)
  
  while (WIFI_IS_CMDDATA_READY())
 80033ba:	4f2e      	ldr	r7, [pc, #184]	; (8003474 <SPI_WIFI_ReceiveData+0xf4>)
  WIFI_ENABLE_NSS(); 
 80033bc:	f7fd fca2 	bl	8000d04 <HAL_GPIO_WritePin>
 80033c0:	200a      	movs	r0, #10
 80033c2:	f7fd fa9b 	bl	80008fc <HAL_Delay>
  while (WIFI_IS_CMDDATA_READY())
 80033c6:	4644      	mov	r4, r8
 80033c8:	2102      	movs	r1, #2
 80033ca:	4638      	mov	r0, r7
 80033cc:	f7fd fc94 	bl	8000cf8 <HAL_GPIO_ReadPin>
 80033d0:	eba4 0508 	sub.w	r5, r4, r8
 80033d4:	b2ad      	uxth	r5, r5
 80033d6:	2801      	cmp	r0, #1
 80033d8:	fa0f fb85 	sxth.w	fp, r5
 80033dc:	d121      	bne.n	8003422 <SPI_WIFI_ReceiveData+0xa2>
  {
    if((length < len) || (!len))
 80033de:	45d3      	cmp	fp, sl
 80033e0:	db02      	blt.n	80033e8 <SPI_WIFI_ReceiveData+0x68>
 80033e2:	f1ba 0f00 	cmp.w	sl, #0
 80033e6:	d11c      	bne.n	8003422 <SPI_WIFI_ReceiveData+0xa2>
    {
      HAL_SPI_Receive(&hspi, tmp, 1, timeout) ;	   
 80033e8:	4633      	mov	r3, r6
 80033ea:	2201      	movs	r2, #1
 80033ec:	a901      	add	r1, sp, #4
 80033ee:	4820      	ldr	r0, [pc, #128]	; (8003470 <SPI_WIFI_ReceiveData+0xf0>)
 80033f0:	f7ff f9de 	bl	80027b0 <HAL_SPI_Receive>
      /* let some time to hardware to change CMDDATA signal */
      if(tmp[1] == 0x15)
 80033f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80033f8:	2b15      	cmp	r3, #21
 80033fa:	d102      	bne.n	8003402 <SPI_WIFI_ReceiveData+0x82>
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80033fc:	2001      	movs	r0, #1
 80033fe:	f7fd fa7d 	bl	80008fc <HAL_Delay>
      if(!WIFI_IS_CMDDATA_READY())
 8003402:	2102      	movs	r1, #2
 8003404:	4638      	mov	r0, r7
 8003406:	f7fd fc77 	bl	8000cf8 <HAL_GPIO_ReadPin>
 800340a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800340e:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pData[0] = tmp[0];
 8003412:	7022      	strb	r2, [r4, #0]
      if(!WIFI_IS_CMDDATA_READY())
 8003414:	2801      	cmp	r0, #1
 8003416:	d019      	beq.n	800344c <SPI_WIFI_ReceiveData+0xcc>
        if(tmp[1] == 0x15)
 8003418:	2b15      	cmp	r3, #21
 800341a:	d117      	bne.n	800344c <SPI_WIFI_ReceiveData+0xcc>
          length++;
 800341c:	3501      	adds	r5, #1
 800341e:	fa0f fb85 	sxth.w	fp, r5
  WIFI_DISABLE_NSS(); 
 8003422:	2201      	movs	r2, #1
 8003424:	4813      	ldr	r0, [pc, #76]	; (8003474 <SPI_WIFI_ReceiveData+0xf4>)
 8003426:	4611      	mov	r1, r2
 8003428:	f7fd fc6c 	bl	8000d04 <HAL_GPIO_WritePin>
 800342c:	200a      	movs	r0, #10
 800342e:	f7fd fa65 	bl	80008fc <HAL_Delay>
}
 8003432:	4658      	mov	r0, fp
 8003434:	b003      	add	sp, #12
 8003436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 800343a:	f7fd fa59 	bl	80008f0 <HAL_GetTick>
 800343e:	eba0 0009 	sub.w	r0, r0, r9
 8003442:	42b0      	cmp	r0, r6
 8003444:	d9b0      	bls.n	80033a8 <SPI_WIFI_ReceiveData+0x28>
      return -1;
 8003446:	f04f 3bff 	mov.w	fp, #4294967295
 800344a:	e7f2      	b.n	8003432 <SPI_WIFI_ReceiveData+0xb2>
      pData[1] = tmp[1];
 800344c:	7063      	strb	r3, [r4, #1]
      if((HAL_GetTick() - tickstart ) > timeout)
 800344e:	f7fd fa4f 	bl	80008f0 <HAL_GetTick>
 8003452:	eba0 0009 	sub.w	r0, r0, r9
 8003456:	4286      	cmp	r6, r0
      pData  += 2;
 8003458:	f104 0402 	add.w	r4, r4, #2
      if((HAL_GetTick() - tickstart ) > timeout)
 800345c:	d2b4      	bcs.n	80033c8 <SPI_WIFI_ReceiveData+0x48>
        WIFI_DISABLE_NSS(); 
 800345e:	2201      	movs	r2, #1
 8003460:	4611      	mov	r1, r2
 8003462:	4804      	ldr	r0, [pc, #16]	; (8003474 <SPI_WIFI_ReceiveData+0xf4>)
 8003464:	f7fd fc4e 	bl	8000d04 <HAL_GPIO_WritePin>
 8003468:	200a      	movs	r0, #10
 800346a:	f7fd fa47 	bl	80008fc <HAL_Delay>
 800346e:	e7ea      	b.n	8003446 <SPI_WIFI_ReceiveData+0xc6>
 8003470:	20000730 	.word	0x20000730
 8003474:	48001000 	.word	0x48001000

08003478 <SPI_WIFI_SendData>:
{
 8003478:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800347c:	4605      	mov	r5, r0
 800347e:	460c      	mov	r4, r1
 8003480:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8003482:	f7fd fa35 	bl	80008f0 <HAL_GetTick>
  while (!WIFI_IS_CMDDATA_READY())
 8003486:	4f1f      	ldr	r7, [pc, #124]	; (8003504 <SPI_WIFI_SendData+0x8c>)
  uint32_t tickstart = HAL_GetTick();
 8003488:	4680      	mov	r8, r0
  while (!WIFI_IS_CMDDATA_READY())
 800348a:	2102      	movs	r1, #2
 800348c:	4638      	mov	r0, r7
 800348e:	f7fd fc33 	bl	8000cf8 <HAL_GPIO_ReadPin>
 8003492:	2801      	cmp	r0, #1
 8003494:	4601      	mov	r1, r0
 8003496:	d122      	bne.n	80034de <SPI_WIFI_SendData+0x66>
  WIFI_ENABLE_NSS(); 
 8003498:	2200      	movs	r2, #0
 800349a:	481a      	ldr	r0, [pc, #104]	; (8003504 <SPI_WIFI_SendData+0x8c>)
 800349c:	f7fd fc32 	bl	8000d04 <HAL_GPIO_WritePin>
 80034a0:	200a      	movs	r0, #10
 80034a2:	f7fd fa2b 	bl	80008fc <HAL_Delay>
  if (len > 1)
 80034a6:	2c01      	cmp	r4, #1
 80034a8:	d906      	bls.n	80034b8 <SPI_WIFI_SendData+0x40>
   if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, timeout) != HAL_OK)
 80034aa:	4633      	mov	r3, r6
 80034ac:	0862      	lsrs	r2, r4, #1
 80034ae:	4629      	mov	r1, r5
 80034b0:	4815      	ldr	r0, [pc, #84]	; (8003508 <SPI_WIFI_SendData+0x90>)
 80034b2:	f7fe ff9d 	bl	80023f0 <HAL_SPI_Transmit>
 80034b6:	b9c0      	cbnz	r0, 80034ea <SPI_WIFI_SendData+0x72>
  if ( len & 1)
 80034b8:	07e3      	lsls	r3, r4, #31
 80034ba:	d50e      	bpl.n	80034da <SPI_WIFI_SendData+0x62>
    Padding[0] = pdata[len-1];
 80034bc:	4425      	add	r5, r4
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 80034be:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 80034c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80034c4:	f88d 3004 	strb.w	r3, [sp, #4]
    Padding[1] = '\n';
 80034c8:	230a      	movs	r3, #10
 80034ca:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 80034ce:	a901      	add	r1, sp, #4
 80034d0:	4633      	mov	r3, r6
 80034d2:	480d      	ldr	r0, [pc, #52]	; (8003508 <SPI_WIFI_SendData+0x90>)
 80034d4:	f7fe ff8c 	bl	80023f0 <HAL_SPI_Transmit>
 80034d8:	b938      	cbnz	r0, 80034ea <SPI_WIFI_SendData+0x72>
  return len;
 80034da:	b220      	sxth	r0, r4
 80034dc:	e00f      	b.n	80034fe <SPI_WIFI_SendData+0x86>
    if((HAL_GetTick() - tickstart ) > timeout)
 80034de:	f7fd fa07 	bl	80008f0 <HAL_GetTick>
 80034e2:	eba0 0008 	sub.w	r0, r0, r8
 80034e6:	42b0      	cmp	r0, r6
 80034e8:	d9cf      	bls.n	800348a <SPI_WIFI_SendData+0x12>
      WIFI_DISABLE_NSS();       
 80034ea:	2201      	movs	r2, #1
 80034ec:	4611      	mov	r1, r2
 80034ee:	4805      	ldr	r0, [pc, #20]	; (8003504 <SPI_WIFI_SendData+0x8c>)
 80034f0:	f7fd fc08 	bl	8000d04 <HAL_GPIO_WritePin>
 80034f4:	200a      	movs	r0, #10
 80034f6:	f7fd fa01 	bl	80008fc <HAL_Delay>
      return -1;
 80034fa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80034fe:	b002      	add	sp, #8
 8003500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003504:	48001000 	.word	0x48001000
 8003508:	20000730 	.word	0x20000730

0800350c <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 800350c:	f7fd b9f6 	b.w	80008fc <HAL_Delay>

08003510 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003510:	4ba2      	ldr	r3, [pc, #648]	; (800379c <MX_GPIO_Init+0x28c>)
{
 8003512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8003518:	4ea1      	ldr	r6, [pc, #644]	; (80037a0 <MX_GPIO_Init+0x290>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800351a:	f8df 928c 	ldr.w	r9, [pc, #652]	; 80037a8 <MX_GPIO_Init+0x298>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800351e:	f8df a28c 	ldr.w	sl, [pc, #652]	; 80037ac <MX_GPIO_Init+0x29c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8003522:	f8df 828c 	ldr.w	r8, [pc, #652]	; 80037b0 <MX_GPIO_Init+0x2a0>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003526:	f8df b28c 	ldr.w	fp, [pc, #652]	; 80037b4 <MX_GPIO_Init+0x2a4>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800352a:	f042 0210 	orr.w	r2, r2, #16
 800352e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003530:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8003532:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003534:	f002 0210 	and.w	r2, r2, #16
 8003538:	9202      	str	r2, [sp, #8]
 800353a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800353c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800353e:	f042 0204 	orr.w	r2, r2, #4
 8003542:	64da      	str	r2, [r3, #76]	; 0x4c
 8003544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003546:	f002 0204 	and.w	r2, r2, #4
 800354a:	9203      	str	r2, [sp, #12]
 800354c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800354e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	64da      	str	r2, [r3, #76]	; 0x4c
 8003556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003558:	f002 0201 	and.w	r2, r2, #1
 800355c:	9204      	str	r2, [sp, #16]
 800355e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003562:	f042 0202 	orr.w	r2, r2, #2
 8003566:	64da      	str	r2, [r3, #76]	; 0x4c
 8003568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800356a:	f002 0202 	and.w	r2, r2, #2
 800356e:	9205      	str	r2, [sp, #20]
 8003570:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003574:	f042 0208 	orr.w	r2, r2, #8
 8003578:	64da      	str	r2, [r3, #76]	; 0x4c
 800357a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8003582:	4630      	mov	r0, r6
 8003584:	2200      	movs	r2, #0
 8003586:	f240 1115 	movw	r1, #277	; 0x115
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800358a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800358c:	f7fd fbba 	bl	8000d04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8003590:	2200      	movs	r2, #0
 8003592:	f248 1104 	movw	r1, #33028	; 0x8104
 8003596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800359a:	f7fd fbb3 	bl	8000d04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800359e:	4648      	mov	r0, r9
 80035a0:	2200      	movs	r2, #0
 80035a2:	f24f 0134 	movw	r1, #61492	; 0xf034
 80035a6:	f7fd fbad 	bl	8000d04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80035aa:	4650      	mov	r0, sl
 80035ac:	2200      	movs	r2, #0
 80035ae:	f243 0181 	movw	r1, #12417	; 0x3081
 80035b2:	f7fd fba7 	bl	8000d04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80035b6:	2200      	movs	r2, #0
 80035b8:	4640      	mov	r0, r8
 80035ba:	f44f 7110 	mov.w	r1, #576	; 0x240
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80035c0:	f7fd fba0 	bl	8000d04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c4:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80035c6:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ca:	a907      	add	r1, sp, #28
 80035cc:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80035ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035d6:	f7fd fa19 	bl	8000a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80035da:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035dc:	a907      	add	r1, sp, #28
 80035de:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80035e0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035e2:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035e8:	f7fd fa10 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80035ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035f0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80035f2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035f4:	4b6b      	ldr	r3, [pc, #428]	; (80037a4 <MX_GPIO_Init+0x294>)
 80035f6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80035f8:	4640      	mov	r0, r8

  /*configure GPIO pins: a0-a3 for relays & actuator & button*/
  GPIO_InitStruct.Pin = ARD_A3_Pin|ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fa:	2703      	movs	r7, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80035fe:	f7fd fa05 	bl	8000a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A3_Pin|ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
 8003602:	233c      	movs	r3, #60	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003604:	a907      	add	r1, sp, #28
 8003606:	4640      	mov	r0, r8

  /*configure GPIO pins: a4 as input for window state*/
  GPIO_InitStruct.Pin = ARD_A4_Pin;
 8003608:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = ARD_A3_Pin|ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
 800360a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003610:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003612:	f7fd f9fb 	bl	8000a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003616:	a907      	add	r1, sp, #28
 8003618:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ARD_A4_Pin;
 800361a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800361c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003622:	f7fd f9f3 	bl	8000a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003626:	a907      	add	r1, sp, #28
 8003628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800362c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003632:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003634:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	f7fd f9e9 	bl	8000a0c <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800363a:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363c:	a907      	add	r1, sp, #28
 800363e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003642:	930b      	str	r3, [sp, #44]	; 0x2c
 8003644:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003646:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364c:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364e:	f7fd f9dd 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin;
 8003652:	f44f 7282 	mov.w	r2, #260	; 0x104
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003656:	a907      	add	r1, sp, #28
 8003658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin;
 800365c:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800365e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003664:	f7fd f9d2 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8003668:	9b00      	ldr	r3, [sp, #0]
 800366a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800366c:	a907      	add	r1, sp, #28
 800366e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003676:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003678:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800367a:	f7fd f9c7 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800367e:	220b      	movs	r2, #11
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003680:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003682:	a907      	add	r1, sp, #28
 8003684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003688:	9208      	str	r2, [sp, #32]
 800368a:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800368c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003690:	f7fd f9bc 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin|ARD_D10_Pin;
 8003694:	23e4      	movs	r3, #228	; 0xe4
 8003696:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003698:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800369a:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80036a2:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a8:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036aa:	f7fd f9af 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80036ae:	a907      	add	r1, sp, #28
 80036b0:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80036b2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036b4:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80036ba:	f7fd f9a7 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80036be:	9a01      	ldr	r2, [sp, #4]
 80036c0:	9208      	str	r2, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80036c2:	a907      	add	r1, sp, #28
 80036c4:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80036c6:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80036ca:	f7fd f99f 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80036ce:	f24f 0234 	movw	r2, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d2:	a907      	add	r1, sp, #28
 80036d4:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80036d6:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036de:	f7fd f995 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80036e2:	f64c 4204 	movw	r2, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e6:	a907      	add	r1, sp, #28
 80036e8:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80036ea:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036ec:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036f2:	f7fd f98b 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80036f6:	f243 0281 	movw	r2, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036fa:	a907      	add	r1, sp, #28
 80036fc:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80036fe:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003700:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003704:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003706:	f7fd f981 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800370a:	f44f 7210 	mov.w	r2, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800370e:	a907      	add	r1, sp, #28
 8003710:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8003712:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003714:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003718:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800371a:	f7fd f977 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800371e:	f44f 72c0 	mov.w	r2, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003722:	a907      	add	r1, sp, #28
 8003724:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8003726:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003728:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800372e:	f7fd f96d 	bl	8000a0c <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003732:	9b00      	ldr	r3, [sp, #0]
 8003734:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003736:	a907      	add	r1, sp, #28
 8003738:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800373a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003740:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003742:	f7fd f963 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003746:	2378      	movs	r3, #120	; 0x78
 8003748:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800374a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800374c:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800374e:	4650      	mov	r0, sl
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003750:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003752:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003756:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003758:	f7fd f958 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800375c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003760:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003762:	2312      	movs	r3, #18
 8003764:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003766:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003768:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376a:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800376c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800376e:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003770:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003772:	f7fd f94b 	bl	8000a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003776:	4622      	mov	r2, r4
 8003778:	4621      	mov	r1, r4
 800377a:	2017      	movs	r0, #23
 800377c:	f7fd f8de 	bl	800093c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003780:	2017      	movs	r0, #23
 8003782:	f7fd f90f 	bl	80009a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003786:	4622      	mov	r2, r4
 8003788:	4621      	mov	r1, r4
 800378a:	2028      	movs	r0, #40	; 0x28
 800378c:	f7fd f8d6 	bl	800093c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003790:	2028      	movs	r0, #40	; 0x28
 8003792:	f7fd f907 	bl	80009a4 <HAL_NVIC_EnableIRQ>

}
 8003796:	b00d      	add	sp, #52	; 0x34
 8003798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800379c:	40021000 	.word	0x40021000
 80037a0:	48001000 	.word	0x48001000
 80037a4:	10210000 	.word	0x10210000
 80037a8:	48000400 	.word	0x48000400
 80037ac:	48000c00 	.word	0x48000c00
 80037b0:	48000800 	.word	0x48000800
 80037b4:	10110000 	.word	0x10110000

080037b8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80037b8:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80037ba:	4815      	ldr	r0, [pc, #84]	; (8003810 <MX_I2C2_Init+0x58>)
  hi2c2.Init.Timing = 0x10909CEC;
 80037bc:	4b15      	ldr	r3, [pc, #84]	; (8003814 <MX_I2C2_Init+0x5c>)
 80037be:	4916      	ldr	r1, [pc, #88]	; (8003818 <MX_I2C2_Init+0x60>)
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037c0:	2201      	movs	r2, #1
  hi2c2.Init.Timing = 0x10909CEC;
 80037c2:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037ca:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037cc:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80037ce:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037d0:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037d2:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037d4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80037d6:	f7fd fbee 	bl	8000fb6 <HAL_I2C_Init>
 80037da:	b118      	cbz	r0, 80037e4 <MX_I2C2_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80037dc:	2142      	movs	r1, #66	; 0x42
 80037de:	480f      	ldr	r0, [pc, #60]	; (800381c <MX_I2C2_Init+0x64>)
 80037e0:	f7ff f9ec 	bl	8002bbc <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037e4:	2100      	movs	r1, #0
 80037e6:	480a      	ldr	r0, [pc, #40]	; (8003810 <MX_I2C2_Init+0x58>)
 80037e8:	f7fd fdc6 	bl	8001378 <HAL_I2CEx_ConfigAnalogFilter>
 80037ec:	b118      	cbz	r0, 80037f6 <MX_I2C2_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80037ee:	2149      	movs	r1, #73	; 0x49
 80037f0:	480a      	ldr	r0, [pc, #40]	; (800381c <MX_I2C2_Init+0x64>)
 80037f2:	f7ff f9e3 	bl	8002bbc <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80037f6:	2100      	movs	r1, #0
 80037f8:	4805      	ldr	r0, [pc, #20]	; (8003810 <MX_I2C2_Init+0x58>)
 80037fa:	f7fd fde3 	bl	80013c4 <HAL_I2CEx_ConfigDigitalFilter>
 80037fe:	b128      	cbz	r0, 800380c <MX_I2C2_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003800:	2150      	movs	r1, #80	; 0x50
 8003802:	4806      	ldr	r0, [pc, #24]	; (800381c <MX_I2C2_Init+0x64>)
  }

}
 8003804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003808:	f7ff b9d8 	b.w	8002bbc <_Error_Handler>
 800380c:	bd08      	pop	{r3, pc}
 800380e:	bf00      	nop
 8003810:	20000794 	.word	0x20000794
 8003814:	10909cec 	.word	0x10909cec
 8003818:	40005800 	.word	0x40005800
 800381c:	08004b3a 	.word	0x08004b3a

08003820 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C2)
 8003822:	6802      	ldr	r2, [r0, #0]
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <HAL_I2C_MspInit+0x44>)
 8003826:	429a      	cmp	r2, r3
 8003828:	d119      	bne.n	800385e <HAL_I2C_MspInit+0x3e>
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800382a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800382e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003830:	2312      	movs	r3, #18
 8003832:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003834:	2301      	movs	r3, #1
 8003836:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003838:	2303      	movs	r3, #3
 800383a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800383c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383e:	eb0d 0103 	add.w	r1, sp, r3
 8003842:	4809      	ldr	r0, [pc, #36]	; (8003868 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003844:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003846:	f7fd f8e1 	bl	8000a0c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <HAL_I2C_MspInit+0x4c>)
 800384c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800384e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003852:	659a      	str	r2, [r3, #88]	; 0x58
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800385e:	b007      	add	sp, #28
 8003860:	f85d fb04 	ldr.w	pc, [sp], #4
 8003864:	40005800 	.word	0x40005800
 8003868:	48000400 	.word	0x48000400
 800386c:	40021000 	.word	0x40021000

08003870 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C2)
 8003870:	6802      	ldr	r2, [r0, #0]
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <HAL_I2C_MspDeInit+0x20>)
 8003874:	429a      	cmp	r2, r3
 8003876:	d109      	bne.n	800388c <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003878:	4a06      	ldr	r2, [pc, #24]	; (8003894 <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 800387a:	4807      	ldr	r0, [pc, #28]	; (8003898 <HAL_I2C_MspDeInit+0x28>)
    __HAL_RCC_I2C2_CLK_DISABLE();
 800387c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800387e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003882:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8003884:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003888:	f7fd b99c 	b.w	8000bc4 <HAL_GPIO_DeInit>
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40005800 	.word	0x40005800
 8003894:	40021000 	.word	0x40021000
 8003898:	48000400 	.word	0x48000400

0800389c <openWindow>:
/* Private functions -----------------------------------------------*/
void openWindow(){
//	HAL_GPIO_WritePin(GPIOC,ARD_A2_Pin,GPIO_PIN_SET);
//	HAL_Delay(2);
//	HAL_GPIO_WritePin(GPIOC,ARD_A2_Pin,GPIO_PIN_RESET);
	TIM2->ARR = 4;
 800389c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038a0:	2204      	movs	r2, #4
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 2;
 80038a4:	2202      	movs	r2, #2
 80038a6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CR1 = TIMER_ON;
 80038a8:	f240 22a1 	movw	r2, #673	; 0x2a1
 80038ac:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80038ae:	200a      	movs	r0, #10
 80038b0:	f7fd b824 	b.w	80008fc <HAL_Delay>

080038b4 <closeWindow>:
	//TIM2->CR1 = TIMER_OFF;
}

void closeWindow(){
 80038b4:	b510      	push	{r4, lr}
//	HAL_GPIO_WritePin(GPIOC,ARD_A2_Pin,GPIO_PIN_SET);
//	HAL_Delay(1);
//	HAL_GPIO_WritePin(GPIOC,ARD_A2_Pin,GPIO_PIN_RESET);
	TIM2->ARR = 2;
 80038b6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80038ba:	2302      	movs	r3, #2
 80038bc:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM2->CCR1 = 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	6363      	str	r3, [r4, #52]	; 0x34
	TIM2->CR1 = TIMER_ON;
 80038c2:	f240 23a1 	movw	r3, #673	; 0x2a1
 80038c6:	6023      	str	r3, [r4, #0]
	HAL_Delay(10);
 80038c8:	200a      	movs	r0, #10
 80038ca:	f7fd f817 	bl	80008fc <HAL_Delay>
	TIM2->CR1 = TIMER_OFF;
 80038ce:	f44f 7308 	mov.w	r3, #544	; 0x220
 80038d2:	6023      	str	r3, [r4, #0]
 80038d4:	bd10      	pop	{r4, pc}
	...

080038d8 <furnaceON>:
}

void furnaceON(){
	HAL_GPIO_WritePin(GPIOC,ARD_A0_Pin,GPIO_PIN_SET);
 80038d8:	2201      	movs	r2, #1
 80038da:	2120      	movs	r1, #32
 80038dc:	4801      	ldr	r0, [pc, #4]	; (80038e4 <furnaceON+0xc>)
 80038de:	f7fd ba11 	b.w	8000d04 <HAL_GPIO_WritePin>
 80038e2:	bf00      	nop
 80038e4:	48000800 	.word	0x48000800

080038e8 <furnaceOFF>:
}

void furnaceOFF(){
	HAL_GPIO_WritePin(GPIOC,ARD_A0_Pin,GPIO_PIN_RESET);
 80038e8:	2200      	movs	r2, #0
 80038ea:	2120      	movs	r1, #32
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <furnaceOFF+0xc>)
 80038ee:	f7fd ba09 	b.w	8000d04 <HAL_GPIO_WritePin>
 80038f2:	bf00      	nop
 80038f4:	48000800 	.word	0x48000800

080038f8 <acON>:
}

void acON(){
	HAL_GPIO_WritePin(GPIOC,ARD_A1_Pin,GPIO_PIN_RESET);
 80038f8:	2200      	movs	r2, #0
 80038fa:	2110      	movs	r1, #16
 80038fc:	4801      	ldr	r0, [pc, #4]	; (8003904 <acON+0xc>)
 80038fe:	f7fd ba01 	b.w	8000d04 <HAL_GPIO_WritePin>
 8003902:	bf00      	nop
 8003904:	48000800 	.word	0x48000800

08003908 <acOFF>:
}

void acOFF(){
	HAL_GPIO_WritePin(GPIOC,ARD_A1_Pin,GPIO_PIN_SET);
 8003908:	2201      	movs	r2, #1
 800390a:	2110      	movs	r1, #16
 800390c:	4801      	ldr	r0, [pc, #4]	; (8003914 <acOFF+0xc>)
 800390e:	f7fd b9f9 	b.w	8000d04 <HAL_GPIO_WritePin>
 8003912:	bf00      	nop
 8003914:	48000800 	.word	0x48000800

08003918 <getExtTemp>:
}

uint16_t getExtTemp(){
 8003918:	b507      	push	{r0, r1, r2, lr}
	uint16_t temp = -1;
	uint8_t buf[2];
	HAL_SPI_Receive(&hspi1, buf, 12, 1000);
 800391a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800391e:	220c      	movs	r2, #12
 8003920:	a901      	add	r1, sp, #4
 8003922:	4806      	ldr	r0, [pc, #24]	; (800393c <getExtTemp+0x24>)
 8003924:	f7fe ff44 	bl	80027b0 <HAL_SPI_Receive>
	temp = (((uint16_t)buf[1]) << 5) + (buf[0] >> 3);
 8003928:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800392c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8003930:	08db      	lsrs	r3, r3, #3
	return temp;
}
 8003932:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8003936:	b003      	add	sp, #12
 8003938:	f85d fb04 	ldr.w	pc, [sp], #4
 800393c:	200007e0 	.word	0x200007e0

08003940 <getWindowState>:

uint8_t getWindowState(){
 8003940:	b510      	push	{r4, lr}
	uint8_t state = 2;
	HAL_GPIO_WritePin(GPIOC,ARD_A3_Pin,GPIO_PIN_SET);
 8003942:	2201      	movs	r2, #1
 8003944:	2104      	movs	r1, #4
 8003946:	480b      	ldr	r0, [pc, #44]	; (8003974 <getWindowState+0x34>)
 8003948:	f7fd f9dc 	bl	8000d04 <HAL_GPIO_WritePin>
	GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOC,ARD_A4_Pin);
 800394c:	2102      	movs	r1, #2
 800394e:	4809      	ldr	r0, [pc, #36]	; (8003974 <getWindowState+0x34>)
 8003950:	f7fd f9d2 	bl	8000cf8 <HAL_GPIO_ReadPin>
	if (pinState == GPIO_PIN_SET){
 8003954:	2801      	cmp	r0, #1
 8003956:	d00a      	beq.n	800396e <getWindowState+0x2e>
		state = CLOSED;
	}
	else if (pinState == GPIO_PIN_RESET){
 8003958:	2800      	cmp	r0, #0
		state = OPEN;
 800395a:	bf14      	ite	ne
 800395c:	2402      	movne	r4, #2
 800395e:	2400      	moveq	r4, #0
	}
	HAL_GPIO_WritePin(GPIOC,ARD_A3_Pin,GPIO_PIN_RESET);
 8003960:	2200      	movs	r2, #0
 8003962:	2104      	movs	r1, #4
 8003964:	4803      	ldr	r0, [pc, #12]	; (8003974 <getWindowState+0x34>)
 8003966:	f7fd f9cd 	bl	8000d04 <HAL_GPIO_WritePin>
	return state;
}
 800396a:	4620      	mov	r0, r4
 800396c:	bd10      	pop	{r4, pc}
		state = CLOSED;
 800396e:	4604      	mov	r4, r0
 8003970:	e7f6      	b.n	8003960 <getWindowState+0x20>
 8003972:	bf00      	nop
 8003974:	48000800 	.word	0x48000800

08003978 <fixWindow>:

void fixWindow(){
 8003978:	b508      	push	{r3, lr}
	switch (errorNum){
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <fixWindow+0x2c>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d00c      	beq.n	800399c <fixWindow+0x24>
 8003982:	2b02      	cmp	r3, #2
 8003984:	d101      	bne.n	800398a <fixWindow+0x12>
	case WINDOW_NOT_OPEN:
		openWindow();
 8003986:	f7ff ff89 	bl	800389c <openWindow>
		closeWindow();
		break;
	default:
		break;
	}
	HAL_Delay(30000);  //TODO find out how long
 800398a:	f247 5030 	movw	r0, #30000	; 0x7530
 800398e:	f7fc ffb5 	bl	80008fc <HAL_Delay>
	windowState = getWindowState();
 8003992:	f7ff ffd5 	bl	8003940 <getWindowState>
 8003996:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <fixWindow+0x30>)
 8003998:	7018      	strb	r0, [r3, #0]
 800399a:	bd08      	pop	{r3, pc}
		closeWindow();
 800399c:	f7ff ff8a 	bl	80038b4 <closeWindow>
		break;
 80039a0:	e7f3      	b.n	800398a <fixWindow+0x12>
 80039a2:	bf00      	nop
 80039a4:	200001dd 	.word	0x200001dd
 80039a8:	20000014 	.word	0x20000014

080039ac <main>:
  * action as required
  *
  * @retval None
  */
int main(void)
{
 80039ac:	e92d 489f 	stmdb	sp!, {r0, r1, r2, r3, r4, r7, fp, lr}
  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039b0:	f7fc ff8a 	bl	80008c8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80039b4:	f7ff f878 	bl	8002aa8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039b8:	f7ff fdaa 	bl	8003510 <MX_GPIO_Init>
  //MX_DFSDM1_Init();
  MX_I2C2_Init();
 80039bc:	f7ff fefc 	bl	80037b8 <MX_I2C2_Init>
  //MX_QUADSPI_Init();
  //MX_SPI3_Init();
  MX_SPI1_Init();
 80039c0:	f000 f920 	bl	8003c04 <MX_SPI1_Init>
  //MX_USART1_UART_Init();
  //MX_USART3_UART_Init();
  //MX_USB_OTG_FS_PCD_Init();
  BSP_TSENSOR_Init();
 80039c4:	f000 f948 	bl	8003c58 <BSP_TSENSOR_Init>
  //MX_TIM2_Init();
  tim2_init();
 80039c8:	f7ff f8d0 	bl	8002b6c <tim2_init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80039cc:	2101      	movs	r1, #1
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7fc fe6e 	bl	80006b0 <BSP_PB_Init>
  SPI_WIFI_Init();
 80039d4:	f7ff fc40 	bl	8003258 <SPI_WIFI_Init>
  WIFI_Init();
 80039d8:	f000 fa6e 	bl	8003eb8 <WIFI_Init>

  //functionality test
  openWindow();
 80039dc:	f7ff ff5e 	bl	800389c <openWindow>
  closeWindow();
 80039e0:	f7ff ff68 	bl	80038b4 <closeWindow>
  BSP_TSENSOR_ReadTemp(&int_temp);
 80039e4:	4879      	ldr	r0, [pc, #484]	; (8003bcc <main+0x220>)
  ext_temp = getExtTemp();
 80039e6:	4e7a      	ldr	r6, [pc, #488]	; (8003bd0 <main+0x224>)
  BSP_TSENSOR_ReadTemp(&int_temp);
 80039e8:	f000 f948 	bl	8003c7c <BSP_TSENSOR_ReadTemp>
  ext_temp = getExtTemp();
 80039ec:	f7ff ff94 	bl	8003918 <getExtTemp>
 80039f0:	8030      	strh	r0, [r6, #0]
  furnaceON();
 80039f2:	f7ff ff71 	bl	80038d8 <furnaceON>
  furnaceOFF();
 80039f6:	f7ff ff77 	bl	80038e8 <furnaceOFF>
  acON();
 80039fa:	f7ff ff7d 	bl	80038f8 <acON>
  acOFF();
 80039fe:	f7ff ff83 	bl	8003908 <acOFF>

  //Connect to Access Point
  stat = WIFI_Connect("LukeandMichelle","10122010",  WIFI_ECN_WPA2_PSK);
 8003a02:	2203      	movs	r2, #3
 8003a04:	4973      	ldr	r1, [pc, #460]	; (8003bd4 <main+0x228>)
 8003a06:	4874      	ldr	r0, [pc, #464]	; (8003bd8 <main+0x22c>)
 8003a08:	f000 fa7a 	bl	8003f00 <WIFI_Connect>
  if (stat != WIFI_STATUS_OK){
 8003a0c:	b120      	cbz	r0, 8003a18 <main+0x6c>
	  stat = WIFI_Connect("iotclass","myiotclass",  WIFI_ECN_WPA2_PSK);
 8003a0e:	2203      	movs	r2, #3
 8003a10:	4972      	ldr	r1, [pc, #456]	; (8003bdc <main+0x230>)
 8003a12:	4873      	ldr	r0, [pc, #460]	; (8003be0 <main+0x234>)
 8003a14:	f000 fa74 	bl	8003f00 <WIFI_Connect>
  }

  while (1){
	  BSP_TSENSOR_ReadTemp(&int_temp);
	  ext_temp = getExtTemp();
	  windowState = getWindowState();
 8003a18:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8003bf8 <main+0x24c>
		  errorCorrection = 0;
	  }


	  //reporting
	  sprintf(WIFI_xmit, "field1=%u&field2=%.2f&field3=%u&field4=%u",
 8003a1c:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8003bfc <main+0x250>
 8003a20:	4657      	mov	r7, sl
	  BSP_TSENSOR_ReadTemp(&int_temp);
 8003a22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003bcc <main+0x220>
 8003a26:	4d6f      	ldr	r5, [pc, #444]	; (8003be4 <main+0x238>)
 8003a28:	4c6f      	ldr	r4, [pc, #444]	; (8003be8 <main+0x23c>)
 8003a2a:	4640      	mov	r0, r8
 8003a2c:	f000 f926 	bl	8003c7c <BSP_TSENSOR_ReadTemp>
	  ext_temp = getExtTemp();
 8003a30:	f7ff ff72 	bl	8003918 <getExtTemp>
 8003a34:	8030      	strh	r0, [r6, #0]
	  windowState = getWindowState();
 8003a36:	f7ff ff83 	bl	8003940 <getWindowState>
	  int_temp = int_temp - 3;
 8003a3a:	edd8 7a00 	vldr	s15, [r8]
	  windowState = getWindowState();
 8003a3e:	f88a 0000 	strb.w	r0, [sl]
	  int_temp = int_temp - 3;
 8003a42:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003a46:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  if (int_temp < desired_temp - 1 || int_temp > desired_temp + 1){
 8003a4a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  int_temp = int_temp - 3;
 8003a56:	edc8 7a00 	vstr	s15, [r8]
	  if (int_temp < desired_temp - 1 || int_temp > desired_temp + 1){
 8003a5a:	d406      	bmi.n	8003a6a <main+0xbe>
 8003a5c:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8003a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a68:	dd4f      	ble.n	8003b0a <main+0x15e>
		  switch (mode){
 8003a6a:	782b      	ldrb	r3, [r5, #0]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d831      	bhi.n	8003ad4 <main+0x128>
 8003a70:	e8df f003 	tbb	[pc, r3]
 8003a74:	47302803 	.word	0x47302803
 8003a78:	49          	.byte	0x49
 8003a79:	00          	.byte	0x00
				  if (ext_temp < int_temp){ //cool outside
 8003a7a:	8833      	ldrh	r3, [r6, #0]
			  if (int_temp > desired_temp){ //too hot
 8003a7c:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8003a80:	eef4 7ac7 	vcmpe.f32	s15, s14
				  if (ext_temp < int_temp){ //cool outside
 8003a84:	ee07 3a10 	vmov	s14, r3
 8003a88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			  if (int_temp > desired_temp){ //too hot
 8003a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				  if (ext_temp < int_temp){ //cool outside
 8003a90:	eef4 7ac7 	vcmpe.f32	s15, s14
			  if (int_temp > desired_temp){ //too hot
 8003a94:	dd0b      	ble.n	8003aae <main+0x102>
				  if (ext_temp < int_temp){ //cool outside
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	dd04      	ble.n	8003aa6 <main+0xfa>
					  openWindow();
 8003a9c:	f7ff fefe 	bl	800389c <openWindow>
					  mode = WINDOW_COOL;
 8003aa0:	2301      	movs	r3, #1
		  mode = ALL_OFF;
 8003aa2:	702b      	strb	r3, [r5, #0]
 8003aa4:	e016      	b.n	8003ad4 <main+0x128>
					  acON();
 8003aa6:	f7ff ff27 	bl	80038f8 <acON>
					  mode = AC_ON;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e7f9      	b.n	8003aa2 <main+0xf6>
				  if (ext_temp > int_temp){ //hot outside
 8003aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab2:	d503      	bpl.n	8003abc <main+0x110>
					  openWindow();
 8003ab4:	f7ff fef2 	bl	800389c <openWindow>
					  mode = WINDOW_HEAT;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e7f2      	b.n	8003aa2 <main+0xf6>
					  furnaceON();
 8003abc:	f7ff ff0c 	bl	80038d8 <furnaceON>
					  mode = FURNACE_ON;
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	e7ee      	b.n	8003aa2 <main+0xf6>
			  if (windowState != OPEN){
 8003ac4:	b1c8      	cbz	r0, 8003afa <main+0x14e>
				  windowState = getWindowState();
 8003ac6:	f7ff ff3b 	bl	8003940 <getWindowState>
				  if (windowState == CLOSED){
 8003aca:	2801      	cmp	r0, #1
				  windowState = getWindowState();
 8003acc:	7038      	strb	r0, [r7, #0]
				  if (windowState == CLOSED){
 8003ace:	d113      	bne.n	8003af8 <main+0x14c>
					  errorNum = WINDOW_NOT_OPEN;
 8003ad0:	2302      	movs	r3, #2
			  errorNum = FURNACE_UNK;
 8003ad2:	7023      	strb	r3, [r4, #0]
	  if (errorCorrection){
 8003ad4:	f8df b128 	ldr.w	fp, [pc, #296]	; 8003c00 <main+0x254>
 8003ad8:	f89b 3000 	ldrb.w	r3, [fp]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d042      	beq.n	8003b66 <main+0x1ba>
		  switch (errorNum){
 8003ae0:	7823      	ldrb	r3, [r4, #0]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d83a      	bhi.n	8003b60 <main+0x1b4>
 8003aea:	e8df f003 	tbb	[pc, r3]
 8003aee:	2732      	.short	0x2732
 8003af0:	6d64611b 	.word	0x6d64611b
 8003af4:	6a67      	.short	0x6a67
 8003af6:	6d          	.byte	0x6d
 8003af7:	00          	.byte	0x00
				  else if (windowState == OPEN){
 8003af8:	b908      	cbnz	r0, 8003afe <main+0x152>
					  errorNum = NO_ERROR;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e7e9      	b.n	8003ad2 <main+0x126>
					  errorNum = WINDOW_UNK;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e7e7      	b.n	8003ad2 <main+0x126>
			  errorNum = AC_UNK;
 8003b02:	2309      	movs	r3, #9
 8003b04:	e7e5      	b.n	8003ad2 <main+0x126>
			  errorNum = FURNACE_UNK;
 8003b06:	2306      	movs	r3, #6
 8003b08:	e7e3      	b.n	8003ad2 <main+0x126>
	  else if (mode != ALL_OFF) {
 8003b0a:	782b      	ldrb	r3, [r5, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0e1      	beq.n	8003ad4 <main+0x128>
		  if (windowState != CLOSED){
 8003b10:	2801      	cmp	r0, #1
 8003b12:	d001      	beq.n	8003b18 <main+0x16c>
			  closeWindow();
 8003b14:	f7ff fece 	bl	80038b4 <closeWindow>
		  acOFF();
 8003b18:	f7ff fef6 	bl	8003908 <acOFF>
		  furnaceOFF();
 8003b1c:	f7ff fee4 	bl	80038e8 <furnaceOFF>
		  mode = ALL_OFF;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e7be      	b.n	8003aa2 <main+0xf6>
			  windowState = getWindowState();
 8003b24:	f7ff ff0c 	bl	8003940 <getWindowState>
 8003b28:	7038      	strb	r0, [r7, #0]
			  switch(windowState){
 8003b2a:	b160      	cbz	r0, 8003b46 <main+0x19a>
 8003b2c:	2801      	cmp	r0, #1
 8003b2e:	d117      	bne.n	8003b60 <main+0x1b4>
				  if (mode == WINDOW_COOL || mode == WINDOW_HEAT){
 8003b30:	782b      	ldrb	r3, [r5, #0]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d811      	bhi.n	8003b5c <main+0x1b0>
					 errorNum = WINDOW_NOT_OPEN;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	7023      	strb	r3, [r4, #0]
					 fixWindow();
 8003b3c:	f7ff ff1c 	bl	8003978 <fixWindow>
					 if (windowState == OPEN){
 8003b40:	783b      	ldrb	r3, [r7, #0]
 8003b42:	b15b      	cbz	r3, 8003b5c <main+0x1b0>
 8003b44:	e00c      	b.n	8003b60 <main+0x1b4>
				  if (mode == WINDOW_COOL || mode == WINDOW_HEAT){
 8003b46:	782b      	ldrb	r3, [r5, #0]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d906      	bls.n	8003b5c <main+0x1b0>
					  errorNum = WINDOW_NOT_CLOSED;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	7023      	strb	r3, [r4, #0]
			  fixWindow();
 8003b52:	f7ff ff11 	bl	8003978 <fixWindow>
			  if (windowState == CLOSED){
 8003b56:	783b      	ldrb	r3, [r7, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <main+0x1b4>
				  errorNum = NO_ERROR;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	7023      	strb	r3, [r4, #0]
		  errorCorrection = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f88b 3000 	strb.w	r3, [fp]
	  sprintf(WIFI_xmit, "field1=%u&field2=%.2f&field3=%u&field4=%u",
 8003b66:	7823      	ldrb	r3, [r4, #0]
 8003b68:	782d      	ldrb	r5, [r5, #0]
 8003b6a:	f8d8 0000 	ldr.w	r0, [r8]
 8003b6e:	9303      	str	r3, [sp, #12]
 8003b70:	8833      	ldrh	r3, [r6, #0]
 8003b72:	9302      	str	r3, [sp, #8]
 8003b74:	f7fc fce8 	bl	8000548 <__aeabi_f2d>
 8003b78:	462a      	mov	r2, r5
 8003b7a:	e9cd 0100 	strd	r0, r1, [sp]
 8003b7e:	491b      	ldr	r1, [pc, #108]	; (8003bec <main+0x240>)
 8003b80:	4648      	mov	r0, r9
 8003b82:	f000 fa75 	bl	8004070 <siprintf>
	  mode, int_temp, ext_temp, errorNum);
	  WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, server, IP_Addr, 80, 0);
 8003b86:	2400      	movs	r4, #0
 8003b88:	2350      	movs	r3, #80	; 0x50
 8003b8a:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <main+0x244>)
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8003b92:	4620      	mov	r0, r4
 8003b94:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <main+0x248>)
 8003b96:	f000 f9c7 	bl	8003f28 <WIFI_OpenClientConnection>
	  thingSpeakUpdate(WIFI_xmit);
 8003b9a:	4648      	mov	r0, r9
 8003b9c:	f7ff f810 	bl	8002bc0 <thingSpeakUpdate>
	  WIFI_CloseClientConnection(0);
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f000 f9e9 	bl	8003f78 <WIFI_CloseClientConnection>
	  HAL_Delay(15000);
 8003ba6:	f643 2098 	movw	r0, #15000	; 0x3a98
 8003baa:	f7fc fea7 	bl	80008fc <HAL_Delay>
	  BSP_TSENSOR_ReadTemp(&int_temp);
 8003bae:	e738      	b.n	8003a22 <main+0x76>
			  furnaceOFF();
 8003bb0:	f7ff fe9a 	bl	80038e8 <furnaceOFF>
			  break;
 8003bb4:	e7d4      	b.n	8003b60 <main+0x1b4>
			  furnaceON();
 8003bb6:	f7ff fe8f 	bl	80038d8 <furnaceON>
			  break;
 8003bba:	e7d1      	b.n	8003b60 <main+0x1b4>
			  acOFF();
 8003bbc:	f7ff fea4 	bl	8003908 <acOFF>
			  break;
 8003bc0:	e7ce      	b.n	8003b60 <main+0x1b4>
			  acON();
 8003bc2:	f7ff fe99 	bl	80038f8 <acON>
			  break;
 8003bc6:	e7cb      	b.n	8003b60 <main+0x1b4>
			  errorNum = NO_ERROR;
 8003bc8:	7022      	strb	r2, [r4, #0]
			  break;
 8003bca:	e7c9      	b.n	8003b60 <main+0x1b4>
 8003bcc:	200001e0 	.word	0x200001e0
 8003bd0:	200001de 	.word	0x200001de
 8003bd4:	08004b4b 	.word	0x08004b4b
 8003bd8:	08004b54 	.word	0x08004b54
 8003bdc:	08004b64 	.word	0x08004b64
 8003be0:	08004b66 	.word	0x08004b66
 8003be4:	200001e4 	.word	0x200001e4
 8003be8:	200001dd 	.word	0x200001dd
 8003bec:	08004b6f 	.word	0x08004b6f
 8003bf0:	08004b99 	.word	0x08004b99
 8003bf4:	08004b47 	.word	0x08004b47
 8003bf8:	20000014 	.word	0x20000014
 8003bfc:	20000198 	.word	0x20000198
 8003c00:	200001dc 	.word	0x200001dc

08003c04 <MX_SPI1_Init>:
/* SPI1 init function */
void MX_SPI1_Init(void)
{

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003c04:	4811      	ldr	r0, [pc, #68]	; (8003c4c <MX_SPI1_Init+0x48>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
  hspi1.Init.DataSize = SPI_DATASIZE_12BIT;
 8003c06:	4912      	ldr	r1, [pc, #72]	; (8003c50 <MX_SPI1_Init+0x4c>)
{
 8003c08:	b508      	push	{r3, lr}
  hspi1.Init.DataSize = SPI_DATASIZE_12BIT;
 8003c0a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c12:	f44f 6e30 	mov.w	lr, #2816	; 0xb00
 8003c16:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c1a:	2300      	movs	r3, #0
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003c1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c20:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c22:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003c24:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c26:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c28:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c2a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c2c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003c2e:	2207      	movs	r2, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c30:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c32:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8003c34:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c36:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c38:	f7fe fb73 	bl	8002322 <HAL_SPI_Init>
 8003c3c:	b128      	cbz	r0, 8003c4a <MX_SPI1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c3e:	2162      	movs	r1, #98	; 0x62
 8003c40:	4804      	ldr	r0, [pc, #16]	; (8003c54 <MX_SPI1_Init+0x50>)
  }

}
 8003c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003c46:	f7fe bfb9 	b.w	8002bbc <_Error_Handler>
 8003c4a:	bd08      	pop	{r3, pc}
 8003c4c:	200007e0 	.word	0x200007e0
 8003c50:	40013000 	.word	0x40013000
 8003c54:	08004bac 	.word	0x08004bac

08003c58 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003c58:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003c5a:	4c06      	ldr	r4, [pc, #24]	; (8003c74 <BSP_TSENSOR_Init+0x1c>)
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <BSP_TSENSOR_Init+0x20>)
 8003c5e:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003c60:	f7fc fd62 	bl	8000728 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	2100      	movs	r1, #0
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	20be      	movs	r0, #190	; 0xbe
 8003c6c:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8003c6e:	2000      	movs	r0, #0
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	bf00      	nop
 8003c74:	200001e8 	.word	0x200001e8
 8003c78:	20000004 	.word	0x20000004

08003c7c <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
void BSP_TSENSOR_ReadTemp(float* tmp)
{ 
  *tmp = tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <BSP_TSENSOR_ReadTemp+0x14>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
{ 
 8003c80:	b510      	push	{r4, lr}
  *tmp = tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003c82:	68db      	ldr	r3, [r3, #12]
{ 
 8003c84:	4604      	mov	r4, r0
  *tmp = tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003c86:	20be      	movs	r0, #190	; 0xbe
 8003c88:	4798      	blx	r3
 8003c8a:	ed84 0a00 	vstr	s0, [r4]
 8003c8e:	bd10      	pop	{r4, pc}
 8003c90:	200001e8 	.word	0x200001e8

08003c94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c94:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <HAL_MspInit+0x88>)
{
 8003c96:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	661a      	str	r2, [r3, #96]	; 0x60
 8003ca0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ca2:	f002 0201 	and.w	r2, r2, #1
 8003ca6:	9200      	str	r2, [sp, #0]
 8003ca8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003cac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cb0:	659a      	str	r2, [r3, #88]	; 0x58
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cba:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cbc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cbe:	f7fc fe2b 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	f06f 000b 	mvn.w	r0, #11
 8003cca:	f7fc fe37 	bl	800093c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	f06f 000a 	mvn.w	r0, #10
 8003cd6:	f7fc fe31 	bl	800093c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	4611      	mov	r1, r2
 8003cde:	f06f 0009 	mvn.w	r0, #9
 8003ce2:	f7fc fe2b 	bl	800093c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	4611      	mov	r1, r2
 8003cea:	f06f 0004 	mvn.w	r0, #4
 8003cee:	f7fc fe25 	bl	800093c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	f06f 0003 	mvn.w	r0, #3
 8003cfa:	f7fc fe1f 	bl	800093c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	4611      	mov	r1, r2
 8003d02:	f06f 0001 	mvn.w	r0, #1
 8003d06:	f7fc fe19 	bl	800093c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d12:	f7fc fe13 	bl	800093c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d16:	b003      	add	sp, #12
 8003d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d20:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003d22:	6802      	ldr	r2, [r0, #0]
 8003d24:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <HAL_SPI_MspInit+0x84>)
 8003d26:	429a      	cmp	r2, r3
{
 8003d28:	b088      	sub	sp, #32
 8003d2a:	4604      	mov	r4, r0
  if(hspi->Instance==SPI1)
 8003d2c:	d119      	bne.n	8003d62 <HAL_SPI_MspInit+0x42>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d2e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d32:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d3a:	661a      	str	r2, [r3, #96]	; 0x60
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003d46:	2370      	movs	r3, #112	; 0x70
 8003d48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d52:	2303      	movs	r3, #3
 8003d54:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5e:	f7fc fe55 	bl	8000a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

  if(hspi->Instance==SPI3)
 8003d62:	6822      	ldr	r2, [r4, #0]
 8003d64:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <HAL_SPI_MspInit+0x88>)
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d119      	bne.n	8003d9e <HAL_SPI_MspInit+0x7e>
   {
   /* USER CODE BEGIN SPI3_MspInit 0 */

   /* USER CODE END SPI3_MspInit 0 */
     /* SPI3 clock enable */
     __HAL_RCC_SPI3_CLK_ENABLE();
 8003d6a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
     GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
     GPIO_InitStruct.Pull = GPIO_NOPULL;
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
     GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d6e:	a903      	add	r1, sp, #12
     __HAL_RCC_SPI3_CLK_ENABLE();
 8003d70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d72:	480e      	ldr	r0, [pc, #56]	; (8003dac <HAL_SPI_MspInit+0x8c>)
     __HAL_RCC_SPI3_CLK_ENABLE();
 8003d74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d78:	659a      	str	r2, [r3, #88]	; 0x58
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d80:	9302      	str	r3, [sp, #8]
 8003d82:	9b02      	ldr	r3, [sp, #8]
     GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003d84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003d88:	9303      	str	r3, [sp, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	9304      	str	r3, [sp, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9305      	str	r3, [sp, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d92:	2303      	movs	r3, #3
 8003d94:	9306      	str	r3, [sp, #24]
     GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003d96:	2306      	movs	r3, #6
 8003d98:	9307      	str	r3, [sp, #28]
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d9a:	f7fc fe37 	bl	8000a0c <HAL_GPIO_Init>
   /* USER CODE BEGIN SPI3_MspInit 1 */

   /* USER CODE END SPI3_MspInit 1 */
   }

}
 8003d9e:	b008      	add	sp, #32
 8003da0:	bd10      	pop	{r4, pc}
 8003da2:	bf00      	nop
 8003da4:	40013000 	.word	0x40013000
 8003da8:	40003c00 	.word	0x40003c00
 8003dac:	48000800 	.word	0x48000800

08003db0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{

  if(hspi->Instance==SPI1)
 8003db0:	6802      	ldr	r2, [r0, #0]
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_SPI_MspDeInit+0x44>)
 8003db4:	429a      	cmp	r2, r3
{
 8003db6:	b510      	push	{r4, lr}
 8003db8:	4604      	mov	r4, r0
  if(hspi->Instance==SPI1)
 8003dba:	d109      	bne.n	8003dd0 <HAL_SPI_MspDeInit+0x20>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003dbc:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <HAL_SPI_MspDeInit+0x48>)
 8003dbe:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8003dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dc4:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8003dc6:	2170      	movs	r1, #112	; 0x70
 8003dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dcc:	f7fc fefa 	bl	8000bc4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

  if(hspi->Instance==SPI3)
 8003dd0:	6822      	ldr	r2, [r4, #0]
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <HAL_SPI_MspDeInit+0x4c>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d10b      	bne.n	8003df0 <HAL_SPI_MspDeInit+0x40>
    {
    /* USER CODE BEGIN SPI3_MspDeInit 0 */

    /* USER CODE END SPI3_MspDeInit 0 */
      /* Peripheral clock disable */
      __HAL_RCC_SPI3_CLK_DISABLE();
 8003dd8:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <HAL_SPI_MspDeInit+0x48>)
      /**SPI3 GPIO Configuration
      PC10     ------> SPI3_SCK
      PC11     ------> SPI3_MISO
      PC12     ------> SPI3_MOSI
      */
      HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8003dda:	4809      	ldr	r0, [pc, #36]	; (8003e00 <HAL_SPI_MspDeInit+0x50>)
      __HAL_RCC_SPI3_CLK_DISABLE();
 8003ddc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003dde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003de2:	6593      	str	r3, [r2, #88]	; 0x58
      HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8003de4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
    /* USER CODE BEGIN SPI3_MspDeInit 1 */

    /* USER CODE END SPI3_MspDeInit 1 */
    }

}
 8003de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8003dec:	f7fc beea 	b.w	8000bc4 <HAL_GPIO_DeInit>
 8003df0:	bd10      	pop	{r4, pc}
 8003df2:	bf00      	nop
 8003df4:	40013000 	.word	0x40013000
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40003c00 	.word	0x40003c00
 8003e00:	48000800 	.word	0x48000800

08003e04 <NMI_Handler>:
 8003e04:	4770      	bx	lr

08003e06 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003e06:	e7fe      	b.n	8003e06 <HardFault_Handler>

08003e08 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003e08:	e7fe      	b.n	8003e08 <MemManage_Handler>

08003e0a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003e0a:	e7fe      	b.n	8003e0a <BusFault_Handler>

08003e0c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003e0c:	e7fe      	b.n	8003e0c <UsageFault_Handler>

08003e0e <SVC_Handler>:
 8003e0e:	4770      	bx	lr

08003e10 <DebugMon_Handler>:
 8003e10:	4770      	bx	lr

08003e12 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003e12:	4770      	bx	lr

08003e14 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003e14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e16:	f7fc fd63 	bl	80008e0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003e1e:	f7fc bdf0 	b.w	8000a02 <HAL_SYSTICK_IRQHandler>

08003e22 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8003e22:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003e24:	2020      	movs	r0, #32
 8003e26:	f7fc ff73 	bl	8000d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003e2a:	2040      	movs	r0, #64	; 0x40
 8003e2c:	f7fc ff70 	bl	8000d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003e30:	2080      	movs	r0, #128	; 0x80
 8003e32:	f7fc ff6d 	bl	8000d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003e36:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003e3e:	f7fc bf67 	b.w	8000d10 <HAL_GPIO_EXTI_IRQHandler>

08003e42 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8003e42:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003e44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003e48:	f7fc ff62 	bl	8000d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003e4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003e50:	f7fc ff5e 	bl	8000d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003e54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e58:	f7fc ff5a 	bl	8000d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003e5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e60:	f7fc ff56 	bl	8000d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003e64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003e6c:	f7fc bf50 	b.w	8000d10 <HAL_GPIO_EXTI_IRQHandler>

08003e70 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e70:	490f      	ldr	r1, [pc, #60]	; (8003eb0 <SystemInit+0x40>)
 8003e72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003e76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <SystemInit+0x44>)
 8003e80:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003e82:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003e8a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003e92:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003e96:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003e98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e9c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003ea6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ea8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eac:	608b      	str	r3, [r1, #8]
 8003eae:	4770      	bx	lr
 8003eb0:	e000ed00 	.word	0xe000ed00
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003eb8:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <WIFI_Init+0x30>)
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <WIFI_Init+0x34>)
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <WIFI_Init+0x38>)
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <WIFI_Init+0x3c>)
 8003ec6:	490c      	ldr	r1, [pc, #48]	; (8003ef8 <WIFI_Init+0x40>)
 8003ec8:	480c      	ldr	r0, [pc, #48]	; (8003efc <WIFI_Init+0x44>)
 8003eca:	f7fe ff67 	bl	8002d9c <ES_WIFI_RegisterBusIO>
 8003ece:	b940      	cbnz	r0, 8003ee2 <WIFI_Init+0x2a>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003ed0:	480a      	ldr	r0, [pc, #40]	; (8003efc <WIFI_Init+0x44>)
 8003ed2:	f7fe ff03 	bl	8002cdc <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003ed6:	3000      	adds	r0, #0
 8003ed8:	bf18      	it	ne
 8003eda:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8003edc:	b003      	add	sp, #12
 8003ede:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	e7fa      	b.n	8003edc <WIFI_Init+0x24>
 8003ee6:	bf00      	nop
 8003ee8:	08003381 	.word	0x08003381
 8003eec:	08003479 	.word	0x08003479
 8003ef0:	08003371 	.word	0x08003371
 8003ef4:	0800350d 	.word	0x0800350d
 8003ef8:	08003259 	.word	0x08003259
 8003efc:	20000844 	.word	0x20000844

08003f00 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8003f00:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003f02:	4613      	mov	r3, r2
 8003f04:	460a      	mov	r2, r1
 8003f06:	4601      	mov	r1, r0
 8003f08:	4806      	ldr	r0, [pc, #24]	; (8003f24 <WIFI_Connect+0x24>)
 8003f0a:	f7fe ff5b 	bl	8002dc4 <ES_WIFI_Connect>
 8003f0e:	b930      	cbnz	r0, 8003f1e <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003f10:	4804      	ldr	r0, [pc, #16]	; (8003f24 <WIFI_Connect+0x24>)
 8003f12:	f7fe ff97 	bl	8002e44 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8003f16:	3000      	adds	r0, #0
 8003f18:	bf18      	it	ne
 8003f1a:	2001      	movne	r0, #1
 8003f1c:	bd08      	pop	{r3, pc}
 8003f1e:	2001      	movs	r0, #1
       ret = WIFI_STATUS_OK;
    }
    
  }
  return ret;
}
 8003f20:	bd08      	pop	{r3, pc}
 8003f22:	bf00      	nop
 8003f24:	20000844 	.word	0x20000844

08003f28 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char* name, uint8_t* ipaddr, uint16_t port, uint16_t local_port)
{
 8003f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 8003f2a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8003f2e:	f8ad 2002 	strh.w	r2, [sp, #2]
  conn.LocalPort = local_port;
 8003f32:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8003f36:	f8ad 2004 	strh.w	r2, [sp, #4]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003f3a:	3100      	adds	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	f88d 2006 	strb.w	r2, [sp, #6]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003f42:	bf18      	it	ne
 8003f44:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8003f46:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 8003f48:	f88d 0001 	strb.w	r0, [sp, #1]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8003f4c:	f88d 1000 	strb.w	r1, [sp]
  conn.RemoteIP[1] = ipaddr[1];
 8003f50:	f88d 2007 	strb.w	r2, [sp, #7]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003f54:	4669      	mov	r1, sp
  conn.RemoteIP[2] = ipaddr[2];
 8003f56:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003f58:	4806      	ldr	r0, [pc, #24]	; (8003f74 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 8003f5a:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8003f5c:	f88d 2008 	strb.w	r2, [sp, #8]
  conn.RemoteIP[3] = ipaddr[3];
 8003f60:	f88d 3009 	strb.w	r3, [sp, #9]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003f64:	f7fe ffe6 	bl	8002f34 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8003f68:	3000      	adds	r0, #0
 8003f6a:	bf18      	it	ne
 8003f6c:	2001      	movne	r0, #1
 8003f6e:	b005      	add	sp, #20
 8003f70:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f74:	20000844 	.word	0x20000844

08003f78 <WIFI_CloseClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8003f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8003f7a:	f88d 0001 	strb.w	r0, [sp, #1]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003f7e:	4669      	mov	r1, sp
 8003f80:	4804      	ldr	r0, [pc, #16]	; (8003f94 <WIFI_CloseClientConnection+0x1c>)
 8003f82:	f7ff f83b 	bl	8002ffc <ES_WIFI_StopClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret; 
}
 8003f86:	3000      	adds	r0, #0
 8003f88:	bf18      	it	ne
 8003f8a:	2001      	movne	r0, #1
 8003f8c:	b005      	add	sp, #20
 8003f8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f92:	bf00      	nop
 8003f94:	20000844 	.word	0x20000844

08003f98 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8003f98:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003f9a:	9c04      	ldr	r4, [sp, #16]
 8003f9c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	460a      	mov	r2, r1
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	4804      	ldr	r0, [pc, #16]	; (8003fb8 <WIFI_SendData+0x20>)
 8003fa8:	f7ff f848 	bl	800303c <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8003fac:	3000      	adds	r0, #0
 8003fae:	bf18      	it	ne
 8003fb0:	2001      	movne	r0, #1
 8003fb2:	b002      	add	sp, #8
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000844 	.word	0x20000844

08003fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ff4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fc2:	e003      	b.n	8003fcc <LoopCopyDataInit>

08003fc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003fc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003fc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003fca:	3104      	adds	r1, #4

08003fcc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003fcc:	480b      	ldr	r0, [pc, #44]	; (8003ffc <LoopForever+0xa>)
	ldr	r3, =_edata
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003fd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003fd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003fd4:	d3f6      	bcc.n	8003fc4 <CopyDataInit>
	ldr	r2, =_sbss
 8003fd6:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003fd8:	e002      	b.n	8003fe0 <LoopFillZerobss>

08003fda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003fda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003fdc:	f842 3b04 	str.w	r3, [r2], #4

08003fe0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <LoopForever+0x16>)
	cmp	r2, r3
 8003fe2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003fe4:	d3f9      	bcc.n	8003fda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fe6:	f7ff ff43 	bl	8003e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fea:	f000 f811 	bl	8004010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fee:	f7ff fcdd 	bl	80039ac <main>

08003ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ff2:	e7fe      	b.n	8003ff2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ff4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003ff8:	08004c38 	.word	0x08004c38
	ldr	r0, =_sdata
 8003ffc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004000:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8004004:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8004008:	20000fb0 	.word	0x20000fb0

0800400c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800400c:	e7fe      	b.n	800400c <ADC1_2_IRQHandler>
	...

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4e0d      	ldr	r6, [pc, #52]	; (8004048 <__libc_init_array+0x38>)
 8004014:	4c0d      	ldr	r4, [pc, #52]	; (800404c <__libc_init_array+0x3c>)
 8004016:	1ba4      	subs	r4, r4, r6
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	2500      	movs	r5, #0
 800401c:	42a5      	cmp	r5, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	4e0b      	ldr	r6, [pc, #44]	; (8004050 <__libc_init_array+0x40>)
 8004022:	4c0c      	ldr	r4, [pc, #48]	; (8004054 <__libc_init_array+0x44>)
 8004024:	f000 fce6 	bl	80049f4 <_init>
 8004028:	1ba4      	subs	r4, r4, r6
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	2500      	movs	r5, #0
 800402e:	42a5      	cmp	r5, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004038:	4798      	blx	r3
 800403a:	3501      	adds	r5, #1
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004042:	4798      	blx	r3
 8004044:	3501      	adds	r5, #1
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	08004c30 	.word	0x08004c30
 800404c:	08004c30 	.word	0x08004c30
 8004050:	08004c30 	.word	0x08004c30
 8004054:	08004c34 	.word	0x08004c34

08004058 <memcpy>:
 8004058:	b510      	push	{r4, lr}
 800405a:	1e43      	subs	r3, r0, #1
 800405c:	440a      	add	r2, r1
 800405e:	4291      	cmp	r1, r2
 8004060:	d100      	bne.n	8004064 <memcpy+0xc>
 8004062:	bd10      	pop	{r4, pc}
 8004064:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800406c:	e7f7      	b.n	800405e <memcpy+0x6>
	...

08004070 <siprintf>:
 8004070:	b40e      	push	{r1, r2, r3}
 8004072:	b500      	push	{lr}
 8004074:	b09c      	sub	sp, #112	; 0x70
 8004076:	f44f 7102 	mov.w	r1, #520	; 0x208
 800407a:	ab1d      	add	r3, sp, #116	; 0x74
 800407c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004080:	9002      	str	r0, [sp, #8]
 8004082:	9006      	str	r0, [sp, #24]
 8004084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004088:	480a      	ldr	r0, [pc, #40]	; (80040b4 <siprintf+0x44>)
 800408a:	9104      	str	r1, [sp, #16]
 800408c:	9107      	str	r1, [sp, #28]
 800408e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004092:	f853 2b04 	ldr.w	r2, [r3], #4
 8004096:	f8ad 1016 	strh.w	r1, [sp, #22]
 800409a:	6800      	ldr	r0, [r0, #0]
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	a902      	add	r1, sp, #8
 80040a0:	f000 f9b4 	bl	800440c <_svfiprintf_r>
 80040a4:	9b02      	ldr	r3, [sp, #8]
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	b01c      	add	sp, #112	; 0x70
 80040ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80040b0:	b003      	add	sp, #12
 80040b2:	4770      	bx	lr
 80040b4:	2000001c 	.word	0x2000001c

080040b8 <strchr>:
 80040b8:	b2c9      	uxtb	r1, r1
 80040ba:	4603      	mov	r3, r0
 80040bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040c0:	b11a      	cbz	r2, 80040ca <strchr+0x12>
 80040c2:	4291      	cmp	r1, r2
 80040c4:	d1f9      	bne.n	80040ba <strchr+0x2>
 80040c6:	4618      	mov	r0, r3
 80040c8:	4770      	bx	lr
 80040ca:	2900      	cmp	r1, #0
 80040cc:	bf0c      	ite	eq
 80040ce:	4618      	moveq	r0, r3
 80040d0:	2000      	movne	r0, #0
 80040d2:	4770      	bx	lr

080040d4 <strcpy>:
 80040d4:	4603      	mov	r3, r0
 80040d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040da:	f803 2b01 	strb.w	r2, [r3], #1
 80040de:	2a00      	cmp	r2, #0
 80040e0:	d1f9      	bne.n	80040d6 <strcpy+0x2>
 80040e2:	4770      	bx	lr

080040e4 <strncpy>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	4604      	mov	r4, r0
 80040e8:	b902      	cbnz	r2, 80040ec <strncpy+0x8>
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
 80040ec:	4623      	mov	r3, r4
 80040ee:	f811 5b01 	ldrb.w	r5, [r1], #1
 80040f2:	f803 5b01 	strb.w	r5, [r3], #1
 80040f6:	1e56      	subs	r6, r2, #1
 80040f8:	b91d      	cbnz	r5, 8004102 <strncpy+0x1e>
 80040fa:	4414      	add	r4, r2
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	d103      	bne.n	8004108 <strncpy+0x24>
 8004100:	bd70      	pop	{r4, r5, r6, pc}
 8004102:	461c      	mov	r4, r3
 8004104:	4632      	mov	r2, r6
 8004106:	e7ef      	b.n	80040e8 <strncpy+0x4>
 8004108:	f803 5b01 	strb.w	r5, [r3], #1
 800410c:	e7f6      	b.n	80040fc <strncpy+0x18>

0800410e <strstr>:
 800410e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004110:	7803      	ldrb	r3, [r0, #0]
 8004112:	b133      	cbz	r3, 8004122 <strstr+0x14>
 8004114:	4603      	mov	r3, r0
 8004116:	4618      	mov	r0, r3
 8004118:	1c5e      	adds	r6, r3, #1
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	b933      	cbnz	r3, 800412c <strstr+0x1e>
 800411e:	4618      	mov	r0, r3
 8004120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004122:	780b      	ldrb	r3, [r1, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf18      	it	ne
 8004128:	2000      	movne	r0, #0
 800412a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800412c:	1e4d      	subs	r5, r1, #1
 800412e:	1e44      	subs	r4, r0, #1
 8004130:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004134:	2a00      	cmp	r2, #0
 8004136:	d0f3      	beq.n	8004120 <strstr+0x12>
 8004138:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800413c:	4297      	cmp	r7, r2
 800413e:	4633      	mov	r3, r6
 8004140:	d0f6      	beq.n	8004130 <strstr+0x22>
 8004142:	e7e8      	b.n	8004116 <strstr+0x8>

08004144 <strtok>:
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <strtok+0x50>)
 8004146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414a:	681d      	ldr	r5, [r3, #0]
 800414c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800414e:	4606      	mov	r6, r0
 8004150:	460f      	mov	r7, r1
 8004152:	b9b4      	cbnz	r4, 8004182 <strtok+0x3e>
 8004154:	2050      	movs	r0, #80	; 0x50
 8004156:	f000 f849 	bl	80041ec <malloc>
 800415a:	65a8      	str	r0, [r5, #88]	; 0x58
 800415c:	6004      	str	r4, [r0, #0]
 800415e:	6044      	str	r4, [r0, #4]
 8004160:	6084      	str	r4, [r0, #8]
 8004162:	60c4      	str	r4, [r0, #12]
 8004164:	6104      	str	r4, [r0, #16]
 8004166:	6144      	str	r4, [r0, #20]
 8004168:	6184      	str	r4, [r0, #24]
 800416a:	6284      	str	r4, [r0, #40]	; 0x28
 800416c:	62c4      	str	r4, [r0, #44]	; 0x2c
 800416e:	6304      	str	r4, [r0, #48]	; 0x30
 8004170:	6344      	str	r4, [r0, #52]	; 0x34
 8004172:	6384      	str	r4, [r0, #56]	; 0x38
 8004174:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004176:	6404      	str	r4, [r0, #64]	; 0x40
 8004178:	6444      	str	r4, [r0, #68]	; 0x44
 800417a:	6484      	str	r4, [r0, #72]	; 0x48
 800417c:	64c4      	str	r4, [r0, #76]	; 0x4c
 800417e:	7704      	strb	r4, [r0, #28]
 8004180:	6244      	str	r4, [r0, #36]	; 0x24
 8004182:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004184:	4639      	mov	r1, r7
 8004186:	4630      	mov	r0, r6
 8004188:	2301      	movs	r3, #1
 800418a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800418e:	f000 b803 	b.w	8004198 <__strtok_r>
 8004192:	bf00      	nop
 8004194:	2000001c 	.word	0x2000001c

08004198 <__strtok_r>:
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	b918      	cbnz	r0, 80041a4 <__strtok_r+0xc>
 800419c:	6810      	ldr	r0, [r2, #0]
 800419e:	b908      	cbnz	r0, 80041a4 <__strtok_r+0xc>
 80041a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a2:	4620      	mov	r0, r4
 80041a4:	4604      	mov	r4, r0
 80041a6:	460f      	mov	r7, r1
 80041a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80041ac:	f817 6b01 	ldrb.w	r6, [r7], #1
 80041b0:	b91e      	cbnz	r6, 80041ba <__strtok_r+0x22>
 80041b2:	b965      	cbnz	r5, 80041ce <__strtok_r+0x36>
 80041b4:	6015      	str	r5, [r2, #0]
 80041b6:	4628      	mov	r0, r5
 80041b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ba:	42b5      	cmp	r5, r6
 80041bc:	d1f6      	bne.n	80041ac <__strtok_r+0x14>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1ef      	bne.n	80041a2 <__strtok_r+0xa>
 80041c2:	6014      	str	r4, [r2, #0]
 80041c4:	7003      	strb	r3, [r0, #0]
 80041c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c8:	461c      	mov	r4, r3
 80041ca:	e00c      	b.n	80041e6 <__strtok_r+0x4e>
 80041cc:	b915      	cbnz	r5, 80041d4 <__strtok_r+0x3c>
 80041ce:	f814 3b01 	ldrb.w	r3, [r4], #1
 80041d2:	460e      	mov	r6, r1
 80041d4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80041d8:	42ab      	cmp	r3, r5
 80041da:	d1f7      	bne.n	80041cc <__strtok_r+0x34>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f3      	beq.n	80041c8 <__strtok_r+0x30>
 80041e0:	2300      	movs	r3, #0
 80041e2:	f804 3c01 	strb.w	r3, [r4, #-1]
 80041e6:	6014      	str	r4, [r2, #0]
 80041e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080041ec <malloc>:
 80041ec:	4b02      	ldr	r3, [pc, #8]	; (80041f8 <malloc+0xc>)
 80041ee:	4601      	mov	r1, r0
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f000 b851 	b.w	8004298 <_malloc_r>
 80041f6:	bf00      	nop
 80041f8:	2000001c 	.word	0x2000001c

080041fc <_free_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4605      	mov	r5, r0
 8004200:	2900      	cmp	r1, #0
 8004202:	d045      	beq.n	8004290 <_free_r+0x94>
 8004204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004208:	1f0c      	subs	r4, r1, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	bfb8      	it	lt
 800420e:	18e4      	addlt	r4, r4, r3
 8004210:	f000 fbb0 	bl	8004974 <__malloc_lock>
 8004214:	4a1f      	ldr	r2, [pc, #124]	; (8004294 <_free_r+0x98>)
 8004216:	6813      	ldr	r3, [r2, #0]
 8004218:	4610      	mov	r0, r2
 800421a:	b933      	cbnz	r3, 800422a <_free_r+0x2e>
 800421c:	6063      	str	r3, [r4, #4]
 800421e:	6014      	str	r4, [r2, #0]
 8004220:	4628      	mov	r0, r5
 8004222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004226:	f000 bba6 	b.w	8004976 <__malloc_unlock>
 800422a:	42a3      	cmp	r3, r4
 800422c:	d90c      	bls.n	8004248 <_free_r+0x4c>
 800422e:	6821      	ldr	r1, [r4, #0]
 8004230:	1862      	adds	r2, r4, r1
 8004232:	4293      	cmp	r3, r2
 8004234:	bf04      	itt	eq
 8004236:	681a      	ldreq	r2, [r3, #0]
 8004238:	685b      	ldreq	r3, [r3, #4]
 800423a:	6063      	str	r3, [r4, #4]
 800423c:	bf04      	itt	eq
 800423e:	1852      	addeq	r2, r2, r1
 8004240:	6022      	streq	r2, [r4, #0]
 8004242:	6004      	str	r4, [r0, #0]
 8004244:	e7ec      	b.n	8004220 <_free_r+0x24>
 8004246:	4613      	mov	r3, r2
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	b10a      	cbz	r2, 8004250 <_free_r+0x54>
 800424c:	42a2      	cmp	r2, r4
 800424e:	d9fa      	bls.n	8004246 <_free_r+0x4a>
 8004250:	6819      	ldr	r1, [r3, #0]
 8004252:	1858      	adds	r0, r3, r1
 8004254:	42a0      	cmp	r0, r4
 8004256:	d10b      	bne.n	8004270 <_free_r+0x74>
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	4401      	add	r1, r0
 800425c:	1858      	adds	r0, r3, r1
 800425e:	4282      	cmp	r2, r0
 8004260:	6019      	str	r1, [r3, #0]
 8004262:	d1dd      	bne.n	8004220 <_free_r+0x24>
 8004264:	6810      	ldr	r0, [r2, #0]
 8004266:	6852      	ldr	r2, [r2, #4]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	4401      	add	r1, r0
 800426c:	6019      	str	r1, [r3, #0]
 800426e:	e7d7      	b.n	8004220 <_free_r+0x24>
 8004270:	d902      	bls.n	8004278 <_free_r+0x7c>
 8004272:	230c      	movs	r3, #12
 8004274:	602b      	str	r3, [r5, #0]
 8004276:	e7d3      	b.n	8004220 <_free_r+0x24>
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	1821      	adds	r1, r4, r0
 800427c:	428a      	cmp	r2, r1
 800427e:	bf04      	itt	eq
 8004280:	6811      	ldreq	r1, [r2, #0]
 8004282:	6852      	ldreq	r2, [r2, #4]
 8004284:	6062      	str	r2, [r4, #4]
 8004286:	bf04      	itt	eq
 8004288:	1809      	addeq	r1, r1, r0
 800428a:	6021      	streq	r1, [r4, #0]
 800428c:	605c      	str	r4, [r3, #4]
 800428e:	e7c7      	b.n	8004220 <_free_r+0x24>
 8004290:	bd38      	pop	{r3, r4, r5, pc}
 8004292:	bf00      	nop
 8004294:	200001ec 	.word	0x200001ec

08004298 <_malloc_r>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	1ccd      	adds	r5, r1, #3
 800429c:	f025 0503 	bic.w	r5, r5, #3
 80042a0:	3508      	adds	r5, #8
 80042a2:	2d0c      	cmp	r5, #12
 80042a4:	bf38      	it	cc
 80042a6:	250c      	movcc	r5, #12
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	4606      	mov	r6, r0
 80042ac:	db01      	blt.n	80042b2 <_malloc_r+0x1a>
 80042ae:	42a9      	cmp	r1, r5
 80042b0:	d903      	bls.n	80042ba <_malloc_r+0x22>
 80042b2:	230c      	movs	r3, #12
 80042b4:	6033      	str	r3, [r6, #0]
 80042b6:	2000      	movs	r0, #0
 80042b8:	bd70      	pop	{r4, r5, r6, pc}
 80042ba:	f000 fb5b 	bl	8004974 <__malloc_lock>
 80042be:	4a23      	ldr	r2, [pc, #140]	; (800434c <_malloc_r+0xb4>)
 80042c0:	6814      	ldr	r4, [r2, #0]
 80042c2:	4621      	mov	r1, r4
 80042c4:	b991      	cbnz	r1, 80042ec <_malloc_r+0x54>
 80042c6:	4c22      	ldr	r4, [pc, #136]	; (8004350 <_malloc_r+0xb8>)
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	b91b      	cbnz	r3, 80042d4 <_malloc_r+0x3c>
 80042cc:	4630      	mov	r0, r6
 80042ce:	f000 fb27 	bl	8004920 <_sbrk_r>
 80042d2:	6020      	str	r0, [r4, #0]
 80042d4:	4629      	mov	r1, r5
 80042d6:	4630      	mov	r0, r6
 80042d8:	f000 fb22 	bl	8004920 <_sbrk_r>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d126      	bne.n	800432e <_malloc_r+0x96>
 80042e0:	230c      	movs	r3, #12
 80042e2:	6033      	str	r3, [r6, #0]
 80042e4:	4630      	mov	r0, r6
 80042e6:	f000 fb46 	bl	8004976 <__malloc_unlock>
 80042ea:	e7e4      	b.n	80042b6 <_malloc_r+0x1e>
 80042ec:	680b      	ldr	r3, [r1, #0]
 80042ee:	1b5b      	subs	r3, r3, r5
 80042f0:	d41a      	bmi.n	8004328 <_malloc_r+0x90>
 80042f2:	2b0b      	cmp	r3, #11
 80042f4:	d90f      	bls.n	8004316 <_malloc_r+0x7e>
 80042f6:	600b      	str	r3, [r1, #0]
 80042f8:	50cd      	str	r5, [r1, r3]
 80042fa:	18cc      	adds	r4, r1, r3
 80042fc:	4630      	mov	r0, r6
 80042fe:	f000 fb3a 	bl	8004976 <__malloc_unlock>
 8004302:	f104 000b 	add.w	r0, r4, #11
 8004306:	1d23      	adds	r3, r4, #4
 8004308:	f020 0007 	bic.w	r0, r0, #7
 800430c:	1ac3      	subs	r3, r0, r3
 800430e:	d01b      	beq.n	8004348 <_malloc_r+0xb0>
 8004310:	425a      	negs	r2, r3
 8004312:	50e2      	str	r2, [r4, r3]
 8004314:	bd70      	pop	{r4, r5, r6, pc}
 8004316:	428c      	cmp	r4, r1
 8004318:	bf0d      	iteet	eq
 800431a:	6863      	ldreq	r3, [r4, #4]
 800431c:	684b      	ldrne	r3, [r1, #4]
 800431e:	6063      	strne	r3, [r4, #4]
 8004320:	6013      	streq	r3, [r2, #0]
 8004322:	bf18      	it	ne
 8004324:	460c      	movne	r4, r1
 8004326:	e7e9      	b.n	80042fc <_malloc_r+0x64>
 8004328:	460c      	mov	r4, r1
 800432a:	6849      	ldr	r1, [r1, #4]
 800432c:	e7ca      	b.n	80042c4 <_malloc_r+0x2c>
 800432e:	1cc4      	adds	r4, r0, #3
 8004330:	f024 0403 	bic.w	r4, r4, #3
 8004334:	42a0      	cmp	r0, r4
 8004336:	d005      	beq.n	8004344 <_malloc_r+0xac>
 8004338:	1a21      	subs	r1, r4, r0
 800433a:	4630      	mov	r0, r6
 800433c:	f000 faf0 	bl	8004920 <_sbrk_r>
 8004340:	3001      	adds	r0, #1
 8004342:	d0cd      	beq.n	80042e0 <_malloc_r+0x48>
 8004344:	6025      	str	r5, [r4, #0]
 8004346:	e7d9      	b.n	80042fc <_malloc_r+0x64>
 8004348:	bd70      	pop	{r4, r5, r6, pc}
 800434a:	bf00      	nop
 800434c:	200001ec 	.word	0x200001ec
 8004350:	200001f0 	.word	0x200001f0

08004354 <__ssputs_r>:
 8004354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004358:	688e      	ldr	r6, [r1, #8]
 800435a:	429e      	cmp	r6, r3
 800435c:	4682      	mov	sl, r0
 800435e:	460c      	mov	r4, r1
 8004360:	4691      	mov	r9, r2
 8004362:	4698      	mov	r8, r3
 8004364:	d835      	bhi.n	80043d2 <__ssputs_r+0x7e>
 8004366:	898a      	ldrh	r2, [r1, #12]
 8004368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800436c:	d031      	beq.n	80043d2 <__ssputs_r+0x7e>
 800436e:	6825      	ldr	r5, [r4, #0]
 8004370:	6909      	ldr	r1, [r1, #16]
 8004372:	1a6f      	subs	r7, r5, r1
 8004374:	6965      	ldr	r5, [r4, #20]
 8004376:	2302      	movs	r3, #2
 8004378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800437c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004380:	f108 0301 	add.w	r3, r8, #1
 8004384:	443b      	add	r3, r7
 8004386:	429d      	cmp	r5, r3
 8004388:	bf38      	it	cc
 800438a:	461d      	movcc	r5, r3
 800438c:	0553      	lsls	r3, r2, #21
 800438e:	d531      	bpl.n	80043f4 <__ssputs_r+0xa0>
 8004390:	4629      	mov	r1, r5
 8004392:	f7ff ff81 	bl	8004298 <_malloc_r>
 8004396:	4606      	mov	r6, r0
 8004398:	b950      	cbnz	r0, 80043b0 <__ssputs_r+0x5c>
 800439a:	230c      	movs	r3, #12
 800439c:	f8ca 3000 	str.w	r3, [sl]
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043a6:	81a3      	strh	r3, [r4, #12]
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b0:	463a      	mov	r2, r7
 80043b2:	6921      	ldr	r1, [r4, #16]
 80043b4:	f7ff fe50 	bl	8004058 <memcpy>
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c2:	81a3      	strh	r3, [r4, #12]
 80043c4:	6126      	str	r6, [r4, #16]
 80043c6:	6165      	str	r5, [r4, #20]
 80043c8:	443e      	add	r6, r7
 80043ca:	1bed      	subs	r5, r5, r7
 80043cc:	6026      	str	r6, [r4, #0]
 80043ce:	60a5      	str	r5, [r4, #8]
 80043d0:	4646      	mov	r6, r8
 80043d2:	4546      	cmp	r6, r8
 80043d4:	bf28      	it	cs
 80043d6:	4646      	movcs	r6, r8
 80043d8:	4632      	mov	r2, r6
 80043da:	4649      	mov	r1, r9
 80043dc:	6820      	ldr	r0, [r4, #0]
 80043de:	f000 faaf 	bl	8004940 <memmove>
 80043e2:	68a3      	ldr	r3, [r4, #8]
 80043e4:	1b9b      	subs	r3, r3, r6
 80043e6:	60a3      	str	r3, [r4, #8]
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	441e      	add	r6, r3
 80043ec:	6026      	str	r6, [r4, #0]
 80043ee:	2000      	movs	r0, #0
 80043f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f4:	462a      	mov	r2, r5
 80043f6:	f000 fabf 	bl	8004978 <_realloc_r>
 80043fa:	4606      	mov	r6, r0
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d1e1      	bne.n	80043c4 <__ssputs_r+0x70>
 8004400:	6921      	ldr	r1, [r4, #16]
 8004402:	4650      	mov	r0, sl
 8004404:	f7ff fefa 	bl	80041fc <_free_r>
 8004408:	e7c7      	b.n	800439a <__ssputs_r+0x46>
	...

0800440c <_svfiprintf_r>:
 800440c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004410:	b09d      	sub	sp, #116	; 0x74
 8004412:	4680      	mov	r8, r0
 8004414:	9303      	str	r3, [sp, #12]
 8004416:	898b      	ldrh	r3, [r1, #12]
 8004418:	061c      	lsls	r4, r3, #24
 800441a:	460d      	mov	r5, r1
 800441c:	4616      	mov	r6, r2
 800441e:	d50f      	bpl.n	8004440 <_svfiprintf_r+0x34>
 8004420:	690b      	ldr	r3, [r1, #16]
 8004422:	b96b      	cbnz	r3, 8004440 <_svfiprintf_r+0x34>
 8004424:	2140      	movs	r1, #64	; 0x40
 8004426:	f7ff ff37 	bl	8004298 <_malloc_r>
 800442a:	6028      	str	r0, [r5, #0]
 800442c:	6128      	str	r0, [r5, #16]
 800442e:	b928      	cbnz	r0, 800443c <_svfiprintf_r+0x30>
 8004430:	230c      	movs	r3, #12
 8004432:	f8c8 3000 	str.w	r3, [r8]
 8004436:	f04f 30ff 	mov.w	r0, #4294967295
 800443a:	e0c5      	b.n	80045c8 <_svfiprintf_r+0x1bc>
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	616b      	str	r3, [r5, #20]
 8004440:	2300      	movs	r3, #0
 8004442:	9309      	str	r3, [sp, #36]	; 0x24
 8004444:	2320      	movs	r3, #32
 8004446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800444a:	2330      	movs	r3, #48	; 0x30
 800444c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004450:	f04f 0b01 	mov.w	fp, #1
 8004454:	4637      	mov	r7, r6
 8004456:	463c      	mov	r4, r7
 8004458:	f814 3b01 	ldrb.w	r3, [r4], #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d13c      	bne.n	80044da <_svfiprintf_r+0xce>
 8004460:	ebb7 0a06 	subs.w	sl, r7, r6
 8004464:	d00b      	beq.n	800447e <_svfiprintf_r+0x72>
 8004466:	4653      	mov	r3, sl
 8004468:	4632      	mov	r2, r6
 800446a:	4629      	mov	r1, r5
 800446c:	4640      	mov	r0, r8
 800446e:	f7ff ff71 	bl	8004354 <__ssputs_r>
 8004472:	3001      	adds	r0, #1
 8004474:	f000 80a3 	beq.w	80045be <_svfiprintf_r+0x1b2>
 8004478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800447a:	4453      	add	r3, sl
 800447c:	9309      	str	r3, [sp, #36]	; 0x24
 800447e:	783b      	ldrb	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 809c 	beq.w	80045be <_svfiprintf_r+0x1b2>
 8004486:	2300      	movs	r3, #0
 8004488:	f04f 32ff 	mov.w	r2, #4294967295
 800448c:	9304      	str	r3, [sp, #16]
 800448e:	9307      	str	r3, [sp, #28]
 8004490:	9205      	str	r2, [sp, #20]
 8004492:	9306      	str	r3, [sp, #24]
 8004494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004498:	931a      	str	r3, [sp, #104]	; 0x68
 800449a:	2205      	movs	r2, #5
 800449c:	7821      	ldrb	r1, [r4, #0]
 800449e:	4850      	ldr	r0, [pc, #320]	; (80045e0 <_svfiprintf_r+0x1d4>)
 80044a0:	f7fb fe9e 	bl	80001e0 <memchr>
 80044a4:	1c67      	adds	r7, r4, #1
 80044a6:	9b04      	ldr	r3, [sp, #16]
 80044a8:	b9d8      	cbnz	r0, 80044e2 <_svfiprintf_r+0xd6>
 80044aa:	06d9      	lsls	r1, r3, #27
 80044ac:	bf44      	itt	mi
 80044ae:	2220      	movmi	r2, #32
 80044b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044b4:	071a      	lsls	r2, r3, #28
 80044b6:	bf44      	itt	mi
 80044b8:	222b      	movmi	r2, #43	; 0x2b
 80044ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044be:	7822      	ldrb	r2, [r4, #0]
 80044c0:	2a2a      	cmp	r2, #42	; 0x2a
 80044c2:	d016      	beq.n	80044f2 <_svfiprintf_r+0xe6>
 80044c4:	9a07      	ldr	r2, [sp, #28]
 80044c6:	2100      	movs	r1, #0
 80044c8:	200a      	movs	r0, #10
 80044ca:	4627      	mov	r7, r4
 80044cc:	3401      	adds	r4, #1
 80044ce:	783b      	ldrb	r3, [r7, #0]
 80044d0:	3b30      	subs	r3, #48	; 0x30
 80044d2:	2b09      	cmp	r3, #9
 80044d4:	d951      	bls.n	800457a <_svfiprintf_r+0x16e>
 80044d6:	b1c9      	cbz	r1, 800450c <_svfiprintf_r+0x100>
 80044d8:	e011      	b.n	80044fe <_svfiprintf_r+0xf2>
 80044da:	2b25      	cmp	r3, #37	; 0x25
 80044dc:	d0c0      	beq.n	8004460 <_svfiprintf_r+0x54>
 80044de:	4627      	mov	r7, r4
 80044e0:	e7b9      	b.n	8004456 <_svfiprintf_r+0x4a>
 80044e2:	4a3f      	ldr	r2, [pc, #252]	; (80045e0 <_svfiprintf_r+0x1d4>)
 80044e4:	1a80      	subs	r0, r0, r2
 80044e6:	fa0b f000 	lsl.w	r0, fp, r0
 80044ea:	4318      	orrs	r0, r3
 80044ec:	9004      	str	r0, [sp, #16]
 80044ee:	463c      	mov	r4, r7
 80044f0:	e7d3      	b.n	800449a <_svfiprintf_r+0x8e>
 80044f2:	9a03      	ldr	r2, [sp, #12]
 80044f4:	1d11      	adds	r1, r2, #4
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	9103      	str	r1, [sp, #12]
 80044fa:	2a00      	cmp	r2, #0
 80044fc:	db01      	blt.n	8004502 <_svfiprintf_r+0xf6>
 80044fe:	9207      	str	r2, [sp, #28]
 8004500:	e004      	b.n	800450c <_svfiprintf_r+0x100>
 8004502:	4252      	negs	r2, r2
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	9207      	str	r2, [sp, #28]
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	783b      	ldrb	r3, [r7, #0]
 800450e:	2b2e      	cmp	r3, #46	; 0x2e
 8004510:	d10e      	bne.n	8004530 <_svfiprintf_r+0x124>
 8004512:	787b      	ldrb	r3, [r7, #1]
 8004514:	2b2a      	cmp	r3, #42	; 0x2a
 8004516:	f107 0101 	add.w	r1, r7, #1
 800451a:	d132      	bne.n	8004582 <_svfiprintf_r+0x176>
 800451c:	9b03      	ldr	r3, [sp, #12]
 800451e:	1d1a      	adds	r2, r3, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	9203      	str	r2, [sp, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	bfb8      	it	lt
 8004528:	f04f 33ff 	movlt.w	r3, #4294967295
 800452c:	3702      	adds	r7, #2
 800452e:	9305      	str	r3, [sp, #20]
 8004530:	4c2c      	ldr	r4, [pc, #176]	; (80045e4 <_svfiprintf_r+0x1d8>)
 8004532:	7839      	ldrb	r1, [r7, #0]
 8004534:	2203      	movs	r2, #3
 8004536:	4620      	mov	r0, r4
 8004538:	f7fb fe52 	bl	80001e0 <memchr>
 800453c:	b138      	cbz	r0, 800454e <_svfiprintf_r+0x142>
 800453e:	2340      	movs	r3, #64	; 0x40
 8004540:	1b00      	subs	r0, r0, r4
 8004542:	fa03 f000 	lsl.w	r0, r3, r0
 8004546:	9b04      	ldr	r3, [sp, #16]
 8004548:	4303      	orrs	r3, r0
 800454a:	9304      	str	r3, [sp, #16]
 800454c:	3701      	adds	r7, #1
 800454e:	7839      	ldrb	r1, [r7, #0]
 8004550:	4825      	ldr	r0, [pc, #148]	; (80045e8 <_svfiprintf_r+0x1dc>)
 8004552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004556:	2206      	movs	r2, #6
 8004558:	1c7e      	adds	r6, r7, #1
 800455a:	f7fb fe41 	bl	80001e0 <memchr>
 800455e:	2800      	cmp	r0, #0
 8004560:	d035      	beq.n	80045ce <_svfiprintf_r+0x1c2>
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <_svfiprintf_r+0x1e0>)
 8004564:	b9fb      	cbnz	r3, 80045a6 <_svfiprintf_r+0x19a>
 8004566:	9b03      	ldr	r3, [sp, #12]
 8004568:	3307      	adds	r3, #7
 800456a:	f023 0307 	bic.w	r3, r3, #7
 800456e:	3308      	adds	r3, #8
 8004570:	9303      	str	r3, [sp, #12]
 8004572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004574:	444b      	add	r3, r9
 8004576:	9309      	str	r3, [sp, #36]	; 0x24
 8004578:	e76c      	b.n	8004454 <_svfiprintf_r+0x48>
 800457a:	fb00 3202 	mla	r2, r0, r2, r3
 800457e:	2101      	movs	r1, #1
 8004580:	e7a3      	b.n	80044ca <_svfiprintf_r+0xbe>
 8004582:	2300      	movs	r3, #0
 8004584:	9305      	str	r3, [sp, #20]
 8004586:	4618      	mov	r0, r3
 8004588:	240a      	movs	r4, #10
 800458a:	460f      	mov	r7, r1
 800458c:	3101      	adds	r1, #1
 800458e:	783a      	ldrb	r2, [r7, #0]
 8004590:	3a30      	subs	r2, #48	; 0x30
 8004592:	2a09      	cmp	r2, #9
 8004594:	d903      	bls.n	800459e <_svfiprintf_r+0x192>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0ca      	beq.n	8004530 <_svfiprintf_r+0x124>
 800459a:	9005      	str	r0, [sp, #20]
 800459c:	e7c8      	b.n	8004530 <_svfiprintf_r+0x124>
 800459e:	fb04 2000 	mla	r0, r4, r0, r2
 80045a2:	2301      	movs	r3, #1
 80045a4:	e7f1      	b.n	800458a <_svfiprintf_r+0x17e>
 80045a6:	ab03      	add	r3, sp, #12
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	462a      	mov	r2, r5
 80045ac:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <_svfiprintf_r+0x1e4>)
 80045ae:	a904      	add	r1, sp, #16
 80045b0:	4640      	mov	r0, r8
 80045b2:	f3af 8000 	nop.w
 80045b6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80045ba:	4681      	mov	r9, r0
 80045bc:	d1d9      	bne.n	8004572 <_svfiprintf_r+0x166>
 80045be:	89ab      	ldrh	r3, [r5, #12]
 80045c0:	065b      	lsls	r3, r3, #25
 80045c2:	f53f af38 	bmi.w	8004436 <_svfiprintf_r+0x2a>
 80045c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045c8:	b01d      	add	sp, #116	; 0x74
 80045ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ce:	ab03      	add	r3, sp, #12
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	462a      	mov	r2, r5
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <_svfiprintf_r+0x1e4>)
 80045d6:	a904      	add	r1, sp, #16
 80045d8:	4640      	mov	r0, r8
 80045da:	f000 f881 	bl	80046e0 <_printf_i>
 80045de:	e7ea      	b.n	80045b6 <_svfiprintf_r+0x1aa>
 80045e0:	08004bfc 	.word	0x08004bfc
 80045e4:	08004c02 	.word	0x08004c02
 80045e8:	08004c06 	.word	0x08004c06
 80045ec:	00000000 	.word	0x00000000
 80045f0:	08004355 	.word	0x08004355

080045f4 <_printf_common>:
 80045f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f8:	4691      	mov	r9, r2
 80045fa:	461f      	mov	r7, r3
 80045fc:	688a      	ldr	r2, [r1, #8]
 80045fe:	690b      	ldr	r3, [r1, #16]
 8004600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004604:	4293      	cmp	r3, r2
 8004606:	bfb8      	it	lt
 8004608:	4613      	movlt	r3, r2
 800460a:	f8c9 3000 	str.w	r3, [r9]
 800460e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004612:	4606      	mov	r6, r0
 8004614:	460c      	mov	r4, r1
 8004616:	b112      	cbz	r2, 800461e <_printf_common+0x2a>
 8004618:	3301      	adds	r3, #1
 800461a:	f8c9 3000 	str.w	r3, [r9]
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	0699      	lsls	r1, r3, #26
 8004622:	bf42      	ittt	mi
 8004624:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004628:	3302      	addmi	r3, #2
 800462a:	f8c9 3000 	strmi.w	r3, [r9]
 800462e:	6825      	ldr	r5, [r4, #0]
 8004630:	f015 0506 	ands.w	r5, r5, #6
 8004634:	d107      	bne.n	8004646 <_printf_common+0x52>
 8004636:	f104 0a19 	add.w	sl, r4, #25
 800463a:	68e3      	ldr	r3, [r4, #12]
 800463c:	f8d9 2000 	ldr.w	r2, [r9]
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	429d      	cmp	r5, r3
 8004644:	db29      	blt.n	800469a <_printf_common+0xa6>
 8004646:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	3300      	adds	r3, #0
 800464e:	bf18      	it	ne
 8004650:	2301      	movne	r3, #1
 8004652:	0692      	lsls	r2, r2, #26
 8004654:	d42e      	bmi.n	80046b4 <_printf_common+0xc0>
 8004656:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800465a:	4639      	mov	r1, r7
 800465c:	4630      	mov	r0, r6
 800465e:	47c0      	blx	r8
 8004660:	3001      	adds	r0, #1
 8004662:	d021      	beq.n	80046a8 <_printf_common+0xb4>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	68e5      	ldr	r5, [r4, #12]
 8004668:	f8d9 2000 	ldr.w	r2, [r9]
 800466c:	f003 0306 	and.w	r3, r3, #6
 8004670:	2b04      	cmp	r3, #4
 8004672:	bf08      	it	eq
 8004674:	1aad      	subeq	r5, r5, r2
 8004676:	68a3      	ldr	r3, [r4, #8]
 8004678:	6922      	ldr	r2, [r4, #16]
 800467a:	bf0c      	ite	eq
 800467c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004680:	2500      	movne	r5, #0
 8004682:	4293      	cmp	r3, r2
 8004684:	bfc4      	itt	gt
 8004686:	1a9b      	subgt	r3, r3, r2
 8004688:	18ed      	addgt	r5, r5, r3
 800468a:	f04f 0900 	mov.w	r9, #0
 800468e:	341a      	adds	r4, #26
 8004690:	454d      	cmp	r5, r9
 8004692:	d11b      	bne.n	80046cc <_printf_common+0xd8>
 8004694:	2000      	movs	r0, #0
 8004696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800469a:	2301      	movs	r3, #1
 800469c:	4652      	mov	r2, sl
 800469e:	4639      	mov	r1, r7
 80046a0:	4630      	mov	r0, r6
 80046a2:	47c0      	blx	r8
 80046a4:	3001      	adds	r0, #1
 80046a6:	d103      	bne.n	80046b0 <_printf_common+0xbc>
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	3501      	adds	r5, #1
 80046b2:	e7c2      	b.n	800463a <_printf_common+0x46>
 80046b4:	18e1      	adds	r1, r4, r3
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	2030      	movs	r0, #48	; 0x30
 80046ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046be:	4422      	add	r2, r4
 80046c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046c8:	3302      	adds	r3, #2
 80046ca:	e7c4      	b.n	8004656 <_printf_common+0x62>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4622      	mov	r2, r4
 80046d0:	4639      	mov	r1, r7
 80046d2:	4630      	mov	r0, r6
 80046d4:	47c0      	blx	r8
 80046d6:	3001      	adds	r0, #1
 80046d8:	d0e6      	beq.n	80046a8 <_printf_common+0xb4>
 80046da:	f109 0901 	add.w	r9, r9, #1
 80046de:	e7d7      	b.n	8004690 <_printf_common+0x9c>

080046e0 <_printf_i>:
 80046e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046e4:	4617      	mov	r7, r2
 80046e6:	7e0a      	ldrb	r2, [r1, #24]
 80046e8:	b085      	sub	sp, #20
 80046ea:	2a6e      	cmp	r2, #110	; 0x6e
 80046ec:	4698      	mov	r8, r3
 80046ee:	4606      	mov	r6, r0
 80046f0:	460c      	mov	r4, r1
 80046f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046f4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80046f8:	f000 80bc 	beq.w	8004874 <_printf_i+0x194>
 80046fc:	d81a      	bhi.n	8004734 <_printf_i+0x54>
 80046fe:	2a63      	cmp	r2, #99	; 0x63
 8004700:	d02e      	beq.n	8004760 <_printf_i+0x80>
 8004702:	d80a      	bhi.n	800471a <_printf_i+0x3a>
 8004704:	2a00      	cmp	r2, #0
 8004706:	f000 80c8 	beq.w	800489a <_printf_i+0x1ba>
 800470a:	2a58      	cmp	r2, #88	; 0x58
 800470c:	f000 808a 	beq.w	8004824 <_printf_i+0x144>
 8004710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004714:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004718:	e02a      	b.n	8004770 <_printf_i+0x90>
 800471a:	2a64      	cmp	r2, #100	; 0x64
 800471c:	d001      	beq.n	8004722 <_printf_i+0x42>
 800471e:	2a69      	cmp	r2, #105	; 0x69
 8004720:	d1f6      	bne.n	8004710 <_printf_i+0x30>
 8004722:	6821      	ldr	r1, [r4, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	f011 0f80 	tst.w	r1, #128	; 0x80
 800472a:	d023      	beq.n	8004774 <_printf_i+0x94>
 800472c:	1d11      	adds	r1, r2, #4
 800472e:	6019      	str	r1, [r3, #0]
 8004730:	6813      	ldr	r3, [r2, #0]
 8004732:	e027      	b.n	8004784 <_printf_i+0xa4>
 8004734:	2a73      	cmp	r2, #115	; 0x73
 8004736:	f000 80b4 	beq.w	80048a2 <_printf_i+0x1c2>
 800473a:	d808      	bhi.n	800474e <_printf_i+0x6e>
 800473c:	2a6f      	cmp	r2, #111	; 0x6f
 800473e:	d02a      	beq.n	8004796 <_printf_i+0xb6>
 8004740:	2a70      	cmp	r2, #112	; 0x70
 8004742:	d1e5      	bne.n	8004710 <_printf_i+0x30>
 8004744:	680a      	ldr	r2, [r1, #0]
 8004746:	f042 0220 	orr.w	r2, r2, #32
 800474a:	600a      	str	r2, [r1, #0]
 800474c:	e003      	b.n	8004756 <_printf_i+0x76>
 800474e:	2a75      	cmp	r2, #117	; 0x75
 8004750:	d021      	beq.n	8004796 <_printf_i+0xb6>
 8004752:	2a78      	cmp	r2, #120	; 0x78
 8004754:	d1dc      	bne.n	8004710 <_printf_i+0x30>
 8004756:	2278      	movs	r2, #120	; 0x78
 8004758:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800475c:	496e      	ldr	r1, [pc, #440]	; (8004918 <_printf_i+0x238>)
 800475e:	e064      	b.n	800482a <_printf_i+0x14a>
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004766:	1d11      	adds	r1, r2, #4
 8004768:	6019      	str	r1, [r3, #0]
 800476a:	6813      	ldr	r3, [r2, #0]
 800476c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004770:	2301      	movs	r3, #1
 8004772:	e0a3      	b.n	80048bc <_printf_i+0x1dc>
 8004774:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004778:	f102 0104 	add.w	r1, r2, #4
 800477c:	6019      	str	r1, [r3, #0]
 800477e:	d0d7      	beq.n	8004730 <_printf_i+0x50>
 8004780:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004784:	2b00      	cmp	r3, #0
 8004786:	da03      	bge.n	8004790 <_printf_i+0xb0>
 8004788:	222d      	movs	r2, #45	; 0x2d
 800478a:	425b      	negs	r3, r3
 800478c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004790:	4962      	ldr	r1, [pc, #392]	; (800491c <_printf_i+0x23c>)
 8004792:	220a      	movs	r2, #10
 8004794:	e017      	b.n	80047c6 <_printf_i+0xe6>
 8004796:	6820      	ldr	r0, [r4, #0]
 8004798:	6819      	ldr	r1, [r3, #0]
 800479a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800479e:	d003      	beq.n	80047a8 <_printf_i+0xc8>
 80047a0:	1d08      	adds	r0, r1, #4
 80047a2:	6018      	str	r0, [r3, #0]
 80047a4:	680b      	ldr	r3, [r1, #0]
 80047a6:	e006      	b.n	80047b6 <_printf_i+0xd6>
 80047a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047ac:	f101 0004 	add.w	r0, r1, #4
 80047b0:	6018      	str	r0, [r3, #0]
 80047b2:	d0f7      	beq.n	80047a4 <_printf_i+0xc4>
 80047b4:	880b      	ldrh	r3, [r1, #0]
 80047b6:	4959      	ldr	r1, [pc, #356]	; (800491c <_printf_i+0x23c>)
 80047b8:	2a6f      	cmp	r2, #111	; 0x6f
 80047ba:	bf14      	ite	ne
 80047bc:	220a      	movne	r2, #10
 80047be:	2208      	moveq	r2, #8
 80047c0:	2000      	movs	r0, #0
 80047c2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80047c6:	6865      	ldr	r5, [r4, #4]
 80047c8:	60a5      	str	r5, [r4, #8]
 80047ca:	2d00      	cmp	r5, #0
 80047cc:	f2c0 809c 	blt.w	8004908 <_printf_i+0x228>
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	f020 0004 	bic.w	r0, r0, #4
 80047d6:	6020      	str	r0, [r4, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d13f      	bne.n	800485c <_printf_i+0x17c>
 80047dc:	2d00      	cmp	r5, #0
 80047de:	f040 8095 	bne.w	800490c <_printf_i+0x22c>
 80047e2:	4675      	mov	r5, lr
 80047e4:	2a08      	cmp	r2, #8
 80047e6:	d10b      	bne.n	8004800 <_printf_i+0x120>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	07da      	lsls	r2, r3, #31
 80047ec:	d508      	bpl.n	8004800 <_printf_i+0x120>
 80047ee:	6923      	ldr	r3, [r4, #16]
 80047f0:	6862      	ldr	r2, [r4, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	bfde      	ittt	le
 80047f6:	2330      	movle	r3, #48	; 0x30
 80047f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004800:	ebae 0305 	sub.w	r3, lr, r5
 8004804:	6123      	str	r3, [r4, #16]
 8004806:	f8cd 8000 	str.w	r8, [sp]
 800480a:	463b      	mov	r3, r7
 800480c:	aa03      	add	r2, sp, #12
 800480e:	4621      	mov	r1, r4
 8004810:	4630      	mov	r0, r6
 8004812:	f7ff feef 	bl	80045f4 <_printf_common>
 8004816:	3001      	adds	r0, #1
 8004818:	d155      	bne.n	80048c6 <_printf_i+0x1e6>
 800481a:	f04f 30ff 	mov.w	r0, #4294967295
 800481e:	b005      	add	sp, #20
 8004820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004824:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004828:	493c      	ldr	r1, [pc, #240]	; (800491c <_printf_i+0x23c>)
 800482a:	6822      	ldr	r2, [r4, #0]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004832:	f100 0504 	add.w	r5, r0, #4
 8004836:	601d      	str	r5, [r3, #0]
 8004838:	d001      	beq.n	800483e <_printf_i+0x15e>
 800483a:	6803      	ldr	r3, [r0, #0]
 800483c:	e002      	b.n	8004844 <_printf_i+0x164>
 800483e:	0655      	lsls	r5, r2, #25
 8004840:	d5fb      	bpl.n	800483a <_printf_i+0x15a>
 8004842:	8803      	ldrh	r3, [r0, #0]
 8004844:	07d0      	lsls	r0, r2, #31
 8004846:	bf44      	itt	mi
 8004848:	f042 0220 	orrmi.w	r2, r2, #32
 800484c:	6022      	strmi	r2, [r4, #0]
 800484e:	b91b      	cbnz	r3, 8004858 <_printf_i+0x178>
 8004850:	6822      	ldr	r2, [r4, #0]
 8004852:	f022 0220 	bic.w	r2, r2, #32
 8004856:	6022      	str	r2, [r4, #0]
 8004858:	2210      	movs	r2, #16
 800485a:	e7b1      	b.n	80047c0 <_printf_i+0xe0>
 800485c:	4675      	mov	r5, lr
 800485e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004862:	fb02 3310 	mls	r3, r2, r0, r3
 8004866:	5ccb      	ldrb	r3, [r1, r3]
 8004868:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800486c:	4603      	mov	r3, r0
 800486e:	2800      	cmp	r0, #0
 8004870:	d1f5      	bne.n	800485e <_printf_i+0x17e>
 8004872:	e7b7      	b.n	80047e4 <_printf_i+0x104>
 8004874:	6808      	ldr	r0, [r1, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	6949      	ldr	r1, [r1, #20]
 800487a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800487e:	d004      	beq.n	800488a <_printf_i+0x1aa>
 8004880:	1d10      	adds	r0, r2, #4
 8004882:	6018      	str	r0, [r3, #0]
 8004884:	6813      	ldr	r3, [r2, #0]
 8004886:	6019      	str	r1, [r3, #0]
 8004888:	e007      	b.n	800489a <_printf_i+0x1ba>
 800488a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800488e:	f102 0004 	add.w	r0, r2, #4
 8004892:	6018      	str	r0, [r3, #0]
 8004894:	6813      	ldr	r3, [r2, #0]
 8004896:	d0f6      	beq.n	8004886 <_printf_i+0x1a6>
 8004898:	8019      	strh	r1, [r3, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	4675      	mov	r5, lr
 80048a0:	e7b1      	b.n	8004806 <_printf_i+0x126>
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	1d11      	adds	r1, r2, #4
 80048a6:	6019      	str	r1, [r3, #0]
 80048a8:	6815      	ldr	r5, [r2, #0]
 80048aa:	6862      	ldr	r2, [r4, #4]
 80048ac:	2100      	movs	r1, #0
 80048ae:	4628      	mov	r0, r5
 80048b0:	f7fb fc96 	bl	80001e0 <memchr>
 80048b4:	b108      	cbz	r0, 80048ba <_printf_i+0x1da>
 80048b6:	1b40      	subs	r0, r0, r5
 80048b8:	6060      	str	r0, [r4, #4]
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	2300      	movs	r3, #0
 80048c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c4:	e79f      	b.n	8004806 <_printf_i+0x126>
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	462a      	mov	r2, r5
 80048ca:	4639      	mov	r1, r7
 80048cc:	4630      	mov	r0, r6
 80048ce:	47c0      	blx	r8
 80048d0:	3001      	adds	r0, #1
 80048d2:	d0a2      	beq.n	800481a <_printf_i+0x13a>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	079b      	lsls	r3, r3, #30
 80048d8:	d507      	bpl.n	80048ea <_printf_i+0x20a>
 80048da:	2500      	movs	r5, #0
 80048dc:	f104 0919 	add.w	r9, r4, #25
 80048e0:	68e3      	ldr	r3, [r4, #12]
 80048e2:	9a03      	ldr	r2, [sp, #12]
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	429d      	cmp	r5, r3
 80048e8:	db05      	blt.n	80048f6 <_printf_i+0x216>
 80048ea:	68e0      	ldr	r0, [r4, #12]
 80048ec:	9b03      	ldr	r3, [sp, #12]
 80048ee:	4298      	cmp	r0, r3
 80048f0:	bfb8      	it	lt
 80048f2:	4618      	movlt	r0, r3
 80048f4:	e793      	b.n	800481e <_printf_i+0x13e>
 80048f6:	2301      	movs	r3, #1
 80048f8:	464a      	mov	r2, r9
 80048fa:	4639      	mov	r1, r7
 80048fc:	4630      	mov	r0, r6
 80048fe:	47c0      	blx	r8
 8004900:	3001      	adds	r0, #1
 8004902:	d08a      	beq.n	800481a <_printf_i+0x13a>
 8004904:	3501      	adds	r5, #1
 8004906:	e7eb      	b.n	80048e0 <_printf_i+0x200>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1a7      	bne.n	800485c <_printf_i+0x17c>
 800490c:	780b      	ldrb	r3, [r1, #0]
 800490e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004912:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004916:	e765      	b.n	80047e4 <_printf_i+0x104>
 8004918:	08004c1e 	.word	0x08004c1e
 800491c:	08004c0d 	.word	0x08004c0d

08004920 <_sbrk_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4c06      	ldr	r4, [pc, #24]	; (800493c <_sbrk_r+0x1c>)
 8004924:	2300      	movs	r3, #0
 8004926:	4605      	mov	r5, r0
 8004928:	4608      	mov	r0, r1
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	f000 f854 	bl	80049d8 <_sbrk>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_sbrk_r+0x1a>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	b103      	cbz	r3, 800493a <_sbrk_r+0x1a>
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	20000fac 	.word	0x20000fac

08004940 <memmove>:
 8004940:	4288      	cmp	r0, r1
 8004942:	b510      	push	{r4, lr}
 8004944:	eb01 0302 	add.w	r3, r1, r2
 8004948:	d803      	bhi.n	8004952 <memmove+0x12>
 800494a:	1e42      	subs	r2, r0, #1
 800494c:	4299      	cmp	r1, r3
 800494e:	d10c      	bne.n	800496a <memmove+0x2a>
 8004950:	bd10      	pop	{r4, pc}
 8004952:	4298      	cmp	r0, r3
 8004954:	d2f9      	bcs.n	800494a <memmove+0xa>
 8004956:	1881      	adds	r1, r0, r2
 8004958:	1ad2      	subs	r2, r2, r3
 800495a:	42d3      	cmn	r3, r2
 800495c:	d100      	bne.n	8004960 <memmove+0x20>
 800495e:	bd10      	pop	{r4, pc}
 8004960:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004964:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004968:	e7f7      	b.n	800495a <memmove+0x1a>
 800496a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800496e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004972:	e7eb      	b.n	800494c <memmove+0xc>

08004974 <__malloc_lock>:
 8004974:	4770      	bx	lr

08004976 <__malloc_unlock>:
 8004976:	4770      	bx	lr

08004978 <_realloc_r>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	4607      	mov	r7, r0
 800497c:	4614      	mov	r4, r2
 800497e:	460e      	mov	r6, r1
 8004980:	b921      	cbnz	r1, 800498c <_realloc_r+0x14>
 8004982:	4611      	mov	r1, r2
 8004984:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004988:	f7ff bc86 	b.w	8004298 <_malloc_r>
 800498c:	b922      	cbnz	r2, 8004998 <_realloc_r+0x20>
 800498e:	f7ff fc35 	bl	80041fc <_free_r>
 8004992:	4625      	mov	r5, r4
 8004994:	4628      	mov	r0, r5
 8004996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004998:	f000 f814 	bl	80049c4 <_malloc_usable_size_r>
 800499c:	4284      	cmp	r4, r0
 800499e:	d90f      	bls.n	80049c0 <_realloc_r+0x48>
 80049a0:	4621      	mov	r1, r4
 80049a2:	4638      	mov	r0, r7
 80049a4:	f7ff fc78 	bl	8004298 <_malloc_r>
 80049a8:	4605      	mov	r5, r0
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d0f2      	beq.n	8004994 <_realloc_r+0x1c>
 80049ae:	4631      	mov	r1, r6
 80049b0:	4622      	mov	r2, r4
 80049b2:	f7ff fb51 	bl	8004058 <memcpy>
 80049b6:	4631      	mov	r1, r6
 80049b8:	4638      	mov	r0, r7
 80049ba:	f7ff fc1f 	bl	80041fc <_free_r>
 80049be:	e7e9      	b.n	8004994 <_realloc_r+0x1c>
 80049c0:	4635      	mov	r5, r6
 80049c2:	e7e7      	b.n	8004994 <_realloc_r+0x1c>

080049c4 <_malloc_usable_size_r>:
 80049c4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80049c8:	2800      	cmp	r0, #0
 80049ca:	f1a0 0004 	sub.w	r0, r0, #4
 80049ce:	bfbc      	itt	lt
 80049d0:	580b      	ldrlt	r3, [r1, r0]
 80049d2:	18c0      	addlt	r0, r0, r3
 80049d4:	4770      	bx	lr
	...

080049d8 <_sbrk>:
 80049d8:	4b04      	ldr	r3, [pc, #16]	; (80049ec <_sbrk+0x14>)
 80049da:	6819      	ldr	r1, [r3, #0]
 80049dc:	4602      	mov	r2, r0
 80049de:	b909      	cbnz	r1, 80049e4 <_sbrk+0xc>
 80049e0:	4903      	ldr	r1, [pc, #12]	; (80049f0 <_sbrk+0x18>)
 80049e2:	6019      	str	r1, [r3, #0]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	4402      	add	r2, r0
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	4770      	bx	lr
 80049ec:	200001f4 	.word	0x200001f4
 80049f0:	20000fb0 	.word	0x20000fb0

080049f4 <_init>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	bf00      	nop
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr

08004a00 <_fini>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr
