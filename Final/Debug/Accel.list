
Accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b134  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  0800b2c8  0800b2c8  0001b2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b920  0800b920  0001b920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b928  0800b928  0001b928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b92c  0800b92c  0001b92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006d0  20000000  0800b930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001078  200006d0  0800c000  000206d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001748  0800c000  00021748  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000206d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f61c  00000000  00000000  00020700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000054f4  00000000  00000000  0004fd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001a48  00000000  00000000  00055210  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000017e0  00000000  00000000  00056c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d058  00000000  00000000  00058438  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007efa  00000000  00000000  00065490  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006d38a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000767c  00000000  00000000  0006d408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006d0 	.word	0x200006d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2ac 	.word	0x0800b2ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006d4 	.word	0x200006d4
 80001cc:	0800b2ac 	.word	0x0800b2ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000eb8:	4a27      	ldr	r2, [pc, #156]	; (8000f58 <I2Cx_MspInit+0xa8>)
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <I2Cx_MspInit+0xa8>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <I2Cx_MspInit+0xa8>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000ed0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ed4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000ed6:	2312      	movs	r3, #18
 8000ed8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	481b      	ldr	r0, [pc, #108]	; (8000f5c <I2Cx_MspInit+0xac>)
 8000eee:	f000 fec3 	bl	8001c78 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4818      	ldr	r0, [pc, #96]	; (8000f5c <I2Cx_MspInit+0xac>)
 8000efa:	f000 febd 	bl	8001c78 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000efe:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <I2Cx_MspInit+0xa8>)
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <I2Cx_MspInit+0xa8>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f08:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <I2Cx_MspInit+0xa8>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000f16:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <I2Cx_MspInit+0xa8>)
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <I2Cx_MspInit+0xa8>)
 8000f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f20:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000f22:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <I2Cx_MspInit+0xa8>)
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <I2Cx_MspInit+0xa8>)
 8000f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f28:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f2c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	210f      	movs	r1, #15
 8000f32:	2021      	movs	r0, #33	; 0x21
 8000f34:	f000 fd2b 	bl	800198e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000f38:	2021      	movs	r0, #33	; 0x21
 8000f3a:	f000 fd44 	bl	80019c6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	210f      	movs	r1, #15
 8000f42:	2022      	movs	r0, #34	; 0x22
 8000f44:	f000 fd23 	bl	800198e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000f48:	2022      	movs	r0, #34	; 0x22
 8000f4a:	f000 fd3c 	bl	80019c6 <HAL_NVIC_EnableIRQ>
}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400

08000f60 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <I2Cx_Init+0x54>)
 8000f6c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <I2Cx_Init+0x58>)
 8000f72:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff89 	bl	8000eb0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f001 f961 	bl	8002266 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f001 fe8a 	bl	8002cc0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40005800 	.word	0x40005800
 8000fb8:	00702681 	.word	0x00702681

08000fbc <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4603      	mov	r3, r0
 8000fcc:	72fb      	strb	r3, [r7, #11]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	813b      	strh	r3, [r7, #8]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	b299      	uxth	r1, r3
 8000fde:	88f8      	ldrh	r0, [r7, #6]
 8000fe0:	893a      	ldrh	r2, [r7, #8]
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f001 fb1a 	bl	800262c <HAL_I2C_Mem_Read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001002:	7afb      	ldrb	r3, [r7, #11]
 8001004:	4619      	mov	r1, r3
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 f832 	bl	8001070 <I2Cx_Error>
  }
  return status;
 800100c:	7dfb      	ldrb	r3, [r7, #23]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b08a      	sub	sp, #40	; 0x28
 800101a:	af04      	add	r7, sp, #16
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	4608      	mov	r0, r1
 8001020:	4611      	mov	r1, r2
 8001022:	461a      	mov	r2, r3
 8001024:	4603      	mov	r3, r0
 8001026:	72fb      	strb	r3, [r7, #11]
 8001028:	460b      	mov	r3, r1
 800102a:	813b      	strh	r3, [r7, #8]
 800102c:	4613      	mov	r3, r2
 800102e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	b299      	uxth	r1, r3
 8001038:	88f8      	ldrh	r0, [r7, #6]
 800103a:	893a      	ldrh	r2, [r7, #8]
 800103c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	4603      	mov	r3, r0
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f001 f9c7 	bl	80023e0 <HAL_I2C_Mem_Write>
 8001052:	4603      	mov	r3, r0
 8001054:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800105c:	7afb      	ldrb	r3, [r7, #11]
 800105e:	4619      	mov	r1, r3
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f805 	bl	8001070 <I2Cx_Error>
  }
  return status;
 8001066:	7dfb      	ldrb	r3, [r7, #23]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f001 f980 	bl	8002382 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff6c 	bl	8000f60 <I2Cx_Init>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <SENSOR_IO_Init+0x10>)
 8001096:	f7ff ff63 	bl	8000f60 <I2Cx_Init>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000930 	.word	0x20000930

080010a4 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
 80010ae:	460b      	mov	r3, r1
 80010b0:	71bb      	strb	r3, [r7, #6]
 80010b2:	4613      	mov	r3, r2
 80010b4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	79f9      	ldrb	r1, [r7, #7]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	1d7b      	adds	r3, r7, #5
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <SENSOR_IO_Write+0x30>)
 80010c8:	f7ff ffa5 	bl	8001016 <I2Cx_WriteMultiple>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000930 	.word	0x20000930

080010d8 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	79f9      	ldrb	r1, [r7, #7]
 80010f2:	2301      	movs	r3, #1
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	f107 030f 	add.w	r3, r7, #15
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	4804      	ldr	r0, [pc, #16]	; (8001110 <SENSOR_IO_Read+0x38>)
 8001100:	f7ff ff5c 	bl	8000fbc <I2Cx_ReadMultiple>

  return read_value;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000930 	.word	0x20000930

08001114 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af02      	add	r7, sp, #8
 800111a:	603a      	str	r2, [r7, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	460b      	mov	r3, r1
 8001124:	71bb      	strb	r3, [r7, #6]
 8001126:	4613      	mov	r3, r2
 8001128:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	b29a      	uxth	r2, r3
 800112e:	79f9      	ldrb	r1, [r7, #7]
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	4804      	ldr	r0, [pc, #16]	; (800114c <SENSOR_IO_ReadMultiple+0x38>)
 800113c:	f7ff ff3e 	bl	8000fbc <I2Cx_ReadMultiple>
 8001140:	4603      	mov	r3, r0
 8001142:	b29b      	uxth	r3, r3
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000930 	.word	0x20000930

08001150 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800115a:	2300      	movs	r3, #0
 800115c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <BSP_ACCELERO_Init+0x74>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4798      	blx	r3
 8001164:	4603      	mov	r3, r0
 8001166:	2b6a      	cmp	r3, #106	; 0x6a
 8001168:	d002      	beq.n	8001170 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e024      	b.n	80011ba <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <BSP_ACCELERO_Init+0x78>)
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <BSP_ACCELERO_Init+0x74>)
 8001174:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001176:	2330      	movs	r3, #48	; 0x30
 8001178:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800117e:	2300      	movs	r3, #0
 8001180:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001182:	2340      	movs	r3, #64	; 0x40
 8001184:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800118e:	797a      	ldrb	r2, [r7, #5]
 8001190:	7abb      	ldrb	r3, [r7, #10]
 8001192:	4313      	orrs	r3, r2
 8001194:	b2db      	uxtb	r3, r3
 8001196:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001198:	7a3b      	ldrb	r3, [r7, #8]
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <BSP_ACCELERO_Init+0x78>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	89ba      	ldrh	r2, [r7, #12]
 80011b6:	4610      	mov	r0, r2
 80011b8:	4798      	blx	r3
  }  

  return ret;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000001c 	.word	0x2000001c
 80011c8:	200006ec 	.word	0x200006ec

080011cc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d009      	beq.n	80011f0 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	4798      	blx	r3
    }
  }
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200006ec 	.word	0x200006ec

080011fc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2120      	movs	r1, #32
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff62 	bl	80010d8 <SENSOR_IO_Read>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	f023 0304 	bic.w	r3, r3, #4
 800121e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	f023 0303 	bic.w	r3, r3, #3
 800122e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800123e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	2120      	movs	r1, #32
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff2b 	bl	80010a4 <SENSOR_IO_Write>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b088      	sub	sp, #32
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	b2d8      	uxtb	r0, r3
 8001264:	f107 0208 	add.w	r2, r7, #8
 8001268:	2302      	movs	r3, #2
 800126a:	21b2      	movs	r1, #178	; 0xb2
 800126c:	f7ff ff52 	bl	8001114 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2135      	movs	r1, #53	; 0x35
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff2e 	bl	80010d8 <SENSOR_IO_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001280:	7ffb      	ldrb	r3, [r7, #31]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21b      	sxth	r3, r3
 8001286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800128a:	b21a      	sxth	r2, r3
 800128c:	7a3b      	ldrb	r3, [r7, #8]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001294:	7ffb      	ldrb	r3, [r7, #31]
 8001296:	019b      	lsls	r3, r3, #6
 8001298:	b21b      	sxth	r3, r3
 800129a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800129e:	b21a      	sxth	r2, r3
 80012a0:	7a7b      	ldrb	r3, [r7, #9]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80012a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012ac:	10db      	asrs	r3, r3, #3
 80012ae:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80012b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012b4:	10db      	asrs	r3, r3, #3
 80012b6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2d8      	uxtb	r0, r3
 80012bc:	f107 0208 	add.w	r2, r7, #8
 80012c0:	2304      	movs	r3, #4
 80012c2:	21bc      	movs	r1, #188	; 0xbc
 80012c4:	f7ff ff26 	bl	8001114 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80012c8:	7a7b      	ldrb	r3, [r7, #9]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	7a3b      	ldrb	r3, [r7, #8]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	7abb      	ldrb	r3, [r7, #10]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	b2d8      	uxtb	r0, r3
 80012e8:	f107 0208 	add.w	r2, r7, #8
 80012ec:	2302      	movs	r3, #2
 80012ee:	21aa      	movs	r1, #170	; 0xaa
 80012f0:	f7ff ff10 	bl	8001114 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80012f4:	7a7b      	ldrb	r3, [r7, #9]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	7a3b      	ldrb	r3, [r7, #8]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001302:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001306:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001314:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001318:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	ee67 6a27 	vmul.f32	s13, s14, s15
 800132a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800132e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001340:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001350:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	ee07 3a90 	vmov	s15, r3
}
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f87b 	bl	800146c <LPS22HB_Init>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800138c:	f7ff fe80 	bl	8001090 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	210f      	movs	r1, #15
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe9e 	bl	80010d8 <SENSOR_IO_Read>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	74fb      	strb	r3, [r7, #19]
 80013be:	e013      	b.n	80013e8 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80013c0:	7cfc      	ldrb	r4, [r7, #19]
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	7cfb      	ldrb	r3, [r7, #19]
 80013c8:	3328      	adds	r3, #40	; 0x28
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f7ff fe82 	bl	80010d8 <SENSOR_IO_Read>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	4423      	add	r3, r4
 80013de:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80013e2:	7cfb      	ldrb	r3, [r7, #19]
 80013e4:	3301      	adds	r3, #1
 80013e6:	74fb      	strb	r3, [r7, #19]
 80013e8:	7cfb      	ldrb	r3, [r7, #19]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d9e8      	bls.n	80013c0 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	74fb      	strb	r3, [r7, #19]
 80013f2:	e010      	b.n	8001416 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80013f4:	7cfb      	ldrb	r3, [r7, #19]
 80013f6:	f107 0218 	add.w	r2, r7, #24
 80013fa:	4413      	add	r3, r2
 80013fc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001400:	461a      	mov	r2, r3
 8001402:	7cfb      	ldrb	r3, [r7, #19]
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4313      	orrs	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001410:	7cfb      	ldrb	r3, [r7, #19]
 8001412:	3301      	adds	r3, #1
 8001414:	74fb      	strb	r3, [r7, #19]
 8001416:	7cfb      	ldrb	r3, [r7, #19]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d9eb      	bls.n	80013f4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800142c:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2264      	movs	r2, #100	; 0x64
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	da01      	bge.n	8001442 <LPS22HB_P_ReadPressure+0x96>
 800143e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001442:	131b      	asrs	r3, r3, #12
 8001444:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001450:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001468 <LPS22HB_P_ReadPressure+0xbc>
 8001454:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001458:	eef0 7a66 	vmov.f32	s15, s13
}
 800145c:	eeb0 0a67 	vmov.f32	s0, s15
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd90      	pop	{r4, r7, pc}
 8001466:	bf00      	nop
 8001468:	42c80000 	.word	0x42c80000

0800146c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	211a      	movs	r1, #26
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fe2b 	bl	80010d8 <SENSOR_IO_Read>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	211a      	movs	r1, #26
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fe00 	bl	80010a4 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2110      	movs	r1, #16
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fe14 	bl	80010d8 <SENSOR_IO_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ba:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80014c2:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f023 0302 	bic.w	r3, r3, #2
 80014ca:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	2110      	movs	r1, #16
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fde1 	bl	80010a4 <SENSOR_IO_Write>
}  
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80014f8:	2110      	movs	r1, #16
 80014fa:	20d4      	movs	r0, #212	; 0xd4
 80014fc:	f7ff fdec 	bl	80010d8 <SENSOR_IO_Read>
 8001500:	4603      	mov	r3, r0
 8001502:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001510:	7bba      	ldrb	r2, [r7, #14]
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	4313      	orrs	r3, r2
 8001516:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001518:	7bbb      	ldrb	r3, [r7, #14]
 800151a:	461a      	mov	r2, r3
 800151c:	2110      	movs	r1, #16
 800151e:	20d4      	movs	r0, #212	; 0xd4
 8001520:	f7ff fdc0 	bl	80010a4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001524:	2112      	movs	r1, #18
 8001526:	20d4      	movs	r0, #212	; 0xd4
 8001528:	f7ff fdd6 	bl	80010d8 <SENSOR_IO_Read>
 800152c:	4603      	mov	r3, r0
 800152e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b29b      	uxth	r3, r3
 8001536:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800153e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001540:	7bba      	ldrb	r2, [r7, #14]
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	4313      	orrs	r3, r2
 8001546:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	461a      	mov	r2, r3
 800154c:	2112      	movs	r1, #18
 800154e:	20d4      	movs	r0, #212	; 0xd4
 8001550:	f7ff fda8 	bl	80010a4 <SENSOR_IO_Write>
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001562:	2300      	movs	r3, #0
 8001564:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001566:	2110      	movs	r1, #16
 8001568:	20d4      	movs	r0, #212	; 0xd4
 800156a:	f7ff fdb5 	bl	80010d8 <SENSOR_IO_Read>
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	461a      	mov	r2, r3
 800157e:	2110      	movs	r1, #16
 8001580:	20d4      	movs	r0, #212	; 0xd4
 8001582:	f7ff fd8f 	bl	80010a4 <SENSOR_IO_Write>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001592:	f7ff fd7d 	bl	8001090 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001596:	210f      	movs	r1, #15
 8001598:	20d4      	movs	r0, #212	; 0xd4
 800159a:	f7ff fd9d 	bl	80010d8 <SENSOR_IO_Read>
 800159e:	4603      	mov	r3, r0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80015b2:	2115      	movs	r1, #21
 80015b4:	20d4      	movs	r0, #212	; 0xd4
 80015b6:	f7ff fd8f 	bl	80010d8 <SENSOR_IO_Read>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	f023 0310 	bic.w	r3, r3, #16
 80015c4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	461a      	mov	r2, r3
 80015d8:	2115      	movs	r1, #21
 80015da:	20d4      	movs	r0, #212	; 0xd4
 80015dc:	f7ff fd62 	bl	80010a4 <SENSOR_IO_Write>
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80015fe:	2110      	movs	r1, #16
 8001600:	20d4      	movs	r0, #212	; 0xd4
 8001602:	f7ff fd69 	bl	80010d8 <SENSOR_IO_Read>
 8001606:	4603      	mov	r3, r0
 8001608:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800160a:	f107 0208 	add.w	r2, r7, #8
 800160e:	2306      	movs	r3, #6
 8001610:	2128      	movs	r1, #40	; 0x28
 8001612:	20d4      	movs	r0, #212	; 0xd4
 8001614:	f7ff fd7e 	bl	8001114 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001618:	2300      	movs	r3, #0
 800161a:	77fb      	strb	r3, [r7, #31]
 800161c:	e01f      	b.n	800165e <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800161e:	7ffb      	ldrb	r3, [r7, #31]
 8001620:	7ffa      	ldrb	r2, [r7, #31]
 8001622:	0052      	lsls	r2, r2, #1
 8001624:	3201      	adds	r2, #1
 8001626:	f107 0120 	add.w	r1, r7, #32
 800162a:	440a      	add	r2, r1
 800162c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001630:	b292      	uxth	r2, r2
 8001632:	0212      	lsls	r2, r2, #8
 8001634:	b291      	uxth	r1, r2
 8001636:	7ffa      	ldrb	r2, [r7, #31]
 8001638:	0052      	lsls	r2, r2, #1
 800163a:	f107 0020 	add.w	r0, r7, #32
 800163e:	4402      	add	r2, r0
 8001640:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001644:	b292      	uxth	r2, r2
 8001646:	440a      	add	r2, r1
 8001648:	b292      	uxth	r2, r2
 800164a:	b212      	sxth	r2, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	f107 0120 	add.w	r1, r7, #32
 8001652:	440b      	add	r3, r1
 8001654:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	3301      	adds	r3, #1
 800165c:	77fb      	strb	r3, [r7, #31]
 800165e:	7ffb      	ldrb	r3, [r7, #31]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d9dc      	bls.n	800161e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d828      	bhi.n	80016c0 <LSM6DSL_AccReadXYZ+0xd8>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <LSM6DSL_AccReadXYZ+0x8c>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	080016a9 	.word	0x080016a9
 8001678:	080016c1 	.word	0x080016c1
 800167c:	080016c1 	.word	0x080016c1
 8001680:	080016c1 	.word	0x080016c1
 8001684:	080016bb 	.word	0x080016bb
 8001688:	080016c1 	.word	0x080016c1
 800168c:	080016c1 	.word	0x080016c1
 8001690:	080016c1 	.word	0x080016c1
 8001694:	080016af 	.word	0x080016af
 8001698:	080016c1 	.word	0x080016c1
 800169c:	080016c1 	.word	0x080016c1
 80016a0:	080016c1 	.word	0x080016c1
 80016a4:	080016b5 	.word	0x080016b5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <LSM6DSL_AccReadXYZ+0x128>)
 80016aa:	61bb      	str	r3, [r7, #24]
    break;
 80016ac:	e008      	b.n	80016c0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <LSM6DSL_AccReadXYZ+0x12c>)
 80016b0:	61bb      	str	r3, [r7, #24]
    break;
 80016b2:	e005      	b.n	80016c0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <LSM6DSL_AccReadXYZ+0x130>)
 80016b6:	61bb      	str	r3, [r7, #24]
    break;
 80016b8:	e002      	b.n	80016c0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <LSM6DSL_AccReadXYZ+0x134>)
 80016bc:	61bb      	str	r3, [r7, #24]
    break;    
 80016be:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	77fb      	strb	r3, [r7, #31]
 80016c4:	e01c      	b.n	8001700 <LSM6DSL_AccReadXYZ+0x118>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80016c6:	7ffb      	ldrb	r3, [r7, #31]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	441a      	add	r2, r3
 80016ce:	7ffb      	ldrb	r3, [r7, #31]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	f107 0120 	add.w	r1, r7, #32
 80016d6:	440b      	add	r3, r1
 80016d8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80016dc:	ee07 3a90 	vmov	s15, r3
 80016e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f0:	edc7 7a00 	vstr	s15, [r7]
 80016f4:	883b      	ldrh	r3, [r7, #0]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	8013      	strh	r3, [r2, #0]
  for(i=0; i<3; i++)
 80016fa:	7ffb      	ldrb	r3, [r7, #31]
 80016fc:	3301      	adds	r3, #1
 80016fe:	77fb      	strb	r3, [r7, #31]
 8001700:	7ffb      	ldrb	r3, [r7, #31]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d9df      	bls.n	80016c6 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8001706:	bf00      	nop
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	3d79db23 	.word	0x3d79db23
 8001714:	3df9db23 	.word	0x3df9db23
 8001718:	3e79db23 	.word	0x3e79db23
 800171c:	3ef9db23 	.word	0x3ef9db23

08001720 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f927 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f806 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f006 faf0 	bl	8007d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_InitTick+0x30>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_InitTick+0x34>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	4618      	mov	r0, r3
 8001752:	f000 f946 	bl	80019e2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001756:	2200      	movs	r2, #0
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	f04f 30ff 	mov.w	r0, #4294967295
 800175e:	f000 f916 	bl	800198e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000005c 	.word	0x2000005c
 8001770:	10624dd3 	.word	0x10624dd3

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick++;
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <HAL_IncTick+0x18>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	4a03      	ldr	r2, [pc, #12]	; (800178c <HAL_IncTick+0x18>)
 8001780:	6013      	str	r3, [r2, #0]
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	2000097c 	.word	0x2000097c

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000097c 	.word	0x2000097c

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d002      	beq.n	80017c8 <HAL_Delay+0x20>
  {
    wait++;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
  } 

  while((HAL_GetTick() - tickstart) < wait)
 80017c8:	bf00      	nop
 80017ca:	f7ff ffe1 	bl	8001790 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1ad2      	subs	r2, r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d3f7      	bcc.n	80017ca <HAL_Delay+0x22>
  {
  }
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001852:	4909      	ldr	r1, [pc, #36]	; (8001878 <NVIC_EnableIRQ+0x30>)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	095b      	lsrs	r3, r3, #5
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	f002 021f 	and.w	r2, r2, #31
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	da0b      	bge.n	80018a8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	490d      	ldr	r1, [pc, #52]	; (80018c8 <NVIC_SetPriority+0x4c>)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	3b04      	subs	r3, #4
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	0112      	lsls	r2, r2, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a6:	e009      	b.n	80018bc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	4908      	ldr	r1, [pc, #32]	; (80018cc <NVIC_SetPriority+0x50>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	2201      	movs	r2, #1
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	401a      	ands	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001916:	2101      	movs	r1, #1
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	1e59      	subs	r1, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4313      	orrs	r3, r2
         );
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff90 	bl	800187c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff2f 	bl	80017e4 <NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff44 	bl	800182c <NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff90 	bl	80018d0 <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5f 	bl	800187c <NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff37 	bl	8001848 <NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffa2 	bl	8001934 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d106      	bne.n	8001a18 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001a16:	e005      	b.n	8001a24 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a18:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 0304 	bic.w	r3, r3, #4
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001a38:	f000 f802 	bl	8001a40 <HAL_SYSTICK_Callback>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0ac      	b.n	8001bbc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f8b2 	bl	8001bd0 <DFSDM_GetChannelFromInstance>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b55      	ldr	r3, [pc, #340]	; (8001bc4 <HAL_DFSDM_ChannelInit+0x174>)
 8001a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e09f      	b.n	8001bbc <HAL_DFSDM_ChannelInit+0x16c>
  }
  
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f004 fdad 	bl	80065dc <HAL_DFSDM_ChannelMspInit>
  
  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a82:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <HAL_DFSDM_ChannelInit+0x178>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	4a4f      	ldr	r2, [pc, #316]	; (8001bc8 <HAL_DFSDM_ChannelInit+0x178>)
 8001a8a:	6013      	str	r3, [r2, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8001a8c:	4b4e      	ldr	r3, [pc, #312]	; (8001bc8 <HAL_DFSDM_ChannelInit+0x178>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d125      	bne.n	8001ae0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a94:	4a4d      	ldr	r2, [pc, #308]	; (8001bcc <HAL_DFSDM_ChannelInit+0x17c>)
 8001a96:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <HAL_DFSDM_ChannelInit+0x17c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a9e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001aa0:	494a      	ldr	r1, [pc, #296]	; (8001bcc <HAL_DFSDM_ChannelInit+0x17c>)
 8001aa2:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <HAL_DFSDM_ChannelInit+0x17c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]
    
    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001aae:	4a47      	ldr	r2, [pc, #284]	; (8001bcc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ab0:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001ab8:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	791b      	ldrb	r3, [r3, #4]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8001ac2:	4942      	ldr	r1, [pc, #264]	; (8001bcc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ac4:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	041b      	lsls	r3, r3, #16
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001ad4:	4a3d      	ldr	r2, [pc, #244]	; (8001bcc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ade:	6013      	str	r3, [r2, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001aee:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	6811      	ldr	r1, [r2, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6910      	ldr	r0, [r2, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6952      	ldr	r2, [r2, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001b02:	4310      	orrs	r0, r2
                                        hdfsdm_channel->Init.Input.Pins);
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6992      	ldr	r2, [r2, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001b08:	4302      	orrs	r2, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	f022 020f 	bic.w	r2, r2, #15
 8001b1c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	6811      	ldr	r1, [r2, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	69d0      	ldr	r0, [r2, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6a12      	ldr	r2, [r2, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001b30:	4302      	orrs	r2, r0
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	6892      	ldr	r2, [r2, #8]
 8001b40:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001b44:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	6891      	ldr	r1, [r2, #8]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6a50      	ldr	r0, [r2, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	0412      	lsls	r2, r2, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001b5c:	4302      	orrs	r2, r0
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	6852      	ldr	r2, [r2, #4]
 8001b6c:	f002 0207 	and.w	r2, r2, #7
 8001b70:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	6851      	ldr	r1, [r2, #4]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b80:	0210      	lsls	r0, r2, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b86:	00d2      	lsls	r2, r2, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001b88:	4302      	orrs	r2, r0
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b9c:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f810 	bl	8001bd0 <DFSDM_GetChannelFromInstance>
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_DFSDM_ChannelInit+0x174>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200006f4 	.word	0x200006f4
 8001bc8:	200006f0 	.word	0x200006f0
 8001bcc:	40016000 	.word	0x40016000

08001bd0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t channel = 0xFF;
 8001bd8:	23ff      	movs	r3, #255	; 0xff
 8001bda:	60fb      	str	r3, [r7, #12]
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <DFSDM_GetChannelFromInstance+0x88>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d102      	bne.n	8001bea <DFSDM_GetChannelFromInstance+0x1a>
  {
    channel = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	e02f      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <DFSDM_GetChannelFromInstance+0x8c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d102      	bne.n	8001bf8 <DFSDM_GetChannelFromInstance+0x28>
  {
    channel = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e028      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <DFSDM_GetChannelFromInstance+0x90>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d102      	bne.n	8001c06 <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 2;
 8001c00:	2302      	movs	r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	e021      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel3)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <DFSDM_GetChannelFromInstance+0x94>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d102      	bne.n	8001c14 <DFSDM_GetChannelFromInstance+0x44>
  {
    channel = 3;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e01a      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x7a>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if(Instance == DFSDM1_Channel4)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <DFSDM_GetChannelFromInstance+0x98>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d102      	bne.n	8001c22 <DFSDM_GetChannelFromInstance+0x52>
  {
    channel = 4;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e013      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel5)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <DFSDM_GetChannelFromInstance+0x9c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d102      	bne.n	8001c30 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 5;
 8001c2a:	2305      	movs	r3, #5
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e00c      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel6)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <DFSDM_GetChannelFromInstance+0xa0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d102      	bne.n	8001c3e <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 6;
 8001c38:	2306      	movs	r3, #6
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e005      	b.n	8001c4a <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel7)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <DFSDM_GetChannelFromInstance+0xa4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <DFSDM_GetChannelFromInstance+0x7a>
  {
    channel = 7;
 8001c46:	2307      	movs	r3, #7
 8001c48:	60fb      	str	r3, [r7, #12]
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return channel;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40016000 	.word	0x40016000
 8001c5c:	40016020 	.word	0x40016020
 8001c60:	40016040 	.word	0x40016040
 8001c64:	40016060 	.word	0x40016060
 8001c68:	40016080 	.word	0x40016080
 8001c6c:	400160a0 	.word	0x400160a0
 8001c70:	400160c0 	.word	0x400160c0
 8001c74:	400160e0 	.word	0x400160e0

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001c8e:	e17f      	b.n	8001f90 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2101      	movs	r1, #1
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8171 	beq.w	8001f8a <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x40>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b12      	cmp	r3, #18
 8001cb6:	d123      	bne.n	8001d00 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	6939      	ldr	r1, [r7, #16]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d00b      	beq.n	8001d54 <HAL_GPIO_Init+0xdc>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d007      	beq.n	8001d54 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d48:	2b11      	cmp	r3, #17
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b12      	cmp	r3, #18
 8001d52:	d130      	bne.n	8001db6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	f003 0201 	and.w	r2, r3, #1
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d118      	bne.n	8001df4 <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	f003 0201 	and.w	r2, r3, #1
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80ac 	beq.w	8001f8a <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	4a5e      	ldr	r2, [pc, #376]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001e34:	4b5d      	ldr	r3, [pc, #372]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e4a:	4a59      	ldr	r2, [pc, #356]	; (8001fb0 <HAL_GPIO_Init+0x338>)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e74:	d025      	beq.n	8001ec2 <HAL_GPIO_Init+0x24a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4e      	ldr	r2, [pc, #312]	; (8001fb4 <HAL_GPIO_Init+0x33c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01f      	beq.n	8001ebe <HAL_GPIO_Init+0x246>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4d      	ldr	r2, [pc, #308]	; (8001fb8 <HAL_GPIO_Init+0x340>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d019      	beq.n	8001eba <HAL_GPIO_Init+0x242>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4c      	ldr	r2, [pc, #304]	; (8001fbc <HAL_GPIO_Init+0x344>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_GPIO_Init+0x23e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4b      	ldr	r2, [pc, #300]	; (8001fc0 <HAL_GPIO_Init+0x348>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00d      	beq.n	8001eb2 <HAL_GPIO_Init+0x23a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4a      	ldr	r2, [pc, #296]	; (8001fc4 <HAL_GPIO_Init+0x34c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d007      	beq.n	8001eae <HAL_GPIO_Init+0x236>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a49      	ldr	r2, [pc, #292]	; (8001fc8 <HAL_GPIO_Init+0x350>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_GPIO_Init+0x232>
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	e00c      	b.n	8001ec4 <HAL_GPIO_Init+0x24c>
 8001eaa:	2307      	movs	r3, #7
 8001eac:	e00a      	b.n	8001ec4 <HAL_GPIO_Init+0x24c>
 8001eae:	2305      	movs	r3, #5
 8001eb0:	e008      	b.n	8001ec4 <HAL_GPIO_Init+0x24c>
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x24c>
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e004      	b.n	8001ec4 <HAL_GPIO_Init+0x24c>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e002      	b.n	8001ec4 <HAL_GPIO_Init+0x24c>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_GPIO_Init+0x24c>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	f002 0203 	and.w	r2, r2, #3
 8001eca:	0092      	lsls	r2, r2, #2
 8001ecc:	4093      	lsls	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ed4:	4936      	ldr	r1, [pc, #216]	; (8001fb0 <HAL_GPIO_Init+0x338>)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	3302      	adds	r3, #2
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ee2:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f06:	4a31      	ldr	r2, [pc, #196]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f0c:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f30:	4a26      	ldr	r2, [pc, #152]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f36:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f5a:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f84:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f47f ae78 	bne.w	8001c90 <HAL_GPIO_Init+0x18>
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	48000400 	.word	0x48000400
 8001fb8:	48000800 	.word	0x48000800
 8001fbc:	48000c00 	.word	0x48000c00
 8001fc0:	48001000 	.word	0x48001000
 8001fc4:	48001400 	.word	0x48001400
 8001fc8:	48001800 	.word	0x48001800
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 8001fe6:	e0cd      	b.n	8002184 <HAL_GPIO_DeInit+0x1b4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	409a      	lsls	r2, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80c1 	beq.w	800217e <HAL_GPIO_DeInit+0x1ae>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2103      	movs	r1, #3
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	08d9      	lsrs	r1, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3108      	adds	r1, #8
 800201c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	200f      	movs	r0, #15
 800202a:	fa00 f303 	lsl.w	r3, r0, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	4019      	ands	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2103      	movs	r1, #3
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	401a      	ands	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	2101      	movs	r1, #1
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	401a      	ands	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2103      	movs	r1, #3
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	401a      	ands	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207e:	2101      	movs	r1, #1
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	401a      	ands	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 800208e:	4a44      	ldr	r2, [pc, #272]	; (80021a0 <HAL_GPIO_DeInit+0x1d0>)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020b6:	d025      	beq.n	8002104 <HAL_GPIO_DeInit+0x134>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3a      	ldr	r2, [pc, #232]	; (80021a4 <HAL_GPIO_DeInit+0x1d4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d01f      	beq.n	8002100 <HAL_GPIO_DeInit+0x130>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a39      	ldr	r2, [pc, #228]	; (80021a8 <HAL_GPIO_DeInit+0x1d8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d019      	beq.n	80020fc <HAL_GPIO_DeInit+0x12c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a38      	ldr	r2, [pc, #224]	; (80021ac <HAL_GPIO_DeInit+0x1dc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d013      	beq.n	80020f8 <HAL_GPIO_DeInit+0x128>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a37      	ldr	r2, [pc, #220]	; (80021b0 <HAL_GPIO_DeInit+0x1e0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00d      	beq.n	80020f4 <HAL_GPIO_DeInit+0x124>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a36      	ldr	r2, [pc, #216]	; (80021b4 <HAL_GPIO_DeInit+0x1e4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d007      	beq.n	80020f0 <HAL_GPIO_DeInit+0x120>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a35      	ldr	r2, [pc, #212]	; (80021b8 <HAL_GPIO_DeInit+0x1e8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d101      	bne.n	80020ec <HAL_GPIO_DeInit+0x11c>
 80020e8:	2306      	movs	r3, #6
 80020ea:	e00c      	b.n	8002106 <HAL_GPIO_DeInit+0x136>
 80020ec:	2307      	movs	r3, #7
 80020ee:	e00a      	b.n	8002106 <HAL_GPIO_DeInit+0x136>
 80020f0:	2305      	movs	r3, #5
 80020f2:	e008      	b.n	8002106 <HAL_GPIO_DeInit+0x136>
 80020f4:	2304      	movs	r3, #4
 80020f6:	e006      	b.n	8002106 <HAL_GPIO_DeInit+0x136>
 80020f8:	2303      	movs	r3, #3
 80020fa:	e004      	b.n	8002106 <HAL_GPIO_DeInit+0x136>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e002      	b.n	8002106 <HAL_GPIO_DeInit+0x136>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_GPIO_DeInit+0x136>
 8002104:	2300      	movs	r3, #0
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	f002 0203 	and.w	r2, r2, #3
 800210c:	0092      	lsls	r2, r2, #2
 800210e:	fa03 f202 	lsl.w	r2, r3, r2
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d132      	bne.n	800217e <HAL_GPIO_DeInit+0x1ae>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002128:	481d      	ldr	r0, [pc, #116]	; (80021a0 <HAL_GPIO_DeInit+0x1d0>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	491c      	ldr	r1, [pc, #112]	; (80021a0 <HAL_GPIO_DeInit+0x1d0>)
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	0892      	lsrs	r2, r2, #2
 8002134:	3202      	adds	r2, #2
 8002136:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	43d2      	mvns	r2, r2
 800213e:	400a      	ands	r2, r1
 8002140:	3302      	adds	r3, #2
 8002142:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8002146:	491d      	ldr	r1, [pc, #116]	; (80021bc <HAL_GPIO_DeInit+0x1ec>)
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_GPIO_DeInit+0x1ec>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	4013      	ands	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 8002154:	4919      	ldr	r1, [pc, #100]	; (80021bc <HAL_GPIO_DeInit+0x1ec>)
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_GPIO_DeInit+0x1ec>)
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	4013      	ands	r3, r2
 8002160:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 8002162:	4916      	ldr	r1, [pc, #88]	; (80021bc <HAL_GPIO_DeInit+0x1ec>)
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_GPIO_DeInit+0x1ec>)
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	4013      	ands	r3, r2
 800216e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 8002170:	4912      	ldr	r1, [pc, #72]	; (80021bc <HAL_GPIO_DeInit+0x1ec>)
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_GPIO_DeInit+0x1ec>)
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	4013      	ands	r3, r2
 800217c:	60cb      	str	r3, [r1, #12]
      }
    }
    
    position++;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3301      	adds	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != RESET)
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	f47f af2b 	bne.w	8001fe8 <HAL_GPIO_DeInit+0x18>
  }
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40010000 	.word	0x40010000
 80021a4:	48000400 	.word	0x48000400
 80021a8:	48000800 	.word	0x48000800
 80021ac:	48000c00 	.word	0x48000c00
 80021b0:	48001000 	.word	0x48001000
 80021b4:	48001400 	.word	0x48001400
 80021b8:	48001800 	.word	0x48001800
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
 80021fc:	4613      	mov	r3, r2
 80021fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002200:	787b      	ldrb	r3, [r7, #1]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800220c:	e002      	b.n	8002214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d006      	beq.n	8002244 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f806 	bl	8002250 <HAL_GPIO_EXTI_Callback>
  }
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40010400 	.word	0x40010400

08002250 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e080      	b.n	800237a <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d106      	bne.n	8002292 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f005 faf1 	bl	8007874 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2224      	movs	r2, #36	; 0x24
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6852      	ldr	r2, [r2, #4]
 80022b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	6892      	ldr	r2, [r2, #8]
 80022c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6892      	ldr	r2, [r2, #8]
 80022d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	e006      	b.n	80022ee <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6892      	ldr	r2, [r2, #8]
 80022e8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d104      	bne.n	8002300 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800230e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002312:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	68d2      	ldr	r2, [r2, #12]
 800231e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002322:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6911      	ldr	r1, [r2, #16]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6952      	ldr	r2, [r2, #20]
 8002330:	4311      	orrs	r1, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6992      	ldr	r2, [r2, #24]
 8002336:	0212      	lsls	r2, r2, #8
 8002338:	430a      	orrs	r2, r1
 800233a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	69d1      	ldr	r1, [r2, #28]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6a12      	ldr	r2, [r2, #32]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e021      	b.n	80023d8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	; 0x24
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f005 fa91 	bl	80078d4 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	817b      	strh	r3, [r7, #10]
 80023f2:	460b      	mov	r3, r1
 80023f4:	813b      	strh	r3, [r7, #8]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b20      	cmp	r3, #32
 8002408:	f040 8109 	bne.w	800261e <HAL_I2C_Mem_Write+0x23e>
  {
    if ((pData == NULL) || (Size == 0U))
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_I2C_Mem_Write+0x38>
 8002412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e101      	b.n	8002620 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_I2C_Mem_Write+0x4a>
 8002426:	2302      	movs	r3, #2
 8002428:	e0fa      	b.n	8002620 <HAL_I2C_Mem_Write+0x240>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002432:	f7ff f9ad 	bl	8001790 <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2319      	movs	r3, #25
 800243e:	2201      	movs	r2, #1
 8002440:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fafb 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0e5      	b.n	8002620 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2221      	movs	r2, #33	; 0x21
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002474:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800247c:	88f8      	ldrh	r0, [r7, #6]
 800247e:	893a      	ldrh	r2, [r7, #8]
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4603      	mov	r3, r0
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f9f3 	bl	8002878 <I2C_RequestMemoryWrite>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00f      	beq.n	80024b8 <HAL_I2C_Mem_Write+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	2b04      	cmp	r3, #4
 800249e:	d105      	bne.n	80024ac <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0b9      	b.n	8002620 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0b3      	b.n	8002620 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2bff      	cmp	r3, #255	; 0xff
 80024c0:	d90e      	bls.n	80024e0 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	22ff      	movs	r2, #255	; 0xff
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	8979      	ldrh	r1, [r7, #10]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fbc5 	bl	8002c68 <I2C_TransferConfig>
 80024de:	e00f      	b.n	8002500 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	8979      	ldrh	r1, [r7, #10]
 80024f2:	2300      	movs	r3, #0
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fbb4 	bl	8002c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fad5 	bl	8002ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_I2C_Mem_Write+0x140>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	2b04      	cmp	r3, #4
 8002516:	d101      	bne.n	800251c <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e081      	b.n	8002620 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e07f      	b.n	8002620 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	1c58      	adds	r0, r3, #1
 800252a:	68f9      	ldr	r1, [r7, #12]
 800252c:	6248      	str	r0, [r1, #36]	; 0x24
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	d135      	bne.n	80025c0 <HAL_I2C_Mem_Write+0x1e0>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d030      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	2200      	movs	r2, #0
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fa69 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e053      	b.n	8002620 <HAL_I2C_Mem_Write+0x240>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2bff      	cmp	r3, #255	; 0xff
 8002580:	d90e      	bls.n	80025a0 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	22ff      	movs	r2, #255	; 0xff
 8002586:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	b2da      	uxtb	r2, r3
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	2300      	movs	r3, #0
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fb65 	bl	8002c68 <I2C_TransferConfig>
 800259e:	e00f      	b.n	80025c0 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	8979      	ldrh	r1, [r7, #10]
 80025b2:	2300      	movs	r3, #0
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fb54 	bl	8002c68 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d19a      	bne.n	8002500 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fab0 	bl	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_I2C_Mem_Write+0x20a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d101      	bne.n	80025e6 <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e01c      	b.n	8002620 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e01a      	b.n	8002620 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2220      	movs	r2, #32
 80025f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_I2C_Mem_Write+0x248>)
 80025fe:	400b      	ands	r3, r1
 8002600:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	fe00e800 	.word	0xfe00e800

0800262c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	460b      	mov	r3, r1
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b20      	cmp	r3, #32
 8002654:	f040 8107 	bne.w	8002866 <HAL_I2C_Mem_Read+0x23a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_I2C_Mem_Read+0x38>
 800265e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0ff      	b.n	8002868 <HAL_I2C_Mem_Read+0x23c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_I2C_Mem_Read+0x4a>
 8002672:	2302      	movs	r3, #2
 8002674:	e0f8      	b.n	8002868 <HAL_I2C_Mem_Read+0x23c>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800267e:	f7ff f887 	bl	8001790 <HAL_GetTick>
 8002682:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2319      	movs	r3, #25
 800268a:	2201      	movs	r2, #1
 800268c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f9d5 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0e3      	b.n	8002868 <HAL_I2C_Mem_Read+0x23c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2222      	movs	r2, #34	; 0x22
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a3a      	ldr	r2, [r7, #32]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c8:	88f8      	ldrh	r0, [r7, #6]
 80026ca:	893a      	ldrh	r2, [r7, #8]
 80026cc:	8979      	ldrh	r1, [r7, #10]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4603      	mov	r3, r0
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f92d 	bl	8002938 <I2C_RequestMemoryRead>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00f      	beq.n	8002704 <HAL_I2C_Mem_Read+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d105      	bne.n	80026f8 <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b7      	b.n	8002868 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e0b1      	b.n	8002868 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	2bff      	cmp	r3, #255	; 0xff
 800270c:	d90e      	bls.n	800272c <HAL_I2C_Mem_Read+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	22ff      	movs	r2, #255	; 0xff
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	b2da      	uxtb	r2, r3
 800271a:	8979      	ldrh	r1, [r7, #10]
 800271c:	4b54      	ldr	r3, [pc, #336]	; (8002870 <HAL_I2C_Mem_Read+0x244>)
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fa9f 	bl	8002c68 <I2C_TransferConfig>
 800272a:	e00f      	b.n	800274c <HAL_I2C_Mem_Read+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	b2da      	uxtb	r2, r3
 800273c:	8979      	ldrh	r1, [r7, #10]
 800273e:	4b4c      	ldr	r3, [pc, #304]	; (8002870 <HAL_I2C_Mem_Read+0x244>)
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fa8e 	bl	8002c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	2200      	movs	r2, #0
 8002754:	2104      	movs	r1, #4
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f972 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Mem_Read+0x13a>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e080      	b.n	8002868 <HAL_I2C_Mem_Read+0x23c>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	1c59      	adds	r1, r3, #1
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	6251      	str	r1, [r2, #36]	; 0x24
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002798:	2b00      	cmp	r3, #0
 800279a:	d135      	bne.n	8002808 <HAL_I2C_Mem_Read+0x1dc>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d030      	beq.n	8002808 <HAL_I2C_Mem_Read+0x1dc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	2200      	movs	r2, #0
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f945 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Mem_Read+0x194>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e053      	b.n	8002868 <HAL_I2C_Mem_Read+0x23c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2bff      	cmp	r3, #255	; 0xff
 80027c8:	d90e      	bls.n	80027e8 <HAL_I2C_Mem_Read+0x1bc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	22ff      	movs	r2, #255	; 0xff
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	8979      	ldrh	r1, [r7, #10]
 80027d8:	2300      	movs	r3, #0
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fa41 	bl	8002c68 <I2C_TransferConfig>
 80027e6:	e00f      	b.n	8002808 <HAL_I2C_Mem_Read+0x1dc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	8979      	ldrh	r1, [r7, #10]
 80027fa:	2300      	movs	r3, #0
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fa30 	bl	8002c68 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d19c      	bne.n	800274c <HAL_I2C_Mem_Read+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f98c 	bl	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_I2C_Mem_Read+0x206>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	2b04      	cmp	r3, #4
 8002828:	d101      	bne.n	800282e <HAL_I2C_Mem_Read+0x202>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e01c      	b.n	8002868 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e01a      	b.n	8002868 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2220      	movs	r2, #32
 8002838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_I2C_Mem_Read+0x248>)
 8002846:	400b      	ands	r3, r1
 8002848:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_I2C_Mem_Read+0x23c>
  }
  else
  {
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	80002400 	.word	0x80002400
 8002874:	fe00e800 	.word	0xfe00e800

08002878 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	817b      	strh	r3, [r7, #10]
 800288a:	460b      	mov	r3, r1
 800288c:	813b      	strh	r3, [r7, #8]
 800288e:	4613      	mov	r3, r2
 8002890:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	8979      	ldrh	r1, [r7, #10]
 8002898:	4b26      	ldr	r3, [pc, #152]	; (8002934 <I2C_RequestMemoryWrite+0xbc>)
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f9e1 	bl	8002c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	69b9      	ldr	r1, [r7, #24]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f902 	bl	8002ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <I2C_RequestMemoryWrite+0x4e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d101      	bne.n	80028c2 <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e034      	b.n	800292c <I2C_RequestMemoryWrite+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e032      	b.n	800292c <I2C_RequestMemoryWrite+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d105      	bne.n	80028d8 <I2C_RequestMemoryWrite+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	893a      	ldrh	r2, [r7, #8]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28
 80028d6:	e01b      	b.n	8002910 <I2C_RequestMemoryWrite+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	893a      	ldrh	r2, [r7, #8]
 80028de:	0a12      	lsrs	r2, r2, #8
 80028e0:	b292      	uxth	r2, r2
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	69b9      	ldr	r1, [r7, #24]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f8e2 	bl	8002ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <I2C_RequestMemoryWrite+0x8e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d101      	bne.n	8002902 <I2C_RequestMemoryWrite+0x8a>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e014      	b.n	800292c <I2C_RequestMemoryWrite+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e012      	b.n	800292c <I2C_RequestMemoryWrite+0xb4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	893a      	ldrh	r2, [r7, #8]
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2200      	movs	r2, #0
 8002918:	2180      	movs	r1, #128	; 0x80
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f890 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <I2C_RequestMemoryWrite+0xb2>
  {
    return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e000      	b.n	800292c <I2C_RequestMemoryWrite+0xb4>
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	80002000 	.word	0x80002000

08002938 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	4608      	mov	r0, r1
 8002942:	4611      	mov	r1, r2
 8002944:	461a      	mov	r2, r3
 8002946:	4603      	mov	r3, r0
 8002948:	817b      	strh	r3, [r7, #10]
 800294a:	460b      	mov	r3, r1
 800294c:	813b      	strh	r3, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	8979      	ldrh	r1, [r7, #10]
 8002958:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <I2C_RequestMemoryRead+0xbc>)
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2300      	movs	r3, #0
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f982 	bl	8002c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f8a3 	bl	8002ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <I2C_RequestMemoryRead+0x4c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	2b04      	cmp	r3, #4
 800297a:	d101      	bne.n	8002980 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e034      	b.n	80029ea <I2C_RequestMemoryRead+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e032      	b.n	80029ea <I2C_RequestMemoryRead+0xb2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d105      	bne.n	8002996 <I2C_RequestMemoryRead+0x5e>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	893a      	ldrh	r2, [r7, #8]
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
 8002994:	e01b      	b.n	80029ce <I2C_RequestMemoryRead+0x96>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	893a      	ldrh	r2, [r7, #8]
 800299c:	0a12      	lsrs	r2, r2, #8
 800299e:	b292      	uxth	r2, r2
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f883 	bl	8002ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <I2C_RequestMemoryRead+0x8c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d101      	bne.n	80029c0 <I2C_RequestMemoryRead+0x88>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e014      	b.n	80029ea <I2C_RequestMemoryRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e012      	b.n	80029ea <I2C_RequestMemoryRead+0xb2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	893a      	ldrh	r2, [r7, #8]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2140      	movs	r1, #64	; 0x40
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f831 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <I2C_RequestMemoryRead+0xb0>
  {
    return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e000      	b.n	80029ea <I2C_RequestMemoryRead+0xb2>
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	80002000 	.word	0x80002000

080029f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d103      	bne.n	8002a16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d007      	beq.n	8002a34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	6992      	ldr	r2, [r2, #24]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	619a      	str	r2, [r3, #24]
  }
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a50:	e01c      	b.n	8002a8c <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d018      	beq.n	8002a8c <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a60:	f7fe fe96 	bl	8001790 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	1ad2      	subs	r2, r2, r3
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d90d      	bls.n	8002a8c <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e00f      	b.n	8002aac <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	401a      	ands	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d0d3      	beq.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac0:	e02c      	b.n	8002b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f870 	bl	8002bac <I2C_IsAcknowledgeFailed>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e02a      	b.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d01e      	beq.n	8002b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ae4:	f7fe fe54 	bl	8001790 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	1ad2      	subs	r2, r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d913      	bls.n	8002b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e007      	b.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d1cb      	bne.n	8002ac2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b40:	e028      	b.n	8002b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f830 	bl	8002bac <I2C_IsAcknowledgeFailed>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e026      	b.n	8002ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d007      	beq.n	8002b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b5c:	f7fe fe18 	bl	8001790 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	1ad2      	subs	r2, r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d913      	bls.n	8002b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e007      	b.n	8002ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d1cf      	bne.n	8002b42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d148      	bne.n	8002c58 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bc6:	e01c      	b.n	8002c02 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d018      	beq.n	8002c02 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <I2C_IsAcknowledgeFailed+0x3a>
 8002bd6:	f7fe fddb 	bl	8001790 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	1ad2      	subs	r2, r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d90d      	bls.n	8002c02 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e02b      	b.n	8002c5a <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d1db      	bne.n	8002bc8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2210      	movs	r2, #16
 8002c16:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7ff fee9 	bl	80029f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <I2C_IsAcknowledgeFailed+0xb8>)
 8002c32:	400b      	ands	r3, r1
 8002c34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	fe00e800 	.word	0xfe00e800

08002c68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	4613      	mov	r3, r2
 8002c78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	0d5b      	lsrs	r3, r3, #21
 8002c88:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <I2C_TransferConfig+0x54>)
 8002c8e:	4303      	orrs	r3, r0
 8002c90:	43db      	mvns	r3, r3
 8002c92:	4019      	ands	r1, r3
 8002c94:	897b      	ldrh	r3, [r7, #10]
 8002c96:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002c9a:	7a7b      	ldrb	r3, [r7, #9]
 8002c9c:	041b      	lsls	r3, r3, #16
 8002c9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ca2:	4318      	orrs	r0, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4318      	orrs	r0, r3
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	4303      	orrs	r3, r0
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	03ff63ff 	.word	0x03ff63ff

08002cc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d138      	bne.n	8002d48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e032      	b.n	8002d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	; 0x24
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	6811      	ldr	r1, [r2, #0]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d139      	bne.n	8002de4 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e033      	b.n	8002de6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2224      	movs	r2, #36	; 0x24
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e000      	b.n	8002de6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002de4:	2302      	movs	r3, #2
  }
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df4:	b08f      	sub	sp, #60	; 0x3c
 8002df6:	af0a      	add	r7, sp, #40	; 0x28
 8002df8:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e10d      	b.n	8003024 <HAL_PCD_Init+0x232>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3385 	ldrb.w	r3, [r3, #901]	; 0x385
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f005 f949 	bl	80080b4 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2203      	movs	r2, #3
 8002e26:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 f895 	bl	8005f5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	687e      	ldr	r6, [r7, #4]
 8002e3c:	466d      	mov	r5, sp
 8002e3e:	f106 0410 	add.w	r4, r6, #16
 8002e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e52:	1d33      	adds	r3, r6, #4
 8002e54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e56:	6838      	ldr	r0, [r7, #0]
 8002e58:	f003 f863 	bl	8005f22 <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 f88c 	bl	8005f80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e04c      	b.n	8002f08 <HAL_PCD_Init+0x116>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	333d      	adds	r3, #61	; 0x3d
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	b2d8      	uxtb	r0, r3
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	333c      	adds	r3, #60	; 0x3c
 8002e96:	4602      	mov	r2, r0
 8002e98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	b298      	uxth	r0, r3
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3342      	adds	r3, #66	; 0x42
 8002eae:	4602      	mov	r2, r0
 8002eb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	333f      	adds	r3, #63	; 0x3f
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0;
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3344      	adds	r3, #68	; 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0;
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3348      	adds	r3, #72	; 0x48
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0;
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3350      	adds	r3, #80	; 0x50
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3301      	adds	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d8ad      	bhi.n	8002e6e <HAL_PCD_Init+0x7c>
  }
  
  for (index = 0; index < 15 ; index++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e052      	b.n	8002fbe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[index].is_in = 0;
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	f203 13e1 	addw	r3, r3, #481	; 0x1e1
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	b2d8      	uxtb	r0, r3
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002f44:	4602      	mov	r2, r0
 8002f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	b298      	uxth	r0, r3
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	3342      	adds	r3, #66	; 0x42
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f203 13e3 	addw	r3, r3, #483	; 0x1e3
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0;
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0;
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0;
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
  for (index = 0; index < 15 ; index++)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b0e      	cmp	r3, #14
 8002fc2:	d9a9      	bls.n	8002f18 <HAL_PCD_Init+0x126>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	687e      	ldr	r6, [r7, #4]
 8002fcc:	466d      	mov	r5, sp
 8002fce:	f106 0410 	add.w	r4, r6, #16
 8002fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fe2:	1d33      	adds	r3, r6, #4
 8002fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe6:	6838      	ldr	r0, [r7, #0]
 8002fe8:	f002 fff2 	bl	8005fd0 <USB_DevInit>

  hpcd->USB_Address = 0;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  hpcd->State= HAL_PCD_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2b01      	cmp	r3, #1
 8003002:	d102      	bne.n	800300a <HAL_PCD_Init+0x218>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f811 	bl	800302c <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	2b01      	cmp	r3, #1
 8003010:	d102      	bne.n	8003018 <HAL_PCD_Init+0x226>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f82e 	bl	8003074 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f003 f965 	bl	80062ec <USB_DevDisconnect>
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800302c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305e:	f043 0303 	orr.w	r3, r3, #3
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]

  hpcd->battery_charging_active = ENABLE; 
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	639a      	str	r2, [r3, #56]	; 0x38
  
  return HAL_OK;  
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2 
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <HAL_PWREx_GetVoltageRange+0x18>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif  
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40007000 	.word	0x40007000

080030c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d2:	d12f      	bne.n	8003134 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d4:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e0:	d037      	beq.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e2:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f0:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	0c9b      	lsrs	r3, r3, #18
 80030fe:	2232      	movs	r2, #50	; 0x32
 8003100:	fb02 f303 	mul.w	r3, r2, r3
 8003104:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8003106:	e002      	b.n	800310e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3b01      	subs	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x62>
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003120:	d0f2      	beq.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003122:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312e:	d110      	bne.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e00f      	b.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003134:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003140:	d007      	beq.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003142:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800314c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003150:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}  
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40007000 	.word	0x40007000
 8003164:	2000005c 	.word	0x2000005c
 8003168:	431bde83 	.word	0x431bde83

0800316c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply. 
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.  
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003170:	4a05      	ldr	r2, [pc, #20]	; (8003188 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800317a:	6053      	str	r3, [r2, #4]
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40007000 	.word	0x40007000

0800318c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af02      	add	r7, sp, #8
 8003192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003198:	f7fe fafa 	bl	8001790 <HAL_GetTick>
 800319c:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e06f      	b.n	8003288 <HAL_QSPI_Init+0xfc>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_QSPI_Init+0x2c>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e067      	b.n	8003288 <HAL_QSPI_Init+0xfc>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <HAL_QSPI_Init+0x58>
  {  
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f004 fcc1 	bl	8007b5c <HAL_QSPI_MspInit>
    
    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80031da:	f241 3188 	movw	r1, #5000	; 0x1388
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f858 	bl	8003294 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, 
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	f422 6170 	bic.w	r1, r2, #3840	; 0xf00
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6892      	ldr	r2, [r2, #8]
 80031f6:	3a01      	subs	r2, #1
 80031f8:	0212      	lsls	r2, r2, #8
 80031fa:	430a      	orrs	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2200      	movs	r2, #0
 8003208:	2120      	movs	r1, #32
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f850 	bl	80032b0 <QSPI_WaitFlagStateUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d131      	bne.n	800327e <HAL_QSPI_Init+0xf2>
#if defined(QUADSPI_CR_DFM) 
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), 
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) | 
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT), 
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003228:	f023 0310 	bic.w	r3, r3, #16
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	6849      	ldr	r1, [r1, #4]
 8003230:	0608      	lsls	r0, r1, #24
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	68c9      	ldr	r1, [r1, #12]
 8003236:	4301      	orrs	r1, r0
 8003238:	430b      	orrs	r3, r1
 800323a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) | 
                hqspi->Init.SampleShifting));
#endif
    
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_QSPI_Init+0x104>)
 8003248:	400b      	ands	r3, r1
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	6909      	ldr	r1, [r1, #16]
 800324e:	0408      	lsls	r0, r1, #16
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	6949      	ldr	r1, [r1, #20]
 8003254:	4308      	orrs	r0, r1
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	6989      	ldr	r1, [r1, #24]
 800325a:	4301      	orrs	r1, r0
 800325c:	430b      	orrs	r3, r1
 800325e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) | 
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	ffe0f8fe 	.word	0xffe0f8fe

08003294 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80032c0:	e01a      	b.n	80032f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d016      	beq.n	80032f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80032d0:	f7fe fa5e 	bl	8001790 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	1ad2      	subs	r2, r2, r3
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d90b      	bls.n	80032f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2204      	movs	r2, #4
 80032e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e00e      	b.n	8003316 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	bf14      	ite	ne
 8003306:	2301      	movne	r3, #1
 8003308:	2300      	moveq	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	429a      	cmp	r2, r3
 8003312:	d1d6      	bne.n	80032c2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80d0 	beq.w	80034da <HAL_RCC_OscConfig+0x1ba>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800333a:	4ba1      	ldr	r3, [pc, #644]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b00      	cmp	r3, #0
 8003344:	d179      	bne.n	800343a <HAL_RCC_OscConfig+0x11a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003346:	4b9e      	ldr	r3, [pc, #632]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x3e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x3e>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e33c      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	4b97      	ldr	r3, [pc, #604]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_RCC_OscConfig+0x58>
 800336e:	4b94      	ldr	r3, [pc, #592]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003376:	e005      	b.n	8003384 <HAL_RCC_OscConfig+0x64>
 8003378:	4b91      	ldr	r3, [pc, #580]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003384:	429a      	cmp	r2, r3
 8003386:	d923      	bls.n	80033d0 <HAL_RCC_OscConfig+0xb0>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fd25 	bl	8003ddc <RCC_SetFlashLatencyFromMSIRange>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCC_OscConfig+0x7c>
          {
            return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e31d      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800339c:	4a88      	ldr	r2, [pc, #544]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 800339e:	4b88      	ldr	r3, [pc, #544]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f043 0308 	orr.w	r3, r3, #8
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4985      	ldr	r1, [pc, #532]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80033aa:	4b85      	ldr	r3, [pc, #532]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ba:	4981      	ldr	r1, [pc, #516]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80033bc:	4b80      	ldr	r3, [pc, #512]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
 80033ce:	e022      	b.n	8003416 <HAL_RCC_OscConfig+0xf6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033d0:	4a7b      	ldr	r2, [pc, #492]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80033d2:	4b7b      	ldr	r3, [pc, #492]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f043 0308 	orr.w	r3, r3, #8
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4978      	ldr	r1, [pc, #480]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80033de:	4b78      	ldr	r3, [pc, #480]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ee:	4974      	ldr	r1, [pc, #464]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80033f0:	4b73      	ldr	r3, [pc, #460]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fce8 	bl	8003ddc <RCC_SetFlashLatencyFromMSIRange>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e2e0      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003416:	f000 fbfd 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 800341a:	4601      	mov	r1, r0
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	4a67      	ldr	r2, [pc, #412]	; (80035c4 <HAL_RCC_OscConfig+0x2a4>)
 8003428:	5cd3      	ldrb	r3, [r2, r3]
 800342a:	fa21 f303 	lsr.w	r3, r1, r3
 800342e:	4a66      	ldr	r2, [pc, #408]	; (80035c8 <HAL_RCC_OscConfig+0x2a8>)
 8003430:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8003432:	2000      	movs	r0, #0
 8003434:	f7fe f982 	bl	800173c <HAL_InitTick>
 8003438:	e04f      	b.n	80034da <HAL_RCC_OscConfig+0x1ba>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d032      	beq.n	80034a8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003442:	4a5f      	ldr	r2, [pc, #380]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003444:	4b5e      	ldr	r3, [pc, #376]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800344e:	f7fe f99f 	bl	8001790 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003456:	f7fe f99b 	bl	8001790 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e2b7      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003468:	4b55      	ldr	r3, [pc, #340]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x136>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003474:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003476:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	494f      	ldr	r1, [pc, #316]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003482:	4b4f      	ldr	r3, [pc, #316]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003492:	494b      	ldr	r1, [pc, #300]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003494:	4b4a      	ldr	r3, [pc, #296]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
 80034a6:	e018      	b.n	80034da <HAL_RCC_OscConfig+0x1ba>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034a8:	4a45      	ldr	r2, [pc, #276]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80034aa:	4b45      	ldr	r3, [pc, #276]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034b4:	f7fe f96c 	bl	8001790 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034bc:	f7fe f968 	bl	8001790 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e284      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80034ce:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x19c>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d07a      	beq.n	80035dc <HAL_RCC_OscConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80034e6:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034f2:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d111      	bne.n	8003522 <HAL_RCC_OscConfig+0x202>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034fe:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b03      	cmp	r3, #3
 8003508:	d10b      	bne.n	8003522 <HAL_RCC_OscConfig+0x202>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d061      	beq.n	80035da <HAL_RCC_OscConfig+0x2ba>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d15d      	bne.n	80035da <HAL_RCC_OscConfig+0x2ba>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e25a      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x21a>
 800352c:	4a24      	ldr	r2, [pc, #144]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 800352e:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	e01d      	b.n	8003576 <HAL_RCC_OscConfig+0x256>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003542:	d10c      	bne.n	800355e <HAL_RCC_OscConfig+0x23e>
 8003544:	4a1e      	ldr	r2, [pc, #120]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003546:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	e00b      	b.n	8003576 <HAL_RCC_OscConfig+0x256>
 800355e:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 800356c:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003574:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d013      	beq.n	80035a6 <HAL_RCC_OscConfig+0x286>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7fe f907 	bl	8001790 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003586:	f7fe f903 	bl	8001790 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b64      	cmp	r3, #100	; 0x64
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e21f      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_OscConfig+0x2a0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x266>
 80035a4:	e01a      	b.n	80035dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fe f8f3 	bl	8001790 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80035ac:	e00e      	b.n	80035cc <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ae:	f7fe f8ef 	bl	8001790 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	; 0x64
 80035ba:	d907      	bls.n	80035cc <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e20b      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
 80035c0:	40021000 	.word	0x40021000
 80035c4:	0800b66c 	.word	0x0800b66c
 80035c8:	2000005c 	.word	0x2000005c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80035cc:	4ba9      	ldr	r3, [pc, #676]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ea      	bne.n	80035ae <HAL_RCC_OscConfig+0x28e>
 80035d8:	e000      	b.n	80035dc <HAL_RCC_OscConfig+0x2bc>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d069      	beq.n	80036bc <HAL_RCC_OscConfig+0x39c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80035e8:	4ba2      	ldr	r3, [pc, #648]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d00b      	beq.n	800360c <HAL_RCC_OscConfig+0x2ec>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035f4:	4b9f      	ldr	r3, [pc, #636]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	d11c      	bne.n	800363a <HAL_RCC_OscConfig+0x31a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003600:	4b9c      	ldr	r3, [pc, #624]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d116      	bne.n	800363a <HAL_RCC_OscConfig+0x31a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800360c:	4b99      	ldr	r3, [pc, #612]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_OscConfig+0x304>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e1d9      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4993      	ldr	r1, [pc, #588]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003626:	4b93      	ldr	r3, [pc, #588]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	061b      	lsls	r3, r3, #24
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003638:	e040      	b.n	80036bc <HAL_RCC_OscConfig+0x39c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d023      	beq.n	800368a <HAL_RCC_OscConfig+0x36a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003642:	4a8c      	ldr	r2, [pc, #560]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003644:	4b8b      	ldr	r3, [pc, #556]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364e:	f7fe f89f 	bl	8001790 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x348>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe f89b 	bl	8001790 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x348>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1b7      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003668:	4b82      	ldr	r3, [pc, #520]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x336>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	497f      	ldr	r1, [pc, #508]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003676:	4b7f      	ldr	r3, [pc, #508]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	061b      	lsls	r3, r3, #24
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
 8003688:	e018      	b.n	80036bc <HAL_RCC_OscConfig+0x39c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4a7a      	ldr	r2, [pc, #488]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 800368c:	4b79      	ldr	r3, [pc, #484]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fe f87b 	bl	8001790 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x390>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369e:	f7fe f877 	bl	8001790 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e193      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80036b0:	4b70      	ldr	r3, [pc, #448]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d03c      	beq.n	8003742 <HAL_RCC_OscConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01c      	beq.n	800370a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d0:	4a68      	ldr	r2, [pc, #416]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80036d2:	4b68      	ldr	r3, [pc, #416]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80036d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fe f856 	bl	8001790 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fe f852 	bl	8001790 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e16e      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80036fa:	4b5e      	ldr	r3, [pc, #376]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80036fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ef      	beq.n	80036e8 <HAL_RCC_OscConfig+0x3c8>
 8003708:	e01b      	b.n	8003742 <HAL_RCC_OscConfig+0x422>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370a:	4a5a      	ldr	r2, [pc, #360]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7fe f839 	bl	8001790 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x414>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003722:	f7fe f835 	bl	8001790 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x414>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e151      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8003734:	4b4f      	ldr	r3, [pc, #316]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ef      	bne.n	8003722 <HAL_RCC_OscConfig+0x402>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80a6 	beq.w	800389c <HAL_RCC_OscConfig+0x57c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003750:	2300      	movs	r3, #0
 8003752:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003754:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	4a44      	ldr	r2, [pc, #272]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003762:	4b44      	ldr	r3, [pc, #272]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376a:	6593      	str	r3, [r2, #88]	; 0x58
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003778:	2301      	movs	r3, #1
 800377a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377c:	4b3e      	ldr	r3, [pc, #248]	; (8003878 <HAL_RCC_OscConfig+0x558>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d118      	bne.n	80037ba <HAL_RCC_OscConfig+0x49a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4a3b      	ldr	r2, [pc, #236]	; (8003878 <HAL_RCC_OscConfig+0x558>)
 800378a:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCC_OscConfig+0x558>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003794:	f7fd fffc 	bl	8001790 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x48e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fd fff8 	bl	8001790 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e114      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ae:	4b32      	ldr	r3, [pc, #200]	; (8003878 <HAL_RCC_OscConfig+0x558>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d108      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4b4>
 80037c2:	4a2c      	ldr	r2, [pc, #176]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80037c4:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d2:	e024      	b.n	800381e <HAL_RCC_OscConfig+0x4fe>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d110      	bne.n	80037fe <HAL_RCC_OscConfig+0x4de>
 80037dc:	4a25      	ldr	r2, [pc, #148]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80037de:	4b25      	ldr	r3, [pc, #148]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80037ee:	4b21      	ldr	r3, [pc, #132]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037fc:	e00f      	b.n	800381e <HAL_RCC_OscConfig+0x4fe>
 80037fe:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003800:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800380e:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	f023 0304 	bic.w	r3, r3, #4
 800381a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <HAL_RCC_OscConfig+0x534>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7fd ffb3 	bl	8001790 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x524>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fd ffaf 	bl	8001790 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x524>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0c9      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_OscConfig+0x554>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ed      	beq.n	800382e <HAL_RCC_OscConfig+0x50e>
 8003852:	e01a      	b.n	800388a <HAL_RCC_OscConfig+0x56a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fd ff9c 	bl	8001790 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800385a:	e00f      	b.n	800387c <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fd ff98 	bl	8001790 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d906      	bls.n	800387c <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e0b2      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800387c:	4b58      	ldr	r3, [pc, #352]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e8      	bne.n	800385c <HAL_RCC_OscConfig+0x53c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_RCC_OscConfig+0x57c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003890:	4a53      	ldr	r2, [pc, #332]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 8003892:	4b53      	ldr	r3, [pc, #332]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8098 	beq.w	80039d6 <HAL_RCC_OscConfig+0x6b6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a6:	4b4e      	ldr	r3, [pc, #312]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b0c      	cmp	r3, #12
 80038b0:	f000 808f 	beq.w	80039d2 <HAL_RCC_OscConfig+0x6b2>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d156      	bne.n	800396a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038bc:	4a48      	ldr	r2, [pc, #288]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 80038be:	4b48      	ldr	r3, [pc, #288]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fd ff62 	bl	8001790 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x5c2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fd ff5e 	bl	8001790 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x5c2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e07a      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80038e2:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5b0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ee:	493c      	ldr	r1, [pc, #240]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	3b01      	subs	r3, #1
 80038f6:	011a      	lsls	r2, r3, #4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	045b      	lsls	r3, r3, #17
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	3b01      	subs	r3, #1
 8003918:	055b      	lsls	r3, r3, #21
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	065b      	lsls	r3, r3, #25
 8003926:	4313      	orrs	r3, r2
 8003928:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392a:	4a2d      	ldr	r2, [pc, #180]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 800392c:	4b2c      	ldr	r3, [pc, #176]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003934:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003936:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 8003938:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003940:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7fd ff25 	bl	8001790 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394a:	f7fd ff21 	bl	8001790 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e03d      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800395c:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x62a>
 8003968:	e035      	b.n	80039d6 <HAL_RCC_OscConfig+0x6b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396a:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 800396c:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003974:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <HAL_RCC_OscConfig+0x67a>
#if defined(RCC_PLLSAI2_SUPPORT)
           &&
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8003982:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           &&
 800398a:	2b00      	cmp	r3, #0
 800398c:	d105      	bne.n	800399a <HAL_RCC_OscConfig+0x67a>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800398e:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 8003990:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f023 0303 	bic.w	r3, r3, #3
 8003998:	60d3      	str	r3, [r2, #12]
        }

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800399a:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039aa:	f7fd fef1 	bl	8001790 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x6a4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b2:	f7fd feed 	bl	8001790 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x6a4>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e009      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCC_OscConfig+0x6c0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f0      	bne.n	80039b2 <HAL_RCC_OscConfig+0x692>
 80039d0:	e001      	b.n	80039d6 <HAL_RCC_OscConfig+0x6b6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_RCC_OscConfig+0x6b8>
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000

080039e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80039f2:	4b84      	ldr	r3, [pc, #528]	; (8003c04 <HAL_RCC_ClockConfig+0x220>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0207 	and.w	r2, r3, #7
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d210      	bcs.n	8003a22 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a00:	4980      	ldr	r1, [pc, #512]	; (8003c04 <HAL_RCC_ClockConfig+0x220>)
 8003a02:	4b80      	ldr	r3, [pc, #512]	; (8003c04 <HAL_RCC_ClockConfig+0x220>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 0207 	bic.w	r2, r3, #7
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8003a10:	4b7c      	ldr	r3, [pc, #496]	; (8003c04 <HAL_RCC_ClockConfig+0x220>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0207 	and.w	r2, r3, #7
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0ec      	b.n	8003bfc <HAL_RCC_ClockConfig+0x218>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 808e 	beq.w	8003b4c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d107      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x64>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003a38:	4b73      	ldr	r3, [pc, #460]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d121      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xa4>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0d9      	b.n	8003bfc <HAL_RCC_ClockConfig+0x218>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x7c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003a50:	4b6d      	ldr	r3, [pc, #436]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d115      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0cd      	b.n	8003bfc <HAL_RCC_ClockConfig+0x218>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x94>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003a68:	4b67      	ldr	r3, [pc, #412]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0c1      	b.n	8003bfc <HAL_RCC_ClockConfig+0x218>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003a78:	4b63      	ldr	r3, [pc, #396]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b9      	b.n	8003bfc <HAL_RCC_ClockConfig+0x218>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a88:	495f      	ldr	r1, [pc, #380]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003a8a:	4b5f      	ldr	r3, [pc, #380]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9a:	f7fd fe79 	bl	8001790 <HAL_GetTick>
 8003a9e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d112      	bne.n	8003ace <HAL_RCC_ClockConfig+0xea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa8:	e00a      	b.n	8003ac0 <HAL_RCC_ClockConfig+0xdc>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aaa:	f7fd fe71 	bl	8001790 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0xdc>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e09d      	b.n	8003bfc <HAL_RCC_ClockConfig+0x218>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ac0:	4b51      	ldr	r3, [pc, #324]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	d1ee      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xc6>
 8003acc:	e03e      	b.n	8003b4c <HAL_RCC_ClockConfig+0x168>
        }
      }
    }
    else
    {
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d112      	bne.n	8003afc <HAL_RCC_ClockConfig+0x118>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fd fe5a 	bl	8001790 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e086      	b.n	8003bfc <HAL_RCC_ClockConfig+0x218>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8003aee:	4b46      	ldr	r3, [pc, #280]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d1ee      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xf4>
 8003afa:	e027      	b.n	8003b4c <HAL_RCC_ClockConfig+0x168>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d11d      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_ClockConfig+0x138>
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b06:	f7fd fe43 	bl	8001790 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_ClockConfig+0x138>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e06f      	b.n	8003bfc <HAL_RCC_ClockConfig+0x218>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8003b1c:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ee      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x122>
 8003b28:	e010      	b.n	8003b4c <HAL_RCC_ClockConfig+0x168>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2a:	f7fd fe31 	bl	8001790 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_ClockConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e05d      	b.n	8003bfc <HAL_RCC_ClockConfig+0x218>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8003b40:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d1ee      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x146>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	492b      	ldr	r1, [pc, #172]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <HAL_RCC_ClockConfig+0x220>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0207 	and.w	r2, r3, #7
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d910      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b78:	4922      	ldr	r1, [pc, #136]	; (8003c04 <HAL_RCC_ClockConfig+0x220>)
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_RCC_ClockConfig+0x220>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 0207 	bic.w	r2, r3, #7
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8003b88:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <HAL_RCC_ClockConfig+0x220>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0207 	and.w	r2, r3, #7
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e030      	b.n	8003bfc <HAL_RCC_ClockConfig+0x218>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba6:	4918      	ldr	r1, [pc, #96]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc4:	4910      	ldr	r1, [pc, #64]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bd8:	f000 f81c 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8003bdc:	4601      	mov	r1, r0
 8003bde:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_RCC_ClockConfig+0x224>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	4a08      	ldr	r2, [pc, #32]	; (8003c0c <HAL_RCC_ClockConfig+0x228>)
 8003bea:	5cd3      	ldrb	r3, [r2, r3]
 8003bec:	fa21 f303 	lsr.w	r3, r1, r3
 8003bf0:	4a07      	ldr	r2, [pc, #28]	; (8003c10 <HAL_RCC_ClockConfig+0x22c>)
 8003bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f7fd fda1 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40022000 	.word	0x40022000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	0800b66c 	.word	0x0800b66c
 8003c10:	2000005c 	.word	0x2000005c

08003c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	2302      	movs	r3, #2
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8003c32:	4b4c      	ldr	r3, [pc, #304]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8003c3e:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d127      	bne.n	8003c9a <HAL_RCC_GetSysClockFreq+0x86>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8003c4a:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d121      	bne.n	8003c9a <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8003c56:	4b43      	ldr	r3, [pc, #268]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_GetSysClockFreq+0x5e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c62:	4b40      	ldr	r3, [pc, #256]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e005      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x6a>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c72:	4b3c      	ldr	r3, [pc, #240]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c7e:	4a3a      	ldr	r2, [pc, #232]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x154>)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c86:	617b      	str	r3, [r7, #20]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d113      	bne.n	8003cbc <HAL_RCC_GetSysClockFreq+0xa8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	60fb      	str	r3, [r7, #12]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8003c98:	e010      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0xa8>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c9a:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d102      	bne.n	8003cac <HAL_RCC_GetSysClockFreq+0x98>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ca6:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x158>)
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e007      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cac:	4b2d      	ldr	r3, [pc, #180]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cb8:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003cba:	60fb      	str	r3, [r7, #12]
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cbc:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	d145      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x140>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cc8:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	3301      	adds	r3, #1
 8003cde:	603b      	str	r3, [r7, #0]

    switch (pllsource)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d002      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0xd8>
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d00d      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0xf2>
 8003cea:	e019      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x10c>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cec:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x158>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003cf6:	68d2      	ldr	r2, [r2, #12]
 8003cf8:	0a12      	lsrs	r2, r2, #8
 8003cfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	613b      	str	r3, [r7, #16]
      break;
 8003d04:	e019      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d06:	4a1a      	ldr	r2, [pc, #104]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003d10:	68d2      	ldr	r2, [r2, #12]
 8003d12:	0a12      	lsrs	r2, r2, #8
 8003d14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	613b      	str	r3, [r7, #16]
      break;
 8003d1e:	e00c      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x126>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d28:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003d2a:	68d2      	ldr	r2, [r2, #12]
 8003d2c:	0a12      	lsrs	r2, r2, #8
 8003d2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	613b      	str	r3, [r7, #16]
      break;
 8003d38:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x150>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	0e5b      	lsrs	r3, r3, #25
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	3301      	adds	r3, #1
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003d54:	68fb      	ldr	r3, [r7, #12]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	0800b684 	.word	0x0800b684
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	007a1200 	.word	0x007a1200

08003d74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d78:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	2000005c 	.word	0x2000005c

08003d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d90:	f7ff fff0 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003d94:	4601      	mov	r1, r0
 8003d96:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4a03      	ldr	r2, [pc, #12]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da2:	5cd3      	ldrb	r3, [r2, r3]
 8003da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	0800b67c 	.word	0x0800b67c

08003db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db8:	f7ff ffdc 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003dbc:	4601      	mov	r1, r0
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0adb      	lsrs	r3, r3, #11
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4a03      	ldr	r2, [pc, #12]	; (8003dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dca:	5cd3      	ldrb	r3, [r2, r3]
 8003dcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	0800b67c 	.word	0x0800b67c

08003ddc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dec:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003df8:	f7ff f954 	bl	80030a4 <HAL_PWREx_GetVoltageRange>
 8003dfc:	6178      	str	r0, [r7, #20]
 8003dfe:	e014      	b.n	8003e2a <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e02:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e18:	f7ff f944 	bl	80030a4 <HAL_PWREx_GetVoltageRange>
 8003e1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e20:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e30:	d10b      	bne.n	8003e4a <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b80      	cmp	r3, #128	; 0x80
 8003e36:	d919      	bls.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2ba0      	cmp	r3, #160	; 0xa0
 8003e3c:	d902      	bls.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e3e:	2302      	movs	r3, #2
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	e013      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e44:	2301      	movs	r3, #1
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	e010      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x90>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d902      	bls.n	8003e56 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e50:	2303      	movs	r3, #3
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	e00a      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b80      	cmp	r3, #128	; 0x80
 8003e5a:	d102      	bne.n	8003e62 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	e004      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b70      	cmp	r3, #112	; 0x70
 8003e66:	d101      	bne.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e68:	2301      	movs	r3, #1
 8003e6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e6c:	490b      	ldr	r1, [pc, #44]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 0207 	bic.w	r2, r3, #7
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8003e7c:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0207 	and.w	r2, r3, #7
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d001      	beq.n	8003e8e <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40022000 	.word	0x40022000

08003ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d03f      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ecc:	d01c      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed2:	d802      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ed8:	e01f      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003eda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ede:	d003      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003ee0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ee4:	d01c      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8003ee6:	e018      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ee8:	4a82      	ldr	r2, [pc, #520]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003eea:	4b82      	ldr	r3, [pc, #520]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ef4:	e015      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fac3 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f06:	e00c      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3320      	adds	r3, #32
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fbac 	bl	800466c <RCCEx_PLLSAI2_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f18:	e003      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x82>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 8003f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f22:	7cfb      	ldrb	r3, [r7, #19]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10b      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f28:	4972      	ldr	r1, [pc, #456]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f2a:	4b72      	ldr	r3, [pc, #456]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f3e:	e001      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d03f      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f58:	d01c      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f5e:	d802      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00e      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f64:	e01f      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f6a:	d003      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f70:	d01c      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f72:	e018      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f74:	4a5f      	ldr	r2, [pc, #380]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f76:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f80:	e015      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3304      	adds	r3, #4
 8003f86:	2100      	movs	r1, #0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fa7d 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f92:	e00c      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3320      	adds	r3, #32
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fb66 	bl	800466c <RCCEx_PLLSAI2_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fa4:	e003      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	74fb      	strb	r3, [r7, #19]
      break;
 8003faa:	e000      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fae:	7cfb      	ldrb	r3, [r7, #19]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10b      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fb4:	494f      	ldr	r1, [pc, #316]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fb6:	4b4f      	ldr	r3, [pc, #316]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fca:	e001      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 809a 	beq.w	8004112 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe2:	4b44      	ldr	r3, [pc, #272]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10d      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	4a41      	ldr	r2, [pc, #260]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ff0:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004006:	2301      	movs	r3, #1
 8004008:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800400a:	4a3b      	ldr	r2, [pc, #236]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800400c:	4b3a      	ldr	r3, [pc, #232]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004014:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004016:	f7fd fbbb 	bl	8001790 <HAL_GetTick>
 800401a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800401c:	e009      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401e:	f7fd fbb7 	bl	8001790 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d902      	bls.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	74fb      	strb	r3, [r7, #19]
        break;
 8004030:	e005      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8004032:	4b31      	ldr	r3, [pc, #196]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0ef      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d15b      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004044:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01f      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	429a      	cmp	r2, r3
 8004060:	d019      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800406e:	4a21      	ldr	r2, [pc, #132]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800407e:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004080:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800408e:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d016      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fd fb76 	bl	8001790 <HAL_GetTick>
 80040a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80040a6:	e00b      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7fd fb72 	bl	8001790 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d902      	bls.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	74fb      	strb	r3, [r7, #19]
            break;
 80040be:	e006      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0ec      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }

      if(ret == HAL_OK)
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10c      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d4:	4907      	ldr	r1, [pc, #28]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040ec:	e008      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ee:	7cfb      	ldrb	r3, [r7, #19]
 80040f0:	74bb      	strb	r3, [r7, #18]
 80040f2:	e005      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004100:	7c7b      	ldrb	r3, [r7, #17]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004106:	4a9e      	ldr	r2, [pc, #632]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004108:	4b9d      	ldr	r3, [pc, #628]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004110:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411e:	4998      	ldr	r1, [pc, #608]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004120:	4b97      	ldr	r3, [pc, #604]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f023 0203 	bic.w	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004140:	498f      	ldr	r1, [pc, #572]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004142:	4b8f      	ldr	r3, [pc, #572]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	f023 020c 	bic.w	r2, r3, #12
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004162:	4987      	ldr	r1, [pc, #540]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004164:	4b86      	ldr	r3, [pc, #536]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004184:	497e      	ldr	r1, [pc, #504]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004186:	4b7e      	ldr	r3, [pc, #504]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0310 	and.w	r3, r3, #16
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041a6:	4976      	ldr	r1, [pc, #472]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80041a8:	4b75      	ldr	r3, [pc, #468]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c8:	496d      	ldr	r1, [pc, #436]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80041ca:	4b6d      	ldr	r3, [pc, #436]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ea:	4965      	ldr	r1, [pc, #404]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80041ec:	4b64      	ldr	r3, [pc, #400]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800420c:	495c      	ldr	r1, [pc, #368]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800420e:	4b5c      	ldr	r3, [pc, #368]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800422e:	4954      	ldr	r1, [pc, #336]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004230:	4b53      	ldr	r3, [pc, #332]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004236:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004250:	494b      	ldr	r1, [pc, #300]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004252:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004258:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004272:	4943      	ldr	r1, [pc, #268]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004274:	4b42      	ldr	r3, [pc, #264]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d028      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004294:	493a      	ldr	r1, [pc, #232]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004296:	4b3a      	ldr	r3, [pc, #232]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b2:	d106      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b4:	4a32      	ldr	r2, [pc, #200]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80042b6:	4b32      	ldr	r3, [pc, #200]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042be:	60d3      	str	r3, [r2, #12]
 80042c0:	e011      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	2101      	movs	r1, #1
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f8d8 	bl	8004488 <RCCEx_PLLSAI1_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x446>
        {
          /* set overall return value */
          status = ret;
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d028      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042f2:	4923      	ldr	r1, [pc, #140]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80042f4:	4b22      	ldr	r3, [pc, #136]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004310:	d106      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431c:	60d3      	str	r3, [r2, #12]
 800431e:	e011      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004328:	d10c      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	2101      	movs	r1, #1
 8004330:	4618      	mov	r0, r3
 8004332:	f000 f8a9 	bl	8004488 <RCCEx_PLLSAI1_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433a:	7cfb      	ldrb	r3, [r7, #19]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02b      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004350:	490b      	ldr	r1, [pc, #44]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800436a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800436e:	d109      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004370:	4a03      	ldr	r2, [pc, #12]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004372:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437a:	60d3      	str	r3, [r2, #12]
 800437c:	e014      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800438c:	d10c      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	2101      	movs	r1, #1
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f877 	bl	8004488 <RCCEx_PLLSAI1_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 80043a4:	7cfb      	ldrb	r3, [r7, #19]
 80043a6:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02f      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043b4:	492b      	ldr	r1, [pc, #172]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043b6:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d2:	d10d      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f854 	bl	8004488 <RCCEx_PLLSAI1_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d014      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 80043ea:	7cfb      	ldrb	r3, [r7, #19]
 80043ec:	74bb      	strb	r3, [r7, #18]
 80043ee:	e011      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f8:	d10c      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3320      	adds	r3, #32
 80043fe:	2102      	movs	r1, #2
 8004400:	4618      	mov	r0, r3
 8004402:	f000 f933 	bl	800466c <RCCEx_PLLSAI2_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004420:	4910      	ldr	r1, [pc, #64]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004442:	4908      	ldr	r1, [pc, #32]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004444:	4b07      	ldr	r3, [pc, #28]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800445a:	7cbb      	ldrb	r3, [r7, #18]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40021000 	.word	0x40021000

08004468 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800446c:	4a05      	ldr	r2, [pc, #20]	; (8004484 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f043 0304 	orr.w	r3, r3, #4
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	bf00      	nop
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000

08004488 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800449a:	4b73      	ldr	r3, [pc, #460]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d018      	beq.n	80044d8 <RCCEx_PLLSAI1_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044a6:	4b70      	ldr	r3, [pc, #448]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0203 	and.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d10d      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0x4a>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
       ||
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <RCCEx_PLLSAI1_Config+0x4a>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044be:	4b6a      	ldr	r3, [pc, #424]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
       ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d044      	beq.n	800455c <RCCEx_PLLSAI1_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
 80044d6:	e041      	b.n	800455c <RCCEx_PLLSAI1_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d00c      	beq.n	80044fa <RCCEx_PLLSAI1_Config+0x72>
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d013      	beq.n	800450c <RCCEx_PLLSAI1_Config+0x84>
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d120      	bne.n	800452a <RCCEx_PLLSAI1_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044e8:	4b5f      	ldr	r3, [pc, #380]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11d      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f8:	e01a      	b.n	8004530 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044fa:	4b5b      	ldr	r3, [pc, #364]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <RCCEx_PLLSAI1_Config+0xac>
      {
        status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450a:	e013      	b.n	8004534 <RCCEx_PLLSAI1_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800450c:	4b56      	ldr	r3, [pc, #344]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10f      	bne.n	8004538 <RCCEx_PLLSAI1_Config+0xb0>
 8004518:	4b53      	ldr	r3, [pc, #332]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <RCCEx_PLLSAI1_Config+0xb0>
      {
        status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004528:	e006      	b.n	8004538 <RCCEx_PLLSAI1_Config+0xb0>
    default:
      status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
      break;
 800452e:	e004      	b.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8004530:	bf00      	nop
 8004532:	e002      	b.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8004534:	bf00      	nop
 8004536:	e000      	b.n	800453a <RCCEx_PLLSAI1_Config+0xb2>
      break;
 8004538:	bf00      	nop
    }

    if(status == HAL_OK)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10d      	bne.n	800455c <RCCEx_PLLSAI1_Config+0xd4>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004540:	4849      	ldr	r0, [pc, #292]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004542:	4b49      	ldr	r3, [pc, #292]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6819      	ldr	r1, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	430b      	orrs	r3, r1
 8004558:	4313      	orrs	r3, r2
 800455a:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d17d      	bne.n	800465e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004562:	4a41      	ldr	r2, [pc, #260]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004564:	4b40      	ldr	r3, [pc, #256]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800456c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456e:	f7fd f90f 	bl	8001790 <HAL_GetTick>
 8004572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8004574:	e009      	b.n	800458a <RCCEx_PLLSAI1_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004576:	f7fd f90b 	bl	8001790 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d902      	bls.n	800458a <RCCEx_PLLSAI1_Config+0x102>
      {
        status = HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	73fb      	strb	r3, [r7, #15]
        break;
 8004588:	e005      	b.n	8004596 <RCCEx_PLLSAI1_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800458a:	4b37      	ldr	r3, [pc, #220]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1ef      	bne.n	8004576 <RCCEx_PLLSAI1_Config+0xee>
      }
    }

    if(status == HAL_OK)
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d160      	bne.n	800465e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d111      	bne.n	80045c6 <RCCEx_PLLSAI1_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a2:	4831      	ldr	r0, [pc, #196]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a4:	4b30      	ldr	r3, [pc, #192]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6892      	ldr	r2, [r2, #8]
 80045b4:	0211      	lsls	r1, r2, #8
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68d2      	ldr	r2, [r2, #12]
 80045ba:	0912      	lsrs	r2, r2, #4
 80045bc:	0452      	lsls	r2, r2, #17
 80045be:	430a      	orrs	r2, r1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	6103      	str	r3, [r0, #16]
 80045c4:	e027      	b.n	8004616 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d112      	bne.n	80045f2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045cc:	4826      	ldr	r0, [pc, #152]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ce:	4b26      	ldr	r3, [pc, #152]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6892      	ldr	r2, [r2, #8]
 80045de:	0211      	lsls	r1, r2, #8
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6912      	ldr	r2, [r2, #16]
 80045e4:	0852      	lsrs	r2, r2, #1
 80045e6:	3a01      	subs	r2, #1
 80045e8:	0552      	lsls	r2, r2, #21
 80045ea:	430a      	orrs	r2, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	6103      	str	r3, [r0, #16]
 80045f0:	e011      	b.n	8004616 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f2:	481d      	ldr	r0, [pc, #116]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f4:	4b1c      	ldr	r3, [pc, #112]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6892      	ldr	r2, [r2, #8]
 8004604:	0211      	lsls	r1, r2, #8
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6952      	ldr	r2, [r2, #20]
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	3a01      	subs	r2, #1
 800460e:	0652      	lsls	r2, r2, #25
 8004610:	430a      	orrs	r2, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004616:	4a14      	ldr	r2, [pc, #80]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004618:	4b13      	ldr	r3, [pc, #76]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004620:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004622:	f7fd f8b5 	bl	8001790 <HAL_GetTick>
 8004626:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004628:	e009      	b.n	800463e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800462a:	f7fd f8b1 	bl	8001790 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d902      	bls.n	800463e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	73fb      	strb	r3, [r7, #15]
          break;
 800463c:	e005      	b.n	800464a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800463e:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0ef      	beq.n	800462a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004650:	4905      	ldr	r1, [pc, #20]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	4313      	orrs	r3, r2
 800465c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000

0800466c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800467e:	4b68      	ldr	r3, [pc, #416]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d018      	beq.n	80046bc <RCCEx_PLLSAI2_Config+0x50>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800468a:	4b65      	ldr	r3, [pc, #404]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0203 	and.w	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d10d      	bne.n	80046b6 <RCCEx_PLLSAI2_Config+0x4a>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
       ||
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <RCCEx_PLLSAI2_Config+0x4a>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046a2:	4b5f      	ldr	r3, [pc, #380]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
       ||
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d044      	beq.n	8004740 <RCCEx_PLLSAI2_Config+0xd4>
#endif
      )
    {
      status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
 80046ba:	e041      	b.n	8004740 <RCCEx_PLLSAI2_Config+0xd4>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d00c      	beq.n	80046de <RCCEx_PLLSAI2_Config+0x72>
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d013      	beq.n	80046f0 <RCCEx_PLLSAI2_Config+0x84>
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d120      	bne.n	800470e <RCCEx_PLLSAI2_Config+0xa2>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046cc:	4b54      	ldr	r3, [pc, #336]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d11d      	bne.n	8004714 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046dc:	e01a      	b.n	8004714 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046de:	4b50      	ldr	r3, [pc, #320]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <RCCEx_PLLSAI2_Config+0xac>
      {
        status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ee:	e013      	b.n	8004718 <RCCEx_PLLSAI2_Config+0xac>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046f0:	4b4b      	ldr	r3, [pc, #300]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10f      	bne.n	800471c <RCCEx_PLLSAI2_Config+0xb0>
 80046fc:	4b48      	ldr	r3, [pc, #288]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d109      	bne.n	800471c <RCCEx_PLLSAI2_Config+0xb0>
      {
        status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470c:	e006      	b.n	800471c <RCCEx_PLLSAI2_Config+0xb0>
    default:
      status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
      break;
 8004712:	e004      	b.n	800471e <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8004714:	bf00      	nop
 8004716:	e002      	b.n	800471e <RCCEx_PLLSAI2_Config+0xb2>
      break;
 8004718:	bf00      	nop
 800471a:	e000      	b.n	800471e <RCCEx_PLLSAI2_Config+0xb2>
      break;
 800471c:	bf00      	nop
    }

    if(status == HAL_OK)
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10d      	bne.n	8004740 <RCCEx_PLLSAI2_Config+0xd4>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004724:	483e      	ldr	r0, [pc, #248]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004726:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6819      	ldr	r1, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	3b01      	subs	r3, #1
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	430b      	orrs	r3, r1
 800473c:	4313      	orrs	r3, r2
 800473e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d167      	bne.n	8004816 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004746:	4a36      	ldr	r2, [pc, #216]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004748:	4b35      	ldr	r3, [pc, #212]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004752:	f7fd f81d 	bl	8001790 <HAL_GetTick>
 8004756:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8004758:	e009      	b.n	800476e <RCCEx_PLLSAI2_Config+0x102>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800475a:	f7fd f819 	bl	8001790 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d902      	bls.n	800476e <RCCEx_PLLSAI2_Config+0x102>
      {
        status = HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	73fb      	strb	r3, [r7, #15]
        break;
 800476c:	e005      	b.n	800477a <RCCEx_PLLSAI2_Config+0x10e>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 800476e:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ef      	bne.n	800475a <RCCEx_PLLSAI2_Config+0xee>
      }
    }

    if(status == HAL_OK)
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d14a      	bne.n	8004816 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d111      	bne.n	80047aa <RCCEx_PLLSAI2_Config+0x13e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004786:	4826      	ldr	r0, [pc, #152]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6892      	ldr	r2, [r2, #8]
 8004798:	0211      	lsls	r1, r2, #8
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68d2      	ldr	r2, [r2, #12]
 800479e:	0912      	lsrs	r2, r2, #4
 80047a0:	0452      	lsls	r2, r2, #17
 80047a2:	430a      	orrs	r2, r1
 80047a4:	4313      	orrs	r3, r2
 80047a6:	6143      	str	r3, [r0, #20]
 80047a8:	e011      	b.n	80047ce <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047aa:	481d      	ldr	r0, [pc, #116]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047ac:	4b1c      	ldr	r3, [pc, #112]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6892      	ldr	r2, [r2, #8]
 80047bc:	0211      	lsls	r1, r2, #8
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6912      	ldr	r2, [r2, #16]
 80047c2:	0852      	lsrs	r2, r2, #1
 80047c4:	3a01      	subs	r2, #1
 80047c6:	0652      	lsls	r2, r2, #25
 80047c8:	430a      	orrs	r2, r1
 80047ca:	4313      	orrs	r3, r2
 80047cc:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047ce:	4a14      	ldr	r2, [pc, #80]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047d0:	4b13      	ldr	r3, [pc, #76]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047da:	f7fc ffd9 	bl	8001790 <HAL_GetTick>
 80047de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80047e0:	e009      	b.n	80047f6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047e2:	f7fc ffd5 	bl	8001790 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d902      	bls.n	80047f6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	73fb      	strb	r3, [r7, #15]
          break;
 80047f4:	e005      	b.n	8004802 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0ef      	beq.n	80047e2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004808:	4905      	ldr	r1, [pc, #20]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <RCCEx_PLLSAI2_Config+0x1b4>)
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40021000 	.word	0x40021000

08004824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e07a      	b.n	800492c <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f003 f9b3 	bl	8007bbc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800486c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004876:	d902      	bls.n	800487e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e002      	b.n	8004884 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800487e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004882:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800488c:	d007      	beq.n	800489e <HAL_SPI_Init+0x7a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004896:	d002      	beq.n	800489e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10b      	bne.n	80048be <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048ae:	d903      	bls.n	80048b8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
 80048b6:	e002      	b.n	80048be <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6851      	ldr	r1, [r2, #4]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6892      	ldr	r2, [r2, #8]
 80048ca:	4311      	orrs	r1, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6912      	ldr	r2, [r2, #16]
 80048d0:	4311      	orrs	r1, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6952      	ldr	r2, [r2, #20]
 80048d6:	4311      	orrs	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6992      	ldr	r2, [r2, #24]
 80048dc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80048e0:	4311      	orrs	r1, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	69d2      	ldr	r2, [r2, #28]
 80048e6:	4311      	orrs	r1, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6a12      	ldr	r2, [r2, #32]
 80048ec:	4311      	orrs	r1, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80048f2:	430a      	orrs	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6992      	ldr	r2, [r2, #24]
 80048fe:	0c12      	lsrs	r2, r2, #16
 8004900:	f002 0104 	and.w	r1, r2, #4
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004908:	4311      	orrs	r1, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800490e:	4311      	orrs	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	68d2      	ldr	r2, [r2, #12]
 8004914:	4311      	orrs	r1, r2
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e01a      	b.n	800497c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f003 f95c 	bl	8007c1c <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_SPI_Transmit+0x26>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e13e      	b.n	8004c28 <HAL_SPI_Transmit+0x2a4>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b2:	f7fc feed 	bl	8001790 <HAL_GetTick>
 80049b6:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d002      	beq.n	80049ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049c4:	2302      	movs	r3, #2
 80049c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049c8:	e125      	b.n	8004c16 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_SPI_Transmit+0x52>
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049da:	e11c      	b.n	8004c16 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2203      	movs	r2, #3
 80049e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a26:	d107      	bne.n	8004a38 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d007      	beq.n	8004a56 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a5e:	d947      	bls.n	8004af0 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <HAL_SPI_Transmit+0xee>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d138      	bne.n	8004ae4 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	8812      	ldrh	r2, [r2, #0]
 8004a7a:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	3302      	adds	r3, #2
 8004a80:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a90:	e028      	b.n	8004ae4 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d10f      	bne.n	8004ac0 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	8812      	ldrh	r2, [r2, #0]
 8004aa8:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	3302      	adds	r3, #2
 8004aae:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004abe:	e011      	b.n	8004ae4 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00b      	beq.n	8004ade <HAL_SPI_Transmit+0x15a>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d00a      	beq.n	8004ae4 <HAL_SPI_Transmit+0x160>
 8004ace:	f7fc fe5f 	bl	8001790 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	1ad2      	subs	r2, r2, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ae2:	e098      	b.n	8004c16 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1d1      	bne.n	8004a92 <HAL_SPI_Transmit+0x10e>
 8004aee:	e072      	b.n	8004bd6 <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d004      	beq.n	8004b02 <HAL_SPI_Transmit+0x17e>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d164      	bne.n	8004bcc <HAL_SPI_Transmit+0x248>
    {
      if (hspi->TxXferCount > 1U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d90f      	bls.n	8004b2c <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	8812      	ldrh	r2, [r2, #0]
 8004b14:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3302      	adds	r3, #2
 8004b1a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b02      	subs	r3, #2
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b2a:	e04f      	b.n	8004bcc <HAL_SPI_Transmit+0x248>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f103 020c 	add.w	r2, r3, #12
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	1c59      	adds	r1, r3, #1
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b4c:	e03e      	b.n	8004bcc <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d125      	bne.n	8004ba8 <HAL_SPI_Transmit+0x224>
      {
        if (hspi->TxXferCount > 1U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d90f      	bls.n	8004b86 <HAL_SPI_Transmit+0x202>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	8812      	ldrh	r2, [r2, #0]
 8004b6e:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	3302      	adds	r3, #2
 8004b74:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b02      	subs	r3, #2
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b84:	e022      	b.n	8004bcc <HAL_SPI_Transmit+0x248>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f103 020c 	add.w	r2, r3, #12
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	1c59      	adds	r1, r3, #1
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ba6:	e011      	b.n	8004bcc <HAL_SPI_Transmit+0x248>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00b      	beq.n	8004bc6 <HAL_SPI_Transmit+0x242>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb4:	d00a      	beq.n	8004bcc <HAL_SPI_Transmit+0x248>
 8004bb6:	f7fc fdeb 	bl	8001790 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bca:	e024      	b.n	8004c16 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1bb      	bne.n	8004b4e <HAL_SPI_Transmit+0x1ca>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fc74 	bl	80054c8 <SPI_EndRxTxTransaction>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_SPI_Transmit+0x292>
  {
    errorcode = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c26:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c50:	d112      	bne.n	8004c78 <HAL_SPI_Receive+0x48>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10e      	bne.n	8004c78 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f8ff 	bl	8004e72 <HAL_SPI_TransmitReceive>
 8004c74:	4603      	mov	r3, r0
 8004c76:	e0f8      	b.n	8004e6a <HAL_SPI_Receive+0x23a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_SPI_Receive+0x56>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e0f1      	b.n	8004e6a <HAL_SPI_Receive+0x23a>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c8e:	f7fc fd7f 	bl	8001790 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d002      	beq.n	8004ca6 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ca4:	e0d8      	b.n	8004e58 <HAL_SPI_Receive+0x228>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_SPI_Receive+0x82>
 8004cac:	88fb      	ldrh	r3, [r7, #6]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cb6:	e0cf      	b.n	8004e58 <HAL_SPI_Receive+0x228>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2204      	movs	r2, #4
 8004cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	88fa      	ldrh	r2, [r7, #6]
 8004cd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d02:	d908      	bls.n	8004d16 <HAL_SPI_Receive+0xe6>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	6852      	ldr	r2, [r2, #4]
 8004d0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d12:	605a      	str	r2, [r3, #4]
 8004d14:	e007      	b.n	8004d26 <HAL_SPI_Receive+0xf6>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	6852      	ldr	r2, [r2, #4]
 8004d20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d24:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2e:	d107      	bne.n	8004d40 <HAL_SPI_Receive+0x110>
  {
    SPI_1LINE_RX(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d3e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d007      	beq.n	8004d5e <HAL_SPI_Receive+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d66:	d860      	bhi.n	8004e2a <HAL_SPI_Receive+0x1fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d68:	e02c      	b.n	8004dc4 <HAL_SPI_Receive+0x194>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d113      	bne.n	8004da0 <HAL_SPI_Receive+0x170>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d9e:	e011      	b.n	8004dc4 <HAL_SPI_Receive+0x194>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <HAL_SPI_Receive+0x18e>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d00a      	beq.n	8004dc4 <HAL_SPI_Receive+0x194>
 8004dae:	f7fc fcef 	bl	8001790 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad2      	subs	r2, r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d302      	bcc.n	8004dc4 <HAL_SPI_Receive+0x194>
        {
          errorcode = HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dc2:	e049      	b.n	8004e58 <HAL_SPI_Receive+0x228>
    while (hspi->RxXferCount > 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1cc      	bne.n	8004d6a <HAL_SPI_Receive+0x13a>
 8004dd0:	e031      	b.n	8004e36 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d112      	bne.n	8004e06 <HAL_SPI_Receive+0x1d6>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	3302      	adds	r3, #2
 8004df0:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e04:	e011      	b.n	8004e2a <HAL_SPI_Receive+0x1fa>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00b      	beq.n	8004e24 <HAL_SPI_Receive+0x1f4>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e12:	d00a      	beq.n	8004e2a <HAL_SPI_Receive+0x1fa>
 8004e14:	f7fc fcbc 	bl	8001790 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad2      	subs	r2, r2, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d302      	bcc.n	8004e2a <HAL_SPI_Receive+0x1fa>
        {
          errorcode = HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e28:	e016      	b.n	8004e58 <HAL_SPI_Receive+0x228>
    while (hspi->RxXferCount > 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1cd      	bne.n	8004dd2 <HAL_SPI_Receive+0x1a2>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 faec 	bl	8005418 <SPI_EndRxTransaction>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_SPI_Receive+0x21c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b08a      	sub	sp, #40	; 0x28
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	2300      	movs	r3, #0
 8004e86:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_SPI_TransmitReceive+0x32>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e1dd      	b.n	8005260 <HAL_SPI_TransmitReceive+0x3ee>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eac:	f7fc fc70 	bl	8001790 <HAL_GetTick>
 8004eb0:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_SPI_TransmitReceive+0x74>
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ece:	d106      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x6c>
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d003      	beq.n	8004ee6 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ee4:	e1b2      	b.n	800524c <HAL_SPI_TransmitReceive+0x3da>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_SPI_TransmitReceive+0x86>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_SPI_TransmitReceive+0x86>
 8004ef2:	887b      	ldrh	r3, [r7, #2]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004efe:	e1a5      	b.n	800524c <HAL_SPI_TransmitReceive+0x3da>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d003      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2205      	movs	r2, #5
 8004f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	887a      	ldrh	r2, [r7, #2]
 8004f2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	887a      	ldrh	r2, [r7, #2]
 8004f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f56:	d805      	bhi.n	8004f64 <HAL_SPI_TransmitReceive+0xf2>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d908      	bls.n	8004f76 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	6852      	ldr	r2, [r2, #4]
 8004f6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f72:	605a      	str	r2, [r3, #4]
 8004f74:	e007      	b.n	8004f86 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	6852      	ldr	r2, [r2, #4]
 8004f80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d007      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fac:	d975      	bls.n	800509a <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <HAL_SPI_TransmitReceive+0x14e>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d160      	bne.n	8005082 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	8812      	ldrh	r2, [r2, #0]
 8004fc8:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	3302      	adds	r3, #2
 8004fce:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fde:	e050      	b.n	8005082 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01c      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x1ae>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d017      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x1ae>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d110      	bne.n	8005020 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	8812      	ldrh	r2, [r2, #0]
 8005006:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	3302      	adds	r3, #2
 800500c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01a      	beq.n	8005062 <HAL_SPI_TransmitReceive+0x1f0>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b01      	cmp	r3, #1
 8005038:	d113      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	b29a      	uxth	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3302      	adds	r3, #2
 800504a:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800505e:	2301      	movs	r3, #1
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d00b      	beq.n	8005082 <HAL_SPI_TransmitReceive+0x210>
 800506a:	f7fc fb91 	bl	8001790 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad2      	subs	r2, r2, r3
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	429a      	cmp	r2, r3
 8005078:	d303      	bcc.n	8005082 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005080:	e0e4      	b.n	800524c <HAL_SPI_TransmitReceive+0x3da>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1a9      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x16e>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1a3      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x16e>
 8005098:	e0ca      	b.n	8005230 <HAL_SPI_TransmitReceive+0x3be>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d005      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x23c>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	f040 80b4 	bne.w	8005216 <HAL_SPI_TransmitReceive+0x3a4>
    {
      if (hspi->TxXferCount > 1U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d90f      	bls.n	80050d8 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	8812      	ldrh	r2, [r2, #0]
 80050c0:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	3302      	adds	r3, #2
 80050c6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b02      	subs	r3, #2
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050d6:	e09e      	b.n	8005216 <HAL_SPI_TransmitReceive+0x3a4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f103 020c 	add.w	r2, r3, #12
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	1c59      	adds	r1, r3, #1
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f8:	e08d      	b.n	8005216 <HAL_SPI_TransmitReceive+0x3a4>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d032      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x2f4>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d02d      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x2f4>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b02      	cmp	r3, #2
 8005116:	d126      	bne.n	8005166 <HAL_SPI_TransmitReceive+0x2f4>
      {
        if (hspi->TxXferCount > 1U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b01      	cmp	r3, #1
 8005120:	d90f      	bls.n	8005142 <HAL_SPI_TransmitReceive+0x2d0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	8812      	ldrh	r2, [r2, #0]
 800512a:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	3302      	adds	r3, #2
 8005130:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b02      	subs	r3, #2
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005140:	e00f      	b.n	8005162 <HAL_SPI_TransmitReceive+0x2f0>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f103 020c 	add.w	r2, r3, #12
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	1c59      	adds	r1, r3, #1
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d041      	beq.n	80051f6 <HAL_SPI_TransmitReceive+0x384>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d13a      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x384>
      {
        if (hspi->RxXferCount > 1U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	d920      	bls.n	80051ce <HAL_SPI_TransmitReceive+0x35c>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3302      	adds	r3, #2
 800519c:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b02      	subs	r3, #2
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d81a      	bhi.n	80051f2 <HAL_SPI_TransmitReceive+0x380>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	6852      	ldr	r2, [r2, #4]
 80051c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051ca:	605a      	str	r2, [r3, #4]
 80051cc:	e011      	b.n	80051f2 <HAL_SPI_TransmitReceive+0x380>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	320c      	adds	r2, #12
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051f2:	2301      	movs	r3, #1
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d00b      	beq.n	8005216 <HAL_SPI_TransmitReceive+0x3a4>
 80051fe:	f7fc fac7 	bl	8001790 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	1ad2      	subs	r2, r2, r3
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	429a      	cmp	r2, r3
 800520c:	d303      	bcc.n	8005216 <HAL_SPI_TransmitReceive+0x3a4>
      {
        errorcode = HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005214:	e01a      	b.n	800524c <HAL_SPI_TransmitReceive+0x3da>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	f47f af6c 	bne.w	80050fa <HAL_SPI_TransmitReceive+0x288>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	f47f af65 	bne.w	80050fa <HAL_SPI_TransmitReceive+0x288>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f947 	bl	80054c8 <SPI_EndRxTxTransaction>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <HAL_SPI_TransmitReceive+0x3da>
  {
    errorcode = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	661a      	str	r2, [r3, #96]	; 0x60
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800525c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005260:	4618      	mov	r0, r3
 8005262:	3728      	adds	r7, #40	; 0x28
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005276:	e04c      	b.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527e:	d048      	beq.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005286:	f7fc fa83 	bl	8001790 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	1ad2      	subs	r2, r2, r3
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d33d      	bcc.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	6852      	ldr	r2, [r2, #4]
 80052a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ae:	d111      	bne.n	80052d4 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b8:	d004      	beq.n	80052c4 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c2:	d107      	bne.n	80052d4 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052dc:	d10f      	bne.n	80052fe <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e00e      	b.n	8005330 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	401a      	ands	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	429a      	cmp	r2, r3
 8005320:	d101      	bne.n	8005326 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8005322:	2201      	movs	r2, #1
 8005324:	e000      	b.n	8005328 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8005326:	2200      	movs	r2, #0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d1a4      	bne.n	8005278 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8005346:	e05a      	b.n	80053fe <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800534e:	d109      	bne.n	8005364 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005362:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d048      	beq.n	80053fe <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8005372:	f7fc fa0d 	bl	8001790 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	1ad2      	subs	r2, r2, r3
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d33d      	bcc.n	80053fe <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	6852      	ldr	r2, [r2, #4]
 800538c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005390:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800539a:	d111      	bne.n	80053c0 <SPI_WaitFifoStateUntilTimeout+0x88>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a4:	d004      	beq.n	80053b0 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ae:	d107      	bne.n	80053c0 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c8:	d10f      	bne.n	80053ea <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e008      	b.n	8005410 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	401a      	ands	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	429a      	cmp	r2, r3
 800540c:	d19c      	bne.n	8005348 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800542c:	d111      	bne.n	8005452 <SPI_EndRxTransaction+0x3a>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005436:	d004      	beq.n	8005442 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005440:	d107      	bne.n	8005452 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005450:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2200      	movs	r2, #0
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff ff03 	bl	8005268 <SPI_WaitFlagStateUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546c:	f043 0220 	orr.w	r2, r3, #32
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e023      	b.n	80054c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005480:	d11d      	bne.n	80054be <SPI_EndRxTransaction+0xa6>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800548a:	d004      	beq.n	8005496 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005494:	d113      	bne.n	80054be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2200      	movs	r2, #0
 800549e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff ff48 	bl	8005338 <SPI_WaitFifoStateUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e000      	b.n	80054c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2200      	movs	r2, #0
 80054dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f7ff ff29 	bl	8005338 <SPI_WaitFifoStateUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d007      	beq.n	80054fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f0:	f043 0220 	orr.w	r2, r3, #32
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e027      	b.n	800554c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2200      	movs	r2, #0
 8005504:	2180      	movs	r1, #128	; 0x80
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7ff feae 	bl	8005268 <SPI_WaitFlagStateUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e014      	b.n	800554c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2200      	movs	r2, #0
 800552a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f7ff ff02 	bl	8005338 <SPI_WaitFifoStateUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553e:	f043 0220 	orr.w	r2, r3, #32
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e000      	b.n	800554c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8005560:	e00c      	b.n	800557c <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	3301      	adds	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 8005570:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	2b04      	cmp	r3, #4
 8005576:	d101      	bne.n	800557c <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e007      	b.n	800558c <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1eb      	bne.n	8005562 <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e043      	b.n	8005632 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f002 fcee 	bl	8007fa0 <HAL_UART_MspInit>
  }
  
  huart->gState = HAL_UART_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2224      	movs	r2, #36	; 0x24
 80055c8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  
  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]
  
  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f82d 	bl	800563c <UART_SetConfig>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e022      	b.n	8005632 <HAL_UART_Init+0x9a>
  }
  
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fb5f 	bl	8005cb8 <UART_AdvFeatureConfig>
  }
  
  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	6852      	ldr	r2, [r2, #4]
 8005604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005608:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	6892      	ldr	r2, [r2, #8]
 8005614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005618:	609a      	str	r2, [r3, #8]
  
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	f042 0201 	orr.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]
  
  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fbe6 	bl	8005dfc <UART_CheckIdleState>
 8005630:	4603      	mov	r3, r0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800563c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005640:	b088      	sub	sp, #32
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800564a:	2310      	movs	r3, #16
 800564c:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 800564e:	2300      	movs	r3, #0
 8005650:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	4313      	orrs	r3, r2
 8005674:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	4baa      	ldr	r3, [pc, #680]	; (800592c <UART_SetConfig+0x2f0>)
 8005682:	400b      	ands	r3, r1
 8005684:	69f9      	ldr	r1, [r7, #28]
 8005686:	430b      	orrs	r3, r1
 8005688:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	6852      	ldr	r2, [r2, #4]
 8005694:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68d2      	ldr	r2, [r2, #12]
 800569c:	430a      	orrs	r2, r1
 800569e:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	61fb      	str	r3, [r7, #28]
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4aa1      	ldr	r2, [pc, #644]	; (8005930 <UART_SetConfig+0x2f4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	6892      	ldr	r2, [r2, #8]
 80056c4:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a98      	ldr	r2, [pc, #608]	; (8005934 <UART_SetConfig+0x2f8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d121      	bne.n	800571c <UART_SetConfig+0xe0>
 80056d8:	4b97      	ldr	r3, [pc, #604]	; (8005938 <UART_SetConfig+0x2fc>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d816      	bhi.n	8005714 <UART_SetConfig+0xd8>
 80056e6:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <UART_SetConfig+0xb0>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	080056fd 	.word	0x080056fd
 80056f0:	08005709 	.word	0x08005709
 80056f4:	08005703 	.word	0x08005703
 80056f8:	0800570f 	.word	0x0800570f
 80056fc:	2301      	movs	r3, #1
 80056fe:	76fb      	strb	r3, [r7, #27]
 8005700:	e0e4      	b.n	80058cc <UART_SetConfig+0x290>
 8005702:	2302      	movs	r3, #2
 8005704:	76fb      	strb	r3, [r7, #27]
 8005706:	e0e1      	b.n	80058cc <UART_SetConfig+0x290>
 8005708:	2304      	movs	r3, #4
 800570a:	76fb      	strb	r3, [r7, #27]
 800570c:	e0de      	b.n	80058cc <UART_SetConfig+0x290>
 800570e:	2308      	movs	r3, #8
 8005710:	76fb      	strb	r3, [r7, #27]
 8005712:	e0db      	b.n	80058cc <UART_SetConfig+0x290>
 8005714:	2310      	movs	r3, #16
 8005716:	76fb      	strb	r3, [r7, #27]
 8005718:	bf00      	nop
 800571a:	e0d7      	b.n	80058cc <UART_SetConfig+0x290>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a86      	ldr	r2, [pc, #536]	; (800593c <UART_SetConfig+0x300>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d134      	bne.n	8005790 <UART_SetConfig+0x154>
 8005726:	4b84      	ldr	r3, [pc, #528]	; (8005938 <UART_SetConfig+0x2fc>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572c:	f003 030c 	and.w	r3, r3, #12
 8005730:	2b0c      	cmp	r3, #12
 8005732:	d829      	bhi.n	8005788 <UART_SetConfig+0x14c>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x100>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	08005771 	.word	0x08005771
 8005740:	08005789 	.word	0x08005789
 8005744:	08005789 	.word	0x08005789
 8005748:	08005789 	.word	0x08005789
 800574c:	0800577d 	.word	0x0800577d
 8005750:	08005789 	.word	0x08005789
 8005754:	08005789 	.word	0x08005789
 8005758:	08005789 	.word	0x08005789
 800575c:	08005777 	.word	0x08005777
 8005760:	08005789 	.word	0x08005789
 8005764:	08005789 	.word	0x08005789
 8005768:	08005789 	.word	0x08005789
 800576c:	08005783 	.word	0x08005783
 8005770:	2300      	movs	r3, #0
 8005772:	76fb      	strb	r3, [r7, #27]
 8005774:	e0aa      	b.n	80058cc <UART_SetConfig+0x290>
 8005776:	2302      	movs	r3, #2
 8005778:	76fb      	strb	r3, [r7, #27]
 800577a:	e0a7      	b.n	80058cc <UART_SetConfig+0x290>
 800577c:	2304      	movs	r3, #4
 800577e:	76fb      	strb	r3, [r7, #27]
 8005780:	e0a4      	b.n	80058cc <UART_SetConfig+0x290>
 8005782:	2308      	movs	r3, #8
 8005784:	76fb      	strb	r3, [r7, #27]
 8005786:	e0a1      	b.n	80058cc <UART_SetConfig+0x290>
 8005788:	2310      	movs	r3, #16
 800578a:	76fb      	strb	r3, [r7, #27]
 800578c:	bf00      	nop
 800578e:	e09d      	b.n	80058cc <UART_SetConfig+0x290>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a6a      	ldr	r2, [pc, #424]	; (8005940 <UART_SetConfig+0x304>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d120      	bne.n	80057dc <UART_SetConfig+0x1a0>
 800579a:	4b67      	ldr	r3, [pc, #412]	; (8005938 <UART_SetConfig+0x2fc>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d00f      	beq.n	80057c8 <UART_SetConfig+0x18c>
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d802      	bhi.n	80057b2 <UART_SetConfig+0x176>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <UART_SetConfig+0x180>
 80057b0:	e010      	b.n	80057d4 <UART_SetConfig+0x198>
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d005      	beq.n	80057c2 <UART_SetConfig+0x186>
 80057b6:	2b30      	cmp	r3, #48	; 0x30
 80057b8:	d009      	beq.n	80057ce <UART_SetConfig+0x192>
 80057ba:	e00b      	b.n	80057d4 <UART_SetConfig+0x198>
 80057bc:	2300      	movs	r3, #0
 80057be:	76fb      	strb	r3, [r7, #27]
 80057c0:	e084      	b.n	80058cc <UART_SetConfig+0x290>
 80057c2:	2302      	movs	r3, #2
 80057c4:	76fb      	strb	r3, [r7, #27]
 80057c6:	e081      	b.n	80058cc <UART_SetConfig+0x290>
 80057c8:	2304      	movs	r3, #4
 80057ca:	76fb      	strb	r3, [r7, #27]
 80057cc:	e07e      	b.n	80058cc <UART_SetConfig+0x290>
 80057ce:	2308      	movs	r3, #8
 80057d0:	76fb      	strb	r3, [r7, #27]
 80057d2:	e07b      	b.n	80058cc <UART_SetConfig+0x290>
 80057d4:	2310      	movs	r3, #16
 80057d6:	76fb      	strb	r3, [r7, #27]
 80057d8:	bf00      	nop
 80057da:	e077      	b.n	80058cc <UART_SetConfig+0x290>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a58      	ldr	r2, [pc, #352]	; (8005944 <UART_SetConfig+0x308>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d120      	bne.n	8005828 <UART_SetConfig+0x1ec>
 80057e6:	4b54      	ldr	r3, [pc, #336]	; (8005938 <UART_SetConfig+0x2fc>)
 80057e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057f0:	2b40      	cmp	r3, #64	; 0x40
 80057f2:	d00f      	beq.n	8005814 <UART_SetConfig+0x1d8>
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d802      	bhi.n	80057fe <UART_SetConfig+0x1c2>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <UART_SetConfig+0x1cc>
 80057fc:	e010      	b.n	8005820 <UART_SetConfig+0x1e4>
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d005      	beq.n	800580e <UART_SetConfig+0x1d2>
 8005802:	2bc0      	cmp	r3, #192	; 0xc0
 8005804:	d009      	beq.n	800581a <UART_SetConfig+0x1de>
 8005806:	e00b      	b.n	8005820 <UART_SetConfig+0x1e4>
 8005808:	2300      	movs	r3, #0
 800580a:	76fb      	strb	r3, [r7, #27]
 800580c:	e05e      	b.n	80058cc <UART_SetConfig+0x290>
 800580e:	2302      	movs	r3, #2
 8005810:	76fb      	strb	r3, [r7, #27]
 8005812:	e05b      	b.n	80058cc <UART_SetConfig+0x290>
 8005814:	2304      	movs	r3, #4
 8005816:	76fb      	strb	r3, [r7, #27]
 8005818:	e058      	b.n	80058cc <UART_SetConfig+0x290>
 800581a:	2308      	movs	r3, #8
 800581c:	76fb      	strb	r3, [r7, #27]
 800581e:	e055      	b.n	80058cc <UART_SetConfig+0x290>
 8005820:	2310      	movs	r3, #16
 8005822:	76fb      	strb	r3, [r7, #27]
 8005824:	bf00      	nop
 8005826:	e051      	b.n	80058cc <UART_SetConfig+0x290>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a46      	ldr	r2, [pc, #280]	; (8005948 <UART_SetConfig+0x30c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d124      	bne.n	800587c <UART_SetConfig+0x240>
 8005832:	4b41      	ldr	r3, [pc, #260]	; (8005938 <UART_SetConfig+0x2fc>)
 8005834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005840:	d012      	beq.n	8005868 <UART_SetConfig+0x22c>
 8005842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005846:	d802      	bhi.n	800584e <UART_SetConfig+0x212>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d007      	beq.n	800585c <UART_SetConfig+0x220>
 800584c:	e012      	b.n	8005874 <UART_SetConfig+0x238>
 800584e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005852:	d006      	beq.n	8005862 <UART_SetConfig+0x226>
 8005854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005858:	d009      	beq.n	800586e <UART_SetConfig+0x232>
 800585a:	e00b      	b.n	8005874 <UART_SetConfig+0x238>
 800585c:	2300      	movs	r3, #0
 800585e:	76fb      	strb	r3, [r7, #27]
 8005860:	e034      	b.n	80058cc <UART_SetConfig+0x290>
 8005862:	2302      	movs	r3, #2
 8005864:	76fb      	strb	r3, [r7, #27]
 8005866:	e031      	b.n	80058cc <UART_SetConfig+0x290>
 8005868:	2304      	movs	r3, #4
 800586a:	76fb      	strb	r3, [r7, #27]
 800586c:	e02e      	b.n	80058cc <UART_SetConfig+0x290>
 800586e:	2308      	movs	r3, #8
 8005870:	76fb      	strb	r3, [r7, #27]
 8005872:	e02b      	b.n	80058cc <UART_SetConfig+0x290>
 8005874:	2310      	movs	r3, #16
 8005876:	76fb      	strb	r3, [r7, #27]
 8005878:	bf00      	nop
 800587a:	e027      	b.n	80058cc <UART_SetConfig+0x290>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2b      	ldr	r2, [pc, #172]	; (8005930 <UART_SetConfig+0x2f4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d123      	bne.n	80058ce <UART_SetConfig+0x292>
 8005886:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <UART_SetConfig+0x2fc>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005894:	d012      	beq.n	80058bc <UART_SetConfig+0x280>
 8005896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589a:	d802      	bhi.n	80058a2 <UART_SetConfig+0x266>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <UART_SetConfig+0x274>
 80058a0:	e012      	b.n	80058c8 <UART_SetConfig+0x28c>
 80058a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a6:	d006      	beq.n	80058b6 <UART_SetConfig+0x27a>
 80058a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058ac:	d009      	beq.n	80058c2 <UART_SetConfig+0x286>
 80058ae:	e00b      	b.n	80058c8 <UART_SetConfig+0x28c>
 80058b0:	2300      	movs	r3, #0
 80058b2:	76fb      	strb	r3, [r7, #27]
 80058b4:	e00a      	b.n	80058cc <UART_SetConfig+0x290>
 80058b6:	2302      	movs	r3, #2
 80058b8:	76fb      	strb	r3, [r7, #27]
 80058ba:	e007      	b.n	80058cc <UART_SetConfig+0x290>
 80058bc:	2304      	movs	r3, #4
 80058be:	76fb      	strb	r3, [r7, #27]
 80058c0:	e004      	b.n	80058cc <UART_SetConfig+0x290>
 80058c2:	2308      	movs	r3, #8
 80058c4:	76fb      	strb	r3, [r7, #27]
 80058c6:	e001      	b.n	80058cc <UART_SetConfig+0x290>
 80058c8:	2310      	movs	r3, #16
 80058ca:	76fb      	strb	r3, [r7, #27]
 80058cc:	bf00      	nop
  
  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a17      	ldr	r2, [pc, #92]	; (8005930 <UART_SetConfig+0x2f4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	f040 80ee 	bne.w	8005ab6 <UART_SetConfig+0x47a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058da:	7efb      	ldrb	r3, [r7, #27]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d837      	bhi.n	8005950 <UART_SetConfig+0x314>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <UART_SetConfig+0x2ac>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	0800590d 	.word	0x0800590d
 80058ec:	08005951 	.word	0x08005951
 80058f0:	08005915 	.word	0x08005915
 80058f4:	08005951 	.word	0x08005951
 80058f8:	0800591b 	.word	0x0800591b
 80058fc:	08005951 	.word	0x08005951
 8005900:	08005951 	.word	0x08005951
 8005904:	08005951 	.word	0x08005951
 8005908:	08005923 	.word	0x08005923
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800590c:	f7fe fa3e 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8005910:	60f8      	str	r0, [r7, #12]
#endif
      break;
 8005912:	e020      	b.n	8005956 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005914:	4b0d      	ldr	r3, [pc, #52]	; (800594c <UART_SetConfig+0x310>)
 8005916:	60fb      	str	r3, [r7, #12]
#endif
      break;
 8005918:	e01d      	b.n	8005956 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800591a:	f7fe f97b 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 800591e:	60f8      	str	r0, [r7, #12]
#endif
      break;
 8005920:	e019      	b.n	8005956 <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005926:	60fb      	str	r3, [r7, #12]
#endif
      break;
 8005928:	e015      	b.n	8005956 <UART_SetConfig+0x31a>
 800592a:	bf00      	nop
 800592c:	efff69f3 	.word	0xefff69f3
 8005930:	40008000 	.word	0x40008000
 8005934:	40013800 	.word	0x40013800
 8005938:	40021000 	.word	0x40021000
 800593c:	40004400 	.word	0x40004400
 8005940:	40004800 	.word	0x40004800
 8005944:	40004c00 	.word	0x40004c00
 8005948:	40005000 	.word	0x40005000
 800594c:	00f42400 	.word	0x00f42400
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	74fb      	strb	r3, [r7, #19]
      break;
 8005954:	bf00      	nop
    }
    
    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 819e 	beq.w	8005c9a <UART_SetConfig+0x65e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	441a      	add	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	429a      	cmp	r2, r3
 800596c:	d805      	bhi.n	800597a <UART_SetConfig+0x33e>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) ))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	031a      	lsls	r2, r3, #12
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	429a      	cmp	r2, r3
 8005978:	d202      	bcs.n	8005980 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	74fb      	strb	r3, [r7, #19]
 800597e:	e18c      	b.n	8005c9a <UART_SetConfig+0x65e>
      }
      else
      {
        switch (clocksource)
 8005980:	7efb      	ldrb	r3, [r7, #27]
 8005982:	2b08      	cmp	r3, #8
 8005984:	f200 8084 	bhi.w	8005a90 <UART_SetConfig+0x454>
 8005988:	a201      	add	r2, pc, #4	; (adr r2, 8005990 <UART_SetConfig+0x354>)
 800598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598e:	bf00      	nop
 8005990:	080059b5 	.word	0x080059b5
 8005994:	08005a91 	.word	0x08005a91
 8005998:	080059f5 	.word	0x080059f5
 800599c:	08005a91 	.word	0x08005a91
 80059a0:	08005a29 	.word	0x08005a29
 80059a4:	08005a91 	.word	0x08005a91
 80059a8:	08005a91 	.word	0x08005a91
 80059ac:	08005a91 	.word	0x08005a91
 80059b0:	08005a67 	.word	0x08005a67
        {
        case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80059b4:	f7fe f9ea 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f04f 0400 	mov.w	r4, #0
 80059be:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80059c2:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80059c6:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	f04f 0400 	mov.w	r4, #0
 80059d4:	eb18 0003 	adds.w	r0, r8, r3
 80059d8:	eb49 0104 	adc.w	r1, r9, r4
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f04f 0400 	mov.w	r4, #0
 80059e4:	461a      	mov	r2, r3
 80059e6:	4623      	mov	r3, r4
 80059e8:	f7fb f8da 	bl	8000ba0 <__aeabi_uldivmod>
 80059ec:	4603      	mov	r3, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	617b      	str	r3, [r7, #20]
#endif
          break;
 80059f2:	e050      	b.n	8005a96 <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	085b      	lsrs	r3, r3, #1
 80059fa:	f04f 0400 	mov.w	r4, #0
 80059fe:	49ad      	ldr	r1, [pc, #692]	; (8005cb4 <UART_SetConfig+0x678>)
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	eb13 0801 	adds.w	r8, r3, r1
 8005a08:	eb44 0902 	adc.w	r9, r4, r2
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4649      	mov	r1, r9
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f04f 0400 	mov.w	r4, #0
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4623      	mov	r3, r4
 8005a1c:	f7fb f8c0 	bl	8000ba0 <__aeabi_uldivmod>
 8005a20:	4603      	mov	r3, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	617b      	str	r3, [r7, #20]
#endif
          break;
 8005a26:	e036      	b.n	8005a96 <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005a28:	f7fe f8f4 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	021d      	lsls	r5, r3, #8
 8005a36:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8005a3a:	0214      	lsls	r4, r2, #8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	085b      	lsrs	r3, r3, #1
 8005a42:	461a      	mov	r2, r3
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	18a0      	adds	r0, r4, r2
 8005a4a:	eb45 0103 	adc.w	r1, r5, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f04f 0400 	mov.w	r4, #0
 8005a56:	461a      	mov	r2, r3
 8005a58:	4623      	mov	r3, r4
 8005a5a:	f7fb f8a1 	bl	8000ba0 <__aeabi_uldivmod>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	460c      	mov	r4, r1
 8005a62:	617b      	str	r3, [r7, #20]
#endif
          break;
 8005a64:	e017      	b.n	8005a96 <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	f04f 0400 	mov.w	r4, #0
 8005a70:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005a74:	f144 0100 	adc.w	r1, r4, #0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f04f 0400 	mov.w	r4, #0
 8005a80:	461a      	mov	r2, r3
 8005a82:	4623      	mov	r3, r4
 8005a84:	f7fb f88c 	bl	8000ba0 <__aeabi_uldivmod>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	617b      	str	r3, [r7, #20]
#endif
          break;
 8005a8e:	e002      	b.n	8005a96 <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	74fb      	strb	r3, [r7, #19]
          break;
 8005a94:	bf00      	nop
        }
        
        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a9c:	d308      	bcc.n	8005ab0 <UART_SetConfig+0x474>
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aa4:	d204      	bcs.n	8005ab0 <UART_SetConfig+0x474>
        {
          huart->Instance->BRR = usartdiv;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	60da      	str	r2, [r3, #12]
 8005aae:	e0f4      	b.n	8005c9a <UART_SetConfig+0x65e>
        }
        else
        {
          ret = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	74fb      	strb	r3, [r7, #19]
 8005ab4:	e0f1      	b.n	8005c9a <UART_SetConfig+0x65e>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005abe:	d17e      	bne.n	8005bbe <UART_SetConfig+0x582>
  {
    switch (clocksource)
 8005ac0:	7efb      	ldrb	r3, [r7, #27]
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d85b      	bhi.n	8005b7e <UART_SetConfig+0x542>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <UART_SetConfig+0x490>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005b0f 	.word	0x08005b0f
 8005ad4:	08005b2d 	.word	0x08005b2d
 8005ad8:	08005b7f 	.word	0x08005b7f
 8005adc:	08005b49 	.word	0x08005b49
 8005ae0:	08005b7f 	.word	0x08005b7f
 8005ae4:	08005b7f 	.word	0x08005b7f
 8005ae8:	08005b7f 	.word	0x08005b7f
 8005aec:	08005b67 	.word	0x08005b67
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005af0:	f7fe f94c 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8005af4:	4603      	mov	r3, r0
 8005af6:	005a      	lsls	r2, r3, #1
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	085b      	lsrs	r3, r3, #1
 8005afe:	441a      	add	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	617b      	str	r3, [r7, #20]
#endif
      break;
 8005b0c:	e03a      	b.n	8005b84 <UART_SetConfig+0x548>
    case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005b0e:	f7fe f951 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 8005b12:	4603      	mov	r3, r0
 8005b14:	005a      	lsls	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	441a      	add	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	617b      	str	r3, [r7, #20]
#endif
      break;
 8005b2a:	e02b      	b.n	8005b84 <UART_SetConfig+0x548>
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005b36:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6852      	ldr	r2, [r2, #4]
 8005b3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	617b      	str	r3, [r7, #20]
#endif
      break;
 8005b46:	e01d      	b.n	8005b84 <UART_SetConfig+0x548>
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005b48:	f7fe f864 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	005a      	lsls	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	441a      	add	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	617b      	str	r3, [r7, #20]
#endif
      break;
 8005b64:	e00e      	b.n	8005b84 <UART_SetConfig+0x548>
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	617b      	str	r3, [r7, #20]
#endif
      break;
 8005b7c:	e002      	b.n	8005b84 <UART_SetConfig+0x548>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	74fb      	strb	r3, [r7, #19]
      break;
 8005b82:	bf00      	nop
    }
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b0f      	cmp	r3, #15
 8005b88:	d916      	bls.n	8005bb8 <UART_SetConfig+0x57c>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b90:	d212      	bcs.n	8005bb8 <UART_SetConfig+0x57c>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f023 030f 	bic.w	r3, r3, #15
 8005b9a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	897b      	ldrh	r3, [r7, #10]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	897a      	ldrh	r2, [r7, #10]
 8005bb4:	60da      	str	r2, [r3, #12]
 8005bb6:	e070      	b.n	8005c9a <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	74fb      	strb	r3, [r7, #19]
 8005bbc:	e06d      	b.n	8005c9a <UART_SetConfig+0x65e>
    }
  }
  else
  {
    switch (clocksource)
 8005bbe:	7efb      	ldrb	r3, [r7, #27]
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d859      	bhi.n	8005c78 <UART_SetConfig+0x63c>
 8005bc4:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <UART_SetConfig+0x590>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005c0d 	.word	0x08005c0d
 8005bd4:	08005c29 	.word	0x08005c29
 8005bd8:	08005c79 	.word	0x08005c79
 8005bdc:	08005c45 	.word	0x08005c45
 8005be0:	08005c79 	.word	0x08005c79
 8005be4:	08005c79 	.word	0x08005c79
 8005be8:	08005c79 	.word	0x08005c79
 8005bec:	08005c61 	.word	0x08005c61
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005bf0:	f7fe f8cc 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	441a      	add	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	617b      	str	r3, [r7, #20]
#endif
      break;
 8005c0a:	e038      	b.n	8005c7e <UART_SetConfig+0x642>
    case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c0c:	f7fe f8d2 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 8005c10:	4602      	mov	r2, r0
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	441a      	add	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	617b      	str	r3, [r7, #20]
#endif
      break;
 8005c26:	e02a      	b.n	8005c7e <UART_SetConfig+0x642>
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005c32:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6852      	ldr	r2, [r2, #4]
 8005c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	617b      	str	r3, [r7, #20]
#endif
      break;
 8005c42:	e01c      	b.n	8005c7e <UART_SetConfig+0x642>
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c44:	f7fd ffe6 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	441a      	add	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	617b      	str	r3, [r7, #20]
#endif
      break;
 8005c5e:	e00e      	b.n	8005c7e <UART_SetConfig+0x642>
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	085b      	lsrs	r3, r3, #1
 8005c66:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	617b      	str	r3, [r7, #20]
#endif
      break;
 8005c76:	e002      	b.n	8005c7e <UART_SetConfig+0x642>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
      ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	74fb      	strb	r3, [r7, #19]
      break;
 8005c7c:	bf00      	nop
    }
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b0f      	cmp	r3, #15
 8005c82:	d908      	bls.n	8005c96 <UART_SetConfig+0x65a>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8a:	d204      	bcs.n	8005c96 <UART_SetConfig+0x65a>
    {
      huart->Instance->BRR = usartdiv;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	60da      	str	r2, [r3, #12]
 8005c94:	e001      	b.n	8005c9a <UART_SetConfig+0x65e>
    }
    else
    {
      ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	665a      	str	r2, [r3, #100]	; 0x64
  
  return ret;
 8005ca6:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3720      	adds	r7, #32
 8005cac:	46bd      	mov	sp, r7
 8005cae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005cb2:	bf00      	nop
 8005cb4:	f4240000 	.word	0xf4240000

08005cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	6852      	ldr	r2, [r2, #4]
 8005cd6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	6852      	ldr	r2, [r2, #4]
 8005cf8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d00:	430a      	orrs	r2, r1
 8005d02:	605a      	str	r2, [r3, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	6852      	ldr	r2, [r2, #4]
 8005d1a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	6852      	ldr	r2, [r2, #4]
 8005d3c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	6892      	ldr	r2, [r2, #8]
 8005d5e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d66:	430a      	orrs	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	6892      	ldr	r2, [r2, #8]
 8005d80:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01a      	beq.n	8005dce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	6852      	ldr	r2, [r2, #4]
 8005da2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db6:	d10a      	bne.n	8005dce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	6852      	ldr	r2, [r2, #4]
 8005dc2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	6852      	ldr	r2, [r2, #4]
 8005de4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005dec:	430a      	orrs	r2, r1
 8005dee:	605a      	str	r2, [r3, #4]
  }
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]
  
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005e0e:	f7fb fcbf 	bl	8001790 <HAL_GetTick>
 8005e12:	60f8      	str	r0, [r7, #12]
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	d10e      	bne.n	8005e40 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f82c 	bl	8005e8e <UART_WaitOnFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e022      	b.n	8005e86 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d10e      	bne.n	8005e6c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f816 	bl	8005e8e <UART_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e00c      	b.n	8005e86 <UART_CheckIdleState+0x8a>
    }
  }
  
  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState= HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	603b      	str	r3, [r7, #0]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9e:	e02c      	b.n	8005efa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d028      	beq.n	8005efa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d007      	beq.n	8005ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8005eae:	f7fb fc6f 	bl	8001790 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d91d      	bls.n	8005efa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ecc:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	6892      	ldr	r2, [r2, #8]
 8005ed8:	f022 0201 	bic.w	r2, r2, #1
 8005edc:	609a      	str	r2, [r3, #8]
        
        huart->gState = HAL_UART_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        
        return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e00f      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	401a      	ands	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	bf0c      	ite	eq
 8005f0a:	2301      	moveq	r3, #1
 8005f0c:	2300      	movne	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d0c3      	beq.n	8005ea0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f22:	b084      	sub	sp, #16
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	f107 0014 	add.w	r0, r7, #20
 8005f30:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60da      	str	r2, [r3, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9eb 	bl	800631c <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f4c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f5a:	b004      	add	sp, #16
 8005f5c:	4770      	bx	lr

08005f5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f023 0201 	bic.w	r2, r3, #1
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_HOST_MODE)
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d106      	bne.n	8005fac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	e008      	b.n	8005fbe <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_DEVICE_MODE)
 8005fac:	78fb      	ldrb	r3, [r7, #3]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d105      	bne.n	8005fbe <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 8005fbe:	2032      	movs	r0, #50	; 0x32
 8005fc0:	f7fb fbf2 	bl	80017a8 <HAL_Delay>
  
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	f107 001c 	add.w	r0, r7, #28
 8005fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 8005ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d111      	bne.n	800601c <USB_DevInit+0x4c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	601a      	str	r2, [r3, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006022:	461a      	mov	r2, r3
 8006024:	2300      	movs	r3, #0
 8006026:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602e:	461a      	mov	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6013      	str	r3, [r2, #0]
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800603a:	2103      	movs	r1, #3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f93d 	bl	80062bc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8006042:	2110      	movs	r1, #16
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f8f1 	bl	800622c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f914 	bl	8006278 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006056:	461a      	mov	r2, r3
 8006058:	2300      	movs	r3, #0
 800605a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006062:	461a      	mov	r2, r3
 8006064:	2300      	movs	r3, #0
 8006066:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606e:	461a      	mov	r2, r3
 8006070:	f04f 33ff 	mov.w	r3, #4294967295
 8006074:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607c:	461a      	mov	r2, r3
 800607e:	2300      	movs	r3, #0
 8006080:	61d3      	str	r3, [r2, #28]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	e034      	b.n	80060f2 <USB_DevInit+0x122>
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800609a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800609e:	d10a      	bne.n	80060b6 <USB_DevInit+0xe6>
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ac:	461a      	mov	r2, r3
 80060ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	e008      	b.n	80060c8 <USB_DevInit+0xf8>
    }
    else
    {
      USBx_INEP(index)->DIEPCTL = 0;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	461a      	mov	r2, r3
 80060c4:	2300      	movs	r3, #0
 80060c6:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	461a      	mov	r2, r3
 80060d6:	2300      	movs	r3, #0
 80060d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	461a      	mov	r2, r3
 80060e8:	23ff      	movs	r3, #255	; 0xff
 80060ea:	6093      	str	r3, [r2, #8]
  for (index = 0; index < cfg.dev_endpoints; index++)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3301      	adds	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d8c6      	bhi.n	8006088 <USB_DevInit+0xb8>
  }
  
  for (index = 0; index < cfg.dev_endpoints; index++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e034      	b.n	800616a <USB_DevInit+0x19a>
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006116:	d10a      	bne.n	800612e <USB_DevInit+0x15e>
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006124:	461a      	mov	r2, r3
 8006126:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	e008      	b.n	8006140 <USB_DevInit+0x170>
    }
    else
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	2300      	movs	r3, #0
 800613e:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	461a      	mov	r2, r3
 800614e:	2300      	movs	r3, #0
 8006150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	461a      	mov	r2, r3
 8006160:	23ff      	movs	r3, #255	; 0xff
 8006162:	6093      	str	r3, [r2, #8]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3301      	adds	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	429a      	cmp	r2, r3
 8006170:	d8c6      	bhi.n	8006100 <USB_DevInit+0x130>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006178:	461a      	mov	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006186:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1)
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	2b01      	cmp	r3, #1
 800618c:	d117      	bne.n	80061be <USB_DevInit+0x1ee>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006194:	461a      	mov	r2, r3
 8006196:	4b23      	ldr	r3, [pc, #140]	; (8006224 <USB_DevInit+0x254>)
 8006198:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ae:	f043 0303 	orr.w	r3, r3, #3
 80061b2:	6313      	str	r3, [r2, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d105      	bne.n	80061de <USB_DevInit+0x20e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f043 0210 	orr.w	r2, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	619a      	str	r2, [r3, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	4b11      	ldr	r3, [pc, #68]	; (8006228 <USB_DevInit+0x258>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 80061ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <USB_DevInit+0x22c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f043 0208 	orr.w	r2, r3, #8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80061fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d107      	bne.n	8006212 <USB_DevInit+0x242>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800620a:	f043 0304 	orr.w	r3, r3, #4
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800621e:	b004      	add	sp, #16
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	00800100 	.word	0x00800100
 8006228:	803c3800 	.word	0x803c3800

0800622c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	019b      	lsls	r3, r3, #6
 800623e:	f043 0220 	orr.w	r2, r3, #32
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	611a      	str	r2, [r3, #16]
 
  do
  {
    if (++count > 200000)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4a09      	ldr	r2, [pc, #36]	; (8006274 <USB_FlushTxFifo+0x48>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d901      	bls.n	8006258 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e006      	b.n	8006266 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b20      	cmp	r3, #32
 8006262:	d0f0      	beq.n	8006246 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	00030d40 	.word	0x00030d40

08006278 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2210      	movs	r2, #16
 8006288:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3301      	adds	r3, #1
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a09      	ldr	r2, [pc, #36]	; (80062b8 <USB_FlushRxFifo+0x40>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d901      	bls.n	800629c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e006      	b.n	80062aa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b10      	cmp	r3, #16
 80062a6:	d0f0      	beq.n	800628a <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	00030d40 	.word	0x00030d40

080062bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ce:	4619      	mov	r1, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	4313      	orrs	r3, r2
 80062dc:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	461a      	mov	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f043 0302 	orr.w	r3, r3, #2
 8006308:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 800630a:	2003      	movs	r0, #3
 800630c:	f7fb fa4c 	bl	80017a8 <HAL_Delay>
  
  return HAL_OK;  
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3301      	adds	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4a13      	ldr	r2, [pc, #76]	; (8006380 <USB_CoreReset+0x64>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e01b      	b.n	8006372 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	daf2      	bge.n	8006328 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f043 0201 	orr.w	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4a09      	ldr	r2, [pc, #36]	; (8006380 <USB_CoreReset+0x64>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d901      	bls.n	8006364 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e006      	b.n	8006372 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b01      	cmp	r3, #1
 800636e:	d0f0      	beq.n	8006352 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	00030d40 	.word	0x00030d40

08006384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b0b8      	sub	sp, #224	; 0xe0
 8006388:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability
    */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800638a:	4a4d      	ldr	r2, [pc, #308]	; (80064c0 <SystemClock_Config+0x13c>)
 800638c:	4b4c      	ldr	r3, [pc, #304]	; (80064c0 <SystemClock_Config+0x13c>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f023 0318 	bic.w	r3, r3, #24
 8006396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800639a:	2314      	movs	r3, #20
 800639c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80063a0:	2301      	movs	r3, #1
 80063a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80063b2:	2360      	movs	r3, #96	; 0x60
 80063b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80063b8:	2302      	movs	r3, #2
 80063ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80063be:	2301      	movs	r3, #1
 80063c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80063c4:	2301      	movs	r3, #1
 80063c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80063ca:	2328      	movs	r3, #40	; 0x28
 80063cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80063d0:	2307      	movs	r3, #7
 80063d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80063d6:	2302      	movs	r3, #2
 80063d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80063dc:	2302      	movs	r3, #2
 80063de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fc ff9a 	bl	8003320 <HAL_RCC_OscConfig>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <SystemClock_Config+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 80063f2:	212f      	movs	r1, #47	; 0x2f
 80063f4:	4833      	ldr	r0, [pc, #204]	; (80064c4 <SystemClock_Config+0x140>)
 80063f6:	f000 f869 	bl	80064cc <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063fa:	230f      	movs	r3, #15
 80063fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006400:	2303      	movs	r3, #3
 8006402:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006406:	2300      	movs	r3, #0
 8006408:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006412:	2300      	movs	r3, #0
 8006414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006418:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800641c:	2104      	movs	r1, #4
 800641e:	4618      	mov	r0, r3
 8006420:	f7fd fae0 	bl	80039e4 <HAL_RCC_ClockConfig>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <SystemClock_Config+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 800642a:	213d      	movs	r1, #61	; 0x3d
 800642c:	4825      	ldr	r0, [pc, #148]	; (80064c4 <SystemClock_Config+0x140>)
 800642e:	f000 f84d 	bl	80064cc <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 8006432:	f242 0301 	movw	r3, #8193	; 0x2001
 8006436:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006438:	2300      	movs	r3, #0
 800643a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800643c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006440:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8006442:	2301      	movs	r3, #1
 8006444:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006446:	2301      	movs	r3, #1
 8006448:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800644a:	2318      	movs	r3, #24
 800644c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800644e:	2307      	movs	r3, #7
 8006450:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006452:	2302      	movs	r3, #2
 8006454:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006456:	2302      	movs	r3, #2
 8006458:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800645a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800645e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006460:	463b      	mov	r3, r7
 8006462:	4618      	mov	r0, r3
 8006464:	f7fd fd1c 	bl	8003ea0 <HAL_RCCEx_PeriphCLKConfig>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <SystemClock_Config+0xf2>
  {
    _Error_Handler(__FILE__, __LINE__);
 800646e:	214c      	movs	r1, #76	; 0x4c
 8006470:	4814      	ldr	r0, [pc, #80]	; (80064c4 <SystemClock_Config+0x140>)
 8006472:	f000 f82b 	bl	80064cc <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006476:	f44f 7000 	mov.w	r0, #512	; 0x200
 800647a:	f7fc fe21 	bl	80030c0 <HAL_PWREx_ControlVoltageScaling>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <SystemClock_Config+0x108>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006484:	2153      	movs	r1, #83	; 0x53
 8006486:	480f      	ldr	r0, [pc, #60]	; (80064c4 <SystemClock_Config+0x140>)
 8006488:	f000 f820 	bl	80064cc <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800648c:	f7fd fc72 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8006490:	4602      	mov	r2, r0
 8006492:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <SystemClock_Config+0x144>)
 8006494:	fba3 2302 	umull	r2, r3, r3, r2
 8006498:	099b      	lsrs	r3, r3, #6
 800649a:	4618      	mov	r0, r3
 800649c:	f7fb faa1 	bl	80019e2 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80064a0:	2004      	movs	r0, #4
 80064a2:	f7fb faab 	bl	80019fc <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration
    */
  HAL_RCCEx_EnableMSIPLLMode();
 80064a6:	f7fd ffdf 	bl	8004468 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80064aa:	2200      	movs	r2, #0
 80064ac:	2100      	movs	r1, #0
 80064ae:	f04f 30ff 	mov.w	r0, #4294967295
 80064b2:	f7fb fa6c 	bl	800198e <HAL_NVIC_SetPriority>
}
 80064b6:	bf00      	nop
 80064b8:	37e0      	adds	r7, #224	; 0xe0
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40021000 	.word	0x40021000
 80064c4:	0800b2c8 	.word	0x0800b2c8
 80064c8:	10624dd3 	.word	0x10624dd3

080064cc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80064d6:	e7fe      	b.n	80064d6 <_Error_Handler+0xa>

080064d8 <abs_val>:

/* compute the absolute value of a number
 * @param num: the number to be evaluated
 * @return a natural number
 */
uint8_t abs_val(int16_t num){
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	80fb      	strh	r3, [r7, #6]
	if (num < 0){
 80064e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da04      	bge.n	80064f4 <abs_val+0x1c>
		return (0-num);
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	425b      	negs	r3, r3
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	e001      	b.n	80064f8 <abs_val+0x20>
	}
	else{
		return num;
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	b2db      	uxtb	r3, r3
	}
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <thingSpeakUpdate>:
}

/*send 3 fields to Thingspeak
 * @param wifi_xmit: the string of fields to be updated
 */
void thingSpeakUpdate(uint8_t* wifi_xmit){
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af02      	add	r7, sp, #8
 800650a:	6078      	str	r0, [r7, #4]
	static uint8_t WIFI_connection[250];
	sprintf(WIFI_connection, "POST /update HTTP/1.1\n"
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7f9 fe5f 	bl	80001d0 <strlen>
 8006512:	4603      	mov	r3, r0
 8006514:	461a      	mov	r2, r3
 8006516:	490f      	ldr	r1, [pc, #60]	; (8006554 <thingSpeakUpdate+0x50>)
 8006518:	480f      	ldr	r0, [pc, #60]	; (8006558 <thingSpeakUpdate+0x54>)
 800651a:	f001 ff43 	bl	80083a4 <sprintf>
			                 "Host: api.thingspeak.com\n"
							 "Connection: close\n"
							 "X-THINGSPEAKAPIKEY: YF7HOW1VSKR4Y8H8\n"
							 "Content-Type: application/x-www-form-urlencoded\n"
							 "Content-Length: %d\n\n", strlen(wifi_xmit));
	sprintf(strchr(WIFI_connection, '\0'), wifi_xmit);
 800651e:	2100      	movs	r1, #0
 8006520:	480d      	ldr	r0, [pc, #52]	; (8006558 <thingSpeakUpdate+0x54>)
 8006522:	f001 ff63 	bl	80083ec <strchr>
 8006526:	4603      	mov	r3, r0
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4618      	mov	r0, r3
 800652c:	f001 ff3a 	bl	80083a4 <sprintf>
	WIFI_SendData((uint8_t)0, WIFI_connection, strlen(WIFI_connection), &XferSize, Timeout);
 8006530:	4809      	ldr	r0, [pc, #36]	; (8006558 <thingSpeakUpdate+0x54>)
 8006532:	f7f9 fe4d 	bl	80001d0 <strlen>
 8006536:	4603      	mov	r3, r0
 8006538:	b29a      	uxth	r2, r3
 800653a:	4b08      	ldr	r3, [pc, #32]	; (800655c <thingSpeakUpdate+0x58>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <thingSpeakUpdate+0x5c>)
 8006542:	4905      	ldr	r1, [pc, #20]	; (8006558 <thingSpeakUpdate+0x54>)
 8006544:	2000      	movs	r0, #0
 8006546:	f001 feb1 	bl	80082ac <WIFI_SendData>
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	0800b2d8 	.word	0x0800b2d8
 8006558:	20000718 	.word	0x20000718
 800655c:	20000050 	.word	0x20000050
 8006560:	20000714 	.word	0x20000714

08006564 <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0

  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8006568:	4b19      	ldr	r3, [pc, #100]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 800656a:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <MX_DFSDM1_Init+0x70>)
 800656c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800656e:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 8006570:	2201      	movs	r2, #1
 8006572:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8006574:	4b16      	ldr	r3, [pc, #88]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 8006576:	2200      	movs	r2, #0
 8006578:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 800657c:	2202      	movs	r2, #2
 800657e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8006580:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 8006582:	2200      	movs	r2, #0
 8006584:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8006586:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 8006588:	2200      	movs	r2, #0
 800658a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800658c:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 800658e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006592:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 8006596:	2200      	movs	r2, #0
 8006598:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800659a:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 800659c:	2204      	movs	r2, #4
 800659e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80065ac:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80065b2:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80065b8:	4805      	ldr	r0, [pc, #20]	; (80065d0 <MX_DFSDM1_Init+0x6c>)
 80065ba:	f7fb fa49 	bl	8001a50 <HAL_DFSDM_ChannelInit>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <MX_DFSDM1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 80065c4:	2146      	movs	r1, #70	; 0x46
 80065c6:	4804      	ldr	r0, [pc, #16]	; (80065d8 <MX_DFSDM1_Init+0x74>)
 80065c8:	f7ff ff80 	bl	80064cc <_Error_Handler>
  }

}
 80065cc:	bf00      	nop
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20000e28 	.word	0x20000e28
 80065d4:	40016020 	.word	0x40016020
 80065d8:	0800b384 	.word	0x0800b384

080065dc <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 80065e4:	4b14      	ldr	r3, [pc, #80]	; (8006638 <HAL_DFSDM_ChannelMspInit+0x5c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d121      	bne.n	8006630 <HAL_DFSDM_ChannelMspInit+0x54>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80065ec:	4a13      	ldr	r2, [pc, #76]	; (800663c <HAL_DFSDM_ChannelMspInit+0x60>)
 80065ee:	4b13      	ldr	r3, [pc, #76]	; (800663c <HAL_DFSDM_ChannelMspInit+0x60>)
 80065f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065f6:	6613      	str	r3, [r2, #96]	; 0x60
 80065f8:	4b10      	ldr	r3, [pc, #64]	; (800663c <HAL_DFSDM_ChannelMspInit+0x60>)
 80065fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	68bb      	ldr	r3, [r7, #8]
  
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8006604:	f44f 7320 	mov.w	r3, #640	; 0x280
 8006608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800660a:	2302      	movs	r3, #2
 800660c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660e:	2300      	movs	r3, #0
 8006610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006612:	2300      	movs	r3, #0
 8006614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8006616:	2306      	movs	r3, #6
 8006618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800661a:	f107 030c 	add.w	r3, r7, #12
 800661e:	4619      	mov	r1, r3
 8006620:	4807      	ldr	r0, [pc, #28]	; (8006640 <HAL_DFSDM_ChannelMspInit+0x64>)
 8006622:	f7fb fb29 	bl	8001c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8006626:	4b04      	ldr	r3, [pc, #16]	; (8006638 <HAL_DFSDM_ChannelMspInit+0x5c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3301      	adds	r3, #1
 800662c:	4a02      	ldr	r2, [pc, #8]	; (8006638 <HAL_DFSDM_ChannelMspInit+0x5c>)
 800662e:	6013      	str	r3, [r2, #0]
  }
}
 8006630:	bf00      	nop
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20000814 	.word	0x20000814
 800663c:	40021000 	.word	0x40021000
 8006640:	48001000 	.word	0x48001000

08006644 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt) 
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
 8006652:	2300      	movs	r3, #0
 8006654:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	60bb      	str	r3, [r7, #8]
    
    if (*ptr == '-') {                                		/* Check for minus character */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b2d      	cmp	r3, #45	; 0x2d
 8006660:	d119      	bne.n	8006696 <ParseNumber+0x52>
        minus = 1;
 8006662:	2301      	movs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3301      	adds	r3, #1
 800666a:	607b      	str	r3, [r7, #4]
        i++;
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	3301      	adds	r3, #1
 8006670:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8006672:	e010      	b.n	8006696 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	3b30      	subs	r3, #48	; 0x30
 8006686:	4413      	add	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]
        ptr++;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3301      	adds	r3, #1
 800668e:	607b      	str	r3, [r7, #4]
        i++;
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	3301      	adds	r3, #1
 8006694:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b2f      	cmp	r3, #47	; 0x2f
 800669c:	d903      	bls.n	80066a6 <ParseNumber+0x62>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b39      	cmp	r3, #57	; 0x39
 80066a4:	d9e6      	bls.n	8006674 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <ParseNumber+0x6e>
        *cnt = i;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	7bba      	ldrb	r2, [r7, #14]
 80066b0:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <ParseNumber+0x7a>
        return 0 - sum;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	425b      	negs	r3, r3
 80066bc:	e000      	b.n	80066c0 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 80066be:	68bb      	ldr	r3, [r7, #8]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr) 
{
 80066cc:	b590      	push	{r4, r7, lr}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
  
  while(* ptr) { 
 80066da:	e019      	b.n	8006710 <ParseIP+0x44>
    hexcnt = 1;
 80066dc:	2301      	movs	r3, #1
 80066de:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b2e      	cmp	r3, #46	; 0x2e
 80066e6:	d00e      	beq.n	8006706 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	73fa      	strb	r2, [r7, #15]
 80066ee:	461a      	mov	r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	189c      	adds	r4, r3, r2
 80066f4:	f107 030e 	add.w	r3, r7, #14
 80066f8:	4619      	mov	r1, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff ffa2 	bl	8006644 <ParseNumber>
 8006700:	4603      	mov	r3, r0
 8006702:	b2db      	uxtb	r3, r3
 8006704:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + hexcnt;
 8006706:	7bbb      	ldrb	r3, [r7, #14]
 8006708:	461a      	mov	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	607b      	str	r3, [r7, #4]
  while(* ptr) { 
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e1      	bne.n	80066dc <ParseIP+0x10>
  }
}
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	bd90      	pop	{r4, r7, pc}

08006720 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	72fb      	strb	r3, [r7, #11]
  
  ptr = strtok((char *)pdata + 2, ",");  
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	3302      	adds	r3, #2
 8006732:	4934      	ldr	r1, [pc, #208]	; (8006804 <AT_ParseInfo+0xe4>)
 8006734:	4618      	mov	r0, r3
 8006736:	f001 fe97 	bl	8008468 <strtok>
 800673a:	60f8      	str	r0, [r7, #12]
  
  while (ptr != NULL){
 800673c:	e05a      	b.n	80067f4 <AT_ParseInfo+0xd4>
    switch (num++) { 
 800673e:	7afb      	ldrb	r3, [r7, #11]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	72fa      	strb	r2, [r7, #11]
 8006744:	2b06      	cmp	r3, #6
 8006746:	d84f      	bhi.n	80067e8 <AT_ParseInfo+0xc8>
 8006748:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <AT_ParseInfo+0x30>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	0800676d 	.word	0x0800676d
 8006754:	0800677b 	.word	0x0800677b
 8006758:	0800678b 	.word	0x0800678b
 800675c:	0800679b 	.word	0x0800679b
 8006760:	080067ab 	.word	0x080067ab
 8006764:	080067bb 	.word	0x080067bb
 8006768:	080067cf 	.word	0x080067cf
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	68f9      	ldr	r1, [r7, #12]
 8006772:	4618      	mov	r0, r3
 8006774:	f001 fe48 	bl	8008408 <strncpy>
      break;
 8006778:	e037      	b.n	80067ea <AT_ParseInfo+0xca>
      
    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3320      	adds	r3, #32
 800677e:	2210      	movs	r2, #16
 8006780:	68f9      	ldr	r1, [r7, #12]
 8006782:	4618      	mov	r0, r3
 8006784:	f001 fe40 	bl	8008408 <strncpy>
      break;
 8006788:	e02f      	b.n	80067ea <AT_ParseInfo+0xca>
      
    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);      
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3330      	adds	r3, #48	; 0x30
 800678e:	2210      	movs	r2, #16
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fe38 	bl	8008408 <strncpy>
      break;
 8006798:	e027      	b.n	80067ea <AT_ParseInfo+0xca>
      
    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);   
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3340      	adds	r3, #64	; 0x40
 800679e:	2210      	movs	r2, #16
 80067a0:	68f9      	ldr	r1, [r7, #12]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 fe30 	bl	8008408 <strncpy>
      break;
 80067a8:	e01f      	b.n	80067ea <AT_ParseInfo+0xca>
      
    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);        
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3350      	adds	r3, #80	; 0x50
 80067ae:	2210      	movs	r2, #16
 80067b0:	68f9      	ldr	r1, [r7, #12]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 fe28 	bl	8008408 <strncpy>
      break;
 80067b8:	e017      	b.n	80067ea <AT_ParseInfo+0xca>
      
    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80067ba:	2100      	movs	r1, #0
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff ff41 	bl	8006644 <ParseNumber>
 80067c2:	4603      	mov	r3, r0
 80067c4:	461a      	mov	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;      
 80067cc:	e00d      	b.n	80067ea <AT_ParseInfo+0xca>
      
    case 6:
      ptr = strtok(ptr, "\r"); 
 80067ce:	490e      	ldr	r1, [pc, #56]	; (8006808 <AT_ParseInfo+0xe8>)
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f001 fe49 	bl	8008468 <strtok>
 80067d6:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3360      	adds	r3, #96	; 0x60
 80067dc:	2220      	movs	r2, #32
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f001 fe11 	bl	8008408 <strncpy>
      break;
 80067e6:	e000      	b.n	80067ea <AT_ParseInfo+0xca>
      
    default: break;
 80067e8:	bf00      	nop
    }
    ptr = strtok(NULL, ","); 
 80067ea:	4906      	ldr	r1, [pc, #24]	; (8006804 <AT_ParseInfo+0xe4>)
 80067ec:	2000      	movs	r0, #0
 80067ee:	f001 fe3b 	bl	8008468 <strtok>
 80067f2:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1a1      	bne.n	800673e <AT_ParseInfo+0x1e>
  }
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	0800b3c4 	.word	0x0800b3c4
 8006808:	0800b3c8 	.word	0x0800b3c8

0800680c <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
  char *ptr;
 
  ptr = strtok(pdata + 2, ",");   
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3302      	adds	r3, #2
 800681e:	4952      	ldr	r1, [pc, #328]	; (8006968 <AT_ParseConnSettings+0x15c>)
 8006820:	4618      	mov	r0, r3
 8006822:	f001 fe21 	bl	8008468 <strtok>
 8006826:	60b8      	str	r0, [r7, #8]
  
  while (ptr != NULL) {
 8006828:	e095      	b.n	8006956 <AT_ParseConnSettings+0x14a>
    switch (num++) {      
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	73fa      	strb	r2, [r7, #15]
 8006830:	2b0b      	cmp	r3, #11
 8006832:	d87f      	bhi.n	8006934 <AT_ParseConnSettings+0x128>
 8006834:	a201      	add	r2, pc, #4	; (adr r2, 800683c <AT_ParseConnSettings+0x30>)
 8006836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683a:	bf00      	nop
 800683c:	0800686d 	.word	0x0800686d
 8006840:	0800687b 	.word	0x0800687b
 8006844:	0800688b 	.word	0x0800688b
 8006848:	0800689f 	.word	0x0800689f
 800684c:	080068b3 	.word	0x080068b3
 8006850:	080068c7 	.word	0x080068c7
 8006854:	080068d5 	.word	0x080068d5
 8006858:	080068e3 	.word	0x080068e3
 800685c:	080068f1 	.word	0x080068f1
 8006860:	080068ff 	.word	0x080068ff
 8006864:	0800690d 	.word	0x0800690d
 8006868:	08006921 	.word	0x08006921
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1); 
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2221      	movs	r2, #33	; 0x21
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	4618      	mov	r0, r3
 8006874:	f001 fdc8 	bl	8008408 <strncpy>
      break;
 8006878:	e05d      	b.n	8006936 <AT_ParseConnSettings+0x12a>
      
    case 1: 
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	3321      	adds	r3, #33	; 0x21
 800687e:	2221      	movs	r2, #33	; 0x21
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	4618      	mov	r0, r3
 8006884:	f001 fdc0 	bl	8008408 <strncpy>
      break;
 8006888:	e055      	b.n	8006936 <AT_ParseConnSettings+0x12a>
      
    case 2: 
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800688a:	2100      	movs	r1, #0
 800688c:	68b8      	ldr	r0, [r7, #8]
 800688e:	f7ff fed9 	bl	8006644 <ParseNumber>
 8006892:	4603      	mov	r3, r0
 8006894:	b2da      	uxtb	r2, r3
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;   
 800689c:	e04b      	b.n	8006936 <AT_ParseConnSettings+0x12a>

    case 3: 
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800689e:	2100      	movs	r1, #0
 80068a0:	68b8      	ldr	r0, [r7, #8]
 80068a2:	f7ff fecf 	bl	8006644 <ParseNumber>
 80068a6:	4603      	mov	r3, r0
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 80068b0:	e041      	b.n	8006936 <AT_ParseConnSettings+0x12a>
      
    case 4: 
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80068b2:	2100      	movs	r1, #0
 80068b4:	68b8      	ldr	r0, [r7, #8]
 80068b6:	f7ff fec5 	bl	8006644 <ParseNumber>
 80068ba:	4603      	mov	r3, r0
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;      
 80068c4:	e037      	b.n	8006936 <AT_ParseConnSettings+0x12a>
      
    case 5: 
      ParseIP(ptr, NetSettings->IP_Addr);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	3348      	adds	r3, #72	; 0x48
 80068ca:	4619      	mov	r1, r3
 80068cc:	68b8      	ldr	r0, [r7, #8]
 80068ce:	f7ff fefd 	bl	80066cc <ParseIP>
      break; 
 80068d2:	e030      	b.n	8006936 <AT_ParseConnSettings+0x12a>
      
    case 6: 
      ParseIP(ptr, NetSettings->IP_Mask);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	334c      	adds	r3, #76	; 0x4c
 80068d8:	4619      	mov	r1, r3
 80068da:	68b8      	ldr	r0, [r7, #8]
 80068dc:	f7ff fef6 	bl	80066cc <ParseIP>
      break;      
 80068e0:	e029      	b.n	8006936 <AT_ParseConnSettings+0x12a>
      
    case 7: 
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	3350      	adds	r3, #80	; 0x50
 80068e6:	4619      	mov	r1, r3
 80068e8:	68b8      	ldr	r0, [r7, #8]
 80068ea:	f7ff feef 	bl	80066cc <ParseIP>
      break; 
 80068ee:	e022      	b.n	8006936 <AT_ParseConnSettings+0x12a>
      
    case 8: 
      ParseIP(ptr, NetSettings->DNS1);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	3354      	adds	r3, #84	; 0x54
 80068f4:	4619      	mov	r1, r3
 80068f6:	68b8      	ldr	r0, [r7, #8]
 80068f8:	f7ff fee8 	bl	80066cc <ParseIP>
      break;      
 80068fc:	e01b      	b.n	8006936 <AT_ParseConnSettings+0x12a>
      
    case 9: 
      ParseIP(ptr, NetSettings->DNS2);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	3358      	adds	r3, #88	; 0x58
 8006902:	4619      	mov	r1, r3
 8006904:	68b8      	ldr	r0, [r7, #8]
 8006906:	f7ff fee1 	bl	80066cc <ParseIP>
      break; 
 800690a:	e014      	b.n	8006936 <AT_ParseConnSettings+0x12a>
      
    case 10: 
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800690c:	2100      	movs	r1, #0
 800690e:	68b8      	ldr	r0, [r7, #8]
 8006910:	f7ff fe98 	bl	8006644 <ParseNumber>
 8006914:	4603      	mov	r3, r0
 8006916:	b2da      	uxtb	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;  
 800691e:	e00a      	b.n	8006936 <AT_ParseConnSettings+0x12a>
      
    case 11: 
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8006920:	2100      	movs	r1, #0
 8006922:	68b8      	ldr	r0, [r7, #8]
 8006924:	f7ff fe8e 	bl	8006644 <ParseNumber>
 8006928:	4603      	mov	r3, r0
 800692a:	b2da      	uxtb	r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;  
 8006932:	e000      	b.n	8006936 <AT_ParseConnSettings+0x12a>

    default: 
      break;
 8006934:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8006936:	490c      	ldr	r1, [pc, #48]	; (8006968 <AT_ParseConnSettings+0x15c>)
 8006938:	2000      	movs	r0, #0
 800693a:	f001 fd95 	bl	8008468 <strtok>
 800693e:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <AT_ParseConnSettings+0x14a>
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	3b01      	subs	r3, #1
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b2c      	cmp	r3, #44	; 0x2c
 800694e:	d102      	bne.n	8006956 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	3301      	adds	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f47f af66 	bne.w	800682a <AT_ParseConnSettings+0x1e>
    }
  }
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	0800b3c4 	.word	0x0800b3c4

0800696c <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800696c:	b590      	push	{r4, r7, lr}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 800697e:	68b8      	ldr	r0, [r7, #8]
 8006980:	f7f9 fc26 	bl	80001d0 <strlen>
 8006984:	4603      	mov	r3, r0
 8006986:	b299      	uxth	r1, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 800698e:	461a      	mov	r2, r3
 8006990:	68b8      	ldr	r0, [r7, #8]
 8006992:	47a0      	blx	r4
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	dd26      	ble.n	80069e8 <AT_ExecuteCommand+0x7c>
  {
    int16_t n=Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 80069a6:	2100      	movs	r1, #0
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	4798      	blx	r3
 80069ac:	4603      	mov	r3, r0
 80069ae:	82fb      	strh	r3, [r7, #22]
    if(n > 0)
 80069b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dd17      	ble.n	80069e8 <AT_ExecuteCommand+0x7c>
    {
      *(pdata+n)=0;
 80069b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	4413      	add	r3, r2
 80069c0:	2200      	movs	r2, #0
 80069c2:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80069c4:	490b      	ldr	r1, [pc, #44]	; (80069f4 <AT_ExecuteCommand+0x88>)
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fd33 	bl	8008432 <strstr>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <AT_ExecuteCommand+0x6a>
      {
        return ES_WIFI_STATUS_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	e009      	b.n	80069ea <AT_ExecuteCommand+0x7e>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80069d6:	4908      	ldr	r1, [pc, #32]	; (80069f8 <AT_ExecuteCommand+0x8c>)
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 fd2a 	bl	8008432 <strstr>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <AT_ExecuteCommand+0x7c>
      {
        return ES_WIFI_STATUS_ERROR;
 80069e4:	2302      	movs	r3, #2
 80069e6:	e000      	b.n	80069ea <AT_ExecuteCommand+0x7e>
      }      
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80069e8:	2304      	movs	r3, #4
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd90      	pop	{r4, r7, pc}
 80069f2:	bf00      	nop
 80069f4:	0800b3cc 	.word	0x0800b3cc
 80069f8:	0800b3d8 	.word	0x0800b3d8

080069fc <AT_RequestSendData>:
  * @param  len: binary data length
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{      
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	807b      	strh	r3, [r7, #2]
  /* can send only even number of byte on first send */
  uint16_t n=strlen((char*)cmd);
 8006a0a:	68b8      	ldr	r0, [r7, #8]
 8006a0c:	f7f9 fbe0 	bl	80001d0 <strlen>
 8006a10:	4603      	mov	r3, r0
 8006a12:	82fb      	strh	r3, [r7, #22]
  if (n &1 ) return ES_WIFI_STATUS_ERROR;
 8006a14:	8afb      	ldrh	r3, [r7, #22]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <AT_RequestSendData+0x26>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e047      	b.n	8006ab2 <AT_RequestSendData+0xb6>
  if(Obj->fops.IO_Send(cmd, n, Obj->Timeout) == n)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8006a2e:	8af9      	ldrh	r1, [r7, #22]
 8006a30:	68b8      	ldr	r0, [r7, #8]
 8006a32:	4798      	blx	r3
 8006a34:	4603      	mov	r3, r0
 8006a36:	461a      	mov	r2, r3
 8006a38:	8afb      	ldrh	r3, [r7, #22]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d138      	bne.n	8006ab0 <AT_RequestSendData+0xb4>
  {
    int16_t n=Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8006a4a:	8879      	ldrh	r1, [r7, #2]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	4798      	blx	r3
 8006a50:	4603      	mov	r3, r0
 8006a52:	82bb      	strh	r3, [r7, #20]
    if(n == len)
 8006a54:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006a58:	887b      	ldrh	r3, [r7, #2]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d126      	bne.n	8006aac <AT_RequestSendData+0xb0>
    {
      n = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	6a38      	ldr	r0, [r7, #32]
 8006a6e:	4798      	blx	r3
 8006a70:	4603      	mov	r3, r0
 8006a72:	82bb      	strh	r3, [r7, #20]
      if(n > 0)
 8006a74:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dd19      	ble.n	8006ab0 <AT_RequestSendData+0xb4>
      {
        *(pdata+n)=0;
 8006a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	4413      	add	r3, r2
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8006a88:	490c      	ldr	r1, [pc, #48]	; (8006abc <AT_RequestSendData+0xc0>)
 8006a8a:	6a38      	ldr	r0, [r7, #32]
 8006a8c:	f001 fcd1 	bl	8008432 <strstr>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <AT_RequestSendData+0x9e>
        {
          return ES_WIFI_STATUS_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e00b      	b.n	8006ab2 <AT_RequestSendData+0xb6>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8006a9a:	4909      	ldr	r1, [pc, #36]	; (8006ac0 <AT_RequestSendData+0xc4>)
 8006a9c:	6a38      	ldr	r0, [r7, #32]
 8006a9e:	f001 fcc8 	bl	8008432 <strstr>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <AT_RequestSendData+0xb4>
        {
          return ES_WIFI_STATUS_ERROR;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e002      	b.n	8006ab2 <AT_RequestSendData+0xb6>
        }      
      }
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8006aac:	2302      	movs	r3, #2
 8006aae:	e000      	b.n	8006ab2 <AT_RequestSendData+0xb6>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8006ab0:	2304      	movs	r3, #4
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	0800b3cc 	.word	0x0800b3cc
 8006ac0:	0800b3d8 	.word	0x0800b3d8

08006ac4 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8006acc:	2302      	movs	r3, #2
 8006ace:	73fb      	strb	r3, [r7, #15]
  
  Obj->Timeout = ES_WIFI_TIMEOUT;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ad6:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
  
  if (Obj->fops.IO_Init() == 0)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8006ae0:	4798      	blx	r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d113      	bne.n	8006b10 <ES_WIFI_Init+0x4c>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006aee:	461a      	mov	r2, r3
 8006af0:	490a      	ldr	r1, [pc, #40]	; (8006b1c <ES_WIFI_Init+0x58>)
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff ff3a 	bl	800696c <AT_ExecuteCommand>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
    
    if(ret == ES_WIFI_STATUS_OK)
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <ES_WIFI_Init+0x4c>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff fe08 	bl	8006720 <AT_ParseInfo>
    }
  }
  return ret;
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	0800b3e0 	.word	0x0800b3e0

08006b20 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,  
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <ES_WIFI_RegisterBusIO+0x2c>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d008      	beq.n	8006b4c <ES_WIFI_RegisterBusIO+0x2c>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <ES_WIFI_RegisterBusIO+0x2c>
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <ES_WIFI_RegisterBusIO+0x2c>
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e010      	b.n	8006b72 <ES_WIFI_RegisterBusIO+0x52>
  }

  Obj->fops.IO_Init = IO_Init;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  Obj->fops.IO_Send = IO_Send;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Receive = IO_Receive;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  Obj->fops.IO_Delay = IO_Delay;  
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  
  return ES_WIFI_STATUS_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
	...

08006b80 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID, 
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	4931      	ldr	r1, [pc, #196]	; (8006c5c <ES_WIFI_Connect+0xdc>)
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f001 fc03 	bl	80083a4 <sprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006baa:	461a      	mov	r2, r3
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f7ff fedd 	bl	800696c <AT_ExecuteCommand>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d14a      	bne.n	8006c52 <ES_WIFI_Connect+0xd2>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	4926      	ldr	r1, [pc, #152]	; (8006c60 <ES_WIFI_Connect+0xe0>)
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 fbec 	bl	80083a4 <sprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006bd8:	461a      	mov	r2, r3
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7ff fec6 	bl	800696c <AT_ExecuteCommand>
 8006be0:	4603      	mov	r3, r0
 8006be2:	75fb      	strb	r3, [r7, #23]
    
    if(ret == ES_WIFI_STATUS_OK)
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d133      	bne.n	8006c52 <ES_WIFI_Connect+0xd2>
    {
      Obj->Security = SecType;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006bf8:	78fa      	ldrb	r2, [r7, #3]
 8006bfa:	491a      	ldr	r1, [pc, #104]	; (8006c64 <ES_WIFI_Connect+0xe4>)
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 fbd1 	bl	80083a4 <sprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006c0e:	461a      	mov	r2, r3
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7ff feab 	bl	800696c <AT_ExecuteCommand>
 8006c16:	4603      	mov	r3, r0
 8006c18:	75fb      	strb	r3, [r7, #23]
      
      if(ret == ES_WIFI_STATUS_OK)
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d118      	bne.n	8006c52 <ES_WIFI_Connect+0xd2>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006c26:	4a10      	ldr	r2, [pc, #64]	; (8006c68 <ES_WIFI_Connect+0xe8>)
 8006c28:	6810      	ldr	r0, [r2, #0]
 8006c2a:	6018      	str	r0, [r3, #0]
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);  
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006c38:	461a      	mov	r2, r3
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff fe96 	bl	800696c <AT_ExecuteCommand>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d103      	bne.n	8006c52 <ES_WIFI_Connect+0xd2>
        {
           Obj->NetSettings.IsConnected = 1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        }
      }    
    }
  }
  return ret;
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	0800b3ec 	.word	0x0800b3ec
 8006c60:	0800b3f4 	.word	0x0800b3f4
 8006c64:	0800b3fc 	.word	0x0800b3fc
 8006c68:	0800b404 	.word	0x0800b404

08006c6c <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C?\r");
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006c7a:	4a10      	ldr	r2, [pc, #64]	; (8006cbc <ES_WIFI_GetNetworkSettings+0x50>)
 8006c7c:	6810      	ldr	r0, [r2, #0]
 8006c7e:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff fe6c 	bl	800696c <AT_ExecuteCommand>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]
  
  if(ret == ES_WIFI_STATUS_OK)
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d108      	bne.n	8006cb0 <ES_WIFI_GetNetworkSettings+0x44>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3385      	adds	r3, #133	; 0x85
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4610      	mov	r0, r2
 8006cac:	f7ff fdae 	bl	800680c <AT_ParseConnSettings>
  }  
  return ret;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	0800b40c 	.word	0x0800b40c

08006cc0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8006cc0:	b590      	push	{r4, r7, lr}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af02      	add	r7, sp, #8
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	4950      	ldr	r1, [pc, #320]	; (8006e18 <ES_WIFI_StartClientConnection+0x158>)
 8006cd8:	f001 fb64 	bl	80083a4 <sprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff fe3e 	bl	800696c <AT_ExecuteCommand>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73fb      	strb	r3, [r7, #15]
  
  if(ret == ES_WIFI_STATUS_OK)
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f040 8088 	bne.w	8006e0c <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	4944      	ldr	r1, [pc, #272]	; (8006e1c <ES_WIFI_StartClientConnection+0x15c>)
 8006d0a:	f001 fb4b 	bl	80083a4 <sprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff fe25 	bl	800696c <AT_ExecuteCommand>
 8006d22:	4603      	mov	r3, r0
 8006d24:	73fb      	strb	r3, [r7, #15]
    if(ret == ES_WIFI_STATUS_OK)
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d16f      	bne.n	8006e0c <ES_WIFI_StartClientConnection+0x14c>
    {
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0)) 
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d11b      	bne.n	8006d6c <ES_WIFI_StartClientConnection+0xac>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	889b      	ldrh	r3, [r3, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d017      	beq.n	8006d6c <ES_WIFI_StartClientConnection+0xac>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->RemotePort);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	885b      	ldrh	r3, [r3, #2]
 8006d46:	461a      	mov	r2, r3
 8006d48:	4935      	ldr	r1, [pc, #212]	; (8006e20 <ES_WIFI_StartClientConnection+0x160>)
 8006d4a:	f001 fb2b 	bl	80083a4 <sprintf>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fe05 	bl	800696c <AT_ExecuteCommand>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d101      	bne.n	8006d6c <ES_WIFI_StartClientConnection+0xac>
        {
          return ES_WIFI_STATUS_ERROR;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e050      	b.n	8006e0e <ES_WIFI_StartClientConnection+0x14e>
        }
      }
      sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	885b      	ldrh	r3, [r3, #2]
 8006d76:	461a      	mov	r2, r3
 8006d78:	492a      	ldr	r1, [pc, #168]	; (8006e24 <ES_WIFI_StartClientConnection+0x164>)
 8006d7a:	f001 fb13 	bl	80083a4 <sprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fded 	bl	800696c <AT_ExecuteCommand>
 8006d92:	4603      	mov	r3, r0
 8006d94:	73fb      	strb	r3, [r7, #15]
      
      if(ret == ES_WIFI_STATUS_OK)
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d137      	bne.n	8006e0c <ES_WIFI_StartClientConnection+0x14c>
      {
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	799b      	ldrb	r3, [r3, #6]
 8006da6:	4619      	mov	r1, r3
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	79db      	ldrb	r3, [r3, #7]
 8006dac:	461c      	mov	r4, r3
                conn->RemoteIP[2],conn->RemoteIP[3]);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	7a1b      	ldrb	r3, [r3, #8]
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8006db2:	461a      	mov	r2, r3
                conn->RemoteIP[2],conn->RemoteIP[3]);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	7a5b      	ldrb	r3, [r3, #9]
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	9200      	str	r2, [sp, #0]
 8006dbc:	4623      	mov	r3, r4
 8006dbe:	460a      	mov	r2, r1
 8006dc0:	4919      	ldr	r1, [pc, #100]	; (8006e28 <ES_WIFI_StartClientConnection+0x168>)
 8006dc2:	f001 faef 	bl	80083a4 <sprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData); 
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff fdc9 	bl	800696c <AT_ExecuteCommand>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	73fb      	strb	r3, [r7, #15]
        if(ret == ES_WIFI_STATUS_OK)
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d113      	bne.n	8006e0c <ES_WIFI_StartClientConnection+0x14c>
        {
          sprintf((char*)Obj->CmdData,"P6=1\r");
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006dea:	4a10      	ldr	r2, [pc, #64]	; (8006e2c <ES_WIFI_StartClientConnection+0x16c>)
 8006dec:	6810      	ldr	r0, [r2, #0]
 8006dee:	6018      	str	r0, [r3, #0]
 8006df0:	8892      	ldrh	r2, [r2, #4]
 8006df2:	809a      	strh	r2, [r3, #4]
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);         
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006e00:	461a      	mov	r2, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fdb2 	bl	800696c <AT_ExecuteCommand>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]
        }          
      }           
    }
  }
  return ret;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd90      	pop	{r4, r7, pc}
 8006e16:	bf00      	nop
 8006e18:	0800b4d4 	.word	0x0800b4d4
 8006e1c:	0800b4dc 	.word	0x0800b4dc
 8006e20:	0800b4e4 	.word	0x0800b4e4
 8006e24:	0800b4ec 	.word	0x0800b4ec
 8006e28:	0800b4f4 	.word	0x0800b4f4
 8006e2c:	0800b504 	.word	0x0800b504

08006e30 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	461a      	mov	r2, r3
 8006e46:	4915      	ldr	r1, [pc, #84]	; (8006e9c <ES_WIFI_StopClientConnection+0x6c>)
 8006e48:	f001 faac 	bl	80083a4 <sprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff fd86 	bl	800696c <AT_ExecuteCommand>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]
  
  if(ret == ES_WIFI_STATUS_OK)
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d113      	bne.n	8006e92 <ES_WIFI_StopClientConnection+0x62>
  {  
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006e70:	4a0b      	ldr	r2, [pc, #44]	; (8006ea0 <ES_WIFI_StopClientConnection+0x70>)
 8006e72:	6810      	ldr	r0, [r2, #0]
 8006e74:	6018      	str	r0, [r3, #0]
 8006e76:	8892      	ldrh	r2, [r2, #4]
 8006e78:	809a      	strh	r2, [r3, #4]
    ret =  AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);     
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006e86:	461a      	mov	r2, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff fd6f 	bl	800696c <AT_ExecuteCommand>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	0800b4d4 	.word	0x0800b4d4
 8006ea0:	0800b50c 	.word	0x0800b50c

08006ea4 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	72fb      	strb	r3, [r7, #11]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
 8006eb8:	2302      	movs	r3, #2
 8006eba:	75fb      	strb	r3, [r7, #23]
  
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8006ebc:	893b      	ldrh	r3, [r7, #8]
 8006ebe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8006ec2:	d302      	bcc.n	8006eca <ES_WIFI_SendData+0x26>
 8006ec4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006ec8:	813b      	strh	r3, [r7, #8]
  
  *SentLen = Reqlen;
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	893a      	ldrh	r2, [r7, #8]
 8006ece:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006ed6:	7afa      	ldrb	r2, [r7, #11]
 8006ed8:	492d      	ldr	r1, [pc, #180]	; (8006f90 <ES_WIFI_SendData+0xec>)
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 fa62 	bl	80083a4 <sprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006eec:	461a      	mov	r2, r3
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff fd3c 	bl	800696c <AT_ExecuteCommand>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d13c      	bne.n	8006f78 <ES_WIFI_SendData+0xd4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f06:	4923      	ldr	r1, [pc, #140]	; (8006f94 <ES_WIFI_SendData+0xf0>)
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f001 fa4b 	bl	80083a4 <sprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f7ff fd25 	bl	800696c <AT_ExecuteCommand>
 8006f22:	4603      	mov	r3, r0
 8006f24:	75fb      	strb	r3, [r7, #23]
    
    if(ret == ES_WIFI_STATUS_OK)
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d125      	bne.n	8006f78 <ES_WIFI_SendData+0xd4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006f32:	893a      	ldrh	r2, [r7, #8]
 8006f34:	4918      	ldr	r1, [pc, #96]	; (8006f98 <ES_WIFI_SendData+0xf4>)
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 fa34 	bl	80083a4 <sprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006f48:	893a      	ldrh	r2, [r7, #8]
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff fd53 	bl	80069fc <AT_RequestSendData>
 8006f56:	4603      	mov	r3, r0
 8006f58:	75fb      	strb	r3, [r7, #23]
      
      if(ret == ES_WIFI_STATUS_OK)
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10b      	bne.n	8006f78 <ES_WIFI_SendData+0xd4>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006f66:	490d      	ldr	r1, [pc, #52]	; (8006f9c <ES_WIFI_SendData+0xf8>)
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f001 fa62 	bl	8008432 <strstr>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <ES_WIFI_SendData+0xd4>
        {
          ret = ES_WIFI_STATUS_ERROR;
 8006f74:	2302      	movs	r3, #2
 8006f76:	75fb      	strb	r3, [r7, #23]
        }
      }
    }
  }
  
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d102      	bne.n	8006f84 <ES_WIFI_SendData+0xe0>
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	2200      	movs	r2, #0
 8006f82:	801a      	strh	r2, [r3, #0]
  return ret;  
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	0800b4d4 	.word	0x0800b4d4
 8006f94:	0800b570 	.word	0x0800b570
 8006f98:	0800b578 	.word	0x0800b578
 8006f9c:	0800b584 	.word	0x0800b584

08006fa0 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08c      	sub	sp, #48	; 0x30
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8006fa8:	4a56      	ldr	r2, [pc, #344]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006faa:	4b56      	ldr	r3, [pc, #344]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8006fb4:	4b53      	ldr	r3, [pc, #332]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fc0:	4a50      	ldr	r2, [pc, #320]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006fc2:	4b50      	ldr	r3, [pc, #320]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	f043 0302 	orr.w	r3, r3, #2
 8006fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fcc:	4b4d      	ldr	r3, [pc, #308]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fd8:	4a4a      	ldr	r2, [pc, #296]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006fda:	4b4a      	ldr	r3, [pc, #296]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fde:	f043 0304 	orr.w	r3, r3, #4
 8006fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fe4:	4b47      	ldr	r3, [pc, #284]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ff0:	4a44      	ldr	r2, [pc, #272]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006ff2:	4b44      	ldr	r3, [pc, #272]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff6:	f043 0310 	orr.w	r3, r3, #16
 8006ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ffc:	4b41      	ldr	r3, [pc, #260]	; (8007104 <SPI_WIFI_MspInit+0x164>)
 8006ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	68fb      	ldr	r3, [r7, #12]
  
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8007008:	2200      	movs	r2, #0
 800700a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800700e:	483e      	ldr	r0, [pc, #248]	; (8007108 <SPI_WIFI_MspInit+0x168>)
 8007010:	f7fb f8ee 	bl	80021f0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8007014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007018:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800701a:	2301      	movs	r3, #1
 800701c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800701e:	2300      	movs	r3, #0
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8007022:	2300      	movs	r3, #0
 8007024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8007026:	f107 031c 	add.w	r3, r7, #28
 800702a:	4619      	mov	r1, r3
 800702c:	4836      	ldr	r0, [pc, #216]	; (8007108 <SPI_WIFI_MspInit+0x168>)
 800702e:	f7fa fe23 	bl	8001c78 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8007032:	2302      	movs	r3, #2
 8007034:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8007036:	4b35      	ldr	r3, [pc, #212]	; (800710c <SPI_WIFI_MspInit+0x16c>)
 8007038:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800703a:	2300      	movs	r3, #0
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800703e:	2300      	movs	r3, #0
 8007040:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8007042:	f107 031c 	add.w	r3, r7, #28
 8007046:	4619      	mov	r1, r3
 8007048:	4831      	ldr	r0, [pc, #196]	; (8007110 <SPI_WIFI_MspInit+0x170>)
 800704a:	f7fa fe15 	bl	8001c78 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800704e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007052:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8007054:	2301      	movs	r3, #1
 8007056:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8007058:	2300      	movs	r3, #0
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800705c:	2300      	movs	r3, #0
 800705e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8007064:	f107 031c 	add.w	r3, r7, #28
 8007068:	4619      	mov	r1, r3
 800706a:	4829      	ldr	r0, [pc, #164]	; (8007110 <SPI_WIFI_MspInit+0x170>)
 800706c:	f7fa fe04 	bl	8001c78 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE, GPIO_PIN_0, GPIO_PIN_SET ); 
 8007070:	2201      	movs	r2, #1
 8007072:	2101      	movs	r1, #1
 8007074:	4826      	ldr	r0, [pc, #152]	; (8007110 <SPI_WIFI_MspInit+0x170>)
 8007076:	f7fb f8bb 	bl	80021f0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_0;
 800707a:	2301      	movs	r3, #1
 800707c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800707e:	2301      	movs	r3, #1
 8007080:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8007082:	2300      	movs	r3, #0
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8007086:	2301      	movs	r3, #1
 8007088:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800708a:	f107 031c 	add.w	r3, r7, #28
 800708e:	4619      	mov	r1, r3
 8007090:	481f      	ldr	r0, [pc, #124]	; (8007110 <SPI_WIFI_MspInit+0x170>)
 8007092:	f7fa fdf1 	bl	8001c78 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       = GPIO_PIN_10;
 8007096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800709a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800709c:	2302      	movs	r3, #2
 800709e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80070a4:	2301      	movs	r3, #1
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80070a8:	2306      	movs	r3, #6
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80070ac:	f107 031c 	add.w	r3, r7, #28
 80070b0:	4619      	mov	r1, r3
 80070b2:	4818      	ldr	r0, [pc, #96]	; (8007114 <SPI_WIFI_MspInit+0x174>)
 80070b4:	f7fa fde0 	bl	8001c78 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80070b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070bc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80070be:	2302      	movs	r3, #2
 80070c0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80070c6:	2301      	movs	r3, #1
 80070c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80070ca:	2306      	movs	r3, #6
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80070ce:	f107 031c 	add.w	r3, r7, #28
 80070d2:	4619      	mov	r1, r3
 80070d4:	480f      	ldr	r0, [pc, #60]	; (8007114 <SPI_WIFI_MspInit+0x174>)
 80070d6:	f7fa fdcf 	bl	8001c78 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 80070da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070de:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80070e0:	2302      	movs	r3, #2
 80070e2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80070e4:	2301      	movs	r3, #1
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80070e8:	2301      	movs	r3, #1
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80070ec:	2306      	movs	r3, #6
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80070f0:	f107 031c 	add.w	r3, r7, #28
 80070f4:	4619      	mov	r1, r3
 80070f6:	4807      	ldr	r0, [pc, #28]	; (8007114 <SPI_WIFI_MspInit+0x174>)
 80070f8:	f7fa fdbe 	bl	8001c78 <HAL_GPIO_Init>
}
 80070fc:	bf00      	nop
 80070fe:	3730      	adds	r7, #48	; 0x30
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40021000 	.word	0x40021000
 8007108:	48000400 	.word	0x48000400
 800710c:	10110000 	.word	0x10110000
 8007110:	48001000 	.word	0x48001000
 8007114:	48000800 	.word	0x48000800

08007118 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800711e:	f7fa fb37 	bl	8001790 <HAL_GetTick>
 8007122:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
  
  hspi.Instance               = SPI3;
 8007128:	4b51      	ldr	r3, [pc, #324]	; (8007270 <SPI_WIFI_Init+0x158>)
 800712a:	4a52      	ldr	r2, [pc, #328]	; (8007274 <SPI_WIFI_Init+0x15c>)
 800712c:	601a      	str	r2, [r3, #0]
  SPI_WIFI_MspInit(&hspi);
 800712e:	4850      	ldr	r0, [pc, #320]	; (8007270 <SPI_WIFI_Init+0x158>)
 8007130:	f7ff ff36 	bl	8006fa0 <SPI_WIFI_MspInit>
  
  hspi.Init.Mode              = SPI_MODE_MASTER;
 8007134:	4b4e      	ldr	r3, [pc, #312]	; (8007270 <SPI_WIFI_Init+0x158>)
 8007136:	f44f 7282 	mov.w	r2, #260	; 0x104
 800713a:	605a      	str	r2, [r3, #4]
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800713c:	4b4c      	ldr	r3, [pc, #304]	; (8007270 <SPI_WIFI_Init+0x158>)
 800713e:	2200      	movs	r2, #0
 8007140:	609a      	str	r2, [r3, #8]
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8007142:	4b4b      	ldr	r3, [pc, #300]	; (8007270 <SPI_WIFI_Init+0x158>)
 8007144:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8007148:	60da      	str	r2, [r3, #12]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800714a:	4b49      	ldr	r3, [pc, #292]	; (8007270 <SPI_WIFI_Init+0x158>)
 800714c:	2200      	movs	r2, #0
 800714e:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8007150:	4b47      	ldr	r3, [pc, #284]	; (8007270 <SPI_WIFI_Init+0x158>)
 8007152:	2200      	movs	r2, #0
 8007154:	615a      	str	r2, [r3, #20]
  hspi.Init.NSS               = SPI_NSS_SOFT;
 8007156:	4b46      	ldr	r3, [pc, #280]	; (8007270 <SPI_WIFI_Init+0x158>)
 8007158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800715c:	619a      	str	r2, [r3, #24]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 800715e:	4b44      	ldr	r3, [pc, #272]	; (8007270 <SPI_WIFI_Init+0x158>)
 8007160:	2210      	movs	r2, #16
 8007162:	61da      	str	r2, [r3, #28]
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8007164:	4b42      	ldr	r3, [pc, #264]	; (8007270 <SPI_WIFI_Init+0x158>)
 8007166:	2200      	movs	r2, #0
 8007168:	621a      	str	r2, [r3, #32]
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800716a:	4b41      	ldr	r3, [pc, #260]	; (8007270 <SPI_WIFI_Init+0x158>)
 800716c:	2200      	movs	r2, #0
 800716e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8007170:	4b3f      	ldr	r3, [pc, #252]	; (8007270 <SPI_WIFI_Init+0x158>)
 8007172:	2200      	movs	r2, #0
 8007174:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.CRCPolynomial     = 0;
 8007176:	4b3e      	ldr	r3, [pc, #248]	; (8007270 <SPI_WIFI_Init+0x158>)
 8007178:	2200      	movs	r2, #0
 800717a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800717c:	483c      	ldr	r0, [pc, #240]	; (8007270 <SPI_WIFI_Init+0x158>)
 800717e:	f7fd fb51 	bl	8004824 <HAL_SPI_Init>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <SPI_WIFI_Init+0x76>
  {
    return -1;
 8007188:	f04f 33ff 	mov.w	r3, #4294967295
 800718c:	e06c      	b.n	8007268 <SPI_WIFI_Init+0x150>
  }
  
  WIFI_RESET_MODULE();
 800718e:	2200      	movs	r2, #0
 8007190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007194:	4838      	ldr	r0, [pc, #224]	; (8007278 <SPI_WIFI_Init+0x160>)
 8007196:	f7fb f82b 	bl	80021f0 <HAL_GPIO_WritePin>
 800719a:	200a      	movs	r0, #10
 800719c:	f7fa fb04 	bl	80017a8 <HAL_Delay>
 80071a0:	2201      	movs	r2, #1
 80071a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071a6:	4834      	ldr	r0, [pc, #208]	; (8007278 <SPI_WIFI_Init+0x160>)
 80071a8:	f7fb f822 	bl	80021f0 <HAL_GPIO_WritePin>
 80071ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80071b0:	f7fa fafa 	bl	80017a8 <HAL_Delay>
  
  WIFI_ENABLE_NSS(); 
 80071b4:	2200      	movs	r2, #0
 80071b6:	2101      	movs	r1, #1
 80071b8:	482f      	ldr	r0, [pc, #188]	; (8007278 <SPI_WIFI_Init+0x160>)
 80071ba:	f7fb f819 	bl	80021f0 <HAL_GPIO_WritePin>
 80071be:	200a      	movs	r0, #10
 80071c0:	f7fa faf2 	bl	80017a8 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 80071c4:	e023      	b.n	800720e <SPI_WIFI_Init+0xf6>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	463a      	mov	r2, r7
 80071ca:	18d1      	adds	r1, r2, r3
 80071cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071d0:	2201      	movs	r2, #1
 80071d2:	4827      	ldr	r0, [pc, #156]	; (8007270 <SPI_WIFI_Init+0x158>)
 80071d4:	f7fd fd2c 	bl	8004c30 <HAL_SPI_Receive>
 80071d8:	4603      	mov	r3, r0
 80071da:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	3302      	adds	r3, #2
 80071e0:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80071e2:	f7fa fad5 	bl	8001790 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f0:	d202      	bcs.n	80071f8 <SPI_WIFI_Init+0xe0>
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <SPI_WIFI_Init+0xf6>
    {
      WIFI_DISABLE_NSS(); 
 80071f8:	2201      	movs	r2, #1
 80071fa:	2101      	movs	r1, #1
 80071fc:	481e      	ldr	r0, [pc, #120]	; (8007278 <SPI_WIFI_Init+0x160>)
 80071fe:	f7fa fff7 	bl	80021f0 <HAL_GPIO_WritePin>
 8007202:	200a      	movs	r0, #10
 8007204:	f7fa fad0 	bl	80017a8 <HAL_Delay>
      return -1;
 8007208:	f04f 33ff 	mov.w	r3, #4294967295
 800720c:	e02c      	b.n	8007268 <SPI_WIFI_Init+0x150>
  while (WIFI_IS_CMDDATA_READY())
 800720e:	2102      	movs	r1, #2
 8007210:	4819      	ldr	r0, [pc, #100]	; (8007278 <SPI_WIFI_Init+0x160>)
 8007212:	f7fa ffd5 	bl	80021c0 <HAL_GPIO_ReadPin>
 8007216:	4603      	mov	r3, r0
 8007218:	2b01      	cmp	r3, #1
 800721a:	d0d4      	beq.n	80071c6 <SPI_WIFI_Init+0xae>
    }    
  }
  
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800721c:	783b      	ldrb	r3, [r7, #0]
 800721e:	2b15      	cmp	r3, #21
 8007220:	d10e      	bne.n	8007240 <SPI_WIFI_Init+0x128>
 8007222:	787b      	ldrb	r3, [r7, #1]
 8007224:	2b15      	cmp	r3, #21
 8007226:	d10b      	bne.n	8007240 <SPI_WIFI_Init+0x128>
 8007228:	78bb      	ldrb	r3, [r7, #2]
 800722a:	2b0d      	cmp	r3, #13
 800722c:	d108      	bne.n	8007240 <SPI_WIFI_Init+0x128>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800722e:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8007230:	2b0a      	cmp	r3, #10
 8007232:	d105      	bne.n	8007240 <SPI_WIFI_Init+0x128>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8007234:	793b      	ldrb	r3, [r7, #4]
 8007236:	2b3e      	cmp	r3, #62	; 0x3e
 8007238:	d102      	bne.n	8007240 <SPI_WIFI_Init+0x128>
 800723a:	797b      	ldrb	r3, [r7, #5]
 800723c:	2b20      	cmp	r3, #32
 800723e:	d00a      	beq.n	8007256 <SPI_WIFI_Init+0x13e>
  {
    WIFI_DISABLE_NSS(); 
 8007240:	2201      	movs	r2, #1
 8007242:	2101      	movs	r1, #1
 8007244:	480c      	ldr	r0, [pc, #48]	; (8007278 <SPI_WIFI_Init+0x160>)
 8007246:	f7fa ffd3 	bl	80021f0 <HAL_GPIO_WritePin>
 800724a:	200a      	movs	r0, #10
 800724c:	f7fa faac 	bl	80017a8 <HAL_Delay>
    return -1;
 8007250:	f04f 33ff 	mov.w	r3, #4294967295
 8007254:	e008      	b.n	8007268 <SPI_WIFI_Init+0x150>
  }    
   
  WIFI_DISABLE_NSS(); 
 8007256:	2201      	movs	r2, #1
 8007258:	2101      	movs	r1, #1
 800725a:	4807      	ldr	r0, [pc, #28]	; (8007278 <SPI_WIFI_Init+0x160>)
 800725c:	f7fa ffc8 	bl	80021f0 <HAL_GPIO_WritePin>
 8007260:	200a      	movs	r0, #10
 8007262:	f7fa faa1 	bl	80017a8 <HAL_Delay>
  return 0;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	20000e60 	.word	0x20000e60
 8007274:	40003c00 	.word	0x40003c00
 8007278:	48001000 	.word	0x48001000

0800727c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8007280:	4802      	ldr	r0, [pc, #8]	; (800728c <SPI_WIFI_DeInit+0x10>)
 8007282:	f7fd fb57 	bl	8004934 <HAL_SPI_DeInit>
  return 0;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20000e60 	.word	0x20000e60

08007290 <SPI_WIFI_ReceiveData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	460b      	mov	r3, r1
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800729e:	f7fa fa77 	bl	8001790 <HAL_GetTick>
 80072a2:	61b8      	str	r0, [r7, #24]
  int16_t length = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	83fb      	strh	r3, [r7, #30]
  uint8_t tmp[2];
  
  HAL_SPIEx_FlushRxFifo(&hspi);
 80072a8:	4842      	ldr	r0, [pc, #264]	; (80073b4 <SPI_WIFI_ReceiveData+0x124>)
 80072aa:	f7fe f953 	bl	8005554 <HAL_SPIEx_FlushRxFifo>
  
  WIFI_DISABLE_NSS(); 
 80072ae:	2201      	movs	r2, #1
 80072b0:	2101      	movs	r1, #1
 80072b2:	4841      	ldr	r0, [pc, #260]	; (80073b8 <SPI_WIFI_ReceiveData+0x128>)
 80072b4:	f7fa ff9c 	bl	80021f0 <HAL_GPIO_WritePin>
 80072b8:	200a      	movs	r0, #10
 80072ba:	f7fa fa75 	bl	80017a8 <HAL_Delay>
  
  while (!WIFI_IS_CMDDATA_READY())
 80072be:	e00a      	b.n	80072d6 <SPI_WIFI_ReceiveData+0x46>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80072c0:	f7fa fa66 	bl	8001790 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d902      	bls.n	80072d6 <SPI_WIFI_ReceiveData+0x46>
    {
      return -1;
 80072d0:	f04f 33ff 	mov.w	r3, #4294967295
 80072d4:	e06a      	b.n	80073ac <SPI_WIFI_ReceiveData+0x11c>
  while (!WIFI_IS_CMDDATA_READY())
 80072d6:	2102      	movs	r1, #2
 80072d8:	4837      	ldr	r0, [pc, #220]	; (80073b8 <SPI_WIFI_ReceiveData+0x128>)
 80072da:	f7fa ff71 	bl	80021c0 <HAL_GPIO_ReadPin>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d1ed      	bne.n	80072c0 <SPI_WIFI_ReceiveData+0x30>
    }
  }
  
  WIFI_ENABLE_NSS(); 
 80072e4:	2200      	movs	r2, #0
 80072e6:	2101      	movs	r1, #1
 80072e8:	4833      	ldr	r0, [pc, #204]	; (80073b8 <SPI_WIFI_ReceiveData+0x128>)
 80072ea:	f7fa ff81 	bl	80021f0 <HAL_GPIO_WritePin>
 80072ee:	200a      	movs	r0, #10
 80072f0:	f7fa fa5a 	bl	80017a8 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 80072f4:	e049      	b.n	800738a <SPI_WIFI_ReceiveData+0xfa>
  {
    if((length < len) || (!len))
 80072f6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80072fa:	897b      	ldrh	r3, [r7, #10]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	db02      	blt.n	8007306 <SPI_WIFI_ReceiveData+0x76>
 8007300:	897b      	ldrh	r3, [r7, #10]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d148      	bne.n	8007398 <SPI_WIFI_ReceiveData+0x108>
    {
      HAL_SPI_Receive(&hspi, tmp, 1, timeout) ;	   
 8007306:	f107 0114 	add.w	r1, r7, #20
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	4829      	ldr	r0, [pc, #164]	; (80073b4 <SPI_WIFI_ReceiveData+0x124>)
 8007310:	f7fd fc8e 	bl	8004c30 <HAL_SPI_Receive>
      /* let some time to hardware to change CMDDATA signal */
      if(tmp[1] == 0x15)
 8007314:	7d7b      	ldrb	r3, [r7, #21]
 8007316:	2b15      	cmp	r3, #21
 8007318:	d102      	bne.n	8007320 <SPI_WIFI_ReceiveData+0x90>
      {
       SPI_WIFI_Delay(1);
 800731a:	2001      	movs	r0, #1
 800731c:	f000 f8c0 	bl	80074a0 <SPI_WIFI_Delay>
      }
      /*This the last data */
      if(!WIFI_IS_CMDDATA_READY())
 8007320:	2102      	movs	r1, #2
 8007322:	4825      	ldr	r0, [pc, #148]	; (80073b8 <SPI_WIFI_ReceiveData+0x128>)
 8007324:	f7fa ff4c 	bl	80021c0 <HAL_GPIO_ReadPin>
 8007328:	4603      	mov	r3, r0
 800732a:	2b01      	cmp	r3, #1
 800732c:	d00c      	beq.n	8007348 <SPI_WIFI_ReceiveData+0xb8>
      {
        if(tmp[1] == 0x15)
 800732e:	7d7b      	ldrb	r3, [r7, #21]
 8007330:	2b15      	cmp	r3, #21
 8007332:	d109      	bne.n	8007348 <SPI_WIFI_ReceiveData+0xb8>
        {
          pData[0] = tmp[0];
 8007334:	7d3a      	ldrb	r2, [r7, #20]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	701a      	strb	r2, [r3, #0]
          length++;
 800733a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800733e:	b29b      	uxth	r3, r3
 8007340:	3301      	adds	r3, #1
 8007342:	b29b      	uxth	r3, r3
 8007344:	83fb      	strh	r3, [r7, #30]
          break;
 8007346:	e027      	b.n	8007398 <SPI_WIFI_ReceiveData+0x108>
        }     
      }
      
      pData[0] = tmp[0];
 8007348:	7d3a      	ldrb	r2, [r7, #20]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	7d7a      	ldrb	r2, [r7, #21]
 8007354:	701a      	strb	r2, [r3, #0]
      length += 2;
 8007356:	8bfb      	ldrh	r3, [r7, #30]
 8007358:	3302      	adds	r3, #2
 800735a:	b29b      	uxth	r3, r3
 800735c:	83fb      	strh	r3, [r7, #30]
      pData  += 2;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3302      	adds	r3, #2
 8007362:	60fb      	str	r3, [r7, #12]
      
      if((HAL_GetTick() - tickstart ) > timeout)
 8007364:	f7fa fa14 	bl	8001790 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	1ad2      	subs	r2, r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	429a      	cmp	r2, r3
 8007372:	d90a      	bls.n	800738a <SPI_WIFI_ReceiveData+0xfa>
      {
        WIFI_DISABLE_NSS(); 
 8007374:	2201      	movs	r2, #1
 8007376:	2101      	movs	r1, #1
 8007378:	480f      	ldr	r0, [pc, #60]	; (80073b8 <SPI_WIFI_ReceiveData+0x128>)
 800737a:	f7fa ff39 	bl	80021f0 <HAL_GPIO_WritePin>
 800737e:	200a      	movs	r0, #10
 8007380:	f7fa fa12 	bl	80017a8 <HAL_Delay>
        return -1;
 8007384:	f04f 33ff 	mov.w	r3, #4294967295
 8007388:	e010      	b.n	80073ac <SPI_WIFI_ReceiveData+0x11c>
  while (WIFI_IS_CMDDATA_READY())
 800738a:	2102      	movs	r1, #2
 800738c:	480a      	ldr	r0, [pc, #40]	; (80073b8 <SPI_WIFI_ReceiveData+0x128>)
 800738e:	f7fa ff17 	bl	80021c0 <HAL_GPIO_ReadPin>
 8007392:	4603      	mov	r3, r0
 8007394:	2b01      	cmp	r3, #1
 8007396:	d0ae      	beq.n	80072f6 <SPI_WIFI_ReceiveData+0x66>
    {
      break;
    }
  }
  
  WIFI_DISABLE_NSS(); 
 8007398:	2201      	movs	r2, #1
 800739a:	2101      	movs	r1, #1
 800739c:	4806      	ldr	r0, [pc, #24]	; (80073b8 <SPI_WIFI_ReceiveData+0x128>)
 800739e:	f7fa ff27 	bl	80021f0 <HAL_GPIO_WritePin>
 80073a2:	200a      	movs	r0, #10
 80073a4:	f7fa fa00 	bl	80017a8 <HAL_Delay>
  return length;
 80073a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3720      	adds	r7, #32
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000e60 	.word	0x20000e60
 80073b8:	48001000 	.word	0x48001000

080073bc <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	460b      	mov	r3, r1
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80073ca:	f7fa f9e1 	bl	8001790 <HAL_GetTick>
 80073ce:	6178      	str	r0, [r7, #20]
  uint8_t Padding[2];
  
  while (!WIFI_IS_CMDDATA_READY())
 80073d0:	e012      	b.n	80073f8 <SPI_WIFI_SendData+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80073d2:	f7fa f9dd 	bl	8001790 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	1ad2      	subs	r2, r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d90a      	bls.n	80073f8 <SPI_WIFI_SendData+0x3c>
    {
      WIFI_DISABLE_NSS();       
 80073e2:	2201      	movs	r2, #1
 80073e4:	2101      	movs	r1, #1
 80073e6:	482c      	ldr	r0, [pc, #176]	; (8007498 <SPI_WIFI_SendData+0xdc>)
 80073e8:	f7fa ff02 	bl	80021f0 <HAL_GPIO_WritePin>
 80073ec:	200a      	movs	r0, #10
 80073ee:	f7fa f9db 	bl	80017a8 <HAL_Delay>
      return -1;
 80073f2:	f04f 33ff 	mov.w	r3, #4294967295
 80073f6:	e04b      	b.n	8007490 <SPI_WIFI_SendData+0xd4>
  while (!WIFI_IS_CMDDATA_READY())
 80073f8:	2102      	movs	r1, #2
 80073fa:	4827      	ldr	r0, [pc, #156]	; (8007498 <SPI_WIFI_SendData+0xdc>)
 80073fc:	f7fa fee0 	bl	80021c0 <HAL_GPIO_ReadPin>
 8007400:	4603      	mov	r3, r0
 8007402:	2b01      	cmp	r3, #1
 8007404:	d1e5      	bne.n	80073d2 <SPI_WIFI_SendData+0x16>
    }
  }
  
  WIFI_ENABLE_NSS(); 
 8007406:	2200      	movs	r2, #0
 8007408:	2101      	movs	r1, #1
 800740a:	4823      	ldr	r0, [pc, #140]	; (8007498 <SPI_WIFI_SendData+0xdc>)
 800740c:	f7fa fef0 	bl	80021f0 <HAL_GPIO_WritePin>
 8007410:	200a      	movs	r0, #10
 8007412:	f7fa f9c9 	bl	80017a8 <HAL_Delay>
  if (len > 1)
 8007416:	897b      	ldrh	r3, [r7, #10]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d915      	bls.n	8007448 <SPI_WIFI_SendData+0x8c>
  {
   if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, timeout) != HAL_OK)
 800741c:	897b      	ldrh	r3, [r7, #10]
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	b29a      	uxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68f9      	ldr	r1, [r7, #12]
 8007426:	481d      	ldr	r0, [pc, #116]	; (800749c <SPI_WIFI_SendData+0xe0>)
 8007428:	f7fd faac 	bl	8004984 <HAL_SPI_Transmit>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00a      	beq.n	8007448 <SPI_WIFI_SendData+0x8c>
   {
     WIFI_DISABLE_NSS(); 
 8007432:	2201      	movs	r2, #1
 8007434:	2101      	movs	r1, #1
 8007436:	4818      	ldr	r0, [pc, #96]	; (8007498 <SPI_WIFI_SendData+0xdc>)
 8007438:	f7fa feda 	bl	80021f0 <HAL_GPIO_WritePin>
 800743c:	200a      	movs	r0, #10
 800743e:	f7fa f9b3 	bl	80017a8 <HAL_Delay>
     return -1;
 8007442:	f04f 33ff 	mov.w	r3, #4294967295
 8007446:	e023      	b.n	8007490 <SPI_WIFI_SendData+0xd4>
   }
  }
  
  if ( len & 1)
 8007448:	897b      	ldrh	r3, [r7, #10]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01c      	beq.n	800748c <SPI_WIFI_SendData+0xd0>
  {
    Padding[0] = pdata[len-1];
 8007452:	897b      	ldrh	r3, [r7, #10]
 8007454:	3b01      	subs	r3, #1
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	743b      	strb	r3, [r7, #16]
    Padding[1] = '\n';
 800745e:	230a      	movs	r3, #10
 8007460:	747b      	strb	r3, [r7, #17]
    
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 8007462:	f107 0110 	add.w	r1, r7, #16
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	480c      	ldr	r0, [pc, #48]	; (800749c <SPI_WIFI_SendData+0xe0>)
 800746c:	f7fd fa8a 	bl	8004984 <HAL_SPI_Transmit>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <SPI_WIFI_SendData+0xd0>
    {
      WIFI_DISABLE_NSS();       
 8007476:	2201      	movs	r2, #1
 8007478:	2101      	movs	r1, #1
 800747a:	4807      	ldr	r0, [pc, #28]	; (8007498 <SPI_WIFI_SendData+0xdc>)
 800747c:	f7fa feb8 	bl	80021f0 <HAL_GPIO_WritePin>
 8007480:	200a      	movs	r0, #10
 8007482:	f7fa f991 	bl	80017a8 <HAL_Delay>
      return -1;
 8007486:	f04f 33ff 	mov.w	r3, #4294967295
 800748a:	e001      	b.n	8007490 <SPI_WIFI_SendData+0xd4>
    }
  }
  
  return len;
 800748c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	48001000 	.word	0x48001000
 800749c:	20000e60 	.word	0x20000e60

080074a0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7fa f97d 	bl	80017a8 <HAL_Delay>
}
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <MX_GPIO_Init>:
     PD6   ------> USART2_RX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08a      	sub	sp, #40	; 0x28
 80074bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80074be:	4ab9      	ldr	r2, [pc, #740]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 80074c0:	4bb8      	ldr	r3, [pc, #736]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 80074c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c4:	f043 0310 	orr.w	r3, r3, #16
 80074c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074ca:	4bb6      	ldr	r3, [pc, #728]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 80074cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ce:	f003 0310 	and.w	r3, r3, #16
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80074d6:	4ab3      	ldr	r2, [pc, #716]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 80074d8:	4bb2      	ldr	r3, [pc, #712]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 80074da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074dc:	f043 0304 	orr.w	r3, r3, #4
 80074e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074e2:	4bb0      	ldr	r3, [pc, #704]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 80074e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ee:	4aad      	ldr	r2, [pc, #692]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 80074f0:	4bac      	ldr	r3, [pc, #688]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 80074f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f4:	f043 0301 	orr.w	r3, r3, #1
 80074f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074fa:	4baa      	ldr	r3, [pc, #680]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 80074fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	60bb      	str	r3, [r7, #8]
 8007504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007506:	4aa7      	ldr	r2, [pc, #668]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 8007508:	4ba6      	ldr	r3, [pc, #664]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 800750a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750c:	f043 0302 	orr.w	r3, r3, #2
 8007510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007512:	4ba4      	ldr	r3, [pc, #656]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 8007514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	607b      	str	r3, [r7, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800751e:	4aa1      	ldr	r2, [pc, #644]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 8007520:	4ba0      	ldr	r3, [pc, #640]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 8007522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007524:	f043 0308 	orr.w	r3, r3, #8
 8007528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800752a:	4b9e      	ldr	r3, [pc, #632]	; (80077a4 <MX_GPIO_Init+0x2ec>)
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8007536:	2200      	movs	r2, #0
 8007538:	f240 1115 	movw	r1, #277	; 0x115
 800753c:	489a      	ldr	r0, [pc, #616]	; (80077a8 <MX_GPIO_Init+0x2f0>)
 800753e:	f7fa fe57 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8007542:	2200      	movs	r2, #0
 8007544:	f248 1104 	movw	r1, #33028	; 0x8104
 8007548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800754c:	f7fa fe50 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8007550:	2200      	movs	r2, #0
 8007552:	f24f 0134 	movw	r1, #61492	; 0xf034
 8007556:	4895      	ldr	r0, [pc, #596]	; (80077ac <MX_GPIO_Init+0x2f4>)
 8007558:	f7fa fe4a 	bl	80021f0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800755c:	2200      	movs	r2, #0
 800755e:	f243 0181 	movw	r1, #12417	; 0x3081
 8007562:	4893      	ldr	r0, [pc, #588]	; (80077b0 <MX_GPIO_Init+0x2f8>)
 8007564:	f7fa fe44 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8007568:	2200      	movs	r2, #0
 800756a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800756e:	4891      	ldr	r0, [pc, #580]	; (80077b4 <MX_GPIO_Init+0x2fc>)
 8007570:	f7fa fe3e 	bl	80021f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8007574:	f240 1315 	movw	r3, #277	; 0x115
 8007578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800757a:	2301      	movs	r3, #1
 800757c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800757e:	2300      	movs	r3, #0
 8007580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007582:	2300      	movs	r3, #0
 8007584:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007586:	f107 0314 	add.w	r3, r7, #20
 800758a:	4619      	mov	r1, r3
 800758c:	4886      	ldr	r0, [pc, #536]	; (80077a8 <MX_GPIO_Init+0x2f0>)
 800758e:	f7fa fb73 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8007592:	236a      	movs	r3, #106	; 0x6a
 8007594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007596:	4b88      	ldr	r3, [pc, #544]	; (80077b8 <MX_GPIO_Init+0x300>)
 8007598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800759a:	2300      	movs	r3, #0
 800759c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800759e:	f107 0314 	add.w	r3, r7, #20
 80075a2:	4619      	mov	r1, r3
 80075a4:	4880      	ldr	r0, [pc, #512]	; (80077a8 <MX_GPIO_Init+0x2f0>)
 80075a6:	f7fa fb67 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80075aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80075b0:	4b82      	ldr	r3, [pc, #520]	; (80077bc <MX_GPIO_Init+0x304>)
 80075b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80075b8:	f107 0314 	add.w	r3, r7, #20
 80075bc:	4619      	mov	r1, r3
 80075be:	487d      	ldr	r0, [pc, #500]	; (80077b4 <MX_GPIO_Init+0x2fc>)
 80075c0:	f7fa fb5a 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 80075c4:	233f      	movs	r3, #63	; 0x3f
 80075c6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80075c8:	230b      	movs	r3, #11
 80075ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075d0:	f107 0314 	add.w	r3, r7, #20
 80075d4:	4619      	mov	r1, r3
 80075d6:	4877      	ldr	r0, [pc, #476]	; (80077b4 <MX_GPIO_Init+0x2fc>)
 80075d8:	f7fa fb4e 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80075dc:	2303      	movs	r3, #3
 80075de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e0:	2302      	movs	r3, #2
 80075e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e8:	2303      	movs	r3, #3
 80075ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80075ec:	2308      	movs	r3, #8
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075f0:	f107 0314 	add.w	r3, r7, #20
 80075f4:	4619      	mov	r1, r3
 80075f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075fa:	f7fa fb3d 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80075fe:	f248 1304 	movw	r3, #33028	; 0x8104
 8007602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007604:	2301      	movs	r3, #1
 8007606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007608:	2300      	movs	r3, #0
 800760a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800760c:	2300      	movs	r3, #0
 800760e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007610:	f107 0314 	add.w	r3, r7, #20
 8007614:	4619      	mov	r1, r3
 8007616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800761a:	f7fa fb2d 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800761e:	2308      	movs	r3, #8
 8007620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007622:	2302      	movs	r3, #2
 8007624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007626:	2300      	movs	r3, #0
 8007628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800762a:	2300      	movs	r3, #0
 800762c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800762e:	2301      	movs	r3, #1
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8007632:	f107 0314 	add.w	r3, r7, #20
 8007636:	4619      	mov	r1, r3
 8007638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800763c:	f7fa fb1c 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8007640:	2310      	movs	r3, #16
 8007642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8007644:	230b      	movs	r3, #11
 8007646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007648:	2300      	movs	r3, #0
 800764a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800764c:	f107 0314 	add.w	r3, r7, #20
 8007650:	4619      	mov	r1, r3
 8007652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007656:	f7fa fb0f 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800765a:	23e0      	movs	r3, #224	; 0xe0
 800765c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800765e:	2302      	movs	r3, #2
 8007660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007662:	2300      	movs	r3, #0
 8007664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007666:	2303      	movs	r3, #3
 8007668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800766a:	2305      	movs	r3, #5
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800766e:	f107 0314 	add.w	r3, r7, #20
 8007672:	4619      	mov	r1, r3
 8007674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007678:	f7fa fafe 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800767c:	2301      	movs	r3, #1
 800767e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007680:	4b4d      	ldr	r3, [pc, #308]	; (80077b8 <MX_GPIO_Init+0x300>)
 8007682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007684:	2300      	movs	r3, #0
 8007686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8007688:	f107 0314 	add.w	r3, r7, #20
 800768c:	4619      	mov	r1, r3
 800768e:	4847      	ldr	r0, [pc, #284]	; (80077ac <MX_GPIO_Init+0x2f4>)
 8007690:	f7fa faf2 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8007694:	2302      	movs	r3, #2
 8007696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8007698:	230b      	movs	r3, #11
 800769a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800769c:	2300      	movs	r3, #0
 800769e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80076a0:	f107 0314 	add.w	r3, r7, #20
 80076a4:	4619      	mov	r1, r3
 80076a6:	4841      	ldr	r0, [pc, #260]	; (80077ac <MX_GPIO_Init+0x2f4>)
 80076a8:	f7fa fae6 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80076ac:	f24f 0334 	movw	r3, #61492	; 0xf034
 80076b0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076b2:	2301      	movs	r3, #1
 80076b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ba:	2300      	movs	r3, #0
 80076bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076be:	f107 0314 	add.w	r3, r7, #20
 80076c2:	4619      	mov	r1, r3
 80076c4:	4839      	ldr	r0, [pc, #228]	; (80077ac <MX_GPIO_Init+0x2f4>)
 80076c6:	f7fa fad7 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80076ca:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80076ce:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80076d0:	4b39      	ldr	r3, [pc, #228]	; (80077b8 <MX_GPIO_Init+0x300>)
 80076d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076d8:	f107 0314 	add.w	r3, r7, #20
 80076dc:	4619      	mov	r1, r3
 80076de:	4834      	ldr	r0, [pc, #208]	; (80077b0 <MX_GPIO_Init+0x2f8>)
 80076e0:	f7fa faca 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80076e4:	f243 0381 	movw	r3, #12417	; 0x3081
 80076e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076ea:	2301      	movs	r3, #1
 80076ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076f2:	2300      	movs	r3, #0
 80076f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076f6:	f107 0314 	add.w	r3, r7, #20
 80076fa:	4619      	mov	r1, r3
 80076fc:	482c      	ldr	r0, [pc, #176]	; (80077b0 <MX_GPIO_Init+0x2f8>)
 80076fe:	f7fa fabb 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8007702:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007708:	2301      	movs	r3, #1
 800770a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800770c:	2300      	movs	r3, #0
 800770e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007710:	2300      	movs	r3, #0
 8007712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007714:	f107 0314 	add.w	r3, r7, #20
 8007718:	4619      	mov	r1, r3
 800771a:	4826      	ldr	r0, [pc, #152]	; (80077b4 <MX_GPIO_Init+0x2fc>)
 800771c:	f7fa faac 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8007720:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007726:	4b24      	ldr	r3, [pc, #144]	; (80077b8 <MX_GPIO_Init+0x300>)
 8007728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800772e:	f107 0314 	add.w	r3, r7, #20
 8007732:	4619      	mov	r1, r3
 8007734:	481f      	ldr	r0, [pc, #124]	; (80077b4 <MX_GPIO_Init+0x2fc>)
 8007736:	f7fa fa9f 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800773a:	2302      	movs	r3, #2
 800773c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800773e:	2302      	movs	r3, #2
 8007740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007742:	2300      	movs	r3, #0
 8007744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007746:	2303      	movs	r3, #3
 8007748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800774a:	2305      	movs	r3, #5
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800774e:	f107 0314 	add.w	r3, r7, #20
 8007752:	4619      	mov	r1, r3
 8007754:	4816      	ldr	r0, [pc, #88]	; (80077b0 <MX_GPIO_Init+0x2f8>)
 8007756:	f7fa fa8f 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800775a:	2378      	movs	r3, #120	; 0x78
 800775c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800775e:	2302      	movs	r3, #2
 8007760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007762:	2300      	movs	r3, #0
 8007764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007766:	2303      	movs	r3, #3
 8007768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800776a:	2307      	movs	r3, #7
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800776e:	f107 0314 	add.w	r3, r7, #20
 8007772:	4619      	mov	r1, r3
 8007774:	480e      	ldr	r0, [pc, #56]	; (80077b0 <MX_GPIO_Init+0x2f8>)
 8007776:	f7fa fa7f 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800777a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800777e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007780:	2312      	movs	r3, #18
 8007782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007784:	2301      	movs	r3, #1
 8007786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007788:	2303      	movs	r3, #3
 800778a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800778c:	2304      	movs	r3, #4
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007790:	f107 0314 	add.w	r3, r7, #20
 8007794:	4619      	mov	r1, r3
 8007796:	4805      	ldr	r0, [pc, #20]	; (80077ac <MX_GPIO_Init+0x2f4>)
 8007798:	f7fa fa6e 	bl	8001c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800779c:	2200      	movs	r2, #0
 800779e:	2100      	movs	r1, #0
 80077a0:	2017      	movs	r0, #23
 80077a2:	e00d      	b.n	80077c0 <MX_GPIO_Init+0x308>
 80077a4:	40021000 	.word	0x40021000
 80077a8:	48001000 	.word	0x48001000
 80077ac:	48000400 	.word	0x48000400
 80077b0:	48000c00 	.word	0x48000c00
 80077b4:	48000800 	.word	0x48000800
 80077b8:	10110000 	.word	0x10110000
 80077bc:	10210000 	.word	0x10210000
 80077c0:	f7fa f8e5 	bl	800198e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80077c4:	2017      	movs	r0, #23
 80077c6:	f7fa f8fe 	bl	80019c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80077ca:	2200      	movs	r2, #0
 80077cc:	2100      	movs	r1, #0
 80077ce:	2028      	movs	r0, #40	; 0x28
 80077d0:	f7fa f8dd 	bl	800198e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80077d4:	2028      	movs	r0, #40	; 0x28
 80077d6:	f7fa f8f6 	bl	80019c6 <HAL_NVIC_EnableIRQ>

}
 80077da:	bf00      	nop
 80077dc:	3728      	adds	r7, #40	; 0x28
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop

080077e4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80077e8:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <MX_I2C2_Init+0x80>)
 80077ea:	4a1f      	ldr	r2, [pc, #124]	; (8007868 <MX_I2C2_Init+0x84>)
 80077ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80077ee:	4b1d      	ldr	r3, [pc, #116]	; (8007864 <MX_I2C2_Init+0x80>)
 80077f0:	4a1e      	ldr	r2, [pc, #120]	; (800786c <MX_I2C2_Init+0x88>)
 80077f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80077f4:	4b1b      	ldr	r3, [pc, #108]	; (8007864 <MX_I2C2_Init+0x80>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077fa:	4b1a      	ldr	r3, [pc, #104]	; (8007864 <MX_I2C2_Init+0x80>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007800:	4b18      	ldr	r3, [pc, #96]	; (8007864 <MX_I2C2_Init+0x80>)
 8007802:	2200      	movs	r2, #0
 8007804:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007806:	4b17      	ldr	r3, [pc, #92]	; (8007864 <MX_I2C2_Init+0x80>)
 8007808:	2200      	movs	r2, #0
 800780a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800780c:	4b15      	ldr	r3, [pc, #84]	; (8007864 <MX_I2C2_Init+0x80>)
 800780e:	2200      	movs	r2, #0
 8007810:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007812:	4b14      	ldr	r3, [pc, #80]	; (8007864 <MX_I2C2_Init+0x80>)
 8007814:	2200      	movs	r2, #0
 8007816:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007818:	4b12      	ldr	r3, [pc, #72]	; (8007864 <MX_I2C2_Init+0x80>)
 800781a:	2200      	movs	r2, #0
 800781c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800781e:	4811      	ldr	r0, [pc, #68]	; (8007864 <MX_I2C2_Init+0x80>)
 8007820:	f7fa fd21 	bl	8002266 <HAL_I2C_Init>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <MX_I2C2_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800782a:	2142      	movs	r1, #66	; 0x42
 800782c:	4810      	ldr	r0, [pc, #64]	; (8007870 <MX_I2C2_Init+0x8c>)
 800782e:	f7fe fe4d 	bl	80064cc <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007832:	2100      	movs	r1, #0
 8007834:	480b      	ldr	r0, [pc, #44]	; (8007864 <MX_I2C2_Init+0x80>)
 8007836:	f7fb fa43 	bl	8002cc0 <HAL_I2CEx_ConfigAnalogFilter>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <MX_I2C2_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007840:	2149      	movs	r1, #73	; 0x49
 8007842:	480b      	ldr	r0, [pc, #44]	; (8007870 <MX_I2C2_Init+0x8c>)
 8007844:	f7fe fe42 	bl	80064cc <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007848:	2100      	movs	r1, #0
 800784a:	4806      	ldr	r0, [pc, #24]	; (8007864 <MX_I2C2_Init+0x80>)
 800784c:	f7fb fa83 	bl	8002d56 <HAL_I2CEx_ConfigDigitalFilter>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <MX_I2C2_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007856:	2150      	movs	r1, #80	; 0x50
 8007858:	4805      	ldr	r0, [pc, #20]	; (8007870 <MX_I2C2_Init+0x8c>)
 800785a:	f7fe fe37 	bl	80064cc <_Error_Handler>
  }

}
 800785e:	bf00      	nop
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000ec4 	.word	0x20000ec4
 8007868:	40005800 	.word	0x40005800
 800786c:	10909cec 	.word	0x10909cec
 8007870:	0800b5a4 	.word	0x0800b5a4

08007874 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C2)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a11      	ldr	r2, [pc, #68]	; (80078c8 <HAL_I2C_MspInit+0x54>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d11c      	bne.n	80078c0 <HAL_I2C_MspInit+0x4c>
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8007886:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800788a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800788c:	2312      	movs	r3, #18
 800788e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007890:	2301      	movs	r3, #1
 8007892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007894:	2303      	movs	r3, #3
 8007896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007898:	2304      	movs	r3, #4
 800789a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800789c:	f107 030c 	add.w	r3, r7, #12
 80078a0:	4619      	mov	r1, r3
 80078a2:	480a      	ldr	r0, [pc, #40]	; (80078cc <HAL_I2C_MspInit+0x58>)
 80078a4:	f7fa f9e8 	bl	8001c78 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80078a8:	4a09      	ldr	r2, [pc, #36]	; (80078d0 <HAL_I2C_MspInit+0x5c>)
 80078aa:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <HAL_I2C_MspInit+0x5c>)
 80078ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078b2:	6593      	str	r3, [r2, #88]	; 0x58
 80078b4:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <HAL_I2C_MspInit+0x5c>)
 80078b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078bc:	60bb      	str	r3, [r7, #8]
 80078be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80078c0:	bf00      	nop
 80078c2:	3720      	adds	r7, #32
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	40005800 	.word	0x40005800
 80078cc:	48000400 	.word	0x48000400
 80078d0:	40021000 	.word	0x40021000

080078d4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a08      	ldr	r2, [pc, #32]	; (8007904 <HAL_I2C_MspDeInit+0x30>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d10a      	bne.n	80078fc <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80078e6:	4a08      	ldr	r2, [pc, #32]	; (8007908 <HAL_I2C_MspDeInit+0x34>)
 80078e8:	4b07      	ldr	r3, [pc, #28]	; (8007908 <HAL_I2C_MspDeInit+0x34>)
 80078ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80078f0:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80078f2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80078f6:	4805      	ldr	r0, [pc, #20]	; (800790c <HAL_I2C_MspDeInit+0x38>)
 80078f8:	f7fa fb6a 	bl	8001fd0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
} 
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40005800 	.word	0x40005800
 8007908:	40021000 	.word	0x40021000
 800790c:	48000400 	.word	0x48000400

08007910 <main>:
  * @breif: start wifi and upload accelerometer data if bump detected
  *
  * @retval None
  */
int main(void)
{
 8007910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007914:	b087      	sub	sp, #28
 8007916:	af06      	add	r7, sp, #24
  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007918:	f7f9 ff02 	bl	8001720 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800791c:	f7fe fd32 	bl	8006384 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007920:	f7ff fdca 	bl	80074b8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8007924:	f7fe fe1e 	bl	8006564 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8007928:	f7ff ff5c 	bl	80077e4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800792c:	f000 f8ec 	bl	8007b08 <MX_QUADSPI_Init>
  //MX_SPI3_Init();
  MX_USART1_UART_Init();
 8007930:	f000 face 	bl	8007ed0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8007934:	f000 fb00 	bl	8007f38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8007938:	f000 fb88 	bl	800804c <MX_USB_OTG_FS_PCD_Init>
  BSP_ACCELERO_Init();
 800793c:	f7f9 fc08 	bl	8001150 <BSP_ACCELERO_Init>
  BSP_PSENSOR_Init();
 8007940:	f000 f98a 	bl	8007c58 <BSP_PSENSOR_Init>
  BSP_TSENSOR_Init();
 8007944:	f000 f9b6 	bl	8007cb4 <BSP_TSENSOR_Init>
  SPI_WIFI_Init();
 8007948:	f7ff fbe6 	bl	8007118 <SPI_WIFI_Init>
  WIFI_Init();
 800794c:	f000 fc0a 	bl	8008164 <WIFI_Init>

  //Connect to Access Point
  stat = WIFI_Connect("LukeandMichelle","10122010",  WIFI_ECN_WPA2_PSK);
 8007950:	2203      	movs	r2, #3
 8007952:	495d      	ldr	r1, [pc, #372]	; (8007ac8 <main+0x1b8>)
 8007954:	485d      	ldr	r0, [pc, #372]	; (8007acc <main+0x1bc>)
 8007956:	f000 fc31 	bl	80081bc <WIFI_Connect>
 800795a:	4603      	mov	r3, r0
 800795c:	461a      	mov	r2, r3
 800795e:	4b5c      	ldr	r3, [pc, #368]	; (8007ad0 <main+0x1c0>)
 8007960:	701a      	strb	r2, [r3, #0]
  if (stat != WIFI_STATUS_OK){
 8007962:	4b5b      	ldr	r3, [pc, #364]	; (8007ad0 <main+0x1c0>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d008      	beq.n	800797c <main+0x6c>
	  stat = WIFI_Connect("iotclass","myiotclass",  WIFI_ECN_WPA2_PSK);
 800796a:	2203      	movs	r2, #3
 800796c:	4959      	ldr	r1, [pc, #356]	; (8007ad4 <main+0x1c4>)
 800796e:	485a      	ldr	r0, [pc, #360]	; (8007ad8 <main+0x1c8>)
 8007970:	f000 fc24 	bl	80081bc <WIFI_Connect>
 8007974:	4603      	mov	r3, r0
 8007976:	461a      	mov	r2, r3
 8007978:	4b55      	ldr	r3, [pc, #340]	; (8007ad0 <main+0x1c0>)
 800797a:	701a      	strb	r2, [r3, #0]
  }

  //Connect to ThingSpeak
  WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, server, IP_Addr, 80, 0);
 800797c:	4b57      	ldr	r3, [pc, #348]	; (8007adc <main+0x1cc>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	2300      	movs	r3, #0
 8007982:	9301      	str	r3, [sp, #4]
 8007984:	2350      	movs	r3, #80	; 0x50
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	4b55      	ldr	r3, [pc, #340]	; (8007ae0 <main+0x1d0>)
 800798a:	2100      	movs	r1, #0
 800798c:	2000      	movs	r0, #0
 800798e:	f000 fc37 	bl	8008200 <WIFI_OpenClientConnection>
  //WIFI_SendData((uint8_t)0, WIFI_connection, sizeof(WIFI_connection), &XferSize, Timeout);

  while (1){
	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8007992:	4854      	ldr	r0, [pc, #336]	; (8007ae4 <main+0x1d4>)
 8007994:	f7f9 fc1a 	bl	80011cc <BSP_ACCELERO_AccGetXYZ>
	  BSP_ACCELERO_AccGetXYZ(qDataXYZ);
 8007998:	4853      	ldr	r0, [pc, #332]	; (8007ae8 <main+0x1d8>)
 800799a:	f7f9 fc17 	bl	80011cc <BSP_ACCELERO_AccGetXYZ>
	  DeltaX = abs_val(qDataXYZ[0] - pDataXYZ[0]);
 800799e:	4b52      	ldr	r3, [pc, #328]	; (8007ae8 <main+0x1d8>)
 80079a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	4b4f      	ldr	r3, [pc, #316]	; (8007ae4 <main+0x1d4>)
 80079a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	b21b      	sxth	r3, r3
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe fd8f 	bl	80064d8 <abs_val>
 80079ba:	4603      	mov	r3, r0
 80079bc:	461a      	mov	r2, r3
 80079be:	4b4b      	ldr	r3, [pc, #300]	; (8007aec <main+0x1dc>)
 80079c0:	701a      	strb	r2, [r3, #0]
	  DeltaY = abs_val(qDataXYZ[1] - pDataXYZ[1]);
 80079c2:	4b49      	ldr	r3, [pc, #292]	; (8007ae8 <main+0x1d8>)
 80079c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	4b46      	ldr	r3, [pc, #280]	; (8007ae4 <main+0x1d4>)
 80079cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	b21b      	sxth	r3, r3
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fe fd7d 	bl	80064d8 <abs_val>
 80079de:	4603      	mov	r3, r0
 80079e0:	461a      	mov	r2, r3
 80079e2:	4b43      	ldr	r3, [pc, #268]	; (8007af0 <main+0x1e0>)
 80079e4:	701a      	strb	r2, [r3, #0]
	  DeltaZ = abs_val(qDataXYZ[2] - pDataXYZ[2]);
 80079e6:	4b40      	ldr	r3, [pc, #256]	; (8007ae8 <main+0x1d8>)
 80079e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	4b3d      	ldr	r3, [pc, #244]	; (8007ae4 <main+0x1d4>)
 80079f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	b21b      	sxth	r3, r3
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fe fd6b 	bl	80064d8 <abs_val>
 8007a02:	4603      	mov	r3, r0
 8007a04:	461a      	mov	r2, r3
 8007a06:	4b3b      	ldr	r3, [pc, #236]	; (8007af4 <main+0x1e4>)
 8007a08:	701a      	strb	r2, [r3, #0]

	  if ((DeltaX > 20) | (DeltaY > 20) | (DeltaZ > 20)){
 8007a0a:	4b38      	ldr	r3, [pc, #224]	; (8007aec <main+0x1dc>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b14      	cmp	r3, #20
 8007a10:	bf8c      	ite	hi
 8007a12:	2301      	movhi	r3, #1
 8007a14:	2300      	movls	r3, #0
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	4b35      	ldr	r3, [pc, #212]	; (8007af0 <main+0x1e0>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b14      	cmp	r3, #20
 8007a1e:	bf8c      	ite	hi
 8007a20:	2301      	movhi	r3, #1
 8007a22:	2300      	movls	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	4313      	orrs	r3, r2
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	4b31      	ldr	r3, [pc, #196]	; (8007af4 <main+0x1e4>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b14      	cmp	r3, #20
 8007a32:	bf8c      	ite	hi
 8007a34:	2301      	movhi	r3, #1
 8007a36:	2300      	movls	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d0a8      	beq.n	8007992 <main+0x82>
		  press_value = BSP_PSENSOR_ReadPressure();
 8007a40:	f000 f92a 	bl	8007c98 <BSP_PSENSOR_ReadPressure>
 8007a44:	ee07 0a90 	vmov	s15, r0
 8007a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a4c:	4b2a      	ldr	r3, [pc, #168]	; (8007af8 <main+0x1e8>)
 8007a4e:	edc3 7a00 	vstr	s15, [r3]
		  BSP_TSENSOR_ReadTemp(&temp_value);
 8007a52:	482a      	ldr	r0, [pc, #168]	; (8007afc <main+0x1ec>)
 8007a54:	f000 f94a 	bl	8007cec <BSP_TSENSOR_ReadTemp>
		  sprintf(WIFI_xmit, "field1=%u&field2=%u&field3=%u&field4=%.2f&field5=%.2f",
 8007a58:	4b24      	ldr	r3, [pc, #144]	; (8007aec <main+0x1dc>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	4698      	mov	r8, r3
 8007a5e:	4b24      	ldr	r3, [pc, #144]	; (8007af0 <main+0x1e0>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	4699      	mov	r9, r3
 8007a64:	4b23      	ldr	r3, [pc, #140]	; (8007af4 <main+0x1e4>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	461e      	mov	r6, r3
 8007a6a:	4b24      	ldr	r3, [pc, #144]	; (8007afc <main+0x1ec>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7f8 fd6a 	bl	8000548 <__aeabi_f2d>
 8007a74:	4604      	mov	r4, r0
 8007a76:	460d      	mov	r5, r1
 8007a78:	4b1f      	ldr	r3, [pc, #124]	; (8007af8 <main+0x1e8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7f8 fd63 	bl	8000548 <__aeabi_f2d>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a8a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007a8e:	9600      	str	r6, [sp, #0]
 8007a90:	464b      	mov	r3, r9
 8007a92:	4642      	mov	r2, r8
 8007a94:	491a      	ldr	r1, [pc, #104]	; (8007b00 <main+0x1f0>)
 8007a96:	481b      	ldr	r0, [pc, #108]	; (8007b04 <main+0x1f4>)
 8007a98:	f000 fc84 	bl	80083a4 <sprintf>
		  DeltaX, DeltaY, DeltaZ, temp_value, press_value);
		  WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, server, IP_Addr, 80, 0);
 8007a9c:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <main+0x1cc>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9301      	str	r3, [sp, #4]
 8007aa4:	2350      	movs	r3, #80	; 0x50
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	; (8007ae0 <main+0x1d0>)
 8007aaa:	2100      	movs	r1, #0
 8007aac:	2000      	movs	r0, #0
 8007aae:	f000 fba7 	bl	8008200 <WIFI_OpenClientConnection>
		  thingSpeakUpdate(WIFI_xmit);
 8007ab2:	4814      	ldr	r0, [pc, #80]	; (8007b04 <main+0x1f4>)
 8007ab4:	f7fe fd26 	bl	8006504 <thingSpeakUpdate>
		  WIFI_CloseClientConnection(0);
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f000 fbdb 	bl	8008274 <WIFI_CloseClientConnection>
		  HAL_Delay(15000);
 8007abe:	f643 2098 	movw	r0, #15000	; 0x3a98
 8007ac2:	f7f9 fe71 	bl	80017a8 <HAL_Delay>
	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8007ac6:	e764      	b.n	8007992 <main+0x82>
 8007ac8:	0800b5c8 	.word	0x0800b5c8
 8007acc:	0800b5d4 	.word	0x0800b5d4
 8007ad0:	2000086c 	.word	0x2000086c
 8007ad4:	0800b5e4 	.word	0x0800b5e4
 8007ad8:	0800b5f0 	.word	0x0800b5f0
 8007adc:	20000054 	.word	0x20000054
 8007ae0:	20000058 	.word	0x20000058
 8007ae4:	20000818 	.word	0x20000818
 8007ae8:	20000820 	.word	0x20000820
 8007aec:	20000f12 	.word	0x20000f12
 8007af0:	20000f10 	.word	0x20000f10
 8007af4:	20000f11 	.word	0x20000f11
 8007af8:	20000870 	.word	0x20000870
 8007afc:	20000874 	.word	0x20000874
 8007b00:	0800b5fc 	.word	0x0800b5fc
 8007b04:	20000828 	.word	0x20000828

08007b08 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8007b0c:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <MX_QUADSPI_Init+0x48>)
 8007b0e:	4a11      	ldr	r2, [pc, #68]	; (8007b54 <MX_QUADSPI_Init+0x4c>)
 8007b10:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8007b12:	4b0f      	ldr	r3, [pc, #60]	; (8007b50 <MX_QUADSPI_Init+0x48>)
 8007b14:	22ff      	movs	r2, #255	; 0xff
 8007b16:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8007b18:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <MX_QUADSPI_Init+0x48>)
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8007b1e:	4b0c      	ldr	r3, [pc, #48]	; (8007b50 <MX_QUADSPI_Init+0x48>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <MX_QUADSPI_Init+0x48>)
 8007b26:	2201      	movs	r2, #1
 8007b28:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8007b2a:	4b09      	ldr	r3, [pc, #36]	; (8007b50 <MX_QUADSPI_Init+0x48>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8007b30:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <MX_QUADSPI_Init+0x48>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8007b36:	4806      	ldr	r0, [pc, #24]	; (8007b50 <MX_QUADSPI_Init+0x48>)
 8007b38:	f7fb fb28 	bl	800318c <HAL_QSPI_Init>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <MX_QUADSPI_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007b42:	2140      	movs	r1, #64	; 0x40
 8007b44:	4804      	ldr	r0, [pc, #16]	; (8007b58 <MX_QUADSPI_Init+0x50>)
 8007b46:	f7fe fcc1 	bl	80064cc <_Error_Handler>
  }

}
 8007b4a:	bf00      	nop
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000f14 	.word	0x20000f14
 8007b54:	a0001000 	.word	0xa0001000
 8007b58:	0800b634 	.word	0x0800b634

08007b5c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(qspiHandle->Instance==QUADSPI)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a11      	ldr	r2, [pc, #68]	; (8007bb0 <HAL_QSPI_MspInit+0x54>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d11c      	bne.n	8007ba8 <HAL_QSPI_MspInit+0x4c>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8007b6e:	4a11      	ldr	r2, [pc, #68]	; (8007bb4 <HAL_QSPI_MspInit+0x58>)
 8007b70:	4b10      	ldr	r3, [pc, #64]	; (8007bb4 <HAL_QSPI_MspInit+0x58>)
 8007b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b78:	6513      	str	r3, [r2, #80]	; 0x50
 8007b7a:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <HAL_QSPI_MspInit+0x58>)
 8007b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b82:	60bb      	str	r3, [r7, #8]
 8007b84:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8007b86:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8007b8a:	60fb      	str	r3, [r7, #12]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b94:	2303      	movs	r3, #3
 8007b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007b98:	230a      	movs	r3, #10
 8007b9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b9c:	f107 030c 	add.w	r3, r7, #12
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4805      	ldr	r0, [pc, #20]	; (8007bb8 <HAL_QSPI_MspInit+0x5c>)
 8007ba4:	f7fa f868 	bl	8001c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8007ba8:	bf00      	nop
 8007baa:	3720      	adds	r7, #32
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	a0001000 	.word	0xa0001000
 8007bb4:	40021000 	.word	0x40021000
 8007bb8:	48001000 	.word	0x48001000

08007bbc <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI3)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a11      	ldr	r2, [pc, #68]	; (8007c10 <HAL_SPI_MspInit+0x54>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d11c      	bne.n	8007c08 <HAL_SPI_MspInit+0x4c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007bce:	4a11      	ldr	r2, [pc, #68]	; (8007c14 <HAL_SPI_MspInit+0x58>)
 8007bd0:	4b10      	ldr	r3, [pc, #64]	; (8007c14 <HAL_SPI_MspInit+0x58>)
 8007bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8007bda:	4b0e      	ldr	r3, [pc, #56]	; (8007c14 <HAL_SPI_MspInit+0x58>)
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007be2:	60bb      	str	r3, [r7, #8]
 8007be4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8007be6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007bea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bec:	2302      	movs	r3, #2
 8007bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007bf8:	2306      	movs	r3, #6
 8007bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bfc:	f107 030c 	add.w	r3, r7, #12
 8007c00:	4619      	mov	r1, r3
 8007c02:	4805      	ldr	r0, [pc, #20]	; (8007c18 <HAL_SPI_MspInit+0x5c>)
 8007c04:	f7fa f838 	bl	8001c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007c08:	bf00      	nop
 8007c0a:	3720      	adds	r7, #32
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	40003c00 	.word	0x40003c00
 8007c14:	40021000 	.word	0x40021000
 8007c18:	48000800 	.word	0x48000800

08007c1c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a08      	ldr	r2, [pc, #32]	; (8007c4c <HAL_SPI_MspDeInit+0x30>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d10a      	bne.n	8007c44 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8007c2e:	4a08      	ldr	r2, [pc, #32]	; (8007c50 <HAL_SPI_MspDeInit+0x34>)
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <HAL_SPI_MspDeInit+0x34>)
 8007c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c38:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8007c3a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8007c3e:	4805      	ldr	r0, [pc, #20]	; (8007c54 <HAL_SPI_MspDeInit+0x38>)
 8007c40:	f7fa f9c6 	bl	8001fd0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
} 
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	40003c00 	.word	0x40003c00
 8007c50:	40021000 	.word	0x40021000
 8007c54:	48000800 	.word	0x48000800

08007c58 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <BSP_PSENSOR_Init+0x38>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	20ba      	movs	r0, #186	; 0xba
 8007c64:	4798      	blx	r3
 8007c66:	4603      	mov	r3, r0
 8007c68:	2bb1      	cmp	r3, #177	; 0xb1
 8007c6a:	d002      	beq.n	8007c72 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	607b      	str	r3, [r7, #4]
 8007c70:	e009      	b.n	8007c86 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8007c72:	4b08      	ldr	r3, [pc, #32]	; (8007c94 <BSP_PSENSOR_Init+0x3c>)
 8007c74:	4a06      	ldr	r2, [pc, #24]	; (8007c90 <BSP_PSENSOR_Init+0x38>)
 8007c76:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <BSP_PSENSOR_Init+0x3c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	20ba      	movs	r0, #186	; 0xba
 8007c80:	4798      	blx	r3
    ret = PSENSOR_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8007c86:	687b      	ldr	r3, [r7, #4]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000010 	.word	0x20000010
 8007c94:	20000878 	.word	0x20000878

08007c98 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8007c9c:	4b04      	ldr	r3, [pc, #16]	; (8007cb0 <BSP_PSENSOR_ReadPressure+0x18>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	20ba      	movs	r0, #186	; 0xba
 8007ca4:	4798      	blx	r3
 8007ca6:	eef0 7a40 	vmov.f32	s15, s0
}
 8007caa:	eeb0 0a67 	vmov.f32	s0, s15
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20000878 	.word	0x20000878

08007cb4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <BSP_TSENSOR_Init+0x30>)
 8007cc0:	4a09      	ldr	r2, [pc, #36]	; (8007ce8 <BSP_TSENSOR_Init+0x34>)
 8007cc2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8007cc4:	f7f9 f9e4 	bl	8001090 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8007cc8:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <BSP_TSENSOR_Init+0x30>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2100      	movs	r1, #0
 8007cd0:	20be      	movs	r0, #190	; 0xbe
 8007cd2:	4798      	blx	r3

  ret = TSENSOR_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	2000087c 	.word	0x2000087c
 8007ce8:	20000000 	.word	0x20000000

08007cec <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
void BSP_TSENSOR_ReadTemp(float* tmp)
{ 
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  *tmp = tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8007cf4:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <BSP_TSENSOR_ReadTemp+0x24>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	20be      	movs	r0, #190	; 0xbe
 8007cfc:	4798      	blx	r3
 8007cfe:	eef0 7a40 	vmov.f32	s15, s0
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	edc3 7a00 	vstr	s15, [r3]
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	2000087c 	.word	0x2000087c

08007d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d1a:	4a24      	ldr	r2, [pc, #144]	; (8007dac <HAL_MspInit+0x98>)
 8007d1c:	4b23      	ldr	r3, [pc, #140]	; (8007dac <HAL_MspInit+0x98>)
 8007d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d20:	f043 0301 	orr.w	r3, r3, #1
 8007d24:	6613      	str	r3, [r2, #96]	; 0x60
 8007d26:	4b21      	ldr	r3, [pc, #132]	; (8007dac <HAL_MspInit+0x98>)
 8007d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	607b      	str	r3, [r7, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d32:	4a1e      	ldr	r2, [pc, #120]	; (8007dac <HAL_MspInit+0x98>)
 8007d34:	4b1d      	ldr	r3, [pc, #116]	; (8007dac <HAL_MspInit+0x98>)
 8007d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8007d3e:	4b1b      	ldr	r3, [pc, #108]	; (8007dac <HAL_MspInit+0x98>)
 8007d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d4a:	2003      	movs	r0, #3
 8007d4c:	f7f9 fe14 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8007d50:	2200      	movs	r2, #0
 8007d52:	2100      	movs	r1, #0
 8007d54:	f06f 000b 	mvn.w	r0, #11
 8007d58:	f7f9 fe19 	bl	800198e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2100      	movs	r1, #0
 8007d60:	f06f 000a 	mvn.w	r0, #10
 8007d64:	f7f9 fe13 	bl	800198e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	f06f 0009 	mvn.w	r0, #9
 8007d70:	f7f9 fe0d 	bl	800198e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8007d74:	2200      	movs	r2, #0
 8007d76:	2100      	movs	r1, #0
 8007d78:	f06f 0004 	mvn.w	r0, #4
 8007d7c:	f7f9 fe07 	bl	800198e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8007d80:	2200      	movs	r2, #0
 8007d82:	2100      	movs	r1, #0
 8007d84:	f06f 0003 	mvn.w	r0, #3
 8007d88:	f7f9 fe01 	bl	800198e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2100      	movs	r1, #0
 8007d90:	f06f 0001 	mvn.w	r0, #1
 8007d94:	f7f9 fdfb 	bl	800198e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007da0:	f7f9 fdf5 	bl	800198e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	40021000 	.word	0x40021000

08007db0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007db4:	bf00      	nop
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007dc2:	e7fe      	b.n	8007dc2 <HardFault_Handler+0x4>

08007dc4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007dc8:	e7fe      	b.n	8007dc8 <MemManage_Handler+0x4>

08007dca <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007dce:	e7fe      	b.n	8007dce <BusFault_Handler+0x4>

08007dd0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007dd4:	e7fe      	b.n	8007dd4 <UsageFault_Handler+0x4>

08007dd6 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007dda:	bf00      	nop
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007de8:	bf00      	nop
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8007df2:	b480      	push	{r7}
 8007df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007df6:	bf00      	nop
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e04:	f7f9 fcb6 	bl	8001774 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8007e08:	f7f9 fe14 	bl	8001a34 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e0c:	bf00      	nop
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007e14:	2020      	movs	r0, #32
 8007e16:	f7fa fa03 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8007e1a:	2040      	movs	r0, #64	; 0x40
 8007e1c:	f7fa fa00 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8007e20:	2080      	movs	r0, #128	; 0x80
 8007e22:	f7fa f9fd 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007e26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007e2a:	f7fa f9f9 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007e2e:	bf00      	nop
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007e36:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007e3a:	f7fa f9f1 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8007e3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007e42:	f7fa f9ed 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007e46:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007e4a:	f7fa f9e9 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8007e4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007e52:	f7fa f9e5 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007e56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007e5a:	f7fa f9e1 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007e5e:	bf00      	nop
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007e68:	4a17      	ldr	r2, [pc, #92]	; (8007ec8 <SystemInit+0x64>)
 8007e6a:	4b17      	ldr	r3, [pc, #92]	; (8007ec8 <SystemInit+0x64>)
 8007e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007e78:	4a14      	ldr	r2, [pc, #80]	; (8007ecc <SystemInit+0x68>)
 8007e7a:	4b14      	ldr	r3, [pc, #80]	; (8007ecc <SystemInit+0x68>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f043 0301 	orr.w	r3, r3, #1
 8007e82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007e84:	4b11      	ldr	r3, [pc, #68]	; (8007ecc <SystemInit+0x68>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007e8a:	4a10      	ldr	r2, [pc, #64]	; (8007ecc <SystemInit+0x68>)
 8007e8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ecc <SystemInit+0x68>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007e94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007e98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007e9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <SystemInit+0x68>)
 8007e9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ea0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007ea2:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <SystemInit+0x68>)
 8007ea4:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <SystemInit+0x68>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007eae:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <SystemInit+0x68>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007eb4:	4b04      	ldr	r3, [pc, #16]	; (8007ec8 <SystemInit+0x64>)
 8007eb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007eba:	609a      	str	r2, [r3, #8]
#endif
}
 8007ebc:	bf00      	nop
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	e000ed00 	.word	0xe000ed00
 8007ecc:	40021000 	.word	0x40021000

08007ed0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007ed4:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <MX_USART1_UART_Init+0x5c>)
 8007ed6:	4a16      	ldr	r2, [pc, #88]	; (8007f30 <MX_USART1_UART_Init+0x60>)
 8007ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007eda:	4b14      	ldr	r3, [pc, #80]	; (8007f2c <MX_USART1_UART_Init+0x5c>)
 8007edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ee0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8007ee2:	4b12      	ldr	r3, [pc, #72]	; (8007f2c <MX_USART1_UART_Init+0x5c>)
 8007ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007eea:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <MX_USART1_UART_Init+0x5c>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007ef0:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <MX_USART1_UART_Init+0x5c>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <MX_USART1_UART_Init+0x5c>)
 8007ef8:	220c      	movs	r2, #12
 8007efa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007efc:	4b0b      	ldr	r3, [pc, #44]	; (8007f2c <MX_USART1_UART_Init+0x5c>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f02:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <MX_USART1_UART_Init+0x5c>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f08:	4b08      	ldr	r3, [pc, #32]	; (8007f2c <MX_USART1_UART_Init+0x5c>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <MX_USART1_UART_Init+0x5c>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007f14:	4805      	ldr	r0, [pc, #20]	; (8007f2c <MX_USART1_UART_Init+0x5c>)
 8007f16:	f7fd fb3f 	bl	8005598 <HAL_UART_Init>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007f20:	2145      	movs	r1, #69	; 0x45
 8007f22:	4804      	ldr	r0, [pc, #16]	; (8007f34 <MX_USART1_UART_Init+0x64>)
 8007f24:	f7fe fad2 	bl	80064cc <_Error_Handler>
  }

}
 8007f28:	bf00      	nop
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000db0 	.word	0x20000db0
 8007f30:	40013800 	.word	0x40013800
 8007f34:	0800b648 	.word	0x0800b648

08007f38 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007f3c:	4b15      	ldr	r3, [pc, #84]	; (8007f94 <MX_USART3_UART_Init+0x5c>)
 8007f3e:	4a16      	ldr	r2, [pc, #88]	; (8007f98 <MX_USART3_UART_Init+0x60>)
 8007f40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007f42:	4b14      	ldr	r3, [pc, #80]	; (8007f94 <MX_USART3_UART_Init+0x5c>)
 8007f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007f48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_7B;
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <MX_USART3_UART_Init+0x5c>)
 8007f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f50:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007f52:	4b10      	ldr	r3, [pc, #64]	; (8007f94 <MX_USART3_UART_Init+0x5c>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007f58:	4b0e      	ldr	r3, [pc, #56]	; (8007f94 <MX_USART3_UART_Init+0x5c>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007f5e:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <MX_USART3_UART_Init+0x5c>)
 8007f60:	220c      	movs	r2, #12
 8007f62:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f64:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <MX_USART3_UART_Init+0x5c>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f6a:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <MX_USART3_UART_Init+0x5c>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f70:	4b08      	ldr	r3, [pc, #32]	; (8007f94 <MX_USART3_UART_Init+0x5c>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f76:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <MX_USART3_UART_Init+0x5c>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007f7c:	4805      	ldr	r0, [pc, #20]	; (8007f94 <MX_USART3_UART_Init+0x5c>)
 8007f7e:	f7fd fb0b 	bl	8005598 <HAL_UART_Init>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <MX_USART3_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8007f88:	215a      	movs	r1, #90	; 0x5a
 8007f8a:	4804      	ldr	r0, [pc, #16]	; (8007f9c <MX_USART3_UART_Init+0x64>)
 8007f8c:	f7fe fa9e 	bl	80064cc <_Error_Handler>
  }

}
 8007f90:	bf00      	nop
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20000f58 	.word	0x20000f58
 8007f98:	40004800 	.word	0x40004800
 8007f9c:	0800b648 	.word	0x0800b648

08007fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08a      	sub	sp, #40	; 0x28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a22      	ldr	r2, [pc, #136]	; (8008038 <HAL_UART_MspInit+0x98>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d11c      	bne.n	8007fec <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007fb2:	4a22      	ldr	r2, [pc, #136]	; (800803c <HAL_UART_MspInit+0x9c>)
 8007fb4:	4b21      	ldr	r3, [pc, #132]	; (800803c <HAL_UART_MspInit+0x9c>)
 8007fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fbc:	6613      	str	r3, [r2, #96]	; 0x60
 8007fbe:	4b1f      	ldr	r3, [pc, #124]	; (800803c <HAL_UART_MspInit+0x9c>)
 8007fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fc6:	613b      	str	r3, [r7, #16]
 8007fc8:	693b      	ldr	r3, [r7, #16]
  
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8007fca:	23c0      	movs	r3, #192	; 0xc0
 8007fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007fda:	2307      	movs	r3, #7
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fde:	f107 0314 	add.w	r3, r7, #20
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4816      	ldr	r0, [pc, #88]	; (8008040 <HAL_UART_MspInit+0xa0>)
 8007fe6:	f7f9 fe47 	bl	8001c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007fea:	e021      	b.n	8008030 <HAL_UART_MspInit+0x90>
  else if(uartHandle->Instance==USART3)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a14      	ldr	r2, [pc, #80]	; (8008044 <HAL_UART_MspInit+0xa4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d11c      	bne.n	8008030 <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007ff6:	4a11      	ldr	r2, [pc, #68]	; (800803c <HAL_UART_MspInit+0x9c>)
 8007ff8:	4b10      	ldr	r3, [pc, #64]	; (800803c <HAL_UART_MspInit+0x9c>)
 8007ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008000:	6593      	str	r3, [r2, #88]	; 0x58
 8008002:	4b0e      	ldr	r3, [pc, #56]	; (800803c <HAL_UART_MspInit+0x9c>)
 8008004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800800e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008014:	2302      	movs	r3, #2
 8008016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008018:	2300      	movs	r3, #0
 800801a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800801c:	2303      	movs	r3, #3
 800801e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008020:	2307      	movs	r3, #7
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008024:	f107 0314 	add.w	r3, r7, #20
 8008028:	4619      	mov	r1, r3
 800802a:	4807      	ldr	r0, [pc, #28]	; (8008048 <HAL_UART_MspInit+0xa8>)
 800802c:	f7f9 fe24 	bl	8001c78 <HAL_GPIO_Init>
}
 8008030:	bf00      	nop
 8008032:	3728      	adds	r7, #40	; 0x28
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40013800 	.word	0x40013800
 800803c:	40021000 	.word	0x40021000
 8008040:	48000400 	.word	0x48000400
 8008044:	40004800 	.word	0x40004800
 8008048:	48000c00 	.word	0x48000c00

0800804c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008050:	4b16      	ldr	r3, [pc, #88]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8008052:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008056:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008058:	4b14      	ldr	r3, [pc, #80]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 800805a:	2206      	movs	r2, #6
 800805c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800805e:	4b13      	ldr	r3, [pc, #76]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8008060:	2201      	movs	r2, #1
 8008062:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8008064:	4b11      	ldr	r3, [pc, #68]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8008066:	2200      	movs	r2, #0
 8008068:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800806a:	4b10      	ldr	r3, [pc, #64]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 800806c:	2201      	movs	r2, #1
 800806e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008070:	4b0e      	ldr	r3, [pc, #56]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8008072:	2200      	movs	r2, #0
 8008074:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008076:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8008078:	2200      	movs	r2, #0
 800807a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800807c:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 800807e:	2200      	movs	r2, #0
 8008080:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008082:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8008084:	2200      	movs	r2, #0
 8008086:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008088:	4b08      	ldr	r3, [pc, #32]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 800808a:	2200      	movs	r2, #0
 800808c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800808e:	4b07      	ldr	r3, [pc, #28]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8008090:	2200      	movs	r2, #0
 8008092:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008094:	4805      	ldr	r0, [pc, #20]	; (80080ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8008096:	f7fa feac 	bl	8002df2 <HAL_PCD_Init>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <MX_USB_OTG_FS_PCD_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80080a0:	2145      	movs	r1, #69	; 0x45
 80080a2:	4803      	ldr	r0, [pc, #12]	; (80080b0 <MX_USB_OTG_FS_PCD_Init+0x64>)
 80080a4:	f7fe fa12 	bl	80064cc <_Error_Handler>
  }

}
 80080a8:	bf00      	nop
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	20000980 	.word	0x20000980
 80080b0:	0800b658 	.word	0x0800b658

080080b4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08a      	sub	sp, #40	; 0x28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080c4:	d148      	bne.n	8008158 <HAL_PCD_MspInit+0xa4>
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80080c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080cc:	2300      	movs	r3, #0
 80080ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80080d4:	f107 0314 	add.w	r3, r7, #20
 80080d8:	4619      	mov	r1, r3
 80080da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080de:	f7f9 fdcb 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80080e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80080e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e8:	2302      	movs	r3, #2
 80080ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ec:	2300      	movs	r3, #0
 80080ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080f0:	2303      	movs	r3, #3
 80080f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080f4:	230a      	movs	r3, #10
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080f8:	f107 0314 	add.w	r3, r7, #20
 80080fc:	4619      	mov	r1, r3
 80080fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008102:	f7f9 fdb9 	bl	8001c78 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008106:	4a16      	ldr	r2, [pc, #88]	; (8008160 <HAL_PCD_MspInit+0xac>)
 8008108:	4b15      	ldr	r3, [pc, #84]	; (8008160 <HAL_PCD_MspInit+0xac>)
 800810a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008112:	4b13      	ldr	r3, [pc, #76]	; (8008160 <HAL_PCD_MspInit+0xac>)
 8008114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800811e:	4b10      	ldr	r3, [pc, #64]	; (8008160 <HAL_PCD_MspInit+0xac>)
 8008120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d114      	bne.n	8008154 <HAL_PCD_MspInit+0xa0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800812a:	4a0d      	ldr	r2, [pc, #52]	; (8008160 <HAL_PCD_MspInit+0xac>)
 800812c:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <HAL_PCD_MspInit+0xac>)
 800812e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008134:	6593      	str	r3, [r2, #88]	; 0x58
 8008136:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <HAL_PCD_MspInit+0xac>)
 8008138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8008142:	f7fb f813 	bl	800316c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008146:	4a06      	ldr	r2, [pc, #24]	; (8008160 <HAL_PCD_MspInit+0xac>)
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <HAL_PCD_MspInit+0xac>)
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008150:	6593      	str	r3, [r2, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008152:	e001      	b.n	8008158 <HAL_PCD_MspInit+0xa4>
      HAL_PWREx_EnableVddUSB();
 8008154:	f7fb f80a 	bl	800316c <HAL_PWREx_EnableVddUSB>
}
 8008158:	bf00      	nop
 800815a:	3728      	adds	r7, #40	; 0x28
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	40021000 	.word	0x40021000

08008164 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 800816e:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <WIFI_Init+0x40>)
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <WIFI_Init+0x44>)
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	4b0d      	ldr	r3, [pc, #52]	; (80081ac <WIFI_Init+0x48>)
 8008178:	4a0d      	ldr	r2, [pc, #52]	; (80081b0 <WIFI_Init+0x4c>)
 800817a:	490e      	ldr	r1, [pc, #56]	; (80081b4 <WIFI_Init+0x50>)
 800817c:	480e      	ldr	r0, [pc, #56]	; (80081b8 <WIFI_Init+0x54>)
 800817e:	f7fe fccf 	bl	8006b20 <ES_WIFI_RegisterBusIO>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d107      	bne.n	8008198 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008188:	480b      	ldr	r0, [pc, #44]	; (80081b8 <WIFI_Init+0x54>)
 800818a:	f7fe fc9b 	bl	8006ac4 <ES_WIFI_Init>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8008198:	79fb      	ldrb	r3, [r7, #7]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	08007291 	.word	0x08007291
 80081a8:	080073bd 	.word	0x080073bd
 80081ac:	080074a1 	.word	0x080074a1
 80081b0:	0800727d 	.word	0x0800727d
 80081b4:	08007119 	.word	0x08007119
 80081b8:	20000fd0 	.word	0x20000fd0

080081bc <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	4613      	mov	r3, r2
 80081c8:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 80081ca:	2301      	movs	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80081ce:	79fb      	ldrb	r3, [r7, #7]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	68f9      	ldr	r1, [r7, #12]
 80081d4:	4809      	ldr	r0, [pc, #36]	; (80081fc <WIFI_Connect+0x40>)
 80081d6:	f7fe fcd3 	bl	8006b80 <ES_WIFI_Connect>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d107      	bne.n	80081f0 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80081e0:	4806      	ldr	r0, [pc, #24]	; (80081fc <WIFI_Connect+0x40>)
 80081e2:	f7fe fd43 	bl	8006c6c <ES_WIFI_GetNetworkSettings>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000fd0 	.word	0x20000fd0

08008200 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char* name, uint8_t* ipaddr, uint16_t port, uint16_t local_port)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08a      	sub	sp, #40	; 0x28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	607a      	str	r2, [r7, #4]
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	460b      	mov	r3, r1
 800820e:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	b2db      	uxtb	r3, r3
 800821a:	757b      	strb	r3, [r7, #21]
  conn.RemotePort = port;
 800821c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800821e:	82fb      	strh	r3, [r7, #22]
  conn.LocalPort = local_port;
 8008220:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008222:	833b      	strh	r3, [r7, #24]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8008224:	7afb      	ldrb	r3, [r7, #11]
 8008226:	2b00      	cmp	r3, #0
 8008228:	bf14      	ite	ne
 800822a:	2301      	movne	r3, #1
 800822c:	2300      	moveq	r3, #0
 800822e:	b2db      	uxtb	r3, r3
 8008230:	753b      	strb	r3, [r7, #20]
  conn.RemoteIP[0] = ipaddr[0];
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[1] = ipaddr[1];
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	76fb      	strb	r3, [r7, #27]
  conn.RemoteIP[2] = ipaddr[2];
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	789b      	ldrb	r3, [r3, #2]
 8008242:	773b      	strb	r3, [r7, #28]
  conn.RemoteIP[3] = ipaddr[3];
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	78db      	ldrb	r3, [r3, #3]
 8008248:	777b      	strb	r3, [r7, #29]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800824a:	f107 0314 	add.w	r3, r7, #20
 800824e:	4619      	mov	r1, r3
 8008250:	4807      	ldr	r0, [pc, #28]	; (8008270 <WIFI_OpenClientConnection+0x70>)
 8008252:	f7fe fd35 	bl	8006cc0 <ES_WIFI_StartClientConnection>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008266:	4618      	mov	r0, r3
 8008268:	3728      	adds	r7, #40	; 0x28
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000fd0 	.word	0x20000fd0

08008274 <WIFI_CloseClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 800827c:	2301      	movs	r3, #1
 800827e:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	737b      	strb	r3, [r7, #13]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8008286:	f107 030c 	add.w	r3, r7, #12
 800828a:	4619      	mov	r1, r3
 800828c:	4806      	ldr	r0, [pc, #24]	; (80082a8 <WIFI_CloseClientConnection+0x34>)
 800828e:	f7fe fdcf 	bl	8006e30 <ES_WIFI_StopClientConnection>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	77fb      	strb	r3, [r7, #31]
  }
  return ret; 
 800829c:	7ffb      	ldrb	r3, [r7, #31]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3720      	adds	r7, #32
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000fd0 	.word	0x20000fd0

080082ac <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607b      	str	r3, [r7, #4]
 80082b6:	4603      	mov	r3, r0
 80082b8:	73fb      	strb	r3, [r7, #15]
 80082ba:	4613      	mov	r3, r2
 80082bc:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80082c2:	89ba      	ldrh	r2, [r7, #12]
 80082c4:	7bf9      	ldrb	r1, [r7, #15]
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	4613      	mov	r3, r2
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	4806      	ldr	r0, [pc, #24]	; (80082ec <WIFI_SendData+0x40>)
 80082d4:	f7fe fde6 	bl	8006ea4 <ES_WIFI_SendData>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20000fd0 	.word	0x20000fd0

080082f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80082f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008328 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80082f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80082f6:	e003      	b.n	8008300 <LoopCopyDataInit>

080082f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80082f8:	4b0c      	ldr	r3, [pc, #48]	; (800832c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80082fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80082fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80082fe:	3104      	adds	r1, #4

08008300 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008300:	480b      	ldr	r0, [pc, #44]	; (8008330 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008302:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008304:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008306:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008308:	d3f6      	bcc.n	80082f8 <CopyDataInit>
	ldr	r2, =_sbss
 800830a:	4a0b      	ldr	r2, [pc, #44]	; (8008338 <LoopForever+0x12>)
	b	LoopFillZerobss
 800830c:	e002      	b.n	8008314 <LoopFillZerobss>

0800830e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800830e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008310:	f842 3b04 	str.w	r3, [r2], #4

08008314 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <LoopForever+0x16>)
	cmp	r2, r3
 8008316:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008318:	d3f9      	bcc.n	800830e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800831a:	f7ff fda3 	bl	8007e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800831e:	f000 f811 	bl	8008344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008322:	f7ff faf5 	bl	8007910 <main>

08008326 <LoopForever>:

LoopForever:
    b LoopForever
 8008326:	e7fe      	b.n	8008326 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008328:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800832c:	0800b930 	.word	0x0800b930
	ldr	r0, =_sdata
 8008330:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008334:	200006d0 	.word	0x200006d0
	ldr	r2, =_sbss
 8008338:	200006d0 	.word	0x200006d0
	ldr	r3, = _ebss
 800833c:	20001748 	.word	0x20001748

08008340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008340:	e7fe      	b.n	8008340 <ADC1_2_IRQHandler>
	...

08008344 <__libc_init_array>:
 8008344:	b570      	push	{r4, r5, r6, lr}
 8008346:	4e0d      	ldr	r6, [pc, #52]	; (800837c <__libc_init_array+0x38>)
 8008348:	4c0d      	ldr	r4, [pc, #52]	; (8008380 <__libc_init_array+0x3c>)
 800834a:	1ba4      	subs	r4, r4, r6
 800834c:	10a4      	asrs	r4, r4, #2
 800834e:	2500      	movs	r5, #0
 8008350:	42a5      	cmp	r5, r4
 8008352:	d109      	bne.n	8008368 <__libc_init_array+0x24>
 8008354:	4e0b      	ldr	r6, [pc, #44]	; (8008384 <__libc_init_array+0x40>)
 8008356:	4c0c      	ldr	r4, [pc, #48]	; (8008388 <__libc_init_array+0x44>)
 8008358:	f002 ffa8 	bl	800b2ac <_init>
 800835c:	1ba4      	subs	r4, r4, r6
 800835e:	10a4      	asrs	r4, r4, #2
 8008360:	2500      	movs	r5, #0
 8008362:	42a5      	cmp	r5, r4
 8008364:	d105      	bne.n	8008372 <__libc_init_array+0x2e>
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800836c:	4798      	blx	r3
 800836e:	3501      	adds	r5, #1
 8008370:	e7ee      	b.n	8008350 <__libc_init_array+0xc>
 8008372:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008376:	4798      	blx	r3
 8008378:	3501      	adds	r5, #1
 800837a:	e7f2      	b.n	8008362 <__libc_init_array+0x1e>
 800837c:	0800b928 	.word	0x0800b928
 8008380:	0800b928 	.word	0x0800b928
 8008384:	0800b928 	.word	0x0800b928
 8008388:	0800b92c 	.word	0x0800b92c

0800838c <memcpy>:
 800838c:	b510      	push	{r4, lr}
 800838e:	1e43      	subs	r3, r0, #1
 8008390:	440a      	add	r2, r1
 8008392:	4291      	cmp	r1, r2
 8008394:	d100      	bne.n	8008398 <memcpy+0xc>
 8008396:	bd10      	pop	{r4, pc}
 8008398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800839c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083a0:	e7f7      	b.n	8008392 <memcpy+0x6>
	...

080083a4 <sprintf>:
 80083a4:	b40e      	push	{r1, r2, r3}
 80083a6:	b500      	push	{lr}
 80083a8:	b09c      	sub	sp, #112	; 0x70
 80083aa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80083ae:	ab1d      	add	r3, sp, #116	; 0x74
 80083b0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80083b4:	9002      	str	r0, [sp, #8]
 80083b6:	9006      	str	r0, [sp, #24]
 80083b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083bc:	480a      	ldr	r0, [pc, #40]	; (80083e8 <sprintf+0x44>)
 80083be:	9104      	str	r1, [sp, #16]
 80083c0:	9107      	str	r1, [sp, #28]
 80083c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80083c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ca:	f8ad 1016 	strh.w	r1, [sp, #22]
 80083ce:	6800      	ldr	r0, [r0, #0]
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	a902      	add	r1, sp, #8
 80083d4:	f000 f8a0 	bl	8008518 <_svfprintf_r>
 80083d8:	9b02      	ldr	r3, [sp, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	b01c      	add	sp, #112	; 0x70
 80083e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083e4:	b003      	add	sp, #12
 80083e6:	4770      	bx	lr
 80083e8:	20000060 	.word	0x20000060

080083ec <strchr>:
 80083ec:	b2c9      	uxtb	r1, r1
 80083ee:	4603      	mov	r3, r0
 80083f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f4:	b11a      	cbz	r2, 80083fe <strchr+0x12>
 80083f6:	4291      	cmp	r1, r2
 80083f8:	d1f9      	bne.n	80083ee <strchr+0x2>
 80083fa:	4618      	mov	r0, r3
 80083fc:	4770      	bx	lr
 80083fe:	2900      	cmp	r1, #0
 8008400:	bf0c      	ite	eq
 8008402:	4618      	moveq	r0, r3
 8008404:	2000      	movne	r0, #0
 8008406:	4770      	bx	lr

08008408 <strncpy>:
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	4604      	mov	r4, r0
 800840c:	b902      	cbnz	r2, 8008410 <strncpy+0x8>
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	4623      	mov	r3, r4
 8008412:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008416:	f803 5b01 	strb.w	r5, [r3], #1
 800841a:	1e56      	subs	r6, r2, #1
 800841c:	b91d      	cbnz	r5, 8008426 <strncpy+0x1e>
 800841e:	4414      	add	r4, r2
 8008420:	42a3      	cmp	r3, r4
 8008422:	d103      	bne.n	800842c <strncpy+0x24>
 8008424:	bd70      	pop	{r4, r5, r6, pc}
 8008426:	461c      	mov	r4, r3
 8008428:	4632      	mov	r2, r6
 800842a:	e7ef      	b.n	800840c <strncpy+0x4>
 800842c:	f803 5b01 	strb.w	r5, [r3], #1
 8008430:	e7f6      	b.n	8008420 <strncpy+0x18>

08008432 <strstr>:
 8008432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008434:	7803      	ldrb	r3, [r0, #0]
 8008436:	b133      	cbz	r3, 8008446 <strstr+0x14>
 8008438:	4603      	mov	r3, r0
 800843a:	4618      	mov	r0, r3
 800843c:	1c5e      	adds	r6, r3, #1
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	b933      	cbnz	r3, 8008450 <strstr+0x1e>
 8008442:	4618      	mov	r0, r3
 8008444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008446:	780b      	ldrb	r3, [r1, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	bf18      	it	ne
 800844c:	2000      	movne	r0, #0
 800844e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008450:	1e4d      	subs	r5, r1, #1
 8008452:	1e44      	subs	r4, r0, #1
 8008454:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008458:	2a00      	cmp	r2, #0
 800845a:	d0f3      	beq.n	8008444 <strstr+0x12>
 800845c:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8008460:	4297      	cmp	r7, r2
 8008462:	4633      	mov	r3, r6
 8008464:	d0f6      	beq.n	8008454 <strstr+0x22>
 8008466:	e7e8      	b.n	800843a <strstr+0x8>

08008468 <strtok>:
 8008468:	4b14      	ldr	r3, [pc, #80]	; (80084bc <strtok+0x54>)
 800846a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800846e:	681d      	ldr	r5, [r3, #0]
 8008470:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8008474:	4606      	mov	r6, r0
 8008476:	460f      	mov	r7, r1
 8008478:	b9bc      	cbnz	r4, 80084aa <strtok+0x42>
 800847a:	2050      	movs	r0, #80	; 0x50
 800847c:	f001 fe88 	bl	800a190 <malloc>
 8008480:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 8008484:	6004      	str	r4, [r0, #0]
 8008486:	6044      	str	r4, [r0, #4]
 8008488:	6084      	str	r4, [r0, #8]
 800848a:	60c4      	str	r4, [r0, #12]
 800848c:	6104      	str	r4, [r0, #16]
 800848e:	6144      	str	r4, [r0, #20]
 8008490:	6184      	str	r4, [r0, #24]
 8008492:	6284      	str	r4, [r0, #40]	; 0x28
 8008494:	62c4      	str	r4, [r0, #44]	; 0x2c
 8008496:	6304      	str	r4, [r0, #48]	; 0x30
 8008498:	6344      	str	r4, [r0, #52]	; 0x34
 800849a:	6384      	str	r4, [r0, #56]	; 0x38
 800849c:	63c4      	str	r4, [r0, #60]	; 0x3c
 800849e:	6404      	str	r4, [r0, #64]	; 0x40
 80084a0:	6444      	str	r4, [r0, #68]	; 0x44
 80084a2:	6484      	str	r4, [r0, #72]	; 0x48
 80084a4:	64c4      	str	r4, [r0, #76]	; 0x4c
 80084a6:	7704      	strb	r4, [r0, #28]
 80084a8:	6244      	str	r4, [r0, #36]	; 0x24
 80084aa:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 80084ae:	4639      	mov	r1, r7
 80084b0:	4630      	mov	r0, r6
 80084b2:	2301      	movs	r3, #1
 80084b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084b8:	f000 b802 	b.w	80084c0 <__strtok_r>
 80084bc:	20000060 	.word	0x20000060

080084c0 <__strtok_r>:
 80084c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084c2:	b918      	cbnz	r0, 80084cc <__strtok_r+0xc>
 80084c4:	6810      	ldr	r0, [r2, #0]
 80084c6:	b908      	cbnz	r0, 80084cc <__strtok_r+0xc>
 80084c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ca:	4620      	mov	r0, r4
 80084cc:	4604      	mov	r4, r0
 80084ce:	460f      	mov	r7, r1
 80084d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80084d4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80084d8:	b91e      	cbnz	r6, 80084e2 <__strtok_r+0x22>
 80084da:	b965      	cbnz	r5, 80084f6 <__strtok_r+0x36>
 80084dc:	6015      	str	r5, [r2, #0]
 80084de:	4628      	mov	r0, r5
 80084e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e2:	42b5      	cmp	r5, r6
 80084e4:	d1f6      	bne.n	80084d4 <__strtok_r+0x14>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1ef      	bne.n	80084ca <__strtok_r+0xa>
 80084ea:	6014      	str	r4, [r2, #0]
 80084ec:	7003      	strb	r3, [r0, #0]
 80084ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f0:	461c      	mov	r4, r3
 80084f2:	e00c      	b.n	800850e <__strtok_r+0x4e>
 80084f4:	b915      	cbnz	r5, 80084fc <__strtok_r+0x3c>
 80084f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084fa:	460e      	mov	r6, r1
 80084fc:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008500:	42ab      	cmp	r3, r5
 8008502:	d1f7      	bne.n	80084f4 <__strtok_r+0x34>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d0f3      	beq.n	80084f0 <__strtok_r+0x30>
 8008508:	2300      	movs	r3, #0
 800850a:	f804 3c01 	strb.w	r3, [r4, #-1]
 800850e:	6014      	str	r4, [r2, #0]
 8008510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008512:	0000      	movs	r0, r0
 8008514:	0000      	movs	r0, r0
	...

08008518 <_svfprintf_r>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	b0bd      	sub	sp, #244	; 0xf4
 800851e:	468a      	mov	sl, r1
 8008520:	4615      	mov	r5, r2
 8008522:	461f      	mov	r7, r3
 8008524:	4683      	mov	fp, r0
 8008526:	f001 fe25 	bl	800a174 <_localeconv_r>
 800852a:	6803      	ldr	r3, [r0, #0]
 800852c:	930d      	str	r3, [sp, #52]	; 0x34
 800852e:	4618      	mov	r0, r3
 8008530:	f7f7 fe4e 	bl	80001d0 <strlen>
 8008534:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008538:	9008      	str	r0, [sp, #32]
 800853a:	061b      	lsls	r3, r3, #24
 800853c:	d518      	bpl.n	8008570 <_svfprintf_r+0x58>
 800853e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8008542:	b9ab      	cbnz	r3, 8008570 <_svfprintf_r+0x58>
 8008544:	2140      	movs	r1, #64	; 0x40
 8008546:	4658      	mov	r0, fp
 8008548:	f001 fe2a 	bl	800a1a0 <_malloc_r>
 800854c:	f8ca 0000 	str.w	r0, [sl]
 8008550:	f8ca 0010 	str.w	r0, [sl, #16]
 8008554:	b948      	cbnz	r0, 800856a <_svfprintf_r+0x52>
 8008556:	230c      	movs	r3, #12
 8008558:	f8cb 3000 	str.w	r3, [fp]
 800855c:	f04f 33ff 	mov.w	r3, #4294967295
 8008560:	9309      	str	r3, [sp, #36]	; 0x24
 8008562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008564:	b03d      	add	sp, #244	; 0xf4
 8008566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856a:	2340      	movs	r3, #64	; 0x40
 800856c:	f8ca 3014 	str.w	r3, [sl, #20]
 8008570:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80087d8 <_svfprintf_r+0x2c0>
 8008574:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008578:	2300      	movs	r3, #0
 800857a:	ac2c      	add	r4, sp, #176	; 0xb0
 800857c:	941f      	str	r4, [sp, #124]	; 0x7c
 800857e:	9321      	str	r3, [sp, #132]	; 0x84
 8008580:	9320      	str	r3, [sp, #128]	; 0x80
 8008582:	9505      	str	r5, [sp, #20]
 8008584:	9303      	str	r3, [sp, #12]
 8008586:	9311      	str	r3, [sp, #68]	; 0x44
 8008588:	9310      	str	r3, [sp, #64]	; 0x40
 800858a:	9309      	str	r3, [sp, #36]	; 0x24
 800858c:	9d05      	ldr	r5, [sp, #20]
 800858e:	462b      	mov	r3, r5
 8008590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008594:	b112      	cbz	r2, 800859c <_svfprintf_r+0x84>
 8008596:	2a25      	cmp	r2, #37	; 0x25
 8008598:	f040 8083 	bne.w	80086a2 <_svfprintf_r+0x18a>
 800859c:	9b05      	ldr	r3, [sp, #20]
 800859e:	1aee      	subs	r6, r5, r3
 80085a0:	d00d      	beq.n	80085be <_svfprintf_r+0xa6>
 80085a2:	e884 0048 	stmia.w	r4, {r3, r6}
 80085a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085a8:	4433      	add	r3, r6
 80085aa:	9321      	str	r3, [sp, #132]	; 0x84
 80085ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80085ae:	3301      	adds	r3, #1
 80085b0:	2b07      	cmp	r3, #7
 80085b2:	9320      	str	r3, [sp, #128]	; 0x80
 80085b4:	dc77      	bgt.n	80086a6 <_svfprintf_r+0x18e>
 80085b6:	3408      	adds	r4, #8
 80085b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ba:	4433      	add	r3, r6
 80085bc:	9309      	str	r3, [sp, #36]	; 0x24
 80085be:	782b      	ldrb	r3, [r5, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 8729 	beq.w	8009418 <_svfprintf_r+0xf00>
 80085c6:	2300      	movs	r3, #0
 80085c8:	1c69      	adds	r1, r5, #1
 80085ca:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80085ce:	461a      	mov	r2, r3
 80085d0:	f04f 39ff 	mov.w	r9, #4294967295
 80085d4:	930a      	str	r3, [sp, #40]	; 0x28
 80085d6:	461d      	mov	r5, r3
 80085d8:	200a      	movs	r0, #10
 80085da:	1c4e      	adds	r6, r1, #1
 80085dc:	7809      	ldrb	r1, [r1, #0]
 80085de:	9605      	str	r6, [sp, #20]
 80085e0:	9102      	str	r1, [sp, #8]
 80085e2:	9902      	ldr	r1, [sp, #8]
 80085e4:	3920      	subs	r1, #32
 80085e6:	2958      	cmp	r1, #88	; 0x58
 80085e8:	f200 8418 	bhi.w	8008e1c <_svfprintf_r+0x904>
 80085ec:	e8df f011 	tbh	[pc, r1, lsl #1]
 80085f0:	041600a6 	.word	0x041600a6
 80085f4:	00ab0416 	.word	0x00ab0416
 80085f8:	04160416 	.word	0x04160416
 80085fc:	04160416 	.word	0x04160416
 8008600:	04160416 	.word	0x04160416
 8008604:	006500ae 	.word	0x006500ae
 8008608:	00b70416 	.word	0x00b70416
 800860c:	041600ba 	.word	0x041600ba
 8008610:	00da00d7 	.word	0x00da00d7
 8008614:	00da00da 	.word	0x00da00da
 8008618:	00da00da 	.word	0x00da00da
 800861c:	00da00da 	.word	0x00da00da
 8008620:	00da00da 	.word	0x00da00da
 8008624:	04160416 	.word	0x04160416
 8008628:	04160416 	.word	0x04160416
 800862c:	04160416 	.word	0x04160416
 8008630:	04160416 	.word	0x04160416
 8008634:	04160416 	.word	0x04160416
 8008638:	012b0115 	.word	0x012b0115
 800863c:	012b0416 	.word	0x012b0416
 8008640:	04160416 	.word	0x04160416
 8008644:	04160416 	.word	0x04160416
 8008648:	041600ed 	.word	0x041600ed
 800864c:	03400416 	.word	0x03400416
 8008650:	04160416 	.word	0x04160416
 8008654:	04160416 	.word	0x04160416
 8008658:	03a80416 	.word	0x03a80416
 800865c:	04160416 	.word	0x04160416
 8008660:	04160086 	.word	0x04160086
 8008664:	04160416 	.word	0x04160416
 8008668:	04160416 	.word	0x04160416
 800866c:	04160416 	.word	0x04160416
 8008670:	04160416 	.word	0x04160416
 8008674:	01070416 	.word	0x01070416
 8008678:	012b006b 	.word	0x012b006b
 800867c:	012b012b 	.word	0x012b012b
 8008680:	006b00f0 	.word	0x006b00f0
 8008684:	04160416 	.word	0x04160416
 8008688:	041600fa 	.word	0x041600fa
 800868c:	03420322 	.word	0x03420322
 8008690:	01010376 	.word	0x01010376
 8008694:	03870416 	.word	0x03870416
 8008698:	03aa0416 	.word	0x03aa0416
 800869c:	04160416 	.word	0x04160416
 80086a0:	03c2      	.short	0x03c2
 80086a2:	461d      	mov	r5, r3
 80086a4:	e773      	b.n	800858e <_svfprintf_r+0x76>
 80086a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80086a8:	4651      	mov	r1, sl
 80086aa:	4658      	mov	r0, fp
 80086ac:	f002 fa72 	bl	800ab94 <__ssprint_r>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f040 8692 	bne.w	80093da <_svfprintf_r+0xec2>
 80086b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80086b8:	e77e      	b.n	80085b8 <_svfprintf_r+0xa0>
 80086ba:	2301      	movs	r3, #1
 80086bc:	222b      	movs	r2, #43	; 0x2b
 80086be:	9905      	ldr	r1, [sp, #20]
 80086c0:	e78b      	b.n	80085da <_svfprintf_r+0xc2>
 80086c2:	460f      	mov	r7, r1
 80086c4:	e7fb      	b.n	80086be <_svfprintf_r+0x1a6>
 80086c6:	b10b      	cbz	r3, 80086cc <_svfprintf_r+0x1b4>
 80086c8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80086cc:	06ae      	lsls	r6, r5, #26
 80086ce:	f140 80aa 	bpl.w	8008826 <_svfprintf_r+0x30e>
 80086d2:	3707      	adds	r7, #7
 80086d4:	f027 0707 	bic.w	r7, r7, #7
 80086d8:	f107 0308 	add.w	r3, r7, #8
 80086dc:	e9d7 6700 	ldrd	r6, r7, [r7]
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	2e00      	cmp	r6, #0
 80086e4:	f177 0300 	sbcs.w	r3, r7, #0
 80086e8:	da06      	bge.n	80086f8 <_svfprintf_r+0x1e0>
 80086ea:	4276      	negs	r6, r6
 80086ec:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80086f0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80086f4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80086f8:	2301      	movs	r3, #1
 80086fa:	e2ca      	b.n	8008c92 <_svfprintf_r+0x77a>
 80086fc:	b10b      	cbz	r3, 8008702 <_svfprintf_r+0x1ea>
 80086fe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008702:	4b37      	ldr	r3, [pc, #220]	; (80087e0 <_svfprintf_r+0x2c8>)
 8008704:	9311      	str	r3, [sp, #68]	; 0x44
 8008706:	06ab      	lsls	r3, r5, #26
 8008708:	f140 8339 	bpl.w	8008d7e <_svfprintf_r+0x866>
 800870c:	3707      	adds	r7, #7
 800870e:	f027 0707 	bic.w	r7, r7, #7
 8008712:	f107 0308 	add.w	r3, r7, #8
 8008716:	e9d7 6700 	ldrd	r6, r7, [r7]
 800871a:	9304      	str	r3, [sp, #16]
 800871c:	07e8      	lsls	r0, r5, #31
 800871e:	d50b      	bpl.n	8008738 <_svfprintf_r+0x220>
 8008720:	ea56 0307 	orrs.w	r3, r6, r7
 8008724:	d008      	beq.n	8008738 <_svfprintf_r+0x220>
 8008726:	2330      	movs	r3, #48	; 0x30
 8008728:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800872c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008730:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8008734:	f045 0502 	orr.w	r5, r5, #2
 8008738:	2302      	movs	r3, #2
 800873a:	e2a7      	b.n	8008c8c <_svfprintf_r+0x774>
 800873c:	2a00      	cmp	r2, #0
 800873e:	d1be      	bne.n	80086be <_svfprintf_r+0x1a6>
 8008740:	2301      	movs	r3, #1
 8008742:	2220      	movs	r2, #32
 8008744:	e7bb      	b.n	80086be <_svfprintf_r+0x1a6>
 8008746:	f045 0501 	orr.w	r5, r5, #1
 800874a:	e7b8      	b.n	80086be <_svfprintf_r+0x1a6>
 800874c:	683e      	ldr	r6, [r7, #0]
 800874e:	960a      	str	r6, [sp, #40]	; 0x28
 8008750:	2e00      	cmp	r6, #0
 8008752:	f107 0104 	add.w	r1, r7, #4
 8008756:	dab4      	bge.n	80086c2 <_svfprintf_r+0x1aa>
 8008758:	4276      	negs	r6, r6
 800875a:	960a      	str	r6, [sp, #40]	; 0x28
 800875c:	460f      	mov	r7, r1
 800875e:	f045 0504 	orr.w	r5, r5, #4
 8008762:	e7ac      	b.n	80086be <_svfprintf_r+0x1a6>
 8008764:	9905      	ldr	r1, [sp, #20]
 8008766:	1c4e      	adds	r6, r1, #1
 8008768:	7809      	ldrb	r1, [r1, #0]
 800876a:	9102      	str	r1, [sp, #8]
 800876c:	292a      	cmp	r1, #42	; 0x2a
 800876e:	d010      	beq.n	8008792 <_svfprintf_r+0x27a>
 8008770:	f04f 0900 	mov.w	r9, #0
 8008774:	9605      	str	r6, [sp, #20]
 8008776:	9902      	ldr	r1, [sp, #8]
 8008778:	3930      	subs	r1, #48	; 0x30
 800877a:	2909      	cmp	r1, #9
 800877c:	f63f af31 	bhi.w	80085e2 <_svfprintf_r+0xca>
 8008780:	fb00 1909 	mla	r9, r0, r9, r1
 8008784:	9905      	ldr	r1, [sp, #20]
 8008786:	460e      	mov	r6, r1
 8008788:	f816 1b01 	ldrb.w	r1, [r6], #1
 800878c:	9102      	str	r1, [sp, #8]
 800878e:	9605      	str	r6, [sp, #20]
 8008790:	e7f1      	b.n	8008776 <_svfprintf_r+0x25e>
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	9605      	str	r6, [sp, #20]
 8008796:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 800879a:	3704      	adds	r7, #4
 800879c:	e78f      	b.n	80086be <_svfprintf_r+0x1a6>
 800879e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80087a2:	e78c      	b.n	80086be <_svfprintf_r+0x1a6>
 80087a4:	2100      	movs	r1, #0
 80087a6:	910a      	str	r1, [sp, #40]	; 0x28
 80087a8:	9902      	ldr	r1, [sp, #8]
 80087aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80087ac:	3930      	subs	r1, #48	; 0x30
 80087ae:	fb00 1106 	mla	r1, r0, r6, r1
 80087b2:	910a      	str	r1, [sp, #40]	; 0x28
 80087b4:	9905      	ldr	r1, [sp, #20]
 80087b6:	460e      	mov	r6, r1
 80087b8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80087bc:	9102      	str	r1, [sp, #8]
 80087be:	9902      	ldr	r1, [sp, #8]
 80087c0:	9605      	str	r6, [sp, #20]
 80087c2:	3930      	subs	r1, #48	; 0x30
 80087c4:	2909      	cmp	r1, #9
 80087c6:	d9ef      	bls.n	80087a8 <_svfprintf_r+0x290>
 80087c8:	e70b      	b.n	80085e2 <_svfprintf_r+0xca>
 80087ca:	f045 0508 	orr.w	r5, r5, #8
 80087ce:	e776      	b.n	80086be <_svfprintf_r+0x1a6>
 80087d0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80087d4:	e773      	b.n	80086be <_svfprintf_r+0x1a6>
 80087d6:	bf00      	nop
	...
 80087e0:	0800b6c4 	.word	0x0800b6c4
 80087e4:	9905      	ldr	r1, [sp, #20]
 80087e6:	7809      	ldrb	r1, [r1, #0]
 80087e8:	296c      	cmp	r1, #108	; 0x6c
 80087ea:	d105      	bne.n	80087f8 <_svfprintf_r+0x2e0>
 80087ec:	9905      	ldr	r1, [sp, #20]
 80087ee:	3101      	adds	r1, #1
 80087f0:	9105      	str	r1, [sp, #20]
 80087f2:	f045 0520 	orr.w	r5, r5, #32
 80087f6:	e762      	b.n	80086be <_svfprintf_r+0x1a6>
 80087f8:	f045 0510 	orr.w	r5, r5, #16
 80087fc:	e75f      	b.n	80086be <_svfprintf_r+0x1a6>
 80087fe:	1d3b      	adds	r3, r7, #4
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	2600      	movs	r6, #0
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800880a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800880e:	f04f 0901 	mov.w	r9, #1
 8008812:	4637      	mov	r7, r6
 8008814:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8008818:	e11b      	b.n	8008a52 <_svfprintf_r+0x53a>
 800881a:	b10b      	cbz	r3, 8008820 <_svfprintf_r+0x308>
 800881c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008820:	f045 0510 	orr.w	r5, r5, #16
 8008824:	e752      	b.n	80086cc <_svfprintf_r+0x1b4>
 8008826:	f015 0f10 	tst.w	r5, #16
 800882a:	f107 0304 	add.w	r3, r7, #4
 800882e:	d003      	beq.n	8008838 <_svfprintf_r+0x320>
 8008830:	683e      	ldr	r6, [r7, #0]
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	17f7      	asrs	r7, r6, #31
 8008836:	e754      	b.n	80086e2 <_svfprintf_r+0x1ca>
 8008838:	683e      	ldr	r6, [r7, #0]
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008840:	bf18      	it	ne
 8008842:	b236      	sxthne	r6, r6
 8008844:	e7f6      	b.n	8008834 <_svfprintf_r+0x31c>
 8008846:	b10b      	cbz	r3, 800884c <_svfprintf_r+0x334>
 8008848:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800884c:	3707      	adds	r7, #7
 800884e:	f027 0707 	bic.w	r7, r7, #7
 8008852:	f107 0308 	add.w	r3, r7, #8
 8008856:	9304      	str	r3, [sp, #16]
 8008858:	ed97 7b00 	vldr	d7, [r7]
 800885c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008860:	9b06      	ldr	r3, [sp, #24]
 8008862:	9312      	str	r3, [sp, #72]	; 0x48
 8008864:	9b07      	ldr	r3, [sp, #28]
 8008866:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800886a:	9313      	str	r3, [sp, #76]	; 0x4c
 800886c:	f04f 32ff 	mov.w	r2, #4294967295
 8008870:	4b4a      	ldr	r3, [pc, #296]	; (800899c <_svfprintf_r+0x484>)
 8008872:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008876:	f7f8 f955 	bl	8000b24 <__aeabi_dcmpun>
 800887a:	2800      	cmp	r0, #0
 800887c:	f040 85d5 	bne.w	800942a <_svfprintf_r+0xf12>
 8008880:	f04f 32ff 	mov.w	r2, #4294967295
 8008884:	4b45      	ldr	r3, [pc, #276]	; (800899c <_svfprintf_r+0x484>)
 8008886:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800888a:	f7f8 f92d 	bl	8000ae8 <__aeabi_dcmple>
 800888e:	2800      	cmp	r0, #0
 8008890:	f040 85cb 	bne.w	800942a <_svfprintf_r+0xf12>
 8008894:	2200      	movs	r2, #0
 8008896:	2300      	movs	r3, #0
 8008898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800889c:	f7f8 f91a 	bl	8000ad4 <__aeabi_dcmplt>
 80088a0:	b110      	cbz	r0, 80088a8 <_svfprintf_r+0x390>
 80088a2:	232d      	movs	r3, #45	; 0x2d
 80088a4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80088a8:	4b3d      	ldr	r3, [pc, #244]	; (80089a0 <_svfprintf_r+0x488>)
 80088aa:	4a3e      	ldr	r2, [pc, #248]	; (80089a4 <_svfprintf_r+0x48c>)
 80088ac:	9902      	ldr	r1, [sp, #8]
 80088ae:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80088b2:	2947      	cmp	r1, #71	; 0x47
 80088b4:	bfcc      	ite	gt
 80088b6:	4690      	movgt	r8, r2
 80088b8:	4698      	movle	r8, r3
 80088ba:	f04f 0903 	mov.w	r9, #3
 80088be:	2600      	movs	r6, #0
 80088c0:	4637      	mov	r7, r6
 80088c2:	e0c6      	b.n	8008a52 <_svfprintf_r+0x53a>
 80088c4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80088c8:	d022      	beq.n	8008910 <_svfprintf_r+0x3f8>
 80088ca:	9b02      	ldr	r3, [sp, #8]
 80088cc:	f023 0320 	bic.w	r3, r3, #32
 80088d0:	2b47      	cmp	r3, #71	; 0x47
 80088d2:	d104      	bne.n	80088de <_svfprintf_r+0x3c6>
 80088d4:	f1b9 0f00 	cmp.w	r9, #0
 80088d8:	bf08      	it	eq
 80088da:	f04f 0901 	moveq.w	r9, #1
 80088de:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80088e2:	930c      	str	r3, [sp, #48]	; 0x30
 80088e4:	9b07      	ldr	r3, [sp, #28]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	da15      	bge.n	8008916 <_svfprintf_r+0x3fe>
 80088ea:	9b06      	ldr	r3, [sp, #24]
 80088ec:	930e      	str	r3, [sp, #56]	; 0x38
 80088ee:	9b07      	ldr	r3, [sp, #28]
 80088f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80088f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088f6:	232d      	movs	r3, #45	; 0x2d
 80088f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80088fa:	9b02      	ldr	r3, [sp, #8]
 80088fc:	f023 0720 	bic.w	r7, r3, #32
 8008900:	2f46      	cmp	r7, #70	; 0x46
 8008902:	d00e      	beq.n	8008922 <_svfprintf_r+0x40a>
 8008904:	2f45      	cmp	r7, #69	; 0x45
 8008906:	d146      	bne.n	8008996 <_svfprintf_r+0x47e>
 8008908:	f109 0601 	add.w	r6, r9, #1
 800890c:	2102      	movs	r1, #2
 800890e:	e00a      	b.n	8008926 <_svfprintf_r+0x40e>
 8008910:	f04f 0906 	mov.w	r9, #6
 8008914:	e7e3      	b.n	80088de <_svfprintf_r+0x3c6>
 8008916:	ed9d 7b06 	vldr	d7, [sp, #24]
 800891a:	2300      	movs	r3, #0
 800891c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008920:	e7ea      	b.n	80088f8 <_svfprintf_r+0x3e0>
 8008922:	464e      	mov	r6, r9
 8008924:	2103      	movs	r1, #3
 8008926:	ab1d      	add	r3, sp, #116	; 0x74
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	ab1a      	add	r3, sp, #104	; 0x68
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	4632      	mov	r2, r6
 8008930:	ab19      	add	r3, sp, #100	; 0x64
 8008932:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8008936:	4658      	mov	r0, fp
 8008938:	f000 fe4e 	bl	80095d8 <_dtoa_r>
 800893c:	2f47      	cmp	r7, #71	; 0x47
 800893e:	4680      	mov	r8, r0
 8008940:	d102      	bne.n	8008948 <_svfprintf_r+0x430>
 8008942:	07e8      	lsls	r0, r5, #31
 8008944:	f140 857e 	bpl.w	8009444 <_svfprintf_r+0xf2c>
 8008948:	eb08 0306 	add.w	r3, r8, r6
 800894c:	2f46      	cmp	r7, #70	; 0x46
 800894e:	9303      	str	r3, [sp, #12]
 8008950:	d111      	bne.n	8008976 <_svfprintf_r+0x45e>
 8008952:	f898 3000 	ldrb.w	r3, [r8]
 8008956:	2b30      	cmp	r3, #48	; 0x30
 8008958:	d109      	bne.n	800896e <_svfprintf_r+0x456>
 800895a:	2200      	movs	r2, #0
 800895c:	2300      	movs	r3, #0
 800895e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008962:	f7f8 f8ad 	bl	8000ac0 <__aeabi_dcmpeq>
 8008966:	b910      	cbnz	r0, 800896e <_svfprintf_r+0x456>
 8008968:	f1c6 0601 	rsb	r6, r6, #1
 800896c:	9619      	str	r6, [sp, #100]	; 0x64
 800896e:	9a03      	ldr	r2, [sp, #12]
 8008970:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008972:	441a      	add	r2, r3
 8008974:	9203      	str	r2, [sp, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	2300      	movs	r3, #0
 800897a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800897e:	f7f8 f89f 	bl	8000ac0 <__aeabi_dcmpeq>
 8008982:	b988      	cbnz	r0, 80089a8 <_svfprintf_r+0x490>
 8008984:	2230      	movs	r2, #48	; 0x30
 8008986:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008988:	9903      	ldr	r1, [sp, #12]
 800898a:	4299      	cmp	r1, r3
 800898c:	d90e      	bls.n	80089ac <_svfprintf_r+0x494>
 800898e:	1c59      	adds	r1, r3, #1
 8008990:	911d      	str	r1, [sp, #116]	; 0x74
 8008992:	701a      	strb	r2, [r3, #0]
 8008994:	e7f7      	b.n	8008986 <_svfprintf_r+0x46e>
 8008996:	464e      	mov	r6, r9
 8008998:	e7b8      	b.n	800890c <_svfprintf_r+0x3f4>
 800899a:	bf00      	nop
 800899c:	7fefffff 	.word	0x7fefffff
 80089a0:	0800b6b4 	.word	0x0800b6b4
 80089a4:	0800b6b8 	.word	0x0800b6b8
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	931d      	str	r3, [sp, #116]	; 0x74
 80089ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089ae:	2f47      	cmp	r7, #71	; 0x47
 80089b0:	eba3 0308 	sub.w	r3, r3, r8
 80089b4:	9303      	str	r3, [sp, #12]
 80089b6:	f040 80fa 	bne.w	8008bae <_svfprintf_r+0x696>
 80089ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089bc:	1cd9      	adds	r1, r3, #3
 80089be:	db02      	blt.n	80089c6 <_svfprintf_r+0x4ae>
 80089c0:	4599      	cmp	r9, r3
 80089c2:	f280 8120 	bge.w	8008c06 <_svfprintf_r+0x6ee>
 80089c6:	9b02      	ldr	r3, [sp, #8]
 80089c8:	3b02      	subs	r3, #2
 80089ca:	9302      	str	r3, [sp, #8]
 80089cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80089ce:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80089d2:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 80089d6:	1e53      	subs	r3, r2, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	9319      	str	r3, [sp, #100]	; 0x64
 80089dc:	bfb6      	itet	lt
 80089de:	f1c2 0301 	rsblt	r3, r2, #1
 80089e2:	222b      	movge	r2, #43	; 0x2b
 80089e4:	222d      	movlt	r2, #45	; 0x2d
 80089e6:	2b09      	cmp	r3, #9
 80089e8:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80089ec:	f340 80fb 	ble.w	8008be6 <_svfprintf_r+0x6ce>
 80089f0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80089f4:	260a      	movs	r6, #10
 80089f6:	fb93 f0f6 	sdiv	r0, r3, r6
 80089fa:	fb06 3310 	mls	r3, r6, r0, r3
 80089fe:	3330      	adds	r3, #48	; 0x30
 8008a00:	2809      	cmp	r0, #9
 8008a02:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a06:	f102 31ff 	add.w	r1, r2, #4294967295
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	f300 80e4 	bgt.w	8008bd8 <_svfprintf_r+0x6c0>
 8008a10:	3330      	adds	r3, #48	; 0x30
 8008a12:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008a16:	3a02      	subs	r2, #2
 8008a18:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8008a1c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8008a20:	4282      	cmp	r2, r0
 8008a22:	4619      	mov	r1, r3
 8008a24:	f0c0 80da 	bcc.w	8008bdc <_svfprintf_r+0x6c4>
 8008a28:	9a03      	ldr	r2, [sp, #12]
 8008a2a:	ab1b      	add	r3, sp, #108	; 0x6c
 8008a2c:	1acb      	subs	r3, r1, r3
 8008a2e:	2a01      	cmp	r2, #1
 8008a30:	9310      	str	r3, [sp, #64]	; 0x40
 8008a32:	eb03 0902 	add.w	r9, r3, r2
 8008a36:	dc02      	bgt.n	8008a3e <_svfprintf_r+0x526>
 8008a38:	f015 0701 	ands.w	r7, r5, #1
 8008a3c:	d002      	beq.n	8008a44 <_svfprintf_r+0x52c>
 8008a3e:	9b08      	ldr	r3, [sp, #32]
 8008a40:	2700      	movs	r7, #0
 8008a42:	4499      	add	r9, r3
 8008a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a46:	b113      	cbz	r3, 8008a4e <_svfprintf_r+0x536>
 8008a48:	232d      	movs	r3, #45	; 0x2d
 8008a4a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a50:	2600      	movs	r6, #0
 8008a52:	454e      	cmp	r6, r9
 8008a54:	4633      	mov	r3, r6
 8008a56:	bfb8      	it	lt
 8008a58:	464b      	movlt	r3, r9
 8008a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a5c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8008a60:	b113      	cbz	r3, 8008a68 <_svfprintf_r+0x550>
 8008a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a64:	3301      	adds	r3, #1
 8008a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a68:	f015 0302 	ands.w	r3, r5, #2
 8008a6c:	9314      	str	r3, [sp, #80]	; 0x50
 8008a6e:	bf1e      	ittt	ne
 8008a70:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8008a72:	3302      	addne	r3, #2
 8008a74:	930b      	strne	r3, [sp, #44]	; 0x2c
 8008a76:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8008a7a:	9315      	str	r3, [sp, #84]	; 0x54
 8008a7c:	d118      	bne.n	8008ab0 <_svfprintf_r+0x598>
 8008a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a82:	1a9b      	subs	r3, r3, r2
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	930c      	str	r3, [sp, #48]	; 0x30
 8008a88:	dd12      	ble.n	8008ab0 <_svfprintf_r+0x598>
 8008a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a8c:	2b10      	cmp	r3, #16
 8008a8e:	4ba9      	ldr	r3, [pc, #676]	; (8008d34 <_svfprintf_r+0x81c>)
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	f300 81d5 	bgt.w	8008e40 <_svfprintf_r+0x928>
 8008a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a98:	6063      	str	r3, [r4, #4]
 8008a9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a9e:	4413      	add	r3, r2
 8008aa0:	9321      	str	r3, [sp, #132]	; 0x84
 8008aa2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	2b07      	cmp	r3, #7
 8008aa8:	9320      	str	r3, [sp, #128]	; 0x80
 8008aaa:	f300 81e2 	bgt.w	8008e72 <_svfprintf_r+0x95a>
 8008aae:	3408      	adds	r4, #8
 8008ab0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8008ab4:	b173      	cbz	r3, 8008ad4 <_svfprintf_r+0x5bc>
 8008ab6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	2301      	movs	r3, #1
 8008abe:	6063      	str	r3, [r4, #4]
 8008ac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	9321      	str	r3, [sp, #132]	; 0x84
 8008ac6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ac8:	3301      	adds	r3, #1
 8008aca:	2b07      	cmp	r3, #7
 8008acc:	9320      	str	r3, [sp, #128]	; 0x80
 8008ace:	f300 81da 	bgt.w	8008e86 <_svfprintf_r+0x96e>
 8008ad2:	3408      	adds	r4, #8
 8008ad4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ad6:	b16b      	cbz	r3, 8008af4 <_svfprintf_r+0x5dc>
 8008ad8:	ab18      	add	r3, sp, #96	; 0x60
 8008ada:	6023      	str	r3, [r4, #0]
 8008adc:	2302      	movs	r3, #2
 8008ade:	6063      	str	r3, [r4, #4]
 8008ae0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ae2:	3302      	adds	r3, #2
 8008ae4:	9321      	str	r3, [sp, #132]	; 0x84
 8008ae6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ae8:	3301      	adds	r3, #1
 8008aea:	2b07      	cmp	r3, #7
 8008aec:	9320      	str	r3, [sp, #128]	; 0x80
 8008aee:	f300 81d4 	bgt.w	8008e9a <_svfprintf_r+0x982>
 8008af2:	3408      	adds	r4, #8
 8008af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008af6:	2b80      	cmp	r3, #128	; 0x80
 8008af8:	d114      	bne.n	8008b24 <_svfprintf_r+0x60c>
 8008afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008afe:	1a9b      	subs	r3, r3, r2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	dd0f      	ble.n	8008b24 <_svfprintf_r+0x60c>
 8008b04:	4a8c      	ldr	r2, [pc, #560]	; (8008d38 <_svfprintf_r+0x820>)
 8008b06:	6022      	str	r2, [r4, #0]
 8008b08:	2b10      	cmp	r3, #16
 8008b0a:	f300 81d0 	bgt.w	8008eae <_svfprintf_r+0x996>
 8008b0e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b10:	6063      	str	r3, [r4, #4]
 8008b12:	4413      	add	r3, r2
 8008b14:	9321      	str	r3, [sp, #132]	; 0x84
 8008b16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b18:	3301      	adds	r3, #1
 8008b1a:	2b07      	cmp	r3, #7
 8008b1c:	9320      	str	r3, [sp, #128]	; 0x80
 8008b1e:	f300 81df 	bgt.w	8008ee0 <_svfprintf_r+0x9c8>
 8008b22:	3408      	adds	r4, #8
 8008b24:	eba6 0609 	sub.w	r6, r6, r9
 8008b28:	2e00      	cmp	r6, #0
 8008b2a:	dd0f      	ble.n	8008b4c <_svfprintf_r+0x634>
 8008b2c:	4b82      	ldr	r3, [pc, #520]	; (8008d38 <_svfprintf_r+0x820>)
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	2e10      	cmp	r6, #16
 8008b32:	f300 81df 	bgt.w	8008ef4 <_svfprintf_r+0x9dc>
 8008b36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b38:	9821      	ldr	r0, [sp, #132]	; 0x84
 8008b3a:	6066      	str	r6, [r4, #4]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	4406      	add	r6, r0
 8008b40:	2b07      	cmp	r3, #7
 8008b42:	9621      	str	r6, [sp, #132]	; 0x84
 8008b44:	9320      	str	r3, [sp, #128]	; 0x80
 8008b46:	f300 81ec 	bgt.w	8008f22 <_svfprintf_r+0xa0a>
 8008b4a:	3408      	adds	r4, #8
 8008b4c:	05eb      	lsls	r3, r5, #23
 8008b4e:	f100 81f2 	bmi.w	8008f36 <_svfprintf_r+0xa1e>
 8008b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b54:	e884 0300 	stmia.w	r4, {r8, r9}
 8008b58:	444b      	add	r3, r9
 8008b5a:	9321      	str	r3, [sp, #132]	; 0x84
 8008b5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b5e:	3301      	adds	r3, #1
 8008b60:	2b07      	cmp	r3, #7
 8008b62:	9320      	str	r3, [sp, #128]	; 0x80
 8008b64:	f340 8419 	ble.w	800939a <_svfprintf_r+0xe82>
 8008b68:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b6a:	4651      	mov	r1, sl
 8008b6c:	4658      	mov	r0, fp
 8008b6e:	f002 f811 	bl	800ab94 <__ssprint_r>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	f040 8431 	bne.w	80093da <_svfprintf_r+0xec2>
 8008b78:	ac2c      	add	r4, sp, #176	; 0xb0
 8008b7a:	076b      	lsls	r3, r5, #29
 8008b7c:	f100 8410 	bmi.w	80093a0 <_svfprintf_r+0xe88>
 8008b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b86:	428a      	cmp	r2, r1
 8008b88:	bfac      	ite	ge
 8008b8a:	189b      	addge	r3, r3, r2
 8008b8c:	185b      	addlt	r3, r3, r1
 8008b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b92:	b13b      	cbz	r3, 8008ba4 <_svfprintf_r+0x68c>
 8008b94:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b96:	4651      	mov	r1, sl
 8008b98:	4658      	mov	r0, fp
 8008b9a:	f001 fffb 	bl	800ab94 <__ssprint_r>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f040 841b 	bne.w	80093da <_svfprintf_r+0xec2>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9320      	str	r3, [sp, #128]	; 0x80
 8008ba8:	9f04      	ldr	r7, [sp, #16]
 8008baa:	ac2c      	add	r4, sp, #176	; 0xb0
 8008bac:	e4ee      	b.n	800858c <_svfprintf_r+0x74>
 8008bae:	9b02      	ldr	r3, [sp, #8]
 8008bb0:	2b65      	cmp	r3, #101	; 0x65
 8008bb2:	f77f af0b 	ble.w	80089cc <_svfprintf_r+0x4b4>
 8008bb6:	9b02      	ldr	r3, [sp, #8]
 8008bb8:	2b66      	cmp	r3, #102	; 0x66
 8008bba:	d124      	bne.n	8008c06 <_svfprintf_r+0x6ee>
 8008bbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dd19      	ble.n	8008bf6 <_svfprintf_r+0x6de>
 8008bc2:	f1b9 0f00 	cmp.w	r9, #0
 8008bc6:	d101      	bne.n	8008bcc <_svfprintf_r+0x6b4>
 8008bc8:	07ea      	lsls	r2, r5, #31
 8008bca:	d502      	bpl.n	8008bd2 <_svfprintf_r+0x6ba>
 8008bcc:	9a08      	ldr	r2, [sp, #32]
 8008bce:	4413      	add	r3, r2
 8008bd0:	444b      	add	r3, r9
 8008bd2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8008bd4:	4699      	mov	r9, r3
 8008bd6:	e735      	b.n	8008a44 <_svfprintf_r+0x52c>
 8008bd8:	460a      	mov	r2, r1
 8008bda:	e70c      	b.n	80089f6 <_svfprintf_r+0x4de>
 8008bdc:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008be0:	f803 1b01 	strb.w	r1, [r3], #1
 8008be4:	e71c      	b.n	8008a20 <_svfprintf_r+0x508>
 8008be6:	2230      	movs	r2, #48	; 0x30
 8008be8:	4413      	add	r3, r2
 8008bea:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8008bee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008bf2:	a91c      	add	r1, sp, #112	; 0x70
 8008bf4:	e718      	b.n	8008a28 <_svfprintf_r+0x510>
 8008bf6:	f1b9 0f00 	cmp.w	r9, #0
 8008bfa:	d101      	bne.n	8008c00 <_svfprintf_r+0x6e8>
 8008bfc:	07eb      	lsls	r3, r5, #31
 8008bfe:	d515      	bpl.n	8008c2c <_svfprintf_r+0x714>
 8008c00:	9b08      	ldr	r3, [sp, #32]
 8008c02:	3301      	adds	r3, #1
 8008c04:	e7e4      	b.n	8008bd0 <_svfprintf_r+0x6b8>
 8008c06:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c08:	9b03      	ldr	r3, [sp, #12]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	db06      	blt.n	8008c1c <_svfprintf_r+0x704>
 8008c0e:	07ef      	lsls	r7, r5, #31
 8008c10:	d50e      	bpl.n	8008c30 <_svfprintf_r+0x718>
 8008c12:	9b08      	ldr	r3, [sp, #32]
 8008c14:	4413      	add	r3, r2
 8008c16:	2267      	movs	r2, #103	; 0x67
 8008c18:	9202      	str	r2, [sp, #8]
 8008c1a:	e7da      	b.n	8008bd2 <_svfprintf_r+0x6ba>
 8008c1c:	9b03      	ldr	r3, [sp, #12]
 8008c1e:	9908      	ldr	r1, [sp, #32]
 8008c20:	2a00      	cmp	r2, #0
 8008c22:	440b      	add	r3, r1
 8008c24:	dcf7      	bgt.n	8008c16 <_svfprintf_r+0x6fe>
 8008c26:	f1c2 0201 	rsb	r2, r2, #1
 8008c2a:	e7f3      	b.n	8008c14 <_svfprintf_r+0x6fc>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e7d0      	b.n	8008bd2 <_svfprintf_r+0x6ba>
 8008c30:	4613      	mov	r3, r2
 8008c32:	e7f0      	b.n	8008c16 <_svfprintf_r+0x6fe>
 8008c34:	b10b      	cbz	r3, 8008c3a <_svfprintf_r+0x722>
 8008c36:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008c3a:	f015 0f20 	tst.w	r5, #32
 8008c3e:	f107 0304 	add.w	r3, r7, #4
 8008c42:	d008      	beq.n	8008c56 <_svfprintf_r+0x73e>
 8008c44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	17ce      	asrs	r6, r1, #31
 8008c4a:	4608      	mov	r0, r1
 8008c4c:	4631      	mov	r1, r6
 8008c4e:	e9c2 0100 	strd	r0, r1, [r2]
 8008c52:	461f      	mov	r7, r3
 8008c54:	e49a      	b.n	800858c <_svfprintf_r+0x74>
 8008c56:	06ee      	lsls	r6, r5, #27
 8008c58:	d503      	bpl.n	8008c62 <_svfprintf_r+0x74a>
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c5e:	6011      	str	r1, [r2, #0]
 8008c60:	e7f7      	b.n	8008c52 <_svfprintf_r+0x73a>
 8008c62:	0668      	lsls	r0, r5, #25
 8008c64:	d5f9      	bpl.n	8008c5a <_svfprintf_r+0x742>
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8008c6c:	8011      	strh	r1, [r2, #0]
 8008c6e:	e7f0      	b.n	8008c52 <_svfprintf_r+0x73a>
 8008c70:	f045 0510 	orr.w	r5, r5, #16
 8008c74:	f015 0320 	ands.w	r3, r5, #32
 8008c78:	d022      	beq.n	8008cc0 <_svfprintf_r+0x7a8>
 8008c7a:	3707      	adds	r7, #7
 8008c7c:	f027 0707 	bic.w	r7, r7, #7
 8008c80:	f107 0308 	add.w	r3, r7, #8
 8008c84:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008c88:	9304      	str	r3, [sp, #16]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008c92:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008c96:	f000 83db 	beq.w	8009450 <_svfprintf_r+0xf38>
 8008c9a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8008c9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ca0:	ea56 0207 	orrs.w	r2, r6, r7
 8008ca4:	f040 83d9 	bne.w	800945a <_svfprintf_r+0xf42>
 8008ca8:	f1b9 0f00 	cmp.w	r9, #0
 8008cac:	f000 80aa 	beq.w	8008e04 <_svfprintf_r+0x8ec>
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d076      	beq.n	8008da2 <_svfprintf_r+0x88a>
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	f000 8091 	beq.w	8008ddc <_svfprintf_r+0x8c4>
 8008cba:	2600      	movs	r6, #0
 8008cbc:	2700      	movs	r7, #0
 8008cbe:	e3d2      	b.n	8009466 <_svfprintf_r+0xf4e>
 8008cc0:	1d3a      	adds	r2, r7, #4
 8008cc2:	f015 0110 	ands.w	r1, r5, #16
 8008cc6:	9204      	str	r2, [sp, #16]
 8008cc8:	d002      	beq.n	8008cd0 <_svfprintf_r+0x7b8>
 8008cca:	683e      	ldr	r6, [r7, #0]
 8008ccc:	2700      	movs	r7, #0
 8008cce:	e7dd      	b.n	8008c8c <_svfprintf_r+0x774>
 8008cd0:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8008cd4:	d0f9      	beq.n	8008cca <_svfprintf_r+0x7b2>
 8008cd6:	883e      	ldrh	r6, [r7, #0]
 8008cd8:	2700      	movs	r7, #0
 8008cda:	e7d6      	b.n	8008c8a <_svfprintf_r+0x772>
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	9304      	str	r3, [sp, #16]
 8008ce0:	2330      	movs	r3, #48	; 0x30
 8008ce2:	2278      	movs	r2, #120	; 0x78
 8008ce4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8008ce8:	4b14      	ldr	r3, [pc, #80]	; (8008d3c <_svfprintf_r+0x824>)
 8008cea:	683e      	ldr	r6, [r7, #0]
 8008cec:	9311      	str	r3, [sp, #68]	; 0x44
 8008cee:	2700      	movs	r7, #0
 8008cf0:	f045 0502 	orr.w	r5, r5, #2
 8008cf4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	9202      	str	r2, [sp, #8]
 8008cfc:	e7c6      	b.n	8008c8c <_svfprintf_r+0x774>
 8008cfe:	1d3b      	adds	r3, r7, #4
 8008d00:	2600      	movs	r6, #0
 8008d02:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	f8d7 8000 	ldr.w	r8, [r7]
 8008d0c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008d10:	d00a      	beq.n	8008d28 <_svfprintf_r+0x810>
 8008d12:	464a      	mov	r2, r9
 8008d14:	4631      	mov	r1, r6
 8008d16:	4640      	mov	r0, r8
 8008d18:	f7f7 fa62 	bl	80001e0 <memchr>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	f000 808d 	beq.w	8008e3c <_svfprintf_r+0x924>
 8008d22:	eba0 0908 	sub.w	r9, r0, r8
 8008d26:	e5cb      	b.n	80088c0 <_svfprintf_r+0x3a8>
 8008d28:	4640      	mov	r0, r8
 8008d2a:	f7f7 fa51 	bl	80001d0 <strlen>
 8008d2e:	4681      	mov	r9, r0
 8008d30:	e5c6      	b.n	80088c0 <_svfprintf_r+0x3a8>
 8008d32:	bf00      	nop
 8008d34:	0800b6e8 	.word	0x0800b6e8
 8008d38:	0800b6f8 	.word	0x0800b6f8
 8008d3c:	0800b6d5 	.word	0x0800b6d5
 8008d40:	f045 0510 	orr.w	r5, r5, #16
 8008d44:	06a9      	lsls	r1, r5, #26
 8008d46:	d509      	bpl.n	8008d5c <_svfprintf_r+0x844>
 8008d48:	3707      	adds	r7, #7
 8008d4a:	f027 0707 	bic.w	r7, r7, #7
 8008d4e:	f107 0308 	add.w	r3, r7, #8
 8008d52:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008d56:	9304      	str	r3, [sp, #16]
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e797      	b.n	8008c8c <_svfprintf_r+0x774>
 8008d5c:	1d3b      	adds	r3, r7, #4
 8008d5e:	f015 0f10 	tst.w	r5, #16
 8008d62:	9304      	str	r3, [sp, #16]
 8008d64:	d001      	beq.n	8008d6a <_svfprintf_r+0x852>
 8008d66:	683e      	ldr	r6, [r7, #0]
 8008d68:	e002      	b.n	8008d70 <_svfprintf_r+0x858>
 8008d6a:	066a      	lsls	r2, r5, #25
 8008d6c:	d5fb      	bpl.n	8008d66 <_svfprintf_r+0x84e>
 8008d6e:	883e      	ldrh	r6, [r7, #0]
 8008d70:	2700      	movs	r7, #0
 8008d72:	e7f1      	b.n	8008d58 <_svfprintf_r+0x840>
 8008d74:	b10b      	cbz	r3, 8008d7a <_svfprintf_r+0x862>
 8008d76:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008d7a:	4ba3      	ldr	r3, [pc, #652]	; (8009008 <_svfprintf_r+0xaf0>)
 8008d7c:	e4c2      	b.n	8008704 <_svfprintf_r+0x1ec>
 8008d7e:	1d3b      	adds	r3, r7, #4
 8008d80:	f015 0f10 	tst.w	r5, #16
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	d001      	beq.n	8008d8c <_svfprintf_r+0x874>
 8008d88:	683e      	ldr	r6, [r7, #0]
 8008d8a:	e002      	b.n	8008d92 <_svfprintf_r+0x87a>
 8008d8c:	066e      	lsls	r6, r5, #25
 8008d8e:	d5fb      	bpl.n	8008d88 <_svfprintf_r+0x870>
 8008d90:	883e      	ldrh	r6, [r7, #0]
 8008d92:	2700      	movs	r7, #0
 8008d94:	e4c2      	b.n	800871c <_svfprintf_r+0x204>
 8008d96:	4643      	mov	r3, r8
 8008d98:	e366      	b.n	8009468 <_svfprintf_r+0xf50>
 8008d9a:	2f00      	cmp	r7, #0
 8008d9c:	bf08      	it	eq
 8008d9e:	2e0a      	cmpeq	r6, #10
 8008da0:	d205      	bcs.n	8008dae <_svfprintf_r+0x896>
 8008da2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8008da6:	3630      	adds	r6, #48	; 0x30
 8008da8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8008dac:	e377      	b.n	800949e <_svfprintf_r+0xf86>
 8008dae:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008db2:	4630      	mov	r0, r6
 8008db4:	4639      	mov	r1, r7
 8008db6:	220a      	movs	r2, #10
 8008db8:	2300      	movs	r3, #0
 8008dba:	f7f7 fef1 	bl	8000ba0 <__aeabi_uldivmod>
 8008dbe:	3230      	adds	r2, #48	; 0x30
 8008dc0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	4639      	mov	r1, r7
 8008dca:	220a      	movs	r2, #10
 8008dcc:	f7f7 fee8 	bl	8000ba0 <__aeabi_uldivmod>
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	460f      	mov	r7, r1
 8008dd4:	ea56 0307 	orrs.w	r3, r6, r7
 8008dd8:	d1eb      	bne.n	8008db2 <_svfprintf_r+0x89a>
 8008dda:	e360      	b.n	800949e <_svfprintf_r+0xf86>
 8008ddc:	2600      	movs	r6, #0
 8008dde:	2700      	movs	r7, #0
 8008de0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008de4:	f006 030f 	and.w	r3, r6, #15
 8008de8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008dea:	5cd3      	ldrb	r3, [r2, r3]
 8008dec:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008df0:	0933      	lsrs	r3, r6, #4
 8008df2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008df6:	093a      	lsrs	r2, r7, #4
 8008df8:	461e      	mov	r6, r3
 8008dfa:	4617      	mov	r7, r2
 8008dfc:	ea56 0307 	orrs.w	r3, r6, r7
 8008e00:	d1f0      	bne.n	8008de4 <_svfprintf_r+0x8cc>
 8008e02:	e34c      	b.n	800949e <_svfprintf_r+0xf86>
 8008e04:	b93b      	cbnz	r3, 8008e16 <_svfprintf_r+0x8fe>
 8008e06:	07ea      	lsls	r2, r5, #31
 8008e08:	d505      	bpl.n	8008e16 <_svfprintf_r+0x8fe>
 8008e0a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8008e0e:	2330      	movs	r3, #48	; 0x30
 8008e10:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8008e14:	e343      	b.n	800949e <_svfprintf_r+0xf86>
 8008e16:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008e1a:	e340      	b.n	800949e <_svfprintf_r+0xf86>
 8008e1c:	b10b      	cbz	r3, 8008e22 <_svfprintf_r+0x90a>
 8008e1e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008e22:	9b02      	ldr	r3, [sp, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 82f7 	beq.w	8009418 <_svfprintf_r+0xf00>
 8008e2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008e2e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8008e32:	2600      	movs	r6, #0
 8008e34:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008e38:	9704      	str	r7, [sp, #16]
 8008e3a:	e4e8      	b.n	800880e <_svfprintf_r+0x2f6>
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	e53f      	b.n	80088c0 <_svfprintf_r+0x3a8>
 8008e40:	2310      	movs	r3, #16
 8008e42:	6063      	str	r3, [r4, #4]
 8008e44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e46:	3310      	adds	r3, #16
 8008e48:	9321      	str	r3, [sp, #132]	; 0x84
 8008e4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	2b07      	cmp	r3, #7
 8008e50:	9320      	str	r3, [sp, #128]	; 0x80
 8008e52:	dc04      	bgt.n	8008e5e <_svfprintf_r+0x946>
 8008e54:	3408      	adds	r4, #8
 8008e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e58:	3b10      	subs	r3, #16
 8008e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8008e5c:	e615      	b.n	8008a8a <_svfprintf_r+0x572>
 8008e5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e60:	4651      	mov	r1, sl
 8008e62:	4658      	mov	r0, fp
 8008e64:	f001 fe96 	bl	800ab94 <__ssprint_r>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	f040 82b6 	bne.w	80093da <_svfprintf_r+0xec2>
 8008e6e:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e70:	e7f1      	b.n	8008e56 <_svfprintf_r+0x93e>
 8008e72:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e74:	4651      	mov	r1, sl
 8008e76:	4658      	mov	r0, fp
 8008e78:	f001 fe8c 	bl	800ab94 <__ssprint_r>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	f040 82ac 	bne.w	80093da <_svfprintf_r+0xec2>
 8008e82:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e84:	e614      	b.n	8008ab0 <_svfprintf_r+0x598>
 8008e86:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e88:	4651      	mov	r1, sl
 8008e8a:	4658      	mov	r0, fp
 8008e8c:	f001 fe82 	bl	800ab94 <__ssprint_r>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f040 82a2 	bne.w	80093da <_svfprintf_r+0xec2>
 8008e96:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e98:	e61c      	b.n	8008ad4 <_svfprintf_r+0x5bc>
 8008e9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e9c:	4651      	mov	r1, sl
 8008e9e:	4658      	mov	r0, fp
 8008ea0:	f001 fe78 	bl	800ab94 <__ssprint_r>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	f040 8298 	bne.w	80093da <_svfprintf_r+0xec2>
 8008eaa:	ac2c      	add	r4, sp, #176	; 0xb0
 8008eac:	e622      	b.n	8008af4 <_svfprintf_r+0x5dc>
 8008eae:	2210      	movs	r2, #16
 8008eb0:	6062      	str	r2, [r4, #4]
 8008eb2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008eb4:	3210      	adds	r2, #16
 8008eb6:	9221      	str	r2, [sp, #132]	; 0x84
 8008eb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008eba:	3201      	adds	r2, #1
 8008ebc:	2a07      	cmp	r2, #7
 8008ebe:	9220      	str	r2, [sp, #128]	; 0x80
 8008ec0:	dc02      	bgt.n	8008ec8 <_svfprintf_r+0x9b0>
 8008ec2:	3408      	adds	r4, #8
 8008ec4:	3b10      	subs	r3, #16
 8008ec6:	e61d      	b.n	8008b04 <_svfprintf_r+0x5ec>
 8008ec8:	aa1f      	add	r2, sp, #124	; 0x7c
 8008eca:	4651      	mov	r1, sl
 8008ecc:	4658      	mov	r0, fp
 8008ece:	930c      	str	r3, [sp, #48]	; 0x30
 8008ed0:	f001 fe60 	bl	800ab94 <__ssprint_r>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f040 8280 	bne.w	80093da <_svfprintf_r+0xec2>
 8008eda:	ac2c      	add	r4, sp, #176	; 0xb0
 8008edc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ede:	e7f1      	b.n	8008ec4 <_svfprintf_r+0x9ac>
 8008ee0:	aa1f      	add	r2, sp, #124	; 0x7c
 8008ee2:	4651      	mov	r1, sl
 8008ee4:	4658      	mov	r0, fp
 8008ee6:	f001 fe55 	bl	800ab94 <__ssprint_r>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f040 8275 	bne.w	80093da <_svfprintf_r+0xec2>
 8008ef0:	ac2c      	add	r4, sp, #176	; 0xb0
 8008ef2:	e617      	b.n	8008b24 <_svfprintf_r+0x60c>
 8008ef4:	2310      	movs	r3, #16
 8008ef6:	6063      	str	r3, [r4, #4]
 8008ef8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008efa:	3310      	adds	r3, #16
 8008efc:	9321      	str	r3, [sp, #132]	; 0x84
 8008efe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f00:	3301      	adds	r3, #1
 8008f02:	2b07      	cmp	r3, #7
 8008f04:	9320      	str	r3, [sp, #128]	; 0x80
 8008f06:	dc02      	bgt.n	8008f0e <_svfprintf_r+0x9f6>
 8008f08:	3408      	adds	r4, #8
 8008f0a:	3e10      	subs	r6, #16
 8008f0c:	e60e      	b.n	8008b2c <_svfprintf_r+0x614>
 8008f0e:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f10:	4651      	mov	r1, sl
 8008f12:	4658      	mov	r0, fp
 8008f14:	f001 fe3e 	bl	800ab94 <__ssprint_r>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	f040 825e 	bne.w	80093da <_svfprintf_r+0xec2>
 8008f1e:	ac2c      	add	r4, sp, #176	; 0xb0
 8008f20:	e7f3      	b.n	8008f0a <_svfprintf_r+0x9f2>
 8008f22:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f24:	4651      	mov	r1, sl
 8008f26:	4658      	mov	r0, fp
 8008f28:	f001 fe34 	bl	800ab94 <__ssprint_r>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f040 8254 	bne.w	80093da <_svfprintf_r+0xec2>
 8008f32:	ac2c      	add	r4, sp, #176	; 0xb0
 8008f34:	e60a      	b.n	8008b4c <_svfprintf_r+0x634>
 8008f36:	9b02      	ldr	r3, [sp, #8]
 8008f38:	2b65      	cmp	r3, #101	; 0x65
 8008f3a:	f340 81a9 	ble.w	8009290 <_svfprintf_r+0xd78>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2300      	movs	r3, #0
 8008f42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f46:	f7f7 fdbb 	bl	8000ac0 <__aeabi_dcmpeq>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d062      	beq.n	8009014 <_svfprintf_r+0xafc>
 8008f4e:	4b2f      	ldr	r3, [pc, #188]	; (800900c <_svfprintf_r+0xaf4>)
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	2301      	movs	r3, #1
 8008f54:	6063      	str	r3, [r4, #4]
 8008f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f58:	3301      	adds	r3, #1
 8008f5a:	9321      	str	r3, [sp, #132]	; 0x84
 8008f5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f5e:	3301      	adds	r3, #1
 8008f60:	2b07      	cmp	r3, #7
 8008f62:	9320      	str	r3, [sp, #128]	; 0x80
 8008f64:	dc25      	bgt.n	8008fb2 <_svfprintf_r+0xa9a>
 8008f66:	3408      	adds	r4, #8
 8008f68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f6a:	9a03      	ldr	r2, [sp, #12]
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	db02      	blt.n	8008f76 <_svfprintf_r+0xa5e>
 8008f70:	07ee      	lsls	r6, r5, #31
 8008f72:	f57f ae02 	bpl.w	8008b7a <_svfprintf_r+0x662>
 8008f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	9b08      	ldr	r3, [sp, #32]
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	9a08      	ldr	r2, [sp, #32]
 8008f80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f82:	4413      	add	r3, r2
 8008f84:	9321      	str	r3, [sp, #132]	; 0x84
 8008f86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f88:	3301      	adds	r3, #1
 8008f8a:	2b07      	cmp	r3, #7
 8008f8c:	9320      	str	r3, [sp, #128]	; 0x80
 8008f8e:	dc1a      	bgt.n	8008fc6 <_svfprintf_r+0xaae>
 8008f90:	3408      	adds	r4, #8
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	1e5e      	subs	r6, r3, #1
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	f77f adef 	ble.w	8008b7a <_svfprintf_r+0x662>
 8008f9c:	4f1c      	ldr	r7, [pc, #112]	; (8009010 <_svfprintf_r+0xaf8>)
 8008f9e:	f04f 0810 	mov.w	r8, #16
 8008fa2:	2e10      	cmp	r6, #16
 8008fa4:	6027      	str	r7, [r4, #0]
 8008fa6:	dc18      	bgt.n	8008fda <_svfprintf_r+0xac2>
 8008fa8:	6066      	str	r6, [r4, #4]
 8008faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fac:	441e      	add	r6, r3
 8008fae:	9621      	str	r6, [sp, #132]	; 0x84
 8008fb0:	e5d4      	b.n	8008b5c <_svfprintf_r+0x644>
 8008fb2:	aa1f      	add	r2, sp, #124	; 0x7c
 8008fb4:	4651      	mov	r1, sl
 8008fb6:	4658      	mov	r0, fp
 8008fb8:	f001 fdec 	bl	800ab94 <__ssprint_r>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f040 820c 	bne.w	80093da <_svfprintf_r+0xec2>
 8008fc2:	ac2c      	add	r4, sp, #176	; 0xb0
 8008fc4:	e7d0      	b.n	8008f68 <_svfprintf_r+0xa50>
 8008fc6:	aa1f      	add	r2, sp, #124	; 0x7c
 8008fc8:	4651      	mov	r1, sl
 8008fca:	4658      	mov	r0, fp
 8008fcc:	f001 fde2 	bl	800ab94 <__ssprint_r>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	f040 8202 	bne.w	80093da <_svfprintf_r+0xec2>
 8008fd6:	ac2c      	add	r4, sp, #176	; 0xb0
 8008fd8:	e7db      	b.n	8008f92 <_svfprintf_r+0xa7a>
 8008fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fdc:	f8c4 8004 	str.w	r8, [r4, #4]
 8008fe0:	3310      	adds	r3, #16
 8008fe2:	9321      	str	r3, [sp, #132]	; 0x84
 8008fe4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	2b07      	cmp	r3, #7
 8008fea:	9320      	str	r3, [sp, #128]	; 0x80
 8008fec:	dc02      	bgt.n	8008ff4 <_svfprintf_r+0xadc>
 8008fee:	3408      	adds	r4, #8
 8008ff0:	3e10      	subs	r6, #16
 8008ff2:	e7d6      	b.n	8008fa2 <_svfprintf_r+0xa8a>
 8008ff4:	aa1f      	add	r2, sp, #124	; 0x7c
 8008ff6:	4651      	mov	r1, sl
 8008ff8:	4658      	mov	r0, fp
 8008ffa:	f001 fdcb 	bl	800ab94 <__ssprint_r>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f040 81eb 	bne.w	80093da <_svfprintf_r+0xec2>
 8009004:	ac2c      	add	r4, sp, #176	; 0xb0
 8009006:	e7f3      	b.n	8008ff0 <_svfprintf_r+0xad8>
 8009008:	0800b6d5 	.word	0x0800b6d5
 800900c:	0800b6e6 	.word	0x0800b6e6
 8009010:	0800b6f8 	.word	0x0800b6f8
 8009014:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009016:	2b00      	cmp	r3, #0
 8009018:	dc7a      	bgt.n	8009110 <_svfprintf_r+0xbf8>
 800901a:	4b9b      	ldr	r3, [pc, #620]	; (8009288 <_svfprintf_r+0xd70>)
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	2301      	movs	r3, #1
 8009020:	6063      	str	r3, [r4, #4]
 8009022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009024:	3301      	adds	r3, #1
 8009026:	9321      	str	r3, [sp, #132]	; 0x84
 8009028:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800902a:	3301      	adds	r3, #1
 800902c:	2b07      	cmp	r3, #7
 800902e:	9320      	str	r3, [sp, #128]	; 0x80
 8009030:	dc44      	bgt.n	80090bc <_svfprintf_r+0xba4>
 8009032:	3408      	adds	r4, #8
 8009034:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009036:	b923      	cbnz	r3, 8009042 <_svfprintf_r+0xb2a>
 8009038:	9b03      	ldr	r3, [sp, #12]
 800903a:	b913      	cbnz	r3, 8009042 <_svfprintf_r+0xb2a>
 800903c:	07e8      	lsls	r0, r5, #31
 800903e:	f57f ad9c 	bpl.w	8008b7a <_svfprintf_r+0x662>
 8009042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	9b08      	ldr	r3, [sp, #32]
 8009048:	6063      	str	r3, [r4, #4]
 800904a:	9a08      	ldr	r2, [sp, #32]
 800904c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800904e:	4413      	add	r3, r2
 8009050:	9321      	str	r3, [sp, #132]	; 0x84
 8009052:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009054:	3301      	adds	r3, #1
 8009056:	2b07      	cmp	r3, #7
 8009058:	9320      	str	r3, [sp, #128]	; 0x80
 800905a:	dc39      	bgt.n	80090d0 <_svfprintf_r+0xbb8>
 800905c:	f104 0308 	add.w	r3, r4, #8
 8009060:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009062:	2e00      	cmp	r6, #0
 8009064:	da19      	bge.n	800909a <_svfprintf_r+0xb82>
 8009066:	4f89      	ldr	r7, [pc, #548]	; (800928c <_svfprintf_r+0xd74>)
 8009068:	4276      	negs	r6, r6
 800906a:	2410      	movs	r4, #16
 800906c:	2e10      	cmp	r6, #16
 800906e:	601f      	str	r7, [r3, #0]
 8009070:	dc38      	bgt.n	80090e4 <_svfprintf_r+0xbcc>
 8009072:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009074:	605e      	str	r6, [r3, #4]
 8009076:	4416      	add	r6, r2
 8009078:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800907a:	9621      	str	r6, [sp, #132]	; 0x84
 800907c:	3201      	adds	r2, #1
 800907e:	2a07      	cmp	r2, #7
 8009080:	f103 0308 	add.w	r3, r3, #8
 8009084:	9220      	str	r2, [sp, #128]	; 0x80
 8009086:	dd08      	ble.n	800909a <_svfprintf_r+0xb82>
 8009088:	aa1f      	add	r2, sp, #124	; 0x7c
 800908a:	4651      	mov	r1, sl
 800908c:	4658      	mov	r0, fp
 800908e:	f001 fd81 	bl	800ab94 <__ssprint_r>
 8009092:	2800      	cmp	r0, #0
 8009094:	f040 81a1 	bne.w	80093da <_svfprintf_r+0xec2>
 8009098:	ab2c      	add	r3, sp, #176	; 0xb0
 800909a:	9a03      	ldr	r2, [sp, #12]
 800909c:	605a      	str	r2, [r3, #4]
 800909e:	9903      	ldr	r1, [sp, #12]
 80090a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090a2:	f8c3 8000 	str.w	r8, [r3]
 80090a6:	440a      	add	r2, r1
 80090a8:	9221      	str	r2, [sp, #132]	; 0x84
 80090aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80090ac:	3201      	adds	r2, #1
 80090ae:	2a07      	cmp	r2, #7
 80090b0:	9220      	str	r2, [sp, #128]	; 0x80
 80090b2:	f73f ad59 	bgt.w	8008b68 <_svfprintf_r+0x650>
 80090b6:	f103 0408 	add.w	r4, r3, #8
 80090ba:	e55e      	b.n	8008b7a <_svfprintf_r+0x662>
 80090bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80090be:	4651      	mov	r1, sl
 80090c0:	4658      	mov	r0, fp
 80090c2:	f001 fd67 	bl	800ab94 <__ssprint_r>
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f040 8187 	bne.w	80093da <_svfprintf_r+0xec2>
 80090cc:	ac2c      	add	r4, sp, #176	; 0xb0
 80090ce:	e7b1      	b.n	8009034 <_svfprintf_r+0xb1c>
 80090d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80090d2:	4651      	mov	r1, sl
 80090d4:	4658      	mov	r0, fp
 80090d6:	f001 fd5d 	bl	800ab94 <__ssprint_r>
 80090da:	2800      	cmp	r0, #0
 80090dc:	f040 817d 	bne.w	80093da <_svfprintf_r+0xec2>
 80090e0:	ab2c      	add	r3, sp, #176	; 0xb0
 80090e2:	e7bd      	b.n	8009060 <_svfprintf_r+0xb48>
 80090e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090e6:	605c      	str	r4, [r3, #4]
 80090e8:	3210      	adds	r2, #16
 80090ea:	9221      	str	r2, [sp, #132]	; 0x84
 80090ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80090ee:	3201      	adds	r2, #1
 80090f0:	2a07      	cmp	r2, #7
 80090f2:	9220      	str	r2, [sp, #128]	; 0x80
 80090f4:	dc02      	bgt.n	80090fc <_svfprintf_r+0xbe4>
 80090f6:	3308      	adds	r3, #8
 80090f8:	3e10      	subs	r6, #16
 80090fa:	e7b7      	b.n	800906c <_svfprintf_r+0xb54>
 80090fc:	aa1f      	add	r2, sp, #124	; 0x7c
 80090fe:	4651      	mov	r1, sl
 8009100:	4658      	mov	r0, fp
 8009102:	f001 fd47 	bl	800ab94 <__ssprint_r>
 8009106:	2800      	cmp	r0, #0
 8009108:	f040 8167 	bne.w	80093da <_svfprintf_r+0xec2>
 800910c:	ab2c      	add	r3, sp, #176	; 0xb0
 800910e:	e7f3      	b.n	80090f8 <_svfprintf_r+0xbe0>
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	42bb      	cmp	r3, r7
 8009114:	bfa8      	it	ge
 8009116:	463b      	movge	r3, r7
 8009118:	2b00      	cmp	r3, #0
 800911a:	461e      	mov	r6, r3
 800911c:	dd0b      	ble.n	8009136 <_svfprintf_r+0xc1e>
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009122:	f8c4 8000 	str.w	r8, [r4]
 8009126:	4433      	add	r3, r6
 8009128:	9321      	str	r3, [sp, #132]	; 0x84
 800912a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800912c:	3301      	adds	r3, #1
 800912e:	2b07      	cmp	r3, #7
 8009130:	9320      	str	r3, [sp, #128]	; 0x80
 8009132:	dc5f      	bgt.n	80091f4 <_svfprintf_r+0xcdc>
 8009134:	3408      	adds	r4, #8
 8009136:	2e00      	cmp	r6, #0
 8009138:	bfac      	ite	ge
 800913a:	1bbe      	subge	r6, r7, r6
 800913c:	463e      	movlt	r6, r7
 800913e:	2e00      	cmp	r6, #0
 8009140:	dd0f      	ble.n	8009162 <_svfprintf_r+0xc4a>
 8009142:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800928c <_svfprintf_r+0xd74>
 8009146:	f8c4 9000 	str.w	r9, [r4]
 800914a:	2e10      	cmp	r6, #16
 800914c:	dc5c      	bgt.n	8009208 <_svfprintf_r+0xcf0>
 800914e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009150:	6066      	str	r6, [r4, #4]
 8009152:	441e      	add	r6, r3
 8009154:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009156:	9621      	str	r6, [sp, #132]	; 0x84
 8009158:	3301      	adds	r3, #1
 800915a:	2b07      	cmp	r3, #7
 800915c:	9320      	str	r3, [sp, #128]	; 0x80
 800915e:	dc6a      	bgt.n	8009236 <_svfprintf_r+0xd1e>
 8009160:	3408      	adds	r4, #8
 8009162:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009164:	9a03      	ldr	r2, [sp, #12]
 8009166:	4293      	cmp	r3, r2
 8009168:	db01      	blt.n	800916e <_svfprintf_r+0xc56>
 800916a:	07e9      	lsls	r1, r5, #31
 800916c:	d50d      	bpl.n	800918a <_svfprintf_r+0xc72>
 800916e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	9b08      	ldr	r3, [sp, #32]
 8009174:	6063      	str	r3, [r4, #4]
 8009176:	9a08      	ldr	r2, [sp, #32]
 8009178:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800917a:	4413      	add	r3, r2
 800917c:	9321      	str	r3, [sp, #132]	; 0x84
 800917e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009180:	3301      	adds	r3, #1
 8009182:	2b07      	cmp	r3, #7
 8009184:	9320      	str	r3, [sp, #128]	; 0x80
 8009186:	dc60      	bgt.n	800924a <_svfprintf_r+0xd32>
 8009188:	3408      	adds	r4, #8
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	9a03      	ldr	r2, [sp, #12]
 800918e:	1bde      	subs	r6, r3, r7
 8009190:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	429e      	cmp	r6, r3
 8009196:	bfa8      	it	ge
 8009198:	461e      	movge	r6, r3
 800919a:	2e00      	cmp	r6, #0
 800919c:	dd0b      	ble.n	80091b6 <_svfprintf_r+0xc9e>
 800919e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091a0:	6066      	str	r6, [r4, #4]
 80091a2:	4433      	add	r3, r6
 80091a4:	9321      	str	r3, [sp, #132]	; 0x84
 80091a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80091a8:	3301      	adds	r3, #1
 80091aa:	4447      	add	r7, r8
 80091ac:	2b07      	cmp	r3, #7
 80091ae:	6027      	str	r7, [r4, #0]
 80091b0:	9320      	str	r3, [sp, #128]	; 0x80
 80091b2:	dc54      	bgt.n	800925e <_svfprintf_r+0xd46>
 80091b4:	3408      	adds	r4, #8
 80091b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091b8:	9a03      	ldr	r2, [sp, #12]
 80091ba:	2e00      	cmp	r6, #0
 80091bc:	eba2 0303 	sub.w	r3, r2, r3
 80091c0:	bfac      	ite	ge
 80091c2:	1b9e      	subge	r6, r3, r6
 80091c4:	461e      	movlt	r6, r3
 80091c6:	2e00      	cmp	r6, #0
 80091c8:	f77f acd7 	ble.w	8008b7a <_svfprintf_r+0x662>
 80091cc:	4f2f      	ldr	r7, [pc, #188]	; (800928c <_svfprintf_r+0xd74>)
 80091ce:	f04f 0810 	mov.w	r8, #16
 80091d2:	2e10      	cmp	r6, #16
 80091d4:	6027      	str	r7, [r4, #0]
 80091d6:	f77f aee7 	ble.w	8008fa8 <_svfprintf_r+0xa90>
 80091da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091dc:	f8c4 8004 	str.w	r8, [r4, #4]
 80091e0:	3310      	adds	r3, #16
 80091e2:	9321      	str	r3, [sp, #132]	; 0x84
 80091e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80091e6:	3301      	adds	r3, #1
 80091e8:	2b07      	cmp	r3, #7
 80091ea:	9320      	str	r3, [sp, #128]	; 0x80
 80091ec:	dc41      	bgt.n	8009272 <_svfprintf_r+0xd5a>
 80091ee:	3408      	adds	r4, #8
 80091f0:	3e10      	subs	r6, #16
 80091f2:	e7ee      	b.n	80091d2 <_svfprintf_r+0xcba>
 80091f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80091f6:	4651      	mov	r1, sl
 80091f8:	4658      	mov	r0, fp
 80091fa:	f001 fccb 	bl	800ab94 <__ssprint_r>
 80091fe:	2800      	cmp	r0, #0
 8009200:	f040 80eb 	bne.w	80093da <_svfprintf_r+0xec2>
 8009204:	ac2c      	add	r4, sp, #176	; 0xb0
 8009206:	e796      	b.n	8009136 <_svfprintf_r+0xc1e>
 8009208:	2310      	movs	r3, #16
 800920a:	6063      	str	r3, [r4, #4]
 800920c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800920e:	3310      	adds	r3, #16
 8009210:	9321      	str	r3, [sp, #132]	; 0x84
 8009212:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009214:	3301      	adds	r3, #1
 8009216:	2b07      	cmp	r3, #7
 8009218:	9320      	str	r3, [sp, #128]	; 0x80
 800921a:	dc02      	bgt.n	8009222 <_svfprintf_r+0xd0a>
 800921c:	3408      	adds	r4, #8
 800921e:	3e10      	subs	r6, #16
 8009220:	e791      	b.n	8009146 <_svfprintf_r+0xc2e>
 8009222:	aa1f      	add	r2, sp, #124	; 0x7c
 8009224:	4651      	mov	r1, sl
 8009226:	4658      	mov	r0, fp
 8009228:	f001 fcb4 	bl	800ab94 <__ssprint_r>
 800922c:	2800      	cmp	r0, #0
 800922e:	f040 80d4 	bne.w	80093da <_svfprintf_r+0xec2>
 8009232:	ac2c      	add	r4, sp, #176	; 0xb0
 8009234:	e7f3      	b.n	800921e <_svfprintf_r+0xd06>
 8009236:	aa1f      	add	r2, sp, #124	; 0x7c
 8009238:	4651      	mov	r1, sl
 800923a:	4658      	mov	r0, fp
 800923c:	f001 fcaa 	bl	800ab94 <__ssprint_r>
 8009240:	2800      	cmp	r0, #0
 8009242:	f040 80ca 	bne.w	80093da <_svfprintf_r+0xec2>
 8009246:	ac2c      	add	r4, sp, #176	; 0xb0
 8009248:	e78b      	b.n	8009162 <_svfprintf_r+0xc4a>
 800924a:	aa1f      	add	r2, sp, #124	; 0x7c
 800924c:	4651      	mov	r1, sl
 800924e:	4658      	mov	r0, fp
 8009250:	f001 fca0 	bl	800ab94 <__ssprint_r>
 8009254:	2800      	cmp	r0, #0
 8009256:	f040 80c0 	bne.w	80093da <_svfprintf_r+0xec2>
 800925a:	ac2c      	add	r4, sp, #176	; 0xb0
 800925c:	e795      	b.n	800918a <_svfprintf_r+0xc72>
 800925e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009260:	4651      	mov	r1, sl
 8009262:	4658      	mov	r0, fp
 8009264:	f001 fc96 	bl	800ab94 <__ssprint_r>
 8009268:	2800      	cmp	r0, #0
 800926a:	f040 80b6 	bne.w	80093da <_svfprintf_r+0xec2>
 800926e:	ac2c      	add	r4, sp, #176	; 0xb0
 8009270:	e7a1      	b.n	80091b6 <_svfprintf_r+0xc9e>
 8009272:	aa1f      	add	r2, sp, #124	; 0x7c
 8009274:	4651      	mov	r1, sl
 8009276:	4658      	mov	r0, fp
 8009278:	f001 fc8c 	bl	800ab94 <__ssprint_r>
 800927c:	2800      	cmp	r0, #0
 800927e:	f040 80ac 	bne.w	80093da <_svfprintf_r+0xec2>
 8009282:	ac2c      	add	r4, sp, #176	; 0xb0
 8009284:	e7b4      	b.n	80091f0 <_svfprintf_r+0xcd8>
 8009286:	bf00      	nop
 8009288:	0800b6e6 	.word	0x0800b6e6
 800928c:	0800b6f8 	.word	0x0800b6f8
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	2b01      	cmp	r3, #1
 8009294:	dc01      	bgt.n	800929a <_svfprintf_r+0xd82>
 8009296:	07ea      	lsls	r2, r5, #31
 8009298:	d576      	bpl.n	8009388 <_svfprintf_r+0xe70>
 800929a:	2301      	movs	r3, #1
 800929c:	6063      	str	r3, [r4, #4]
 800929e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092a0:	f8c4 8000 	str.w	r8, [r4]
 80092a4:	3301      	adds	r3, #1
 80092a6:	9321      	str	r3, [sp, #132]	; 0x84
 80092a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80092aa:	3301      	adds	r3, #1
 80092ac:	2b07      	cmp	r3, #7
 80092ae:	9320      	str	r3, [sp, #128]	; 0x80
 80092b0:	dc36      	bgt.n	8009320 <_svfprintf_r+0xe08>
 80092b2:	3408      	adds	r4, #8
 80092b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	9b08      	ldr	r3, [sp, #32]
 80092ba:	6063      	str	r3, [r4, #4]
 80092bc:	9a08      	ldr	r2, [sp, #32]
 80092be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092c0:	4413      	add	r3, r2
 80092c2:	9321      	str	r3, [sp, #132]	; 0x84
 80092c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80092c6:	3301      	adds	r3, #1
 80092c8:	2b07      	cmp	r3, #7
 80092ca:	9320      	str	r3, [sp, #128]	; 0x80
 80092cc:	dc31      	bgt.n	8009332 <_svfprintf_r+0xe1a>
 80092ce:	3408      	adds	r4, #8
 80092d0:	2300      	movs	r3, #0
 80092d2:	2200      	movs	r2, #0
 80092d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092d8:	f7f7 fbf2 	bl	8000ac0 <__aeabi_dcmpeq>
 80092dc:	9b03      	ldr	r3, [sp, #12]
 80092de:	1e5e      	subs	r6, r3, #1
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d12f      	bne.n	8009344 <_svfprintf_r+0xe2c>
 80092e4:	f108 0301 	add.w	r3, r8, #1
 80092e8:	e884 0048 	stmia.w	r4, {r3, r6}
 80092ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092ee:	9a03      	ldr	r2, [sp, #12]
 80092f0:	3b01      	subs	r3, #1
 80092f2:	4413      	add	r3, r2
 80092f4:	9321      	str	r3, [sp, #132]	; 0x84
 80092f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80092f8:	3301      	adds	r3, #1
 80092fa:	2b07      	cmp	r3, #7
 80092fc:	9320      	str	r3, [sp, #128]	; 0x80
 80092fe:	dd4a      	ble.n	8009396 <_svfprintf_r+0xe7e>
 8009300:	aa1f      	add	r2, sp, #124	; 0x7c
 8009302:	4651      	mov	r1, sl
 8009304:	4658      	mov	r0, fp
 8009306:	f001 fc45 	bl	800ab94 <__ssprint_r>
 800930a:	2800      	cmp	r0, #0
 800930c:	d165      	bne.n	80093da <_svfprintf_r+0xec2>
 800930e:	ac2c      	add	r4, sp, #176	; 0xb0
 8009310:	ab1b      	add	r3, sp, #108	; 0x6c
 8009312:	6023      	str	r3, [r4, #0]
 8009314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009316:	6063      	str	r3, [r4, #4]
 8009318:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800931a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800931c:	4413      	add	r3, r2
 800931e:	e41c      	b.n	8008b5a <_svfprintf_r+0x642>
 8009320:	aa1f      	add	r2, sp, #124	; 0x7c
 8009322:	4651      	mov	r1, sl
 8009324:	4658      	mov	r0, fp
 8009326:	f001 fc35 	bl	800ab94 <__ssprint_r>
 800932a:	2800      	cmp	r0, #0
 800932c:	d155      	bne.n	80093da <_svfprintf_r+0xec2>
 800932e:	ac2c      	add	r4, sp, #176	; 0xb0
 8009330:	e7c0      	b.n	80092b4 <_svfprintf_r+0xd9c>
 8009332:	aa1f      	add	r2, sp, #124	; 0x7c
 8009334:	4651      	mov	r1, sl
 8009336:	4658      	mov	r0, fp
 8009338:	f001 fc2c 	bl	800ab94 <__ssprint_r>
 800933c:	2800      	cmp	r0, #0
 800933e:	d14c      	bne.n	80093da <_svfprintf_r+0xec2>
 8009340:	ac2c      	add	r4, sp, #176	; 0xb0
 8009342:	e7c5      	b.n	80092d0 <_svfprintf_r+0xdb8>
 8009344:	2e00      	cmp	r6, #0
 8009346:	dde3      	ble.n	8009310 <_svfprintf_r+0xdf8>
 8009348:	4f59      	ldr	r7, [pc, #356]	; (80094b0 <_svfprintf_r+0xf98>)
 800934a:	f04f 0810 	mov.w	r8, #16
 800934e:	2e10      	cmp	r6, #16
 8009350:	6027      	str	r7, [r4, #0]
 8009352:	dc04      	bgt.n	800935e <_svfprintf_r+0xe46>
 8009354:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009356:	6066      	str	r6, [r4, #4]
 8009358:	441e      	add	r6, r3
 800935a:	9621      	str	r6, [sp, #132]	; 0x84
 800935c:	e7cb      	b.n	80092f6 <_svfprintf_r+0xdde>
 800935e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009360:	f8c4 8004 	str.w	r8, [r4, #4]
 8009364:	3310      	adds	r3, #16
 8009366:	9321      	str	r3, [sp, #132]	; 0x84
 8009368:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800936a:	3301      	adds	r3, #1
 800936c:	2b07      	cmp	r3, #7
 800936e:	9320      	str	r3, [sp, #128]	; 0x80
 8009370:	dc02      	bgt.n	8009378 <_svfprintf_r+0xe60>
 8009372:	3408      	adds	r4, #8
 8009374:	3e10      	subs	r6, #16
 8009376:	e7ea      	b.n	800934e <_svfprintf_r+0xe36>
 8009378:	aa1f      	add	r2, sp, #124	; 0x7c
 800937a:	4651      	mov	r1, sl
 800937c:	4658      	mov	r0, fp
 800937e:	f001 fc09 	bl	800ab94 <__ssprint_r>
 8009382:	bb50      	cbnz	r0, 80093da <_svfprintf_r+0xec2>
 8009384:	ac2c      	add	r4, sp, #176	; 0xb0
 8009386:	e7f5      	b.n	8009374 <_svfprintf_r+0xe5c>
 8009388:	2301      	movs	r3, #1
 800938a:	6063      	str	r3, [r4, #4]
 800938c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800938e:	f8c4 8000 	str.w	r8, [r4]
 8009392:	3301      	adds	r3, #1
 8009394:	e7ae      	b.n	80092f4 <_svfprintf_r+0xddc>
 8009396:	3408      	adds	r4, #8
 8009398:	e7ba      	b.n	8009310 <_svfprintf_r+0xdf8>
 800939a:	3408      	adds	r4, #8
 800939c:	f7ff bbed 	b.w	8008b7a <_svfprintf_r+0x662>
 80093a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093a4:	1a9d      	subs	r5, r3, r2
 80093a6:	2d00      	cmp	r5, #0
 80093a8:	f77f abea 	ble.w	8008b80 <_svfprintf_r+0x668>
 80093ac:	2610      	movs	r6, #16
 80093ae:	4b41      	ldr	r3, [pc, #260]	; (80094b4 <_svfprintf_r+0xf9c>)
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	2d10      	cmp	r5, #16
 80093b4:	dc1b      	bgt.n	80093ee <_svfprintf_r+0xed6>
 80093b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093b8:	6065      	str	r5, [r4, #4]
 80093ba:	441d      	add	r5, r3
 80093bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80093be:	9521      	str	r5, [sp, #132]	; 0x84
 80093c0:	3301      	adds	r3, #1
 80093c2:	2b07      	cmp	r3, #7
 80093c4:	9320      	str	r3, [sp, #128]	; 0x80
 80093c6:	f77f abdb 	ble.w	8008b80 <_svfprintf_r+0x668>
 80093ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80093cc:	4651      	mov	r1, sl
 80093ce:	4658      	mov	r0, fp
 80093d0:	f001 fbe0 	bl	800ab94 <__ssprint_r>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f43f abd3 	beq.w	8008b80 <_svfprintf_r+0x668>
 80093da:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80093de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80093e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e4:	bf18      	it	ne
 80093e6:	f04f 33ff 	movne.w	r3, #4294967295
 80093ea:	f7ff b8b9 	b.w	8008560 <_svfprintf_r+0x48>
 80093ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093f0:	6066      	str	r6, [r4, #4]
 80093f2:	3310      	adds	r3, #16
 80093f4:	9321      	str	r3, [sp, #132]	; 0x84
 80093f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80093f8:	3301      	adds	r3, #1
 80093fa:	2b07      	cmp	r3, #7
 80093fc:	9320      	str	r3, [sp, #128]	; 0x80
 80093fe:	dc02      	bgt.n	8009406 <_svfprintf_r+0xeee>
 8009400:	3408      	adds	r4, #8
 8009402:	3d10      	subs	r5, #16
 8009404:	e7d3      	b.n	80093ae <_svfprintf_r+0xe96>
 8009406:	aa1f      	add	r2, sp, #124	; 0x7c
 8009408:	4651      	mov	r1, sl
 800940a:	4658      	mov	r0, fp
 800940c:	f001 fbc2 	bl	800ab94 <__ssprint_r>
 8009410:	2800      	cmp	r0, #0
 8009412:	d1e2      	bne.n	80093da <_svfprintf_r+0xec2>
 8009414:	ac2c      	add	r4, sp, #176	; 0xb0
 8009416:	e7f4      	b.n	8009402 <_svfprintf_r+0xeea>
 8009418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0dd      	beq.n	80093da <_svfprintf_r+0xec2>
 800941e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009420:	4651      	mov	r1, sl
 8009422:	4658      	mov	r0, fp
 8009424:	f001 fbb6 	bl	800ab94 <__ssprint_r>
 8009428:	e7d7      	b.n	80093da <_svfprintf_r+0xec2>
 800942a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800942e:	4610      	mov	r0, r2
 8009430:	4619      	mov	r1, r3
 8009432:	f7f7 fb77 	bl	8000b24 <__aeabi_dcmpun>
 8009436:	2800      	cmp	r0, #0
 8009438:	f43f aa44 	beq.w	80088c4 <_svfprintf_r+0x3ac>
 800943c:	4b1e      	ldr	r3, [pc, #120]	; (80094b8 <_svfprintf_r+0xfa0>)
 800943e:	4a1f      	ldr	r2, [pc, #124]	; (80094bc <_svfprintf_r+0xfa4>)
 8009440:	f7ff ba34 	b.w	80088ac <_svfprintf_r+0x394>
 8009444:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009446:	eba3 0308 	sub.w	r3, r3, r8
 800944a:	9303      	str	r3, [sp, #12]
 800944c:	f7ff bab5 	b.w	80089ba <_svfprintf_r+0x4a2>
 8009450:	ea56 0207 	orrs.w	r2, r6, r7
 8009454:	950b      	str	r5, [sp, #44]	; 0x2c
 8009456:	f43f ac2b 	beq.w	8008cb0 <_svfprintf_r+0x798>
 800945a:	2b01      	cmp	r3, #1
 800945c:	f43f ac9d 	beq.w	8008d9a <_svfprintf_r+0x882>
 8009460:	2b02      	cmp	r3, #2
 8009462:	f43f acbd 	beq.w	8008de0 <_svfprintf_r+0x8c8>
 8009466:	ab2c      	add	r3, sp, #176	; 0xb0
 8009468:	08f1      	lsrs	r1, r6, #3
 800946a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800946e:	08f8      	lsrs	r0, r7, #3
 8009470:	f006 0207 	and.w	r2, r6, #7
 8009474:	4607      	mov	r7, r0
 8009476:	460e      	mov	r6, r1
 8009478:	3230      	adds	r2, #48	; 0x30
 800947a:	ea56 0107 	orrs.w	r1, r6, r7
 800947e:	f103 38ff 	add.w	r8, r3, #4294967295
 8009482:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009486:	f47f ac86 	bne.w	8008d96 <_svfprintf_r+0x87e>
 800948a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800948c:	07c9      	lsls	r1, r1, #31
 800948e:	d506      	bpl.n	800949e <_svfprintf_r+0xf86>
 8009490:	2a30      	cmp	r2, #48	; 0x30
 8009492:	d004      	beq.n	800949e <_svfprintf_r+0xf86>
 8009494:	2230      	movs	r2, #48	; 0x30
 8009496:	f808 2c01 	strb.w	r2, [r8, #-1]
 800949a:	f1a3 0802 	sub.w	r8, r3, #2
 800949e:	464e      	mov	r6, r9
 80094a0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80094a4:	eba9 0908 	sub.w	r9, r9, r8
 80094a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80094aa:	2700      	movs	r7, #0
 80094ac:	f7ff bad1 	b.w	8008a52 <_svfprintf_r+0x53a>
 80094b0:	0800b6f8 	.word	0x0800b6f8
 80094b4:	0800b6e8 	.word	0x0800b6e8
 80094b8:	0800b6bc 	.word	0x0800b6bc
 80094bc:	0800b6c0 	.word	0x0800b6c0

080094c0 <quorem>:
 80094c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	6903      	ldr	r3, [r0, #16]
 80094c6:	690c      	ldr	r4, [r1, #16]
 80094c8:	429c      	cmp	r4, r3
 80094ca:	4680      	mov	r8, r0
 80094cc:	f300 8082 	bgt.w	80095d4 <quorem+0x114>
 80094d0:	3c01      	subs	r4, #1
 80094d2:	f101 0714 	add.w	r7, r1, #20
 80094d6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80094da:	f100 0614 	add.w	r6, r0, #20
 80094de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80094e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80094e6:	eb06 030e 	add.w	r3, r6, lr
 80094ea:	3501      	adds	r5, #1
 80094ec:	eb07 090e 	add.w	r9, r7, lr
 80094f0:	9301      	str	r3, [sp, #4]
 80094f2:	fbb0 f5f5 	udiv	r5, r0, r5
 80094f6:	b395      	cbz	r5, 800955e <quorem+0x9e>
 80094f8:	f04f 0a00 	mov.w	sl, #0
 80094fc:	4638      	mov	r0, r7
 80094fe:	46b4      	mov	ip, r6
 8009500:	46d3      	mov	fp, sl
 8009502:	f850 2b04 	ldr.w	r2, [r0], #4
 8009506:	b293      	uxth	r3, r2
 8009508:	fb05 a303 	mla	r3, r5, r3, sl
 800950c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009510:	b29b      	uxth	r3, r3
 8009512:	ebab 0303 	sub.w	r3, fp, r3
 8009516:	0c12      	lsrs	r2, r2, #16
 8009518:	f8bc b000 	ldrh.w	fp, [ip]
 800951c:	fb05 a202 	mla	r2, r5, r2, sl
 8009520:	fa13 f38b 	uxtah	r3, r3, fp
 8009524:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009528:	fa1f fb82 	uxth.w	fp, r2
 800952c:	f8dc 2000 	ldr.w	r2, [ip]
 8009530:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009538:	b29b      	uxth	r3, r3
 800953a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800953e:	4581      	cmp	r9, r0
 8009540:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009544:	f84c 3b04 	str.w	r3, [ip], #4
 8009548:	d2db      	bcs.n	8009502 <quorem+0x42>
 800954a:	f856 300e 	ldr.w	r3, [r6, lr]
 800954e:	b933      	cbnz	r3, 800955e <quorem+0x9e>
 8009550:	9b01      	ldr	r3, [sp, #4]
 8009552:	3b04      	subs	r3, #4
 8009554:	429e      	cmp	r6, r3
 8009556:	461a      	mov	r2, r3
 8009558:	d330      	bcc.n	80095bc <quorem+0xfc>
 800955a:	f8c8 4010 	str.w	r4, [r8, #16]
 800955e:	4640      	mov	r0, r8
 8009560:	f001 fa41 	bl	800a9e6 <__mcmp>
 8009564:	2800      	cmp	r0, #0
 8009566:	db25      	blt.n	80095b4 <quorem+0xf4>
 8009568:	3501      	adds	r5, #1
 800956a:	4630      	mov	r0, r6
 800956c:	f04f 0e00 	mov.w	lr, #0
 8009570:	f857 2b04 	ldr.w	r2, [r7], #4
 8009574:	f8d0 c000 	ldr.w	ip, [r0]
 8009578:	b293      	uxth	r3, r2
 800957a:	ebae 0303 	sub.w	r3, lr, r3
 800957e:	0c12      	lsrs	r2, r2, #16
 8009580:	fa13 f38c 	uxtah	r3, r3, ip
 8009584:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009588:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800958c:	b29b      	uxth	r3, r3
 800958e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009592:	45b9      	cmp	r9, r7
 8009594:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009598:	f840 3b04 	str.w	r3, [r0], #4
 800959c:	d2e8      	bcs.n	8009570 <quorem+0xb0>
 800959e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80095a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80095a6:	b92a      	cbnz	r2, 80095b4 <quorem+0xf4>
 80095a8:	3b04      	subs	r3, #4
 80095aa:	429e      	cmp	r6, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	d30b      	bcc.n	80095c8 <quorem+0x108>
 80095b0:	f8c8 4010 	str.w	r4, [r8, #16]
 80095b4:	4628      	mov	r0, r5
 80095b6:	b003      	add	sp, #12
 80095b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	3b04      	subs	r3, #4
 80095c0:	2a00      	cmp	r2, #0
 80095c2:	d1ca      	bne.n	800955a <quorem+0x9a>
 80095c4:	3c01      	subs	r4, #1
 80095c6:	e7c5      	b.n	8009554 <quorem+0x94>
 80095c8:	6812      	ldr	r2, [r2, #0]
 80095ca:	3b04      	subs	r3, #4
 80095cc:	2a00      	cmp	r2, #0
 80095ce:	d1ef      	bne.n	80095b0 <quorem+0xf0>
 80095d0:	3c01      	subs	r4, #1
 80095d2:	e7ea      	b.n	80095aa <quorem+0xea>
 80095d4:	2000      	movs	r0, #0
 80095d6:	e7ee      	b.n	80095b6 <quorem+0xf6>

080095d8 <_dtoa_r>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	ec57 6b10 	vmov	r6, r7, d0
 80095e0:	b097      	sub	sp, #92	; 0x5c
 80095e2:	e9cd 6700 	strd	r6, r7, [sp]
 80095e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095e8:	9107      	str	r1, [sp, #28]
 80095ea:	4604      	mov	r4, r0
 80095ec:	920a      	str	r2, [sp, #40]	; 0x28
 80095ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80095f0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80095f2:	b93e      	cbnz	r6, 8009604 <_dtoa_r+0x2c>
 80095f4:	2010      	movs	r0, #16
 80095f6:	f000 fdcb 	bl	800a190 <malloc>
 80095fa:	6260      	str	r0, [r4, #36]	; 0x24
 80095fc:	6046      	str	r6, [r0, #4]
 80095fe:	6086      	str	r6, [r0, #8]
 8009600:	6006      	str	r6, [r0, #0]
 8009602:	60c6      	str	r6, [r0, #12]
 8009604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009606:	6819      	ldr	r1, [r3, #0]
 8009608:	b151      	cbz	r1, 8009620 <_dtoa_r+0x48>
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	604a      	str	r2, [r1, #4]
 800960e:	2301      	movs	r3, #1
 8009610:	4093      	lsls	r3, r2
 8009612:	608b      	str	r3, [r1, #8]
 8009614:	4620      	mov	r0, r4
 8009616:	f001 f811 	bl	800a63c <_Bfree>
 800961a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	9b01      	ldr	r3, [sp, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	bfbf      	itttt	lt
 8009626:	2301      	movlt	r3, #1
 8009628:	602b      	strlt	r3, [r5, #0]
 800962a:	9b01      	ldrlt	r3, [sp, #4]
 800962c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009630:	bfb2      	itee	lt
 8009632:	9301      	strlt	r3, [sp, #4]
 8009634:	2300      	movge	r3, #0
 8009636:	602b      	strge	r3, [r5, #0]
 8009638:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800963c:	4ba8      	ldr	r3, [pc, #672]	; (80098e0 <_dtoa_r+0x308>)
 800963e:	ea33 0308 	bics.w	r3, r3, r8
 8009642:	d11b      	bne.n	800967c <_dtoa_r+0xa4>
 8009644:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009646:	f242 730f 	movw	r3, #9999	; 0x270f
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	9b00      	ldr	r3, [sp, #0]
 800964e:	b923      	cbnz	r3, 800965a <_dtoa_r+0x82>
 8009650:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009654:	2800      	cmp	r0, #0
 8009656:	f000 8578 	beq.w	800a14a <_dtoa_r+0xb72>
 800965a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800965c:	b953      	cbnz	r3, 8009674 <_dtoa_r+0x9c>
 800965e:	4ba1      	ldr	r3, [pc, #644]	; (80098e4 <_dtoa_r+0x30c>)
 8009660:	e021      	b.n	80096a6 <_dtoa_r+0xce>
 8009662:	4ba1      	ldr	r3, [pc, #644]	; (80098e8 <_dtoa_r+0x310>)
 8009664:	9302      	str	r3, [sp, #8]
 8009666:	3308      	adds	r3, #8
 8009668:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	9802      	ldr	r0, [sp, #8]
 800966e:	b017      	add	sp, #92	; 0x5c
 8009670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009674:	4b9b      	ldr	r3, [pc, #620]	; (80098e4 <_dtoa_r+0x30c>)
 8009676:	9302      	str	r3, [sp, #8]
 8009678:	3303      	adds	r3, #3
 800967a:	e7f5      	b.n	8009668 <_dtoa_r+0x90>
 800967c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009680:	2200      	movs	r2, #0
 8009682:	2300      	movs	r3, #0
 8009684:	4630      	mov	r0, r6
 8009686:	4639      	mov	r1, r7
 8009688:	f7f7 fa1a 	bl	8000ac0 <__aeabi_dcmpeq>
 800968c:	4681      	mov	r9, r0
 800968e:	b160      	cbz	r0, 80096aa <_dtoa_r+0xd2>
 8009690:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009692:	2301      	movs	r3, #1
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 8553 	beq.w	800a144 <_dtoa_r+0xb6c>
 800969e:	4b93      	ldr	r3, [pc, #588]	; (80098ec <_dtoa_r+0x314>)
 80096a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	9302      	str	r3, [sp, #8]
 80096a8:	e7e0      	b.n	800966c <_dtoa_r+0x94>
 80096aa:	aa14      	add	r2, sp, #80	; 0x50
 80096ac:	a915      	add	r1, sp, #84	; 0x54
 80096ae:	ec47 6b10 	vmov	d0, r6, r7
 80096b2:	4620      	mov	r0, r4
 80096b4:	f001 fa0f 	bl	800aad6 <__d2b>
 80096b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80096bc:	4682      	mov	sl, r0
 80096be:	2d00      	cmp	r5, #0
 80096c0:	d07e      	beq.n	80097c0 <_dtoa_r+0x1e8>
 80096c2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80096ca:	4630      	mov	r0, r6
 80096cc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80096d0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096d4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80096d8:	2200      	movs	r2, #0
 80096da:	4b85      	ldr	r3, [pc, #532]	; (80098f0 <_dtoa_r+0x318>)
 80096dc:	f7f6 fdd4 	bl	8000288 <__aeabi_dsub>
 80096e0:	a379      	add	r3, pc, #484	; (adr r3, 80098c8 <_dtoa_r+0x2f0>)
 80096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e6:	f7f6 ff83 	bl	80005f0 <__aeabi_dmul>
 80096ea:	a379      	add	r3, pc, #484	; (adr r3, 80098d0 <_dtoa_r+0x2f8>)
 80096ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f0:	f7f6 fdcc 	bl	800028c <__adddf3>
 80096f4:	4606      	mov	r6, r0
 80096f6:	4628      	mov	r0, r5
 80096f8:	460f      	mov	r7, r1
 80096fa:	f7f6 ff13 	bl	8000524 <__aeabi_i2d>
 80096fe:	a376      	add	r3, pc, #472	; (adr r3, 80098d8 <_dtoa_r+0x300>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f7f6 ff74 	bl	80005f0 <__aeabi_dmul>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4630      	mov	r0, r6
 800970e:	4639      	mov	r1, r7
 8009710:	f7f6 fdbc 	bl	800028c <__adddf3>
 8009714:	4606      	mov	r6, r0
 8009716:	460f      	mov	r7, r1
 8009718:	f7f7 fa1a 	bl	8000b50 <__aeabi_d2iz>
 800971c:	2200      	movs	r2, #0
 800971e:	4683      	mov	fp, r0
 8009720:	2300      	movs	r3, #0
 8009722:	4630      	mov	r0, r6
 8009724:	4639      	mov	r1, r7
 8009726:	f7f7 f9d5 	bl	8000ad4 <__aeabi_dcmplt>
 800972a:	b158      	cbz	r0, 8009744 <_dtoa_r+0x16c>
 800972c:	4658      	mov	r0, fp
 800972e:	f7f6 fef9 	bl	8000524 <__aeabi_i2d>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	4630      	mov	r0, r6
 8009738:	4639      	mov	r1, r7
 800973a:	f7f7 f9c1 	bl	8000ac0 <__aeabi_dcmpeq>
 800973e:	b908      	cbnz	r0, 8009744 <_dtoa_r+0x16c>
 8009740:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009744:	f1bb 0f16 	cmp.w	fp, #22
 8009748:	d859      	bhi.n	80097fe <_dtoa_r+0x226>
 800974a:	496a      	ldr	r1, [pc, #424]	; (80098f4 <_dtoa_r+0x31c>)
 800974c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009754:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009758:	f7f7 f9da 	bl	8000b10 <__aeabi_dcmpgt>
 800975c:	2800      	cmp	r0, #0
 800975e:	d050      	beq.n	8009802 <_dtoa_r+0x22a>
 8009760:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009764:	2300      	movs	r3, #0
 8009766:	930e      	str	r3, [sp, #56]	; 0x38
 8009768:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800976a:	1b5d      	subs	r5, r3, r5
 800976c:	1e6b      	subs	r3, r5, #1
 800976e:	9306      	str	r3, [sp, #24]
 8009770:	bf45      	ittet	mi
 8009772:	f1c5 0301 	rsbmi	r3, r5, #1
 8009776:	9305      	strmi	r3, [sp, #20]
 8009778:	2300      	movpl	r3, #0
 800977a:	2300      	movmi	r3, #0
 800977c:	bf4c      	ite	mi
 800977e:	9306      	strmi	r3, [sp, #24]
 8009780:	9305      	strpl	r3, [sp, #20]
 8009782:	f1bb 0f00 	cmp.w	fp, #0
 8009786:	db3e      	blt.n	8009806 <_dtoa_r+0x22e>
 8009788:	9b06      	ldr	r3, [sp, #24]
 800978a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800978e:	445b      	add	r3, fp
 8009790:	9306      	str	r3, [sp, #24]
 8009792:	2300      	movs	r3, #0
 8009794:	9308      	str	r3, [sp, #32]
 8009796:	9b07      	ldr	r3, [sp, #28]
 8009798:	2b09      	cmp	r3, #9
 800979a:	f200 80af 	bhi.w	80098fc <_dtoa_r+0x324>
 800979e:	2b05      	cmp	r3, #5
 80097a0:	bfc4      	itt	gt
 80097a2:	3b04      	subgt	r3, #4
 80097a4:	9307      	strgt	r3, [sp, #28]
 80097a6:	9b07      	ldr	r3, [sp, #28]
 80097a8:	f1a3 0302 	sub.w	r3, r3, #2
 80097ac:	bfcc      	ite	gt
 80097ae:	2600      	movgt	r6, #0
 80097b0:	2601      	movle	r6, #1
 80097b2:	2b03      	cmp	r3, #3
 80097b4:	f200 80ae 	bhi.w	8009914 <_dtoa_r+0x33c>
 80097b8:	e8df f003 	tbb	[pc, r3]
 80097bc:	772f8482 	.word	0x772f8482
 80097c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80097c4:	441d      	add	r5, r3
 80097c6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	dd11      	ble.n	80097f2 <_dtoa_r+0x21a>
 80097ce:	9a00      	ldr	r2, [sp, #0]
 80097d0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80097d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80097d8:	fa22 f000 	lsr.w	r0, r2, r0
 80097dc:	fa08 f303 	lsl.w	r3, r8, r3
 80097e0:	4318      	orrs	r0, r3
 80097e2:	f7f6 fe8f 	bl	8000504 <__aeabi_ui2d>
 80097e6:	2301      	movs	r3, #1
 80097e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80097ec:	3d01      	subs	r5, #1
 80097ee:	9312      	str	r3, [sp, #72]	; 0x48
 80097f0:	e772      	b.n	80096d8 <_dtoa_r+0x100>
 80097f2:	f1c3 0020 	rsb	r0, r3, #32
 80097f6:	9b00      	ldr	r3, [sp, #0]
 80097f8:	fa03 f000 	lsl.w	r0, r3, r0
 80097fc:	e7f1      	b.n	80097e2 <_dtoa_r+0x20a>
 80097fe:	2301      	movs	r3, #1
 8009800:	e7b1      	b.n	8009766 <_dtoa_r+0x18e>
 8009802:	900e      	str	r0, [sp, #56]	; 0x38
 8009804:	e7b0      	b.n	8009768 <_dtoa_r+0x190>
 8009806:	9b05      	ldr	r3, [sp, #20]
 8009808:	eba3 030b 	sub.w	r3, r3, fp
 800980c:	9305      	str	r3, [sp, #20]
 800980e:	f1cb 0300 	rsb	r3, fp, #0
 8009812:	9308      	str	r3, [sp, #32]
 8009814:	2300      	movs	r3, #0
 8009816:	930b      	str	r3, [sp, #44]	; 0x2c
 8009818:	e7bd      	b.n	8009796 <_dtoa_r+0x1be>
 800981a:	2301      	movs	r3, #1
 800981c:	9309      	str	r3, [sp, #36]	; 0x24
 800981e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009820:	2b00      	cmp	r3, #0
 8009822:	dd7a      	ble.n	800991a <_dtoa_r+0x342>
 8009824:	9304      	str	r3, [sp, #16]
 8009826:	9303      	str	r3, [sp, #12]
 8009828:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800982a:	2200      	movs	r2, #0
 800982c:	606a      	str	r2, [r5, #4]
 800982e:	2104      	movs	r1, #4
 8009830:	f101 0214 	add.w	r2, r1, #20
 8009834:	429a      	cmp	r2, r3
 8009836:	d975      	bls.n	8009924 <_dtoa_r+0x34c>
 8009838:	6869      	ldr	r1, [r5, #4]
 800983a:	4620      	mov	r0, r4
 800983c:	f000 feca 	bl	800a5d4 <_Balloc>
 8009840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009842:	6028      	str	r0, [r5, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	9302      	str	r3, [sp, #8]
 8009848:	9b03      	ldr	r3, [sp, #12]
 800984a:	2b0e      	cmp	r3, #14
 800984c:	f200 80e5 	bhi.w	8009a1a <_dtoa_r+0x442>
 8009850:	2e00      	cmp	r6, #0
 8009852:	f000 80e2 	beq.w	8009a1a <_dtoa_r+0x442>
 8009856:	ed9d 7b00 	vldr	d7, [sp]
 800985a:	f1bb 0f00 	cmp.w	fp, #0
 800985e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009862:	dd74      	ble.n	800994e <_dtoa_r+0x376>
 8009864:	4a23      	ldr	r2, [pc, #140]	; (80098f4 <_dtoa_r+0x31c>)
 8009866:	f00b 030f 	and.w	r3, fp, #15
 800986a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800986e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009872:	06f0      	lsls	r0, r6, #27
 8009874:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009878:	d559      	bpl.n	800992e <_dtoa_r+0x356>
 800987a:	4b1f      	ldr	r3, [pc, #124]	; (80098f8 <_dtoa_r+0x320>)
 800987c:	ec51 0b17 	vmov	r0, r1, d7
 8009880:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009884:	f7f6 ffde 	bl	8000844 <__aeabi_ddiv>
 8009888:	e9cd 0100 	strd	r0, r1, [sp]
 800988c:	f006 060f 	and.w	r6, r6, #15
 8009890:	2503      	movs	r5, #3
 8009892:	4f19      	ldr	r7, [pc, #100]	; (80098f8 <_dtoa_r+0x320>)
 8009894:	2e00      	cmp	r6, #0
 8009896:	d14c      	bne.n	8009932 <_dtoa_r+0x35a>
 8009898:	4642      	mov	r2, r8
 800989a:	464b      	mov	r3, r9
 800989c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098a0:	f7f6 ffd0 	bl	8000844 <__aeabi_ddiv>
 80098a4:	e9cd 0100 	strd	r0, r1, [sp]
 80098a8:	e06a      	b.n	8009980 <_dtoa_r+0x3a8>
 80098aa:	2301      	movs	r3, #1
 80098ac:	9309      	str	r3, [sp, #36]	; 0x24
 80098ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b0:	445b      	add	r3, fp
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	3301      	adds	r3, #1
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	9303      	str	r3, [sp, #12]
 80098ba:	bfb8      	it	lt
 80098bc:	2301      	movlt	r3, #1
 80098be:	e7b3      	b.n	8009828 <_dtoa_r+0x250>
 80098c0:	2300      	movs	r3, #0
 80098c2:	e7ab      	b.n	800981c <_dtoa_r+0x244>
 80098c4:	2300      	movs	r3, #0
 80098c6:	e7f1      	b.n	80098ac <_dtoa_r+0x2d4>
 80098c8:	636f4361 	.word	0x636f4361
 80098cc:	3fd287a7 	.word	0x3fd287a7
 80098d0:	8b60c8b3 	.word	0x8b60c8b3
 80098d4:	3fc68a28 	.word	0x3fc68a28
 80098d8:	509f79fb 	.word	0x509f79fb
 80098dc:	3fd34413 	.word	0x3fd34413
 80098e0:	7ff00000 	.word	0x7ff00000
 80098e4:	0800b711 	.word	0x0800b711
 80098e8:	0800b708 	.word	0x0800b708
 80098ec:	0800b6e7 	.word	0x0800b6e7
 80098f0:	3ff80000 	.word	0x3ff80000
 80098f4:	0800b740 	.word	0x0800b740
 80098f8:	0800b718 	.word	0x0800b718
 80098fc:	2601      	movs	r6, #1
 80098fe:	2300      	movs	r3, #0
 8009900:	9307      	str	r3, [sp, #28]
 8009902:	9609      	str	r6, [sp, #36]	; 0x24
 8009904:	f04f 33ff 	mov.w	r3, #4294967295
 8009908:	9304      	str	r3, [sp, #16]
 800990a:	9303      	str	r3, [sp, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	2312      	movs	r3, #18
 8009910:	920a      	str	r2, [sp, #40]	; 0x28
 8009912:	e789      	b.n	8009828 <_dtoa_r+0x250>
 8009914:	2301      	movs	r3, #1
 8009916:	9309      	str	r3, [sp, #36]	; 0x24
 8009918:	e7f4      	b.n	8009904 <_dtoa_r+0x32c>
 800991a:	2301      	movs	r3, #1
 800991c:	9304      	str	r3, [sp, #16]
 800991e:	9303      	str	r3, [sp, #12]
 8009920:	461a      	mov	r2, r3
 8009922:	e7f5      	b.n	8009910 <_dtoa_r+0x338>
 8009924:	686a      	ldr	r2, [r5, #4]
 8009926:	3201      	adds	r2, #1
 8009928:	606a      	str	r2, [r5, #4]
 800992a:	0049      	lsls	r1, r1, #1
 800992c:	e780      	b.n	8009830 <_dtoa_r+0x258>
 800992e:	2502      	movs	r5, #2
 8009930:	e7af      	b.n	8009892 <_dtoa_r+0x2ba>
 8009932:	07f1      	lsls	r1, r6, #31
 8009934:	d508      	bpl.n	8009948 <_dtoa_r+0x370>
 8009936:	4640      	mov	r0, r8
 8009938:	4649      	mov	r1, r9
 800993a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800993e:	f7f6 fe57 	bl	80005f0 <__aeabi_dmul>
 8009942:	3501      	adds	r5, #1
 8009944:	4680      	mov	r8, r0
 8009946:	4689      	mov	r9, r1
 8009948:	1076      	asrs	r6, r6, #1
 800994a:	3708      	adds	r7, #8
 800994c:	e7a2      	b.n	8009894 <_dtoa_r+0x2bc>
 800994e:	f000 809d 	beq.w	8009a8c <_dtoa_r+0x4b4>
 8009952:	f1cb 0600 	rsb	r6, fp, #0
 8009956:	4b9f      	ldr	r3, [pc, #636]	; (8009bd4 <_dtoa_r+0x5fc>)
 8009958:	4f9f      	ldr	r7, [pc, #636]	; (8009bd8 <_dtoa_r+0x600>)
 800995a:	f006 020f 	and.w	r2, r6, #15
 800995e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800996a:	f7f6 fe41 	bl	80005f0 <__aeabi_dmul>
 800996e:	e9cd 0100 	strd	r0, r1, [sp]
 8009972:	1136      	asrs	r6, r6, #4
 8009974:	2300      	movs	r3, #0
 8009976:	2502      	movs	r5, #2
 8009978:	2e00      	cmp	r6, #0
 800997a:	d17c      	bne.n	8009a76 <_dtoa_r+0x49e>
 800997c:	2b00      	cmp	r3, #0
 800997e:	d191      	bne.n	80098a4 <_dtoa_r+0x2cc>
 8009980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 8084 	beq.w	8009a90 <_dtoa_r+0x4b8>
 8009988:	e9dd 8900 	ldrd	r8, r9, [sp]
 800998c:	2200      	movs	r2, #0
 800998e:	4b93      	ldr	r3, [pc, #588]	; (8009bdc <_dtoa_r+0x604>)
 8009990:	4640      	mov	r0, r8
 8009992:	4649      	mov	r1, r9
 8009994:	f7f7 f89e 	bl	8000ad4 <__aeabi_dcmplt>
 8009998:	2800      	cmp	r0, #0
 800999a:	d079      	beq.n	8009a90 <_dtoa_r+0x4b8>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d076      	beq.n	8009a90 <_dtoa_r+0x4b8>
 80099a2:	9b04      	ldr	r3, [sp, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dd34      	ble.n	8009a12 <_dtoa_r+0x43a>
 80099a8:	2200      	movs	r2, #0
 80099aa:	4b8d      	ldr	r3, [pc, #564]	; (8009be0 <_dtoa_r+0x608>)
 80099ac:	4640      	mov	r0, r8
 80099ae:	4649      	mov	r1, r9
 80099b0:	f7f6 fe1e 	bl	80005f0 <__aeabi_dmul>
 80099b4:	e9cd 0100 	strd	r0, r1, [sp]
 80099b8:	9e04      	ldr	r6, [sp, #16]
 80099ba:	f10b 37ff 	add.w	r7, fp, #4294967295
 80099be:	3501      	adds	r5, #1
 80099c0:	4628      	mov	r0, r5
 80099c2:	f7f6 fdaf 	bl	8000524 <__aeabi_i2d>
 80099c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099ca:	f7f6 fe11 	bl	80005f0 <__aeabi_dmul>
 80099ce:	2200      	movs	r2, #0
 80099d0:	4b84      	ldr	r3, [pc, #528]	; (8009be4 <_dtoa_r+0x60c>)
 80099d2:	f7f6 fc5b 	bl	800028c <__adddf3>
 80099d6:	4680      	mov	r8, r0
 80099d8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80099dc:	2e00      	cmp	r6, #0
 80099de:	d15a      	bne.n	8009a96 <_dtoa_r+0x4be>
 80099e0:	2200      	movs	r2, #0
 80099e2:	4b81      	ldr	r3, [pc, #516]	; (8009be8 <_dtoa_r+0x610>)
 80099e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099e8:	f7f6 fc4e 	bl	8000288 <__aeabi_dsub>
 80099ec:	4642      	mov	r2, r8
 80099ee:	464b      	mov	r3, r9
 80099f0:	e9cd 0100 	strd	r0, r1, [sp]
 80099f4:	f7f7 f88c 	bl	8000b10 <__aeabi_dcmpgt>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f040 829b 	bne.w	8009f34 <_dtoa_r+0x95c>
 80099fe:	4642      	mov	r2, r8
 8009a00:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a08:	f7f7 f864 	bl	8000ad4 <__aeabi_dcmplt>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	f040 828f 	bne.w	8009f30 <_dtoa_r+0x958>
 8009a12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009a16:	e9cd 2300 	strd	r2, r3, [sp]
 8009a1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f2c0 8150 	blt.w	8009cc2 <_dtoa_r+0x6ea>
 8009a22:	f1bb 0f0e 	cmp.w	fp, #14
 8009a26:	f300 814c 	bgt.w	8009cc2 <_dtoa_r+0x6ea>
 8009a2a:	4b6a      	ldr	r3, [pc, #424]	; (8009bd4 <_dtoa_r+0x5fc>)
 8009a2c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f280 80da 	bge.w	8009bf0 <_dtoa_r+0x618>
 8009a3c:	9b03      	ldr	r3, [sp, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f300 80d6 	bgt.w	8009bf0 <_dtoa_r+0x618>
 8009a44:	f040 8273 	bne.w	8009f2e <_dtoa_r+0x956>
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4b67      	ldr	r3, [pc, #412]	; (8009be8 <_dtoa_r+0x610>)
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	4649      	mov	r1, r9
 8009a50:	f7f6 fdce 	bl	80005f0 <__aeabi_dmul>
 8009a54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a58:	f7f7 f850 	bl	8000afc <__aeabi_dcmpge>
 8009a5c:	9e03      	ldr	r6, [sp, #12]
 8009a5e:	4637      	mov	r7, r6
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f040 824a 	bne.w	8009efa <_dtoa_r+0x922>
 8009a66:	9b02      	ldr	r3, [sp, #8]
 8009a68:	9a02      	ldr	r2, [sp, #8]
 8009a6a:	1c5d      	adds	r5, r3, #1
 8009a6c:	2331      	movs	r3, #49	; 0x31
 8009a6e:	7013      	strb	r3, [r2, #0]
 8009a70:	f10b 0b01 	add.w	fp, fp, #1
 8009a74:	e245      	b.n	8009f02 <_dtoa_r+0x92a>
 8009a76:	07f2      	lsls	r2, r6, #31
 8009a78:	d505      	bpl.n	8009a86 <_dtoa_r+0x4ae>
 8009a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7e:	f7f6 fdb7 	bl	80005f0 <__aeabi_dmul>
 8009a82:	3501      	adds	r5, #1
 8009a84:	2301      	movs	r3, #1
 8009a86:	1076      	asrs	r6, r6, #1
 8009a88:	3708      	adds	r7, #8
 8009a8a:	e775      	b.n	8009978 <_dtoa_r+0x3a0>
 8009a8c:	2502      	movs	r5, #2
 8009a8e:	e777      	b.n	8009980 <_dtoa_r+0x3a8>
 8009a90:	465f      	mov	r7, fp
 8009a92:	9e03      	ldr	r6, [sp, #12]
 8009a94:	e794      	b.n	80099c0 <_dtoa_r+0x3e8>
 8009a96:	9a02      	ldr	r2, [sp, #8]
 8009a98:	4b4e      	ldr	r3, [pc, #312]	; (8009bd4 <_dtoa_r+0x5fc>)
 8009a9a:	4432      	add	r2, r6
 8009a9c:	9213      	str	r2, [sp, #76]	; 0x4c
 8009a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aa0:	1e71      	subs	r1, r6, #1
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	d048      	beq.n	8009b38 <_dtoa_r+0x560>
 8009aa6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	2000      	movs	r0, #0
 8009ab0:	494e      	ldr	r1, [pc, #312]	; (8009bec <_dtoa_r+0x614>)
 8009ab2:	f7f6 fec7 	bl	8000844 <__aeabi_ddiv>
 8009ab6:	4642      	mov	r2, r8
 8009ab8:	464b      	mov	r3, r9
 8009aba:	f7f6 fbe5 	bl	8000288 <__aeabi_dsub>
 8009abe:	9d02      	ldr	r5, [sp, #8]
 8009ac0:	4680      	mov	r8, r0
 8009ac2:	4689      	mov	r9, r1
 8009ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ac8:	f7f7 f842 	bl	8000b50 <__aeabi_d2iz>
 8009acc:	4606      	mov	r6, r0
 8009ace:	f7f6 fd29 	bl	8000524 <__aeabi_i2d>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ada:	f7f6 fbd5 	bl	8000288 <__aeabi_dsub>
 8009ade:	3630      	adds	r6, #48	; 0x30
 8009ae0:	f805 6b01 	strb.w	r6, [r5], #1
 8009ae4:	4642      	mov	r2, r8
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	e9cd 0100 	strd	r0, r1, [sp]
 8009aec:	f7f6 fff2 	bl	8000ad4 <__aeabi_dcmplt>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d165      	bne.n	8009bc0 <_dtoa_r+0x5e8>
 8009af4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009af8:	2000      	movs	r0, #0
 8009afa:	4938      	ldr	r1, [pc, #224]	; (8009bdc <_dtoa_r+0x604>)
 8009afc:	f7f6 fbc4 	bl	8000288 <__aeabi_dsub>
 8009b00:	4642      	mov	r2, r8
 8009b02:	464b      	mov	r3, r9
 8009b04:	f7f6 ffe6 	bl	8000ad4 <__aeabi_dcmplt>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	f040 80ba 	bne.w	8009c82 <_dtoa_r+0x6aa>
 8009b0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b10:	429d      	cmp	r5, r3
 8009b12:	f43f af7e 	beq.w	8009a12 <_dtoa_r+0x43a>
 8009b16:	2200      	movs	r2, #0
 8009b18:	4b31      	ldr	r3, [pc, #196]	; (8009be0 <_dtoa_r+0x608>)
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	f7f6 fd67 	bl	80005f0 <__aeabi_dmul>
 8009b22:	2200      	movs	r2, #0
 8009b24:	4680      	mov	r8, r0
 8009b26:	4689      	mov	r9, r1
 8009b28:	4b2d      	ldr	r3, [pc, #180]	; (8009be0 <_dtoa_r+0x608>)
 8009b2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b2e:	f7f6 fd5f 	bl	80005f0 <__aeabi_dmul>
 8009b32:	e9cd 0100 	strd	r0, r1, [sp]
 8009b36:	e7c5      	b.n	8009ac4 <_dtoa_r+0x4ec>
 8009b38:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009b3c:	4642      	mov	r2, r8
 8009b3e:	464b      	mov	r3, r9
 8009b40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b44:	f7f6 fd54 	bl	80005f0 <__aeabi_dmul>
 8009b48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b4c:	9d02      	ldr	r5, [sp, #8]
 8009b4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b52:	f7f6 fffd 	bl	8000b50 <__aeabi_d2iz>
 8009b56:	4606      	mov	r6, r0
 8009b58:	f7f6 fce4 	bl	8000524 <__aeabi_i2d>
 8009b5c:	3630      	adds	r6, #48	; 0x30
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b66:	f7f6 fb8f 	bl	8000288 <__aeabi_dsub>
 8009b6a:	f805 6b01 	strb.w	r6, [r5], #1
 8009b6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b70:	42ab      	cmp	r3, r5
 8009b72:	4680      	mov	r8, r0
 8009b74:	4689      	mov	r9, r1
 8009b76:	f04f 0200 	mov.w	r2, #0
 8009b7a:	d125      	bne.n	8009bc8 <_dtoa_r+0x5f0>
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <_dtoa_r+0x614>)
 8009b7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b82:	f7f6 fb83 	bl	800028c <__adddf3>
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	f7f6 ffbf 	bl	8000b10 <__aeabi_dcmpgt>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d175      	bne.n	8009c82 <_dtoa_r+0x6aa>
 8009b96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	4913      	ldr	r1, [pc, #76]	; (8009bec <_dtoa_r+0x614>)
 8009b9e:	f7f6 fb73 	bl	8000288 <__aeabi_dsub>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	4649      	mov	r1, r9
 8009baa:	f7f6 ff93 	bl	8000ad4 <__aeabi_dcmplt>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	f43f af2f 	beq.w	8009a12 <_dtoa_r+0x43a>
 8009bb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bb8:	2b30      	cmp	r3, #48	; 0x30
 8009bba:	f105 32ff 	add.w	r2, r5, #4294967295
 8009bbe:	d001      	beq.n	8009bc4 <_dtoa_r+0x5ec>
 8009bc0:	46bb      	mov	fp, r7
 8009bc2:	e04d      	b.n	8009c60 <_dtoa_r+0x688>
 8009bc4:	4615      	mov	r5, r2
 8009bc6:	e7f5      	b.n	8009bb4 <_dtoa_r+0x5dc>
 8009bc8:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <_dtoa_r+0x608>)
 8009bca:	f7f6 fd11 	bl	80005f0 <__aeabi_dmul>
 8009bce:	e9cd 0100 	strd	r0, r1, [sp]
 8009bd2:	e7bc      	b.n	8009b4e <_dtoa_r+0x576>
 8009bd4:	0800b740 	.word	0x0800b740
 8009bd8:	0800b718 	.word	0x0800b718
 8009bdc:	3ff00000 	.word	0x3ff00000
 8009be0:	40240000 	.word	0x40240000
 8009be4:	401c0000 	.word	0x401c0000
 8009be8:	40140000 	.word	0x40140000
 8009bec:	3fe00000 	.word	0x3fe00000
 8009bf0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bf4:	9d02      	ldr	r5, [sp, #8]
 8009bf6:	4642      	mov	r2, r8
 8009bf8:	464b      	mov	r3, r9
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	f7f6 fe21 	bl	8000844 <__aeabi_ddiv>
 8009c02:	f7f6 ffa5 	bl	8000b50 <__aeabi_d2iz>
 8009c06:	9000      	str	r0, [sp, #0]
 8009c08:	f7f6 fc8c 	bl	8000524 <__aeabi_i2d>
 8009c0c:	4642      	mov	r2, r8
 8009c0e:	464b      	mov	r3, r9
 8009c10:	f7f6 fcee 	bl	80005f0 <__aeabi_dmul>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4630      	mov	r0, r6
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	f7f6 fb34 	bl	8000288 <__aeabi_dsub>
 8009c20:	9e00      	ldr	r6, [sp, #0]
 8009c22:	9f03      	ldr	r7, [sp, #12]
 8009c24:	3630      	adds	r6, #48	; 0x30
 8009c26:	f805 6b01 	strb.w	r6, [r5], #1
 8009c2a:	9e02      	ldr	r6, [sp, #8]
 8009c2c:	1bae      	subs	r6, r5, r6
 8009c2e:	42b7      	cmp	r7, r6
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	d138      	bne.n	8009ca8 <_dtoa_r+0x6d0>
 8009c36:	f7f6 fb29 	bl	800028c <__adddf3>
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	460f      	mov	r7, r1
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4640      	mov	r0, r8
 8009c44:	4649      	mov	r1, r9
 8009c46:	f7f6 ff45 	bl	8000ad4 <__aeabi_dcmplt>
 8009c4a:	b9c8      	cbnz	r0, 8009c80 <_dtoa_r+0x6a8>
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	463b      	mov	r3, r7
 8009c50:	4640      	mov	r0, r8
 8009c52:	4649      	mov	r1, r9
 8009c54:	f7f6 ff34 	bl	8000ac0 <__aeabi_dcmpeq>
 8009c58:	b110      	cbz	r0, 8009c60 <_dtoa_r+0x688>
 8009c5a:	9b00      	ldr	r3, [sp, #0]
 8009c5c:	07db      	lsls	r3, r3, #31
 8009c5e:	d40f      	bmi.n	8009c80 <_dtoa_r+0x6a8>
 8009c60:	4651      	mov	r1, sl
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fcea 	bl	800a63c <_Bfree>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c6c:	702b      	strb	r3, [r5, #0]
 8009c6e:	f10b 0301 	add.w	r3, fp, #1
 8009c72:	6013      	str	r3, [r2, #0]
 8009c74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f43f acf8 	beq.w	800966c <_dtoa_r+0x94>
 8009c7c:	601d      	str	r5, [r3, #0]
 8009c7e:	e4f5      	b.n	800966c <_dtoa_r+0x94>
 8009c80:	465f      	mov	r7, fp
 8009c82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c86:	2a39      	cmp	r2, #57	; 0x39
 8009c88:	f105 33ff 	add.w	r3, r5, #4294967295
 8009c8c:	d106      	bne.n	8009c9c <_dtoa_r+0x6c4>
 8009c8e:	9a02      	ldr	r2, [sp, #8]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d107      	bne.n	8009ca4 <_dtoa_r+0x6cc>
 8009c94:	2330      	movs	r3, #48	; 0x30
 8009c96:	7013      	strb	r3, [r2, #0]
 8009c98:	3701      	adds	r7, #1
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	781a      	ldrb	r2, [r3, #0]
 8009c9e:	3201      	adds	r2, #1
 8009ca0:	701a      	strb	r2, [r3, #0]
 8009ca2:	e78d      	b.n	8009bc0 <_dtoa_r+0x5e8>
 8009ca4:	461d      	mov	r5, r3
 8009ca6:	e7ec      	b.n	8009c82 <_dtoa_r+0x6aa>
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4ba4      	ldr	r3, [pc, #656]	; (8009f3c <_dtoa_r+0x964>)
 8009cac:	f7f6 fca0 	bl	80005f0 <__aeabi_dmul>
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	460f      	mov	r7, r1
 8009cb8:	f7f6 ff02 	bl	8000ac0 <__aeabi_dcmpeq>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d09a      	beq.n	8009bf6 <_dtoa_r+0x61e>
 8009cc0:	e7ce      	b.n	8009c60 <_dtoa_r+0x688>
 8009cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cc4:	2a00      	cmp	r2, #0
 8009cc6:	f000 80cd 	beq.w	8009e64 <_dtoa_r+0x88c>
 8009cca:	9a07      	ldr	r2, [sp, #28]
 8009ccc:	2a01      	cmp	r2, #1
 8009cce:	f300 80af 	bgt.w	8009e30 <_dtoa_r+0x858>
 8009cd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cd4:	2a00      	cmp	r2, #0
 8009cd6:	f000 80a7 	beq.w	8009e28 <_dtoa_r+0x850>
 8009cda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cde:	9e08      	ldr	r6, [sp, #32]
 8009ce0:	9d05      	ldr	r5, [sp, #20]
 8009ce2:	9a05      	ldr	r2, [sp, #20]
 8009ce4:	441a      	add	r2, r3
 8009ce6:	9205      	str	r2, [sp, #20]
 8009ce8:	9a06      	ldr	r2, [sp, #24]
 8009cea:	2101      	movs	r1, #1
 8009cec:	441a      	add	r2, r3
 8009cee:	4620      	mov	r0, r4
 8009cf0:	9206      	str	r2, [sp, #24]
 8009cf2:	f000 fd43 	bl	800a77c <__i2b>
 8009cf6:	4607      	mov	r7, r0
 8009cf8:	2d00      	cmp	r5, #0
 8009cfa:	dd0c      	ble.n	8009d16 <_dtoa_r+0x73e>
 8009cfc:	9b06      	ldr	r3, [sp, #24]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	dd09      	ble.n	8009d16 <_dtoa_r+0x73e>
 8009d02:	42ab      	cmp	r3, r5
 8009d04:	9a05      	ldr	r2, [sp, #20]
 8009d06:	bfa8      	it	ge
 8009d08:	462b      	movge	r3, r5
 8009d0a:	1ad2      	subs	r2, r2, r3
 8009d0c:	9205      	str	r2, [sp, #20]
 8009d0e:	9a06      	ldr	r2, [sp, #24]
 8009d10:	1aed      	subs	r5, r5, r3
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	9306      	str	r3, [sp, #24]
 8009d16:	9b08      	ldr	r3, [sp, #32]
 8009d18:	b1f3      	cbz	r3, 8009d58 <_dtoa_r+0x780>
 8009d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 80a5 	beq.w	8009e6c <_dtoa_r+0x894>
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	dd10      	ble.n	8009d48 <_dtoa_r+0x770>
 8009d26:	4639      	mov	r1, r7
 8009d28:	4632      	mov	r2, r6
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 fdbc 	bl	800a8a8 <__pow5mult>
 8009d30:	4652      	mov	r2, sl
 8009d32:	4601      	mov	r1, r0
 8009d34:	4607      	mov	r7, r0
 8009d36:	4620      	mov	r0, r4
 8009d38:	f000 fd29 	bl	800a78e <__multiply>
 8009d3c:	4651      	mov	r1, sl
 8009d3e:	4680      	mov	r8, r0
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 fc7b 	bl	800a63c <_Bfree>
 8009d46:	46c2      	mov	sl, r8
 8009d48:	9b08      	ldr	r3, [sp, #32]
 8009d4a:	1b9a      	subs	r2, r3, r6
 8009d4c:	d004      	beq.n	8009d58 <_dtoa_r+0x780>
 8009d4e:	4651      	mov	r1, sl
 8009d50:	4620      	mov	r0, r4
 8009d52:	f000 fda9 	bl	800a8a8 <__pow5mult>
 8009d56:	4682      	mov	sl, r0
 8009d58:	2101      	movs	r1, #1
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 fd0e 	bl	800a77c <__i2b>
 8009d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	4606      	mov	r6, r0
 8009d66:	f340 8083 	ble.w	8009e70 <_dtoa_r+0x898>
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	4601      	mov	r1, r0
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f000 fd9a 	bl	800a8a8 <__pow5mult>
 8009d74:	9b07      	ldr	r3, [sp, #28]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	4606      	mov	r6, r0
 8009d7a:	dd7c      	ble.n	8009e76 <_dtoa_r+0x89e>
 8009d7c:	f04f 0800 	mov.w	r8, #0
 8009d80:	6933      	ldr	r3, [r6, #16]
 8009d82:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d86:	6918      	ldr	r0, [r3, #16]
 8009d88:	f000 fcaa 	bl	800a6e0 <__hi0bits>
 8009d8c:	f1c0 0020 	rsb	r0, r0, #32
 8009d90:	9b06      	ldr	r3, [sp, #24]
 8009d92:	4418      	add	r0, r3
 8009d94:	f010 001f 	ands.w	r0, r0, #31
 8009d98:	f000 8096 	beq.w	8009ec8 <_dtoa_r+0x8f0>
 8009d9c:	f1c0 0320 	rsb	r3, r0, #32
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	f340 8087 	ble.w	8009eb4 <_dtoa_r+0x8dc>
 8009da6:	9b05      	ldr	r3, [sp, #20]
 8009da8:	f1c0 001c 	rsb	r0, r0, #28
 8009dac:	4403      	add	r3, r0
 8009dae:	9305      	str	r3, [sp, #20]
 8009db0:	9b06      	ldr	r3, [sp, #24]
 8009db2:	4405      	add	r5, r0
 8009db4:	4403      	add	r3, r0
 8009db6:	9306      	str	r3, [sp, #24]
 8009db8:	9b05      	ldr	r3, [sp, #20]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	dd05      	ble.n	8009dca <_dtoa_r+0x7f2>
 8009dbe:	4651      	mov	r1, sl
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f000 fdbe 	bl	800a944 <__lshift>
 8009dc8:	4682      	mov	sl, r0
 8009dca:	9b06      	ldr	r3, [sp, #24]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	dd05      	ble.n	8009ddc <_dtoa_r+0x804>
 8009dd0:	4631      	mov	r1, r6
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f000 fdb5 	bl	800a944 <__lshift>
 8009dda:	4606      	mov	r6, r0
 8009ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d074      	beq.n	8009ecc <_dtoa_r+0x8f4>
 8009de2:	4631      	mov	r1, r6
 8009de4:	4650      	mov	r0, sl
 8009de6:	f000 fdfe 	bl	800a9e6 <__mcmp>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	da6e      	bge.n	8009ecc <_dtoa_r+0x8f4>
 8009dee:	2300      	movs	r3, #0
 8009df0:	4651      	mov	r1, sl
 8009df2:	220a      	movs	r2, #10
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 fc38 	bl	800a66a <__multadd>
 8009dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e00:	4682      	mov	sl, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 81a8 	beq.w	800a158 <_dtoa_r+0xb80>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	220a      	movs	r2, #10
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f000 fc2b 	bl	800a66a <__multadd>
 8009e14:	9b04      	ldr	r3, [sp, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	4607      	mov	r7, r0
 8009e1a:	f300 80c8 	bgt.w	8009fae <_dtoa_r+0x9d6>
 8009e1e:	9b07      	ldr	r3, [sp, #28]
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	f340 80c4 	ble.w	8009fae <_dtoa_r+0x9d6>
 8009e26:	e059      	b.n	8009edc <_dtoa_r+0x904>
 8009e28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e2e:	e756      	b.n	8009cde <_dtoa_r+0x706>
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	1e5e      	subs	r6, r3, #1
 8009e34:	9b08      	ldr	r3, [sp, #32]
 8009e36:	42b3      	cmp	r3, r6
 8009e38:	bfbf      	itttt	lt
 8009e3a:	9b08      	ldrlt	r3, [sp, #32]
 8009e3c:	9608      	strlt	r6, [sp, #32]
 8009e3e:	1af2      	sublt	r2, r6, r3
 8009e40:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8009e42:	bfb6      	itet	lt
 8009e44:	189b      	addlt	r3, r3, r2
 8009e46:	1b9e      	subge	r6, r3, r6
 8009e48:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8009e4a:	9b03      	ldr	r3, [sp, #12]
 8009e4c:	bfb8      	it	lt
 8009e4e:	2600      	movlt	r6, #0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	bfb9      	ittee	lt
 8009e54:	9b05      	ldrlt	r3, [sp, #20]
 8009e56:	9a03      	ldrlt	r2, [sp, #12]
 8009e58:	9d05      	ldrge	r5, [sp, #20]
 8009e5a:	9b03      	ldrge	r3, [sp, #12]
 8009e5c:	bfbc      	itt	lt
 8009e5e:	1a9d      	sublt	r5, r3, r2
 8009e60:	2300      	movlt	r3, #0
 8009e62:	e73e      	b.n	8009ce2 <_dtoa_r+0x70a>
 8009e64:	9e08      	ldr	r6, [sp, #32]
 8009e66:	9d05      	ldr	r5, [sp, #20]
 8009e68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e6a:	e745      	b.n	8009cf8 <_dtoa_r+0x720>
 8009e6c:	9a08      	ldr	r2, [sp, #32]
 8009e6e:	e76e      	b.n	8009d4e <_dtoa_r+0x776>
 8009e70:	9b07      	ldr	r3, [sp, #28]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	dc19      	bgt.n	8009eaa <_dtoa_r+0x8d2>
 8009e76:	9b00      	ldr	r3, [sp, #0]
 8009e78:	b9bb      	cbnz	r3, 8009eaa <_dtoa_r+0x8d2>
 8009e7a:	9b01      	ldr	r3, [sp, #4]
 8009e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e80:	b99b      	cbnz	r3, 8009eaa <_dtoa_r+0x8d2>
 8009e82:	9b01      	ldr	r3, [sp, #4]
 8009e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e88:	0d1b      	lsrs	r3, r3, #20
 8009e8a:	051b      	lsls	r3, r3, #20
 8009e8c:	b183      	cbz	r3, 8009eb0 <_dtoa_r+0x8d8>
 8009e8e:	9b05      	ldr	r3, [sp, #20]
 8009e90:	3301      	adds	r3, #1
 8009e92:	9305      	str	r3, [sp, #20]
 8009e94:	9b06      	ldr	r3, [sp, #24]
 8009e96:	3301      	adds	r3, #1
 8009e98:	9306      	str	r3, [sp, #24]
 8009e9a:	f04f 0801 	mov.w	r8, #1
 8009e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f47f af6d 	bne.w	8009d80 <_dtoa_r+0x7a8>
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	e772      	b.n	8009d90 <_dtoa_r+0x7b8>
 8009eaa:	f04f 0800 	mov.w	r8, #0
 8009eae:	e7f6      	b.n	8009e9e <_dtoa_r+0x8c6>
 8009eb0:	4698      	mov	r8, r3
 8009eb2:	e7f4      	b.n	8009e9e <_dtoa_r+0x8c6>
 8009eb4:	d080      	beq.n	8009db8 <_dtoa_r+0x7e0>
 8009eb6:	9a05      	ldr	r2, [sp, #20]
 8009eb8:	331c      	adds	r3, #28
 8009eba:	441a      	add	r2, r3
 8009ebc:	9205      	str	r2, [sp, #20]
 8009ebe:	9a06      	ldr	r2, [sp, #24]
 8009ec0:	441a      	add	r2, r3
 8009ec2:	441d      	add	r5, r3
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	e776      	b.n	8009db6 <_dtoa_r+0x7de>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	e7f4      	b.n	8009eb6 <_dtoa_r+0x8de>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	dc36      	bgt.n	8009f40 <_dtoa_r+0x968>
 8009ed2:	9b07      	ldr	r3, [sp, #28]
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	dd33      	ble.n	8009f40 <_dtoa_r+0x968>
 8009ed8:	9b03      	ldr	r3, [sp, #12]
 8009eda:	9304      	str	r3, [sp, #16]
 8009edc:	9b04      	ldr	r3, [sp, #16]
 8009ede:	b963      	cbnz	r3, 8009efa <_dtoa_r+0x922>
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	2205      	movs	r2, #5
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f000 fbc0 	bl	800a66a <__multadd>
 8009eea:	4601      	mov	r1, r0
 8009eec:	4606      	mov	r6, r0
 8009eee:	4650      	mov	r0, sl
 8009ef0:	f000 fd79 	bl	800a9e6 <__mcmp>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	f73f adb6 	bgt.w	8009a66 <_dtoa_r+0x48e>
 8009efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efc:	9d02      	ldr	r5, [sp, #8]
 8009efe:	ea6f 0b03 	mvn.w	fp, r3
 8009f02:	2300      	movs	r3, #0
 8009f04:	9303      	str	r3, [sp, #12]
 8009f06:	4631      	mov	r1, r6
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 fb97 	bl	800a63c <_Bfree>
 8009f0e:	2f00      	cmp	r7, #0
 8009f10:	f43f aea6 	beq.w	8009c60 <_dtoa_r+0x688>
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	b12b      	cbz	r3, 8009f24 <_dtoa_r+0x94c>
 8009f18:	42bb      	cmp	r3, r7
 8009f1a:	d003      	beq.n	8009f24 <_dtoa_r+0x94c>
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f000 fb8c 	bl	800a63c <_Bfree>
 8009f24:	4639      	mov	r1, r7
 8009f26:	4620      	mov	r0, r4
 8009f28:	f000 fb88 	bl	800a63c <_Bfree>
 8009f2c:	e698      	b.n	8009c60 <_dtoa_r+0x688>
 8009f2e:	2600      	movs	r6, #0
 8009f30:	4637      	mov	r7, r6
 8009f32:	e7e2      	b.n	8009efa <_dtoa_r+0x922>
 8009f34:	46bb      	mov	fp, r7
 8009f36:	4637      	mov	r7, r6
 8009f38:	e595      	b.n	8009a66 <_dtoa_r+0x48e>
 8009f3a:	bf00      	nop
 8009f3c:	40240000 	.word	0x40240000
 8009f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f42:	bb93      	cbnz	r3, 8009faa <_dtoa_r+0x9d2>
 8009f44:	9b03      	ldr	r3, [sp, #12]
 8009f46:	9304      	str	r3, [sp, #16]
 8009f48:	9d02      	ldr	r5, [sp, #8]
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4650      	mov	r0, sl
 8009f4e:	f7ff fab7 	bl	80094c0 <quorem>
 8009f52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f56:	f805 9b01 	strb.w	r9, [r5], #1
 8009f5a:	9b02      	ldr	r3, [sp, #8]
 8009f5c:	9a04      	ldr	r2, [sp, #16]
 8009f5e:	1aeb      	subs	r3, r5, r3
 8009f60:	429a      	cmp	r2, r3
 8009f62:	f300 80dc 	bgt.w	800a11e <_dtoa_r+0xb46>
 8009f66:	9b02      	ldr	r3, [sp, #8]
 8009f68:	2a01      	cmp	r2, #1
 8009f6a:	bfac      	ite	ge
 8009f6c:	189b      	addge	r3, r3, r2
 8009f6e:	3301      	addlt	r3, #1
 8009f70:	4698      	mov	r8, r3
 8009f72:	2300      	movs	r3, #0
 8009f74:	9303      	str	r3, [sp, #12]
 8009f76:	4651      	mov	r1, sl
 8009f78:	2201      	movs	r2, #1
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 fce2 	bl	800a944 <__lshift>
 8009f80:	4631      	mov	r1, r6
 8009f82:	4682      	mov	sl, r0
 8009f84:	f000 fd2f 	bl	800a9e6 <__mcmp>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	f300 808d 	bgt.w	800a0a8 <_dtoa_r+0xad0>
 8009f8e:	d103      	bne.n	8009f98 <_dtoa_r+0x9c0>
 8009f90:	f019 0f01 	tst.w	r9, #1
 8009f94:	f040 8088 	bne.w	800a0a8 <_dtoa_r+0xad0>
 8009f98:	4645      	mov	r5, r8
 8009f9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f9e:	2b30      	cmp	r3, #48	; 0x30
 8009fa0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009fa4:	d1af      	bne.n	8009f06 <_dtoa_r+0x92e>
 8009fa6:	4615      	mov	r5, r2
 8009fa8:	e7f7      	b.n	8009f9a <_dtoa_r+0x9c2>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	9304      	str	r3, [sp, #16]
 8009fae:	2d00      	cmp	r5, #0
 8009fb0:	dd05      	ble.n	8009fbe <_dtoa_r+0x9e6>
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	462a      	mov	r2, r5
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f000 fcc4 	bl	800a944 <__lshift>
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	f1b8 0f00 	cmp.w	r8, #0
 8009fc2:	d04c      	beq.n	800a05e <_dtoa_r+0xa86>
 8009fc4:	6879      	ldr	r1, [r7, #4]
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f000 fb04 	bl	800a5d4 <_Balloc>
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	3202      	adds	r2, #2
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	0092      	lsls	r2, r2, #2
 8009fd4:	f107 010c 	add.w	r1, r7, #12
 8009fd8:	300c      	adds	r0, #12
 8009fda:	f7fe f9d7 	bl	800838c <memcpy>
 8009fde:	2201      	movs	r2, #1
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 fcae 	bl	800a944 <__lshift>
 8009fe8:	9b00      	ldr	r3, [sp, #0]
 8009fea:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009fee:	9703      	str	r7, [sp, #12]
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	4607      	mov	r7, r0
 8009ff6:	9305      	str	r3, [sp, #20]
 8009ff8:	4631      	mov	r1, r6
 8009ffa:	4650      	mov	r0, sl
 8009ffc:	f7ff fa60 	bl	80094c0 <quorem>
 800a000:	9903      	ldr	r1, [sp, #12]
 800a002:	4605      	mov	r5, r0
 800a004:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a008:	4650      	mov	r0, sl
 800a00a:	f000 fcec 	bl	800a9e6 <__mcmp>
 800a00e:	463a      	mov	r2, r7
 800a010:	9000      	str	r0, [sp, #0]
 800a012:	4631      	mov	r1, r6
 800a014:	4620      	mov	r0, r4
 800a016:	f000 fd00 	bl	800aa1a <__mdiff>
 800a01a:	68c3      	ldr	r3, [r0, #12]
 800a01c:	4602      	mov	r2, r0
 800a01e:	bb03      	cbnz	r3, 800a062 <_dtoa_r+0xa8a>
 800a020:	4601      	mov	r1, r0
 800a022:	9006      	str	r0, [sp, #24]
 800a024:	4650      	mov	r0, sl
 800a026:	f000 fcde 	bl	800a9e6 <__mcmp>
 800a02a:	9a06      	ldr	r2, [sp, #24]
 800a02c:	4603      	mov	r3, r0
 800a02e:	4611      	mov	r1, r2
 800a030:	4620      	mov	r0, r4
 800a032:	9306      	str	r3, [sp, #24]
 800a034:	f000 fb02 	bl	800a63c <_Bfree>
 800a038:	9b06      	ldr	r3, [sp, #24]
 800a03a:	b9a3      	cbnz	r3, 800a066 <_dtoa_r+0xa8e>
 800a03c:	9a07      	ldr	r2, [sp, #28]
 800a03e:	b992      	cbnz	r2, 800a066 <_dtoa_r+0xa8e>
 800a040:	9a05      	ldr	r2, [sp, #20]
 800a042:	b982      	cbnz	r2, 800a066 <_dtoa_r+0xa8e>
 800a044:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a048:	d029      	beq.n	800a09e <_dtoa_r+0xac6>
 800a04a:	9b00      	ldr	r3, [sp, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dd01      	ble.n	800a054 <_dtoa_r+0xa7c>
 800a050:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800a054:	f108 0501 	add.w	r5, r8, #1
 800a058:	f888 9000 	strb.w	r9, [r8]
 800a05c:	e753      	b.n	8009f06 <_dtoa_r+0x92e>
 800a05e:	4638      	mov	r0, r7
 800a060:	e7c2      	b.n	8009fe8 <_dtoa_r+0xa10>
 800a062:	2301      	movs	r3, #1
 800a064:	e7e3      	b.n	800a02e <_dtoa_r+0xa56>
 800a066:	9a00      	ldr	r2, [sp, #0]
 800a068:	2a00      	cmp	r2, #0
 800a06a:	db04      	blt.n	800a076 <_dtoa_r+0xa9e>
 800a06c:	d125      	bne.n	800a0ba <_dtoa_r+0xae2>
 800a06e:	9a07      	ldr	r2, [sp, #28]
 800a070:	bb1a      	cbnz	r2, 800a0ba <_dtoa_r+0xae2>
 800a072:	9a05      	ldr	r2, [sp, #20]
 800a074:	bb0a      	cbnz	r2, 800a0ba <_dtoa_r+0xae2>
 800a076:	2b00      	cmp	r3, #0
 800a078:	ddec      	ble.n	800a054 <_dtoa_r+0xa7c>
 800a07a:	4651      	mov	r1, sl
 800a07c:	2201      	movs	r2, #1
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 fc60 	bl	800a944 <__lshift>
 800a084:	4631      	mov	r1, r6
 800a086:	4682      	mov	sl, r0
 800a088:	f000 fcad 	bl	800a9e6 <__mcmp>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	dc03      	bgt.n	800a098 <_dtoa_r+0xac0>
 800a090:	d1e0      	bne.n	800a054 <_dtoa_r+0xa7c>
 800a092:	f019 0f01 	tst.w	r9, #1
 800a096:	d0dd      	beq.n	800a054 <_dtoa_r+0xa7c>
 800a098:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a09c:	d1d8      	bne.n	800a050 <_dtoa_r+0xa78>
 800a09e:	2339      	movs	r3, #57	; 0x39
 800a0a0:	f888 3000 	strb.w	r3, [r8]
 800a0a4:	f108 0801 	add.w	r8, r8, #1
 800a0a8:	4645      	mov	r5, r8
 800a0aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0ae:	2b39      	cmp	r3, #57	; 0x39
 800a0b0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a0b4:	d03b      	beq.n	800a12e <_dtoa_r+0xb56>
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	e040      	b.n	800a13c <_dtoa_r+0xb64>
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f108 0501 	add.w	r5, r8, #1
 800a0c0:	dd05      	ble.n	800a0ce <_dtoa_r+0xaf6>
 800a0c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0c6:	d0ea      	beq.n	800a09e <_dtoa_r+0xac6>
 800a0c8:	f109 0901 	add.w	r9, r9, #1
 800a0cc:	e7c4      	b.n	800a058 <_dtoa_r+0xa80>
 800a0ce:	9b02      	ldr	r3, [sp, #8]
 800a0d0:	9a04      	ldr	r2, [sp, #16]
 800a0d2:	f805 9c01 	strb.w	r9, [r5, #-1]
 800a0d6:	1aeb      	subs	r3, r5, r3
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	46a8      	mov	r8, r5
 800a0dc:	f43f af4b 	beq.w	8009f76 <_dtoa_r+0x99e>
 800a0e0:	4651      	mov	r1, sl
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	220a      	movs	r2, #10
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f000 fabf 	bl	800a66a <__multadd>
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	9903      	ldr	r1, [sp, #12]
 800a0f0:	42bb      	cmp	r3, r7
 800a0f2:	4682      	mov	sl, r0
 800a0f4:	f04f 0300 	mov.w	r3, #0
 800a0f8:	f04f 020a 	mov.w	r2, #10
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	d104      	bne.n	800a10a <_dtoa_r+0xb32>
 800a100:	f000 fab3 	bl	800a66a <__multadd>
 800a104:	9003      	str	r0, [sp, #12]
 800a106:	4607      	mov	r7, r0
 800a108:	e776      	b.n	8009ff8 <_dtoa_r+0xa20>
 800a10a:	f000 faae 	bl	800a66a <__multadd>
 800a10e:	2300      	movs	r3, #0
 800a110:	9003      	str	r0, [sp, #12]
 800a112:	220a      	movs	r2, #10
 800a114:	4639      	mov	r1, r7
 800a116:	4620      	mov	r0, r4
 800a118:	f000 faa7 	bl	800a66a <__multadd>
 800a11c:	e7f3      	b.n	800a106 <_dtoa_r+0xb2e>
 800a11e:	4651      	mov	r1, sl
 800a120:	2300      	movs	r3, #0
 800a122:	220a      	movs	r2, #10
 800a124:	4620      	mov	r0, r4
 800a126:	f000 faa0 	bl	800a66a <__multadd>
 800a12a:	4682      	mov	sl, r0
 800a12c:	e70d      	b.n	8009f4a <_dtoa_r+0x972>
 800a12e:	9b02      	ldr	r3, [sp, #8]
 800a130:	4293      	cmp	r3, r2
 800a132:	d105      	bne.n	800a140 <_dtoa_r+0xb68>
 800a134:	9a02      	ldr	r2, [sp, #8]
 800a136:	f10b 0b01 	add.w	fp, fp, #1
 800a13a:	2331      	movs	r3, #49	; 0x31
 800a13c:	7013      	strb	r3, [r2, #0]
 800a13e:	e6e2      	b.n	8009f06 <_dtoa_r+0x92e>
 800a140:	4615      	mov	r5, r2
 800a142:	e7b2      	b.n	800a0aa <_dtoa_r+0xad2>
 800a144:	4b09      	ldr	r3, [pc, #36]	; (800a16c <_dtoa_r+0xb94>)
 800a146:	f7ff baae 	b.w	80096a6 <_dtoa_r+0xce>
 800a14a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f47f aa88 	bne.w	8009662 <_dtoa_r+0x8a>
 800a152:	4b07      	ldr	r3, [pc, #28]	; (800a170 <_dtoa_r+0xb98>)
 800a154:	f7ff baa7 	b.w	80096a6 <_dtoa_r+0xce>
 800a158:	9b04      	ldr	r3, [sp, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f73f aef4 	bgt.w	8009f48 <_dtoa_r+0x970>
 800a160:	9b07      	ldr	r3, [sp, #28]
 800a162:	2b02      	cmp	r3, #2
 800a164:	f77f aef0 	ble.w	8009f48 <_dtoa_r+0x970>
 800a168:	e6b8      	b.n	8009edc <_dtoa_r+0x904>
 800a16a:	bf00      	nop
 800a16c:	0800b6e6 	.word	0x0800b6e6
 800a170:	0800b708 	.word	0x0800b708

0800a174 <_localeconv_r>:
 800a174:	4b04      	ldr	r3, [pc, #16]	; (800a188 <_localeconv_r+0x14>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6a18      	ldr	r0, [r3, #32]
 800a17a:	4b04      	ldr	r3, [pc, #16]	; (800a18c <_localeconv_r+0x18>)
 800a17c:	2800      	cmp	r0, #0
 800a17e:	bf08      	it	eq
 800a180:	4618      	moveq	r0, r3
 800a182:	30f0      	adds	r0, #240	; 0xf0
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	20000060 	.word	0x20000060
 800a18c:	20000564 	.word	0x20000564

0800a190 <malloc>:
 800a190:	4b02      	ldr	r3, [pc, #8]	; (800a19c <malloc+0xc>)
 800a192:	4601      	mov	r1, r0
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	f000 b803 	b.w	800a1a0 <_malloc_r>
 800a19a:	bf00      	nop
 800a19c:	20000060 	.word	0x20000060

0800a1a0 <_malloc_r>:
 800a1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	f101 040b 	add.w	r4, r1, #11
 800a1a8:	2c16      	cmp	r4, #22
 800a1aa:	4681      	mov	r9, r0
 800a1ac:	d907      	bls.n	800a1be <_malloc_r+0x1e>
 800a1ae:	f034 0407 	bics.w	r4, r4, #7
 800a1b2:	d505      	bpl.n	800a1c0 <_malloc_r+0x20>
 800a1b4:	230c      	movs	r3, #12
 800a1b6:	f8c9 3000 	str.w	r3, [r9]
 800a1ba:	2600      	movs	r6, #0
 800a1bc:	e131      	b.n	800a422 <_malloc_r+0x282>
 800a1be:	2410      	movs	r4, #16
 800a1c0:	428c      	cmp	r4, r1
 800a1c2:	d3f7      	bcc.n	800a1b4 <_malloc_r+0x14>
 800a1c4:	4648      	mov	r0, r9
 800a1c6:	f000 f9f9 	bl	800a5bc <__malloc_lock>
 800a1ca:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800a1ce:	4d9c      	ldr	r5, [pc, #624]	; (800a440 <_malloc_r+0x2a0>)
 800a1d0:	d236      	bcs.n	800a240 <_malloc_r+0xa0>
 800a1d2:	f104 0208 	add.w	r2, r4, #8
 800a1d6:	442a      	add	r2, r5
 800a1d8:	f1a2 0108 	sub.w	r1, r2, #8
 800a1dc:	6856      	ldr	r6, [r2, #4]
 800a1de:	428e      	cmp	r6, r1
 800a1e0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800a1e4:	d102      	bne.n	800a1ec <_malloc_r+0x4c>
 800a1e6:	68d6      	ldr	r6, [r2, #12]
 800a1e8:	42b2      	cmp	r2, r6
 800a1ea:	d010      	beq.n	800a20e <_malloc_r+0x6e>
 800a1ec:	6873      	ldr	r3, [r6, #4]
 800a1ee:	68f2      	ldr	r2, [r6, #12]
 800a1f0:	68b1      	ldr	r1, [r6, #8]
 800a1f2:	f023 0303 	bic.w	r3, r3, #3
 800a1f6:	60ca      	str	r2, [r1, #12]
 800a1f8:	4433      	add	r3, r6
 800a1fa:	6091      	str	r1, [r2, #8]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	f042 0201 	orr.w	r2, r2, #1
 800a202:	605a      	str	r2, [r3, #4]
 800a204:	4648      	mov	r0, r9
 800a206:	f000 f9df 	bl	800a5c8 <__malloc_unlock>
 800a20a:	3608      	adds	r6, #8
 800a20c:	e109      	b.n	800a422 <_malloc_r+0x282>
 800a20e:	3302      	adds	r3, #2
 800a210:	4a8c      	ldr	r2, [pc, #560]	; (800a444 <_malloc_r+0x2a4>)
 800a212:	692e      	ldr	r6, [r5, #16]
 800a214:	4296      	cmp	r6, r2
 800a216:	4611      	mov	r1, r2
 800a218:	d06d      	beq.n	800a2f6 <_malloc_r+0x156>
 800a21a:	6870      	ldr	r0, [r6, #4]
 800a21c:	f020 0003 	bic.w	r0, r0, #3
 800a220:	1b07      	subs	r7, r0, r4
 800a222:	2f0f      	cmp	r7, #15
 800a224:	dd47      	ble.n	800a2b6 <_malloc_r+0x116>
 800a226:	1933      	adds	r3, r6, r4
 800a228:	f044 0401 	orr.w	r4, r4, #1
 800a22c:	6074      	str	r4, [r6, #4]
 800a22e:	616b      	str	r3, [r5, #20]
 800a230:	612b      	str	r3, [r5, #16]
 800a232:	60da      	str	r2, [r3, #12]
 800a234:	609a      	str	r2, [r3, #8]
 800a236:	f047 0201 	orr.w	r2, r7, #1
 800a23a:	605a      	str	r2, [r3, #4]
 800a23c:	5037      	str	r7, [r6, r0]
 800a23e:	e7e1      	b.n	800a204 <_malloc_r+0x64>
 800a240:	0a63      	lsrs	r3, r4, #9
 800a242:	d02a      	beq.n	800a29a <_malloc_r+0xfa>
 800a244:	2b04      	cmp	r3, #4
 800a246:	d812      	bhi.n	800a26e <_malloc_r+0xce>
 800a248:	09a3      	lsrs	r3, r4, #6
 800a24a:	3338      	adds	r3, #56	; 0x38
 800a24c:	1c5a      	adds	r2, r3, #1
 800a24e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800a252:	f1a2 0008 	sub.w	r0, r2, #8
 800a256:	6856      	ldr	r6, [r2, #4]
 800a258:	4286      	cmp	r6, r0
 800a25a:	d006      	beq.n	800a26a <_malloc_r+0xca>
 800a25c:	6872      	ldr	r2, [r6, #4]
 800a25e:	f022 0203 	bic.w	r2, r2, #3
 800a262:	1b11      	subs	r1, r2, r4
 800a264:	290f      	cmp	r1, #15
 800a266:	dd1c      	ble.n	800a2a2 <_malloc_r+0x102>
 800a268:	3b01      	subs	r3, #1
 800a26a:	3301      	adds	r3, #1
 800a26c:	e7d0      	b.n	800a210 <_malloc_r+0x70>
 800a26e:	2b14      	cmp	r3, #20
 800a270:	d801      	bhi.n	800a276 <_malloc_r+0xd6>
 800a272:	335b      	adds	r3, #91	; 0x5b
 800a274:	e7ea      	b.n	800a24c <_malloc_r+0xac>
 800a276:	2b54      	cmp	r3, #84	; 0x54
 800a278:	d802      	bhi.n	800a280 <_malloc_r+0xe0>
 800a27a:	0b23      	lsrs	r3, r4, #12
 800a27c:	336e      	adds	r3, #110	; 0x6e
 800a27e:	e7e5      	b.n	800a24c <_malloc_r+0xac>
 800a280:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a284:	d802      	bhi.n	800a28c <_malloc_r+0xec>
 800a286:	0be3      	lsrs	r3, r4, #15
 800a288:	3377      	adds	r3, #119	; 0x77
 800a28a:	e7df      	b.n	800a24c <_malloc_r+0xac>
 800a28c:	f240 5254 	movw	r2, #1364	; 0x554
 800a290:	4293      	cmp	r3, r2
 800a292:	d804      	bhi.n	800a29e <_malloc_r+0xfe>
 800a294:	0ca3      	lsrs	r3, r4, #18
 800a296:	337c      	adds	r3, #124	; 0x7c
 800a298:	e7d8      	b.n	800a24c <_malloc_r+0xac>
 800a29a:	233f      	movs	r3, #63	; 0x3f
 800a29c:	e7d6      	b.n	800a24c <_malloc_r+0xac>
 800a29e:	237e      	movs	r3, #126	; 0x7e
 800a2a0:	e7d4      	b.n	800a24c <_malloc_r+0xac>
 800a2a2:	2900      	cmp	r1, #0
 800a2a4:	68f1      	ldr	r1, [r6, #12]
 800a2a6:	db04      	blt.n	800a2b2 <_malloc_r+0x112>
 800a2a8:	68b3      	ldr	r3, [r6, #8]
 800a2aa:	60d9      	str	r1, [r3, #12]
 800a2ac:	608b      	str	r3, [r1, #8]
 800a2ae:	18b3      	adds	r3, r6, r2
 800a2b0:	e7a4      	b.n	800a1fc <_malloc_r+0x5c>
 800a2b2:	460e      	mov	r6, r1
 800a2b4:	e7d0      	b.n	800a258 <_malloc_r+0xb8>
 800a2b6:	2f00      	cmp	r7, #0
 800a2b8:	616a      	str	r2, [r5, #20]
 800a2ba:	612a      	str	r2, [r5, #16]
 800a2bc:	db05      	blt.n	800a2ca <_malloc_r+0x12a>
 800a2be:	4430      	add	r0, r6
 800a2c0:	6843      	ldr	r3, [r0, #4]
 800a2c2:	f043 0301 	orr.w	r3, r3, #1
 800a2c6:	6043      	str	r3, [r0, #4]
 800a2c8:	e79c      	b.n	800a204 <_malloc_r+0x64>
 800a2ca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a2ce:	d244      	bcs.n	800a35a <_malloc_r+0x1ba>
 800a2d0:	08c0      	lsrs	r0, r0, #3
 800a2d2:	1087      	asrs	r7, r0, #2
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	fa02 f707 	lsl.w	r7, r2, r7
 800a2da:	686a      	ldr	r2, [r5, #4]
 800a2dc:	3001      	adds	r0, #1
 800a2de:	433a      	orrs	r2, r7
 800a2e0:	606a      	str	r2, [r5, #4]
 800a2e2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a2e6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800a2ea:	60b7      	str	r7, [r6, #8]
 800a2ec:	3a08      	subs	r2, #8
 800a2ee:	60f2      	str	r2, [r6, #12]
 800a2f0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800a2f4:	60fe      	str	r6, [r7, #12]
 800a2f6:	2001      	movs	r0, #1
 800a2f8:	109a      	asrs	r2, r3, #2
 800a2fa:	fa00 f202 	lsl.w	r2, r0, r2
 800a2fe:	6868      	ldr	r0, [r5, #4]
 800a300:	4282      	cmp	r2, r0
 800a302:	f200 80a1 	bhi.w	800a448 <_malloc_r+0x2a8>
 800a306:	4202      	tst	r2, r0
 800a308:	d106      	bne.n	800a318 <_malloc_r+0x178>
 800a30a:	f023 0303 	bic.w	r3, r3, #3
 800a30e:	0052      	lsls	r2, r2, #1
 800a310:	4202      	tst	r2, r0
 800a312:	f103 0304 	add.w	r3, r3, #4
 800a316:	d0fa      	beq.n	800a30e <_malloc_r+0x16e>
 800a318:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800a31c:	46e0      	mov	r8, ip
 800a31e:	469e      	mov	lr, r3
 800a320:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800a324:	4546      	cmp	r6, r8
 800a326:	d153      	bne.n	800a3d0 <_malloc_r+0x230>
 800a328:	f10e 0e01 	add.w	lr, lr, #1
 800a32c:	f01e 0f03 	tst.w	lr, #3
 800a330:	f108 0808 	add.w	r8, r8, #8
 800a334:	d1f4      	bne.n	800a320 <_malloc_r+0x180>
 800a336:	0798      	lsls	r0, r3, #30
 800a338:	d179      	bne.n	800a42e <_malloc_r+0x28e>
 800a33a:	686b      	ldr	r3, [r5, #4]
 800a33c:	ea23 0302 	bic.w	r3, r3, r2
 800a340:	606b      	str	r3, [r5, #4]
 800a342:	6868      	ldr	r0, [r5, #4]
 800a344:	0052      	lsls	r2, r2, #1
 800a346:	4282      	cmp	r2, r0
 800a348:	d87e      	bhi.n	800a448 <_malloc_r+0x2a8>
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	d07c      	beq.n	800a448 <_malloc_r+0x2a8>
 800a34e:	4673      	mov	r3, lr
 800a350:	4202      	tst	r2, r0
 800a352:	d1e1      	bne.n	800a318 <_malloc_r+0x178>
 800a354:	3304      	adds	r3, #4
 800a356:	0052      	lsls	r2, r2, #1
 800a358:	e7fa      	b.n	800a350 <_malloc_r+0x1b0>
 800a35a:	0a42      	lsrs	r2, r0, #9
 800a35c:	2a04      	cmp	r2, #4
 800a35e:	d815      	bhi.n	800a38c <_malloc_r+0x1ec>
 800a360:	0982      	lsrs	r2, r0, #6
 800a362:	3238      	adds	r2, #56	; 0x38
 800a364:	1c57      	adds	r7, r2, #1
 800a366:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800a36a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800a36e:	45be      	cmp	lr, r7
 800a370:	d126      	bne.n	800a3c0 <_malloc_r+0x220>
 800a372:	2001      	movs	r0, #1
 800a374:	1092      	asrs	r2, r2, #2
 800a376:	fa00 f202 	lsl.w	r2, r0, r2
 800a37a:	6868      	ldr	r0, [r5, #4]
 800a37c:	4310      	orrs	r0, r2
 800a37e:	6068      	str	r0, [r5, #4]
 800a380:	f8c6 e00c 	str.w	lr, [r6, #12]
 800a384:	60b7      	str	r7, [r6, #8]
 800a386:	f8ce 6008 	str.w	r6, [lr, #8]
 800a38a:	e7b3      	b.n	800a2f4 <_malloc_r+0x154>
 800a38c:	2a14      	cmp	r2, #20
 800a38e:	d801      	bhi.n	800a394 <_malloc_r+0x1f4>
 800a390:	325b      	adds	r2, #91	; 0x5b
 800a392:	e7e7      	b.n	800a364 <_malloc_r+0x1c4>
 800a394:	2a54      	cmp	r2, #84	; 0x54
 800a396:	d802      	bhi.n	800a39e <_malloc_r+0x1fe>
 800a398:	0b02      	lsrs	r2, r0, #12
 800a39a:	326e      	adds	r2, #110	; 0x6e
 800a39c:	e7e2      	b.n	800a364 <_malloc_r+0x1c4>
 800a39e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a3a2:	d802      	bhi.n	800a3aa <_malloc_r+0x20a>
 800a3a4:	0bc2      	lsrs	r2, r0, #15
 800a3a6:	3277      	adds	r2, #119	; 0x77
 800a3a8:	e7dc      	b.n	800a364 <_malloc_r+0x1c4>
 800a3aa:	f240 5754 	movw	r7, #1364	; 0x554
 800a3ae:	42ba      	cmp	r2, r7
 800a3b0:	bf9a      	itte	ls
 800a3b2:	0c82      	lsrls	r2, r0, #18
 800a3b4:	327c      	addls	r2, #124	; 0x7c
 800a3b6:	227e      	movhi	r2, #126	; 0x7e
 800a3b8:	e7d4      	b.n	800a364 <_malloc_r+0x1c4>
 800a3ba:	68bf      	ldr	r7, [r7, #8]
 800a3bc:	45be      	cmp	lr, r7
 800a3be:	d004      	beq.n	800a3ca <_malloc_r+0x22a>
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	f022 0203 	bic.w	r2, r2, #3
 800a3c6:	4290      	cmp	r0, r2
 800a3c8:	d3f7      	bcc.n	800a3ba <_malloc_r+0x21a>
 800a3ca:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800a3ce:	e7d7      	b.n	800a380 <_malloc_r+0x1e0>
 800a3d0:	6870      	ldr	r0, [r6, #4]
 800a3d2:	68f7      	ldr	r7, [r6, #12]
 800a3d4:	f020 0003 	bic.w	r0, r0, #3
 800a3d8:	eba0 0a04 	sub.w	sl, r0, r4
 800a3dc:	f1ba 0f0f 	cmp.w	sl, #15
 800a3e0:	dd10      	ble.n	800a404 <_malloc_r+0x264>
 800a3e2:	68b2      	ldr	r2, [r6, #8]
 800a3e4:	1933      	adds	r3, r6, r4
 800a3e6:	f044 0401 	orr.w	r4, r4, #1
 800a3ea:	6074      	str	r4, [r6, #4]
 800a3ec:	60d7      	str	r7, [r2, #12]
 800a3ee:	60ba      	str	r2, [r7, #8]
 800a3f0:	f04a 0201 	orr.w	r2, sl, #1
 800a3f4:	616b      	str	r3, [r5, #20]
 800a3f6:	612b      	str	r3, [r5, #16]
 800a3f8:	60d9      	str	r1, [r3, #12]
 800a3fa:	6099      	str	r1, [r3, #8]
 800a3fc:	605a      	str	r2, [r3, #4]
 800a3fe:	f846 a000 	str.w	sl, [r6, r0]
 800a402:	e6ff      	b.n	800a204 <_malloc_r+0x64>
 800a404:	f1ba 0f00 	cmp.w	sl, #0
 800a408:	db0f      	blt.n	800a42a <_malloc_r+0x28a>
 800a40a:	4430      	add	r0, r6
 800a40c:	6843      	ldr	r3, [r0, #4]
 800a40e:	f043 0301 	orr.w	r3, r3, #1
 800a412:	6043      	str	r3, [r0, #4]
 800a414:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800a418:	4648      	mov	r0, r9
 800a41a:	60df      	str	r7, [r3, #12]
 800a41c:	60bb      	str	r3, [r7, #8]
 800a41e:	f000 f8d3 	bl	800a5c8 <__malloc_unlock>
 800a422:	4630      	mov	r0, r6
 800a424:	b003      	add	sp, #12
 800a426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42a:	463e      	mov	r6, r7
 800a42c:	e77a      	b.n	800a324 <_malloc_r+0x184>
 800a42e:	f85c 0908 	ldr.w	r0, [ip], #-8
 800a432:	4584      	cmp	ip, r0
 800a434:	f103 33ff 	add.w	r3, r3, #4294967295
 800a438:	f43f af7d 	beq.w	800a336 <_malloc_r+0x196>
 800a43c:	e781      	b.n	800a342 <_malloc_r+0x1a2>
 800a43e:	bf00      	nop
 800a440:	20000154 	.word	0x20000154
 800a444:	2000015c 	.word	0x2000015c
 800a448:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800a44c:	f8db 6004 	ldr.w	r6, [fp, #4]
 800a450:	f026 0603 	bic.w	r6, r6, #3
 800a454:	42b4      	cmp	r4, r6
 800a456:	d803      	bhi.n	800a460 <_malloc_r+0x2c0>
 800a458:	1b33      	subs	r3, r6, r4
 800a45a:	2b0f      	cmp	r3, #15
 800a45c:	f300 8096 	bgt.w	800a58c <_malloc_r+0x3ec>
 800a460:	4a4f      	ldr	r2, [pc, #316]	; (800a5a0 <_malloc_r+0x400>)
 800a462:	6817      	ldr	r7, [r2, #0]
 800a464:	4a4f      	ldr	r2, [pc, #316]	; (800a5a4 <_malloc_r+0x404>)
 800a466:	6811      	ldr	r1, [r2, #0]
 800a468:	3710      	adds	r7, #16
 800a46a:	3101      	adds	r1, #1
 800a46c:	eb0b 0306 	add.w	r3, fp, r6
 800a470:	4427      	add	r7, r4
 800a472:	d005      	beq.n	800a480 <_malloc_r+0x2e0>
 800a474:	494c      	ldr	r1, [pc, #304]	; (800a5a8 <_malloc_r+0x408>)
 800a476:	3901      	subs	r1, #1
 800a478:	440f      	add	r7, r1
 800a47a:	3101      	adds	r1, #1
 800a47c:	4249      	negs	r1, r1
 800a47e:	400f      	ands	r7, r1
 800a480:	4639      	mov	r1, r7
 800a482:	4648      	mov	r0, r9
 800a484:	9201      	str	r2, [sp, #4]
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	f000 fb74 	bl	800ab74 <_sbrk_r>
 800a48c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a490:	4680      	mov	r8, r0
 800a492:	d056      	beq.n	800a542 <_malloc_r+0x3a2>
 800a494:	9b00      	ldr	r3, [sp, #0]
 800a496:	9a01      	ldr	r2, [sp, #4]
 800a498:	4283      	cmp	r3, r0
 800a49a:	d901      	bls.n	800a4a0 <_malloc_r+0x300>
 800a49c:	45ab      	cmp	fp, r5
 800a49e:	d150      	bne.n	800a542 <_malloc_r+0x3a2>
 800a4a0:	4842      	ldr	r0, [pc, #264]	; (800a5ac <_malloc_r+0x40c>)
 800a4a2:	6801      	ldr	r1, [r0, #0]
 800a4a4:	4543      	cmp	r3, r8
 800a4a6:	eb07 0e01 	add.w	lr, r7, r1
 800a4aa:	f8c0 e000 	str.w	lr, [r0]
 800a4ae:	4940      	ldr	r1, [pc, #256]	; (800a5b0 <_malloc_r+0x410>)
 800a4b0:	4682      	mov	sl, r0
 800a4b2:	d113      	bne.n	800a4dc <_malloc_r+0x33c>
 800a4b4:	420b      	tst	r3, r1
 800a4b6:	d111      	bne.n	800a4dc <_malloc_r+0x33c>
 800a4b8:	68ab      	ldr	r3, [r5, #8]
 800a4ba:	443e      	add	r6, r7
 800a4bc:	f046 0601 	orr.w	r6, r6, #1
 800a4c0:	605e      	str	r6, [r3, #4]
 800a4c2:	4a3c      	ldr	r2, [pc, #240]	; (800a5b4 <_malloc_r+0x414>)
 800a4c4:	f8da 3000 	ldr.w	r3, [sl]
 800a4c8:	6811      	ldr	r1, [r2, #0]
 800a4ca:	428b      	cmp	r3, r1
 800a4cc:	bf88      	it	hi
 800a4ce:	6013      	strhi	r3, [r2, #0]
 800a4d0:	4a39      	ldr	r2, [pc, #228]	; (800a5b8 <_malloc_r+0x418>)
 800a4d2:	6811      	ldr	r1, [r2, #0]
 800a4d4:	428b      	cmp	r3, r1
 800a4d6:	bf88      	it	hi
 800a4d8:	6013      	strhi	r3, [r2, #0]
 800a4da:	e032      	b.n	800a542 <_malloc_r+0x3a2>
 800a4dc:	6810      	ldr	r0, [r2, #0]
 800a4de:	3001      	adds	r0, #1
 800a4e0:	bf1b      	ittet	ne
 800a4e2:	eba8 0303 	subne.w	r3, r8, r3
 800a4e6:	4473      	addne	r3, lr
 800a4e8:	f8c2 8000 	streq.w	r8, [r2]
 800a4ec:	f8ca 3000 	strne.w	r3, [sl]
 800a4f0:	f018 0007 	ands.w	r0, r8, #7
 800a4f4:	bf1c      	itt	ne
 800a4f6:	f1c0 0008 	rsbne	r0, r0, #8
 800a4fa:	4480      	addne	r8, r0
 800a4fc:	4b2a      	ldr	r3, [pc, #168]	; (800a5a8 <_malloc_r+0x408>)
 800a4fe:	4447      	add	r7, r8
 800a500:	4418      	add	r0, r3
 800a502:	400f      	ands	r7, r1
 800a504:	1bc7      	subs	r7, r0, r7
 800a506:	4639      	mov	r1, r7
 800a508:	4648      	mov	r0, r9
 800a50a:	f000 fb33 	bl	800ab74 <_sbrk_r>
 800a50e:	1c43      	adds	r3, r0, #1
 800a510:	bf08      	it	eq
 800a512:	4640      	moveq	r0, r8
 800a514:	f8da 3000 	ldr.w	r3, [sl]
 800a518:	f8c5 8008 	str.w	r8, [r5, #8]
 800a51c:	bf08      	it	eq
 800a51e:	2700      	moveq	r7, #0
 800a520:	eba0 0008 	sub.w	r0, r0, r8
 800a524:	443b      	add	r3, r7
 800a526:	4407      	add	r7, r0
 800a528:	f047 0701 	orr.w	r7, r7, #1
 800a52c:	45ab      	cmp	fp, r5
 800a52e:	f8ca 3000 	str.w	r3, [sl]
 800a532:	f8c8 7004 	str.w	r7, [r8, #4]
 800a536:	d0c4      	beq.n	800a4c2 <_malloc_r+0x322>
 800a538:	2e0f      	cmp	r6, #15
 800a53a:	d810      	bhi.n	800a55e <_malloc_r+0x3be>
 800a53c:	2301      	movs	r3, #1
 800a53e:	f8c8 3004 	str.w	r3, [r8, #4]
 800a542:	68ab      	ldr	r3, [r5, #8]
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	f022 0203 	bic.w	r2, r2, #3
 800a54a:	4294      	cmp	r4, r2
 800a54c:	eba2 0304 	sub.w	r3, r2, r4
 800a550:	d801      	bhi.n	800a556 <_malloc_r+0x3b6>
 800a552:	2b0f      	cmp	r3, #15
 800a554:	dc1a      	bgt.n	800a58c <_malloc_r+0x3ec>
 800a556:	4648      	mov	r0, r9
 800a558:	f000 f836 	bl	800a5c8 <__malloc_unlock>
 800a55c:	e62d      	b.n	800a1ba <_malloc_r+0x1a>
 800a55e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a562:	3e0c      	subs	r6, #12
 800a564:	f026 0607 	bic.w	r6, r6, #7
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	4333      	orrs	r3, r6
 800a56e:	f8cb 3004 	str.w	r3, [fp, #4]
 800a572:	eb0b 0306 	add.w	r3, fp, r6
 800a576:	2205      	movs	r2, #5
 800a578:	2e0f      	cmp	r6, #15
 800a57a:	605a      	str	r2, [r3, #4]
 800a57c:	609a      	str	r2, [r3, #8]
 800a57e:	d9a0      	bls.n	800a4c2 <_malloc_r+0x322>
 800a580:	f10b 0108 	add.w	r1, fp, #8
 800a584:	4648      	mov	r0, r9
 800a586:	f000 fc03 	bl	800ad90 <_free_r>
 800a58a:	e79a      	b.n	800a4c2 <_malloc_r+0x322>
 800a58c:	68ae      	ldr	r6, [r5, #8]
 800a58e:	f044 0201 	orr.w	r2, r4, #1
 800a592:	4434      	add	r4, r6
 800a594:	f043 0301 	orr.w	r3, r3, #1
 800a598:	6072      	str	r2, [r6, #4]
 800a59a:	60ac      	str	r4, [r5, #8]
 800a59c:	6063      	str	r3, [r4, #4]
 800a59e:	e631      	b.n	800a204 <_malloc_r+0x64>
 800a5a0:	200008b0 	.word	0x200008b0
 800a5a4:	2000055c 	.word	0x2000055c
 800a5a8:	00000080 	.word	0x00000080
 800a5ac:	20000880 	.word	0x20000880
 800a5b0:	0000007f 	.word	0x0000007f
 800a5b4:	200008a8 	.word	0x200008a8
 800a5b8:	200008ac 	.word	0x200008ac

0800a5bc <__malloc_lock>:
 800a5bc:	4801      	ldr	r0, [pc, #4]	; (800a5c4 <__malloc_lock+0x8>)
 800a5be:	f000 bca3 	b.w	800af08 <__retarget_lock_acquire_recursive>
 800a5c2:	bf00      	nop
 800a5c4:	2000173c 	.word	0x2000173c

0800a5c8 <__malloc_unlock>:
 800a5c8:	4801      	ldr	r0, [pc, #4]	; (800a5d0 <__malloc_unlock+0x8>)
 800a5ca:	f000 bc9e 	b.w	800af0a <__retarget_lock_release_recursive>
 800a5ce:	bf00      	nop
 800a5d0:	2000173c 	.word	0x2000173c

0800a5d4 <_Balloc>:
 800a5d4:	b570      	push	{r4, r5, r6, lr}
 800a5d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5d8:	4604      	mov	r4, r0
 800a5da:	460e      	mov	r6, r1
 800a5dc:	b93d      	cbnz	r5, 800a5ee <_Balloc+0x1a>
 800a5de:	2010      	movs	r0, #16
 800a5e0:	f7ff fdd6 	bl	800a190 <malloc>
 800a5e4:	6260      	str	r0, [r4, #36]	; 0x24
 800a5e6:	6045      	str	r5, [r0, #4]
 800a5e8:	6085      	str	r5, [r0, #8]
 800a5ea:	6005      	str	r5, [r0, #0]
 800a5ec:	60c5      	str	r5, [r0, #12]
 800a5ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a5f0:	68eb      	ldr	r3, [r5, #12]
 800a5f2:	b183      	cbz	r3, 800a616 <_Balloc+0x42>
 800a5f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a5fc:	b9b8      	cbnz	r0, 800a62e <_Balloc+0x5a>
 800a5fe:	2101      	movs	r1, #1
 800a600:	fa01 f506 	lsl.w	r5, r1, r6
 800a604:	1d6a      	adds	r2, r5, #5
 800a606:	0092      	lsls	r2, r2, #2
 800a608:	4620      	mov	r0, r4
 800a60a:	f000 fb3d 	bl	800ac88 <_calloc_r>
 800a60e:	b160      	cbz	r0, 800a62a <_Balloc+0x56>
 800a610:	6046      	str	r6, [r0, #4]
 800a612:	6085      	str	r5, [r0, #8]
 800a614:	e00e      	b.n	800a634 <_Balloc+0x60>
 800a616:	2221      	movs	r2, #33	; 0x21
 800a618:	2104      	movs	r1, #4
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fb34 	bl	800ac88 <_calloc_r>
 800a620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a622:	60e8      	str	r0, [r5, #12]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1e4      	bne.n	800a5f4 <_Balloc+0x20>
 800a62a:	2000      	movs	r0, #0
 800a62c:	bd70      	pop	{r4, r5, r6, pc}
 800a62e:	6802      	ldr	r2, [r0, #0]
 800a630:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a634:	2300      	movs	r3, #0
 800a636:	6103      	str	r3, [r0, #16]
 800a638:	60c3      	str	r3, [r0, #12]
 800a63a:	bd70      	pop	{r4, r5, r6, pc}

0800a63c <_Bfree>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a640:	4606      	mov	r6, r0
 800a642:	460d      	mov	r5, r1
 800a644:	b93c      	cbnz	r4, 800a656 <_Bfree+0x1a>
 800a646:	2010      	movs	r0, #16
 800a648:	f7ff fda2 	bl	800a190 <malloc>
 800a64c:	6270      	str	r0, [r6, #36]	; 0x24
 800a64e:	6044      	str	r4, [r0, #4]
 800a650:	6084      	str	r4, [r0, #8]
 800a652:	6004      	str	r4, [r0, #0]
 800a654:	60c4      	str	r4, [r0, #12]
 800a656:	b13d      	cbz	r5, 800a668 <_Bfree+0x2c>
 800a658:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a65a:	686a      	ldr	r2, [r5, #4]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a662:	6029      	str	r1, [r5, #0]
 800a664:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a668:	bd70      	pop	{r4, r5, r6, pc}

0800a66a <__multadd>:
 800a66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66e:	690d      	ldr	r5, [r1, #16]
 800a670:	461f      	mov	r7, r3
 800a672:	4606      	mov	r6, r0
 800a674:	460c      	mov	r4, r1
 800a676:	f101 0e14 	add.w	lr, r1, #20
 800a67a:	2300      	movs	r3, #0
 800a67c:	f8de 0000 	ldr.w	r0, [lr]
 800a680:	b281      	uxth	r1, r0
 800a682:	fb02 7101 	mla	r1, r2, r1, r7
 800a686:	0c0f      	lsrs	r7, r1, #16
 800a688:	0c00      	lsrs	r0, r0, #16
 800a68a:	fb02 7000 	mla	r0, r2, r0, r7
 800a68e:	b289      	uxth	r1, r1
 800a690:	3301      	adds	r3, #1
 800a692:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a696:	429d      	cmp	r5, r3
 800a698:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a69c:	f84e 1b04 	str.w	r1, [lr], #4
 800a6a0:	dcec      	bgt.n	800a67c <__multadd+0x12>
 800a6a2:	b1d7      	cbz	r7, 800a6da <__multadd+0x70>
 800a6a4:	68a3      	ldr	r3, [r4, #8]
 800a6a6:	429d      	cmp	r5, r3
 800a6a8:	db12      	blt.n	800a6d0 <__multadd+0x66>
 800a6aa:	6861      	ldr	r1, [r4, #4]
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	3101      	adds	r1, #1
 800a6b0:	f7ff ff90 	bl	800a5d4 <_Balloc>
 800a6b4:	6922      	ldr	r2, [r4, #16]
 800a6b6:	3202      	adds	r2, #2
 800a6b8:	f104 010c 	add.w	r1, r4, #12
 800a6bc:	4680      	mov	r8, r0
 800a6be:	0092      	lsls	r2, r2, #2
 800a6c0:	300c      	adds	r0, #12
 800a6c2:	f7fd fe63 	bl	800838c <memcpy>
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f7ff ffb7 	bl	800a63c <_Bfree>
 800a6ce:	4644      	mov	r4, r8
 800a6d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a6d4:	3501      	adds	r5, #1
 800a6d6:	615f      	str	r7, [r3, #20]
 800a6d8:	6125      	str	r5, [r4, #16]
 800a6da:	4620      	mov	r0, r4
 800a6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a6e0 <__hi0bits>:
 800a6e0:	0c02      	lsrs	r2, r0, #16
 800a6e2:	0412      	lsls	r2, r2, #16
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	b9b2      	cbnz	r2, 800a716 <__hi0bits+0x36>
 800a6e8:	0403      	lsls	r3, r0, #16
 800a6ea:	2010      	movs	r0, #16
 800a6ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a6f0:	bf04      	itt	eq
 800a6f2:	021b      	lsleq	r3, r3, #8
 800a6f4:	3008      	addeq	r0, #8
 800a6f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a6fa:	bf04      	itt	eq
 800a6fc:	011b      	lsleq	r3, r3, #4
 800a6fe:	3004      	addeq	r0, #4
 800a700:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a704:	bf04      	itt	eq
 800a706:	009b      	lsleq	r3, r3, #2
 800a708:	3002      	addeq	r0, #2
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	db06      	blt.n	800a71c <__hi0bits+0x3c>
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	d503      	bpl.n	800a71a <__hi0bits+0x3a>
 800a712:	3001      	adds	r0, #1
 800a714:	4770      	bx	lr
 800a716:	2000      	movs	r0, #0
 800a718:	e7e8      	b.n	800a6ec <__hi0bits+0xc>
 800a71a:	2020      	movs	r0, #32
 800a71c:	4770      	bx	lr

0800a71e <__lo0bits>:
 800a71e:	6803      	ldr	r3, [r0, #0]
 800a720:	f013 0207 	ands.w	r2, r3, #7
 800a724:	4601      	mov	r1, r0
 800a726:	d00b      	beq.n	800a740 <__lo0bits+0x22>
 800a728:	07da      	lsls	r2, r3, #31
 800a72a:	d423      	bmi.n	800a774 <__lo0bits+0x56>
 800a72c:	0798      	lsls	r0, r3, #30
 800a72e:	bf49      	itett	mi
 800a730:	085b      	lsrmi	r3, r3, #1
 800a732:	089b      	lsrpl	r3, r3, #2
 800a734:	2001      	movmi	r0, #1
 800a736:	600b      	strmi	r3, [r1, #0]
 800a738:	bf5c      	itt	pl
 800a73a:	600b      	strpl	r3, [r1, #0]
 800a73c:	2002      	movpl	r0, #2
 800a73e:	4770      	bx	lr
 800a740:	b298      	uxth	r0, r3
 800a742:	b9a8      	cbnz	r0, 800a770 <__lo0bits+0x52>
 800a744:	0c1b      	lsrs	r3, r3, #16
 800a746:	2010      	movs	r0, #16
 800a748:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a74c:	bf04      	itt	eq
 800a74e:	0a1b      	lsreq	r3, r3, #8
 800a750:	3008      	addeq	r0, #8
 800a752:	071a      	lsls	r2, r3, #28
 800a754:	bf04      	itt	eq
 800a756:	091b      	lsreq	r3, r3, #4
 800a758:	3004      	addeq	r0, #4
 800a75a:	079a      	lsls	r2, r3, #30
 800a75c:	bf04      	itt	eq
 800a75e:	089b      	lsreq	r3, r3, #2
 800a760:	3002      	addeq	r0, #2
 800a762:	07da      	lsls	r2, r3, #31
 800a764:	d402      	bmi.n	800a76c <__lo0bits+0x4e>
 800a766:	085b      	lsrs	r3, r3, #1
 800a768:	d006      	beq.n	800a778 <__lo0bits+0x5a>
 800a76a:	3001      	adds	r0, #1
 800a76c:	600b      	str	r3, [r1, #0]
 800a76e:	4770      	bx	lr
 800a770:	4610      	mov	r0, r2
 800a772:	e7e9      	b.n	800a748 <__lo0bits+0x2a>
 800a774:	2000      	movs	r0, #0
 800a776:	4770      	bx	lr
 800a778:	2020      	movs	r0, #32
 800a77a:	4770      	bx	lr

0800a77c <__i2b>:
 800a77c:	b510      	push	{r4, lr}
 800a77e:	460c      	mov	r4, r1
 800a780:	2101      	movs	r1, #1
 800a782:	f7ff ff27 	bl	800a5d4 <_Balloc>
 800a786:	2201      	movs	r2, #1
 800a788:	6144      	str	r4, [r0, #20]
 800a78a:	6102      	str	r2, [r0, #16]
 800a78c:	bd10      	pop	{r4, pc}

0800a78e <__multiply>:
 800a78e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a792:	4614      	mov	r4, r2
 800a794:	690a      	ldr	r2, [r1, #16]
 800a796:	6923      	ldr	r3, [r4, #16]
 800a798:	429a      	cmp	r2, r3
 800a79a:	bfb8      	it	lt
 800a79c:	460b      	movlt	r3, r1
 800a79e:	4689      	mov	r9, r1
 800a7a0:	bfbc      	itt	lt
 800a7a2:	46a1      	movlt	r9, r4
 800a7a4:	461c      	movlt	r4, r3
 800a7a6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a7aa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a7ae:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a7b2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7b6:	eb07 060a 	add.w	r6, r7, sl
 800a7ba:	429e      	cmp	r6, r3
 800a7bc:	bfc8      	it	gt
 800a7be:	3101      	addgt	r1, #1
 800a7c0:	f7ff ff08 	bl	800a5d4 <_Balloc>
 800a7c4:	f100 0514 	add.w	r5, r0, #20
 800a7c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7cc:	462b      	mov	r3, r5
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	4543      	cmp	r3, r8
 800a7d2:	d316      	bcc.n	800a802 <__multiply+0x74>
 800a7d4:	f104 0214 	add.w	r2, r4, #20
 800a7d8:	f109 0114 	add.w	r1, r9, #20
 800a7dc:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800a7e0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	9c01      	ldr	r4, [sp, #4]
 800a7e8:	4294      	cmp	r4, r2
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	d80c      	bhi.n	800a808 <__multiply+0x7a>
 800a7ee:	2e00      	cmp	r6, #0
 800a7f0:	dd03      	ble.n	800a7fa <__multiply+0x6c>
 800a7f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d054      	beq.n	800a8a4 <__multiply+0x116>
 800a7fa:	6106      	str	r6, [r0, #16]
 800a7fc:	b003      	add	sp, #12
 800a7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a802:	f843 2b04 	str.w	r2, [r3], #4
 800a806:	e7e3      	b.n	800a7d0 <__multiply+0x42>
 800a808:	f8b3 a000 	ldrh.w	sl, [r3]
 800a80c:	3204      	adds	r2, #4
 800a80e:	f1ba 0f00 	cmp.w	sl, #0
 800a812:	d020      	beq.n	800a856 <__multiply+0xc8>
 800a814:	46ae      	mov	lr, r5
 800a816:	4689      	mov	r9, r1
 800a818:	f04f 0c00 	mov.w	ip, #0
 800a81c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a820:	f8be b000 	ldrh.w	fp, [lr]
 800a824:	b2a3      	uxth	r3, r4
 800a826:	fb0a b303 	mla	r3, sl, r3, fp
 800a82a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800a82e:	f8de 4000 	ldr.w	r4, [lr]
 800a832:	4463      	add	r3, ip
 800a834:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a838:	fb0a c40b 	mla	r4, sl, fp, ip
 800a83c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a840:	b29b      	uxth	r3, r3
 800a842:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a846:	454f      	cmp	r7, r9
 800a848:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a84c:	f84e 3b04 	str.w	r3, [lr], #4
 800a850:	d8e4      	bhi.n	800a81c <__multiply+0x8e>
 800a852:	f8ce c000 	str.w	ip, [lr]
 800a856:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800a85a:	f1b9 0f00 	cmp.w	r9, #0
 800a85e:	d01f      	beq.n	800a8a0 <__multiply+0x112>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	46ae      	mov	lr, r5
 800a864:	468c      	mov	ip, r1
 800a866:	f04f 0a00 	mov.w	sl, #0
 800a86a:	f8bc 4000 	ldrh.w	r4, [ip]
 800a86e:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a872:	fb09 b404 	mla	r4, r9, r4, fp
 800a876:	44a2      	add	sl, r4
 800a878:	b29b      	uxth	r3, r3
 800a87a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800a87e:	f84e 3b04 	str.w	r3, [lr], #4
 800a882:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a886:	f8be 4000 	ldrh.w	r4, [lr]
 800a88a:	0c1b      	lsrs	r3, r3, #16
 800a88c:	fb09 4303 	mla	r3, r9, r3, r4
 800a890:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800a894:	4567      	cmp	r7, ip
 800a896:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a89a:	d8e6      	bhi.n	800a86a <__multiply+0xdc>
 800a89c:	f8ce 3000 	str.w	r3, [lr]
 800a8a0:	3504      	adds	r5, #4
 800a8a2:	e7a0      	b.n	800a7e6 <__multiply+0x58>
 800a8a4:	3e01      	subs	r6, #1
 800a8a6:	e7a2      	b.n	800a7ee <__multiply+0x60>

0800a8a8 <__pow5mult>:
 800a8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8ac:	4615      	mov	r5, r2
 800a8ae:	f012 0203 	ands.w	r2, r2, #3
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	460f      	mov	r7, r1
 800a8b6:	d007      	beq.n	800a8c8 <__pow5mult+0x20>
 800a8b8:	3a01      	subs	r2, #1
 800a8ba:	4c21      	ldr	r4, [pc, #132]	; (800a940 <__pow5mult+0x98>)
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8c2:	f7ff fed2 	bl	800a66a <__multadd>
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	10ad      	asrs	r5, r5, #2
 800a8ca:	d035      	beq.n	800a938 <__pow5mult+0x90>
 800a8cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a8ce:	b93c      	cbnz	r4, 800a8e0 <__pow5mult+0x38>
 800a8d0:	2010      	movs	r0, #16
 800a8d2:	f7ff fc5d 	bl	800a190 <malloc>
 800a8d6:	6270      	str	r0, [r6, #36]	; 0x24
 800a8d8:	6044      	str	r4, [r0, #4]
 800a8da:	6084      	str	r4, [r0, #8]
 800a8dc:	6004      	str	r4, [r0, #0]
 800a8de:	60c4      	str	r4, [r0, #12]
 800a8e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a8e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8e8:	b94c      	cbnz	r4, 800a8fe <__pow5mult+0x56>
 800a8ea:	f240 2171 	movw	r1, #625	; 0x271
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7ff ff44 	bl	800a77c <__i2b>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	6003      	str	r3, [r0, #0]
 800a8fe:	f04f 0800 	mov.w	r8, #0
 800a902:	07eb      	lsls	r3, r5, #31
 800a904:	d50a      	bpl.n	800a91c <__pow5mult+0x74>
 800a906:	4639      	mov	r1, r7
 800a908:	4622      	mov	r2, r4
 800a90a:	4630      	mov	r0, r6
 800a90c:	f7ff ff3f 	bl	800a78e <__multiply>
 800a910:	4639      	mov	r1, r7
 800a912:	4681      	mov	r9, r0
 800a914:	4630      	mov	r0, r6
 800a916:	f7ff fe91 	bl	800a63c <_Bfree>
 800a91a:	464f      	mov	r7, r9
 800a91c:	106d      	asrs	r5, r5, #1
 800a91e:	d00b      	beq.n	800a938 <__pow5mult+0x90>
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	b938      	cbnz	r0, 800a934 <__pow5mult+0x8c>
 800a924:	4622      	mov	r2, r4
 800a926:	4621      	mov	r1, r4
 800a928:	4630      	mov	r0, r6
 800a92a:	f7ff ff30 	bl	800a78e <__multiply>
 800a92e:	6020      	str	r0, [r4, #0]
 800a930:	f8c0 8000 	str.w	r8, [r0]
 800a934:	4604      	mov	r4, r0
 800a936:	e7e4      	b.n	800a902 <__pow5mult+0x5a>
 800a938:	4638      	mov	r0, r7
 800a93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a93e:	bf00      	nop
 800a940:	0800b808 	.word	0x0800b808

0800a944 <__lshift>:
 800a944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a948:	460c      	mov	r4, r1
 800a94a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	6849      	ldr	r1, [r1, #4]
 800a952:	eb0a 0903 	add.w	r9, sl, r3
 800a956:	68a3      	ldr	r3, [r4, #8]
 800a958:	4607      	mov	r7, r0
 800a95a:	4616      	mov	r6, r2
 800a95c:	f109 0501 	add.w	r5, r9, #1
 800a960:	42ab      	cmp	r3, r5
 800a962:	db31      	blt.n	800a9c8 <__lshift+0x84>
 800a964:	4638      	mov	r0, r7
 800a966:	f7ff fe35 	bl	800a5d4 <_Balloc>
 800a96a:	2200      	movs	r2, #0
 800a96c:	4680      	mov	r8, r0
 800a96e:	f100 0314 	add.w	r3, r0, #20
 800a972:	4611      	mov	r1, r2
 800a974:	4552      	cmp	r2, sl
 800a976:	db2a      	blt.n	800a9ce <__lshift+0x8a>
 800a978:	6920      	ldr	r0, [r4, #16]
 800a97a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a97e:	f104 0114 	add.w	r1, r4, #20
 800a982:	f016 021f 	ands.w	r2, r6, #31
 800a986:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a98a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800a98e:	d022      	beq.n	800a9d6 <__lshift+0x92>
 800a990:	f1c2 0c20 	rsb	ip, r2, #32
 800a994:	2000      	movs	r0, #0
 800a996:	680e      	ldr	r6, [r1, #0]
 800a998:	4096      	lsls	r6, r2
 800a99a:	4330      	orrs	r0, r6
 800a99c:	f843 0b04 	str.w	r0, [r3], #4
 800a9a0:	f851 0b04 	ldr.w	r0, [r1], #4
 800a9a4:	458e      	cmp	lr, r1
 800a9a6:	fa20 f00c 	lsr.w	r0, r0, ip
 800a9aa:	d8f4      	bhi.n	800a996 <__lshift+0x52>
 800a9ac:	6018      	str	r0, [r3, #0]
 800a9ae:	b108      	cbz	r0, 800a9b4 <__lshift+0x70>
 800a9b0:	f109 0502 	add.w	r5, r9, #2
 800a9b4:	3d01      	subs	r5, #1
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	f8c8 5010 	str.w	r5, [r8, #16]
 800a9bc:	4621      	mov	r1, r4
 800a9be:	f7ff fe3d 	bl	800a63c <_Bfree>
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c8:	3101      	adds	r1, #1
 800a9ca:	005b      	lsls	r3, r3, #1
 800a9cc:	e7c8      	b.n	800a960 <__lshift+0x1c>
 800a9ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	e7ce      	b.n	800a974 <__lshift+0x30>
 800a9d6:	3b04      	subs	r3, #4
 800a9d8:	f851 2b04 	ldr.w	r2, [r1], #4
 800a9dc:	f843 2f04 	str.w	r2, [r3, #4]!
 800a9e0:	458e      	cmp	lr, r1
 800a9e2:	d8f9      	bhi.n	800a9d8 <__lshift+0x94>
 800a9e4:	e7e6      	b.n	800a9b4 <__lshift+0x70>

0800a9e6 <__mcmp>:
 800a9e6:	6903      	ldr	r3, [r0, #16]
 800a9e8:	690a      	ldr	r2, [r1, #16]
 800a9ea:	1a9b      	subs	r3, r3, r2
 800a9ec:	b530      	push	{r4, r5, lr}
 800a9ee:	d10c      	bne.n	800aa0a <__mcmp+0x24>
 800a9f0:	0092      	lsls	r2, r2, #2
 800a9f2:	3014      	adds	r0, #20
 800a9f4:	3114      	adds	r1, #20
 800a9f6:	1884      	adds	r4, r0, r2
 800a9f8:	4411      	add	r1, r2
 800a9fa:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a9fe:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa02:	4295      	cmp	r5, r2
 800aa04:	d003      	beq.n	800aa0e <__mcmp+0x28>
 800aa06:	d305      	bcc.n	800aa14 <__mcmp+0x2e>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	bd30      	pop	{r4, r5, pc}
 800aa0e:	42a0      	cmp	r0, r4
 800aa10:	d3f3      	bcc.n	800a9fa <__mcmp+0x14>
 800aa12:	e7fa      	b.n	800aa0a <__mcmp+0x24>
 800aa14:	f04f 33ff 	mov.w	r3, #4294967295
 800aa18:	e7f7      	b.n	800aa0a <__mcmp+0x24>

0800aa1a <__mdiff>:
 800aa1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa1e:	460d      	mov	r5, r1
 800aa20:	4607      	mov	r7, r0
 800aa22:	4611      	mov	r1, r2
 800aa24:	4628      	mov	r0, r5
 800aa26:	4614      	mov	r4, r2
 800aa28:	f7ff ffdd 	bl	800a9e6 <__mcmp>
 800aa2c:	1e06      	subs	r6, r0, #0
 800aa2e:	d108      	bne.n	800aa42 <__mdiff+0x28>
 800aa30:	4631      	mov	r1, r6
 800aa32:	4638      	mov	r0, r7
 800aa34:	f7ff fdce 	bl	800a5d4 <_Balloc>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	6103      	str	r3, [r0, #16]
 800aa3c:	6146      	str	r6, [r0, #20]
 800aa3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa42:	bfa4      	itt	ge
 800aa44:	4623      	movge	r3, r4
 800aa46:	462c      	movge	r4, r5
 800aa48:	4638      	mov	r0, r7
 800aa4a:	6861      	ldr	r1, [r4, #4]
 800aa4c:	bfa6      	itte	ge
 800aa4e:	461d      	movge	r5, r3
 800aa50:	2600      	movge	r6, #0
 800aa52:	2601      	movlt	r6, #1
 800aa54:	f7ff fdbe 	bl	800a5d4 <_Balloc>
 800aa58:	692b      	ldr	r3, [r5, #16]
 800aa5a:	60c6      	str	r6, [r0, #12]
 800aa5c:	6926      	ldr	r6, [r4, #16]
 800aa5e:	f105 0914 	add.w	r9, r5, #20
 800aa62:	f104 0214 	add.w	r2, r4, #20
 800aa66:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800aa6a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800aa6e:	f100 0514 	add.w	r5, r0, #20
 800aa72:	f04f 0c00 	mov.w	ip, #0
 800aa76:	f852 ab04 	ldr.w	sl, [r2], #4
 800aa7a:	f859 4b04 	ldr.w	r4, [r9], #4
 800aa7e:	fa1c f18a 	uxtah	r1, ip, sl
 800aa82:	b2a3      	uxth	r3, r4
 800aa84:	1ac9      	subs	r1, r1, r3
 800aa86:	0c23      	lsrs	r3, r4, #16
 800aa88:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800aa8c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aa90:	b289      	uxth	r1, r1
 800aa92:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800aa96:	45c8      	cmp	r8, r9
 800aa98:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800aa9c:	4696      	mov	lr, r2
 800aa9e:	f845 3b04 	str.w	r3, [r5], #4
 800aaa2:	d8e8      	bhi.n	800aa76 <__mdiff+0x5c>
 800aaa4:	45be      	cmp	lr, r7
 800aaa6:	d305      	bcc.n	800aab4 <__mdiff+0x9a>
 800aaa8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800aaac:	b18b      	cbz	r3, 800aad2 <__mdiff+0xb8>
 800aaae:	6106      	str	r6, [r0, #16]
 800aab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab4:	f85e 1b04 	ldr.w	r1, [lr], #4
 800aab8:	fa1c f381 	uxtah	r3, ip, r1
 800aabc:	141a      	asrs	r2, r3, #16
 800aabe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aac8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aacc:	f845 3b04 	str.w	r3, [r5], #4
 800aad0:	e7e8      	b.n	800aaa4 <__mdiff+0x8a>
 800aad2:	3e01      	subs	r6, #1
 800aad4:	e7e8      	b.n	800aaa8 <__mdiff+0x8e>

0800aad6 <__d2b>:
 800aad6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aada:	460e      	mov	r6, r1
 800aadc:	2101      	movs	r1, #1
 800aade:	ec59 8b10 	vmov	r8, r9, d0
 800aae2:	4615      	mov	r5, r2
 800aae4:	f7ff fd76 	bl	800a5d4 <_Balloc>
 800aae8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aaec:	4607      	mov	r7, r0
 800aaee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aaf2:	bb34      	cbnz	r4, 800ab42 <__d2b+0x6c>
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	f1b8 0f00 	cmp.w	r8, #0
 800aafa:	d027      	beq.n	800ab4c <__d2b+0x76>
 800aafc:	a802      	add	r0, sp, #8
 800aafe:	f840 8d08 	str.w	r8, [r0, #-8]!
 800ab02:	f7ff fe0c 	bl	800a71e <__lo0bits>
 800ab06:	9900      	ldr	r1, [sp, #0]
 800ab08:	b1f0      	cbz	r0, 800ab48 <__d2b+0x72>
 800ab0a:	9a01      	ldr	r2, [sp, #4]
 800ab0c:	f1c0 0320 	rsb	r3, r0, #32
 800ab10:	fa02 f303 	lsl.w	r3, r2, r3
 800ab14:	430b      	orrs	r3, r1
 800ab16:	40c2      	lsrs	r2, r0
 800ab18:	617b      	str	r3, [r7, #20]
 800ab1a:	9201      	str	r2, [sp, #4]
 800ab1c:	9b01      	ldr	r3, [sp, #4]
 800ab1e:	61bb      	str	r3, [r7, #24]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	bf14      	ite	ne
 800ab24:	2102      	movne	r1, #2
 800ab26:	2101      	moveq	r1, #1
 800ab28:	6139      	str	r1, [r7, #16]
 800ab2a:	b1c4      	cbz	r4, 800ab5e <__d2b+0x88>
 800ab2c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ab30:	4404      	add	r4, r0
 800ab32:	6034      	str	r4, [r6, #0]
 800ab34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab38:	6028      	str	r0, [r5, #0]
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	b003      	add	sp, #12
 800ab3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab46:	e7d5      	b.n	800aaf4 <__d2b+0x1e>
 800ab48:	6179      	str	r1, [r7, #20]
 800ab4a:	e7e7      	b.n	800ab1c <__d2b+0x46>
 800ab4c:	a801      	add	r0, sp, #4
 800ab4e:	f7ff fde6 	bl	800a71e <__lo0bits>
 800ab52:	9b01      	ldr	r3, [sp, #4]
 800ab54:	617b      	str	r3, [r7, #20]
 800ab56:	2101      	movs	r1, #1
 800ab58:	6139      	str	r1, [r7, #16]
 800ab5a:	3020      	adds	r0, #32
 800ab5c:	e7e5      	b.n	800ab2a <__d2b+0x54>
 800ab5e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ab62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab66:	6030      	str	r0, [r6, #0]
 800ab68:	6918      	ldr	r0, [r3, #16]
 800ab6a:	f7ff fdb9 	bl	800a6e0 <__hi0bits>
 800ab6e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ab72:	e7e1      	b.n	800ab38 <__d2b+0x62>

0800ab74 <_sbrk_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4c06      	ldr	r4, [pc, #24]	; (800ab90 <_sbrk_r+0x1c>)
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	4608      	mov	r0, r1
 800ab7e:	6023      	str	r3, [r4, #0]
 800ab80:	f000 fb86 	bl	800b290 <_sbrk>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	d102      	bne.n	800ab8e <_sbrk_r+0x1a>
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	b103      	cbz	r3, 800ab8e <_sbrk_r+0x1a>
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	20001744 	.word	0x20001744

0800ab94 <__ssprint_r>:
 800ab94:	6893      	ldr	r3, [r2, #8]
 800ab96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9a:	4681      	mov	r9, r0
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	4617      	mov	r7, r2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d060      	beq.n	800ac66 <__ssprint_r+0xd2>
 800aba4:	f04f 0b00 	mov.w	fp, #0
 800aba8:	f8d2 a000 	ldr.w	sl, [r2]
 800abac:	465e      	mov	r6, fp
 800abae:	b356      	cbz	r6, 800ac06 <__ssprint_r+0x72>
 800abb0:	68a3      	ldr	r3, [r4, #8]
 800abb2:	429e      	cmp	r6, r3
 800abb4:	d344      	bcc.n	800ac40 <__ssprint_r+0xac>
 800abb6:	89a2      	ldrh	r2, [r4, #12]
 800abb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800abbc:	d03e      	beq.n	800ac3c <__ssprint_r+0xa8>
 800abbe:	6825      	ldr	r5, [r4, #0]
 800abc0:	6921      	ldr	r1, [r4, #16]
 800abc2:	eba5 0801 	sub.w	r8, r5, r1
 800abc6:	6965      	ldr	r5, [r4, #20]
 800abc8:	2302      	movs	r3, #2
 800abca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abce:	fb95 f5f3 	sdiv	r5, r5, r3
 800abd2:	f108 0301 	add.w	r3, r8, #1
 800abd6:	4433      	add	r3, r6
 800abd8:	429d      	cmp	r5, r3
 800abda:	bf38      	it	cc
 800abdc:	461d      	movcc	r5, r3
 800abde:	0553      	lsls	r3, r2, #21
 800abe0:	d546      	bpl.n	800ac70 <__ssprint_r+0xdc>
 800abe2:	4629      	mov	r1, r5
 800abe4:	4648      	mov	r0, r9
 800abe6:	f7ff fadb 	bl	800a1a0 <_malloc_r>
 800abea:	b998      	cbnz	r0, 800ac14 <__ssprint_r+0x80>
 800abec:	230c      	movs	r3, #12
 800abee:	f8c9 3000 	str.w	r3, [r9]
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abf8:	81a3      	strh	r3, [r4, #12]
 800abfa:	2300      	movs	r3, #0
 800abfc:	60bb      	str	r3, [r7, #8]
 800abfe:	607b      	str	r3, [r7, #4]
 800ac00:	f04f 30ff 	mov.w	r0, #4294967295
 800ac04:	e031      	b.n	800ac6a <__ssprint_r+0xd6>
 800ac06:	f8da b000 	ldr.w	fp, [sl]
 800ac0a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800ac0e:	f10a 0a08 	add.w	sl, sl, #8
 800ac12:	e7cc      	b.n	800abae <__ssprint_r+0x1a>
 800ac14:	4642      	mov	r2, r8
 800ac16:	6921      	ldr	r1, [r4, #16]
 800ac18:	9001      	str	r0, [sp, #4]
 800ac1a:	f7fd fbb7 	bl	800838c <memcpy>
 800ac1e:	89a2      	ldrh	r2, [r4, #12]
 800ac20:	9b01      	ldr	r3, [sp, #4]
 800ac22:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ac26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ac2a:	81a2      	strh	r2, [r4, #12]
 800ac2c:	6123      	str	r3, [r4, #16]
 800ac2e:	6165      	str	r5, [r4, #20]
 800ac30:	4443      	add	r3, r8
 800ac32:	eba5 0508 	sub.w	r5, r5, r8
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	60a5      	str	r5, [r4, #8]
 800ac3a:	4633      	mov	r3, r6
 800ac3c:	429e      	cmp	r6, r3
 800ac3e:	d200      	bcs.n	800ac42 <__ssprint_r+0xae>
 800ac40:	4633      	mov	r3, r6
 800ac42:	461a      	mov	r2, r3
 800ac44:	4659      	mov	r1, fp
 800ac46:	6820      	ldr	r0, [r4, #0]
 800ac48:	9301      	str	r3, [sp, #4]
 800ac4a:	f000 f971 	bl	800af30 <memmove>
 800ac4e:	68a2      	ldr	r2, [r4, #8]
 800ac50:	9b01      	ldr	r3, [sp, #4]
 800ac52:	1ad2      	subs	r2, r2, r3
 800ac54:	60a2      	str	r2, [r4, #8]
 800ac56:	6822      	ldr	r2, [r4, #0]
 800ac58:	4413      	add	r3, r2
 800ac5a:	6023      	str	r3, [r4, #0]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	1b9e      	subs	r6, r3, r6
 800ac60:	60be      	str	r6, [r7, #8]
 800ac62:	2e00      	cmp	r6, #0
 800ac64:	d1cf      	bne.n	800ac06 <__ssprint_r+0x72>
 800ac66:	2000      	movs	r0, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	b003      	add	sp, #12
 800ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac70:	462a      	mov	r2, r5
 800ac72:	4648      	mov	r0, r9
 800ac74:	f000 f97e 	bl	800af74 <_realloc_r>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d1d6      	bne.n	800ac2c <__ssprint_r+0x98>
 800ac7e:	6921      	ldr	r1, [r4, #16]
 800ac80:	4648      	mov	r0, r9
 800ac82:	f000 f885 	bl	800ad90 <_free_r>
 800ac86:	e7b1      	b.n	800abec <__ssprint_r+0x58>

0800ac88 <_calloc_r>:
 800ac88:	b510      	push	{r4, lr}
 800ac8a:	4351      	muls	r1, r2
 800ac8c:	f7ff fa88 	bl	800a1a0 <_malloc_r>
 800ac90:	4604      	mov	r4, r0
 800ac92:	b198      	cbz	r0, 800acbc <_calloc_r+0x34>
 800ac94:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ac98:	f022 0203 	bic.w	r2, r2, #3
 800ac9c:	3a04      	subs	r2, #4
 800ac9e:	2a24      	cmp	r2, #36	; 0x24
 800aca0:	d81b      	bhi.n	800acda <_calloc_r+0x52>
 800aca2:	2a13      	cmp	r2, #19
 800aca4:	d917      	bls.n	800acd6 <_calloc_r+0x4e>
 800aca6:	2100      	movs	r1, #0
 800aca8:	2a1b      	cmp	r2, #27
 800acaa:	6001      	str	r1, [r0, #0]
 800acac:	6041      	str	r1, [r0, #4]
 800acae:	d807      	bhi.n	800acc0 <_calloc_r+0x38>
 800acb0:	f100 0308 	add.w	r3, r0, #8
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	605a      	str	r2, [r3, #4]
 800acba:	609a      	str	r2, [r3, #8]
 800acbc:	4620      	mov	r0, r4
 800acbe:	bd10      	pop	{r4, pc}
 800acc0:	2a24      	cmp	r2, #36	; 0x24
 800acc2:	6081      	str	r1, [r0, #8]
 800acc4:	60c1      	str	r1, [r0, #12]
 800acc6:	bf11      	iteee	ne
 800acc8:	f100 0310 	addne.w	r3, r0, #16
 800accc:	6101      	streq	r1, [r0, #16]
 800acce:	f100 0318 	addeq.w	r3, r0, #24
 800acd2:	6141      	streq	r1, [r0, #20]
 800acd4:	e7ee      	b.n	800acb4 <_calloc_r+0x2c>
 800acd6:	4603      	mov	r3, r0
 800acd8:	e7ec      	b.n	800acb4 <_calloc_r+0x2c>
 800acda:	2100      	movs	r1, #0
 800acdc:	f000 f942 	bl	800af64 <memset>
 800ace0:	e7ec      	b.n	800acbc <_calloc_r+0x34>
	...

0800ace4 <_malloc_trim_r>:
 800ace4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace8:	4f25      	ldr	r7, [pc, #148]	; (800ad80 <_malloc_trim_r+0x9c>)
 800acea:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800ad8c <_malloc_trim_r+0xa8>
 800acee:	4689      	mov	r9, r1
 800acf0:	4606      	mov	r6, r0
 800acf2:	f7ff fc63 	bl	800a5bc <__malloc_lock>
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	685d      	ldr	r5, [r3, #4]
 800acfa:	f1a8 0411 	sub.w	r4, r8, #17
 800acfe:	f025 0503 	bic.w	r5, r5, #3
 800ad02:	eba4 0409 	sub.w	r4, r4, r9
 800ad06:	442c      	add	r4, r5
 800ad08:	fbb4 f4f8 	udiv	r4, r4, r8
 800ad0c:	3c01      	subs	r4, #1
 800ad0e:	fb08 f404 	mul.w	r4, r8, r4
 800ad12:	4544      	cmp	r4, r8
 800ad14:	da05      	bge.n	800ad22 <_malloc_trim_r+0x3e>
 800ad16:	4630      	mov	r0, r6
 800ad18:	f7ff fc56 	bl	800a5c8 <__malloc_unlock>
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad22:	2100      	movs	r1, #0
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7ff ff25 	bl	800ab74 <_sbrk_r>
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	442b      	add	r3, r5
 800ad2e:	4298      	cmp	r0, r3
 800ad30:	d1f1      	bne.n	800ad16 <_malloc_trim_r+0x32>
 800ad32:	4261      	negs	r1, r4
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7ff ff1d 	bl	800ab74 <_sbrk_r>
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	d110      	bne.n	800ad60 <_malloc_trim_r+0x7c>
 800ad3e:	2100      	movs	r1, #0
 800ad40:	4630      	mov	r0, r6
 800ad42:	f7ff ff17 	bl	800ab74 <_sbrk_r>
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	1a83      	subs	r3, r0, r2
 800ad4a:	2b0f      	cmp	r3, #15
 800ad4c:	dde3      	ble.n	800ad16 <_malloc_trim_r+0x32>
 800ad4e:	490d      	ldr	r1, [pc, #52]	; (800ad84 <_malloc_trim_r+0xa0>)
 800ad50:	6809      	ldr	r1, [r1, #0]
 800ad52:	1a40      	subs	r0, r0, r1
 800ad54:	490c      	ldr	r1, [pc, #48]	; (800ad88 <_malloc_trim_r+0xa4>)
 800ad56:	f043 0301 	orr.w	r3, r3, #1
 800ad5a:	6008      	str	r0, [r1, #0]
 800ad5c:	6053      	str	r3, [r2, #4]
 800ad5e:	e7da      	b.n	800ad16 <_malloc_trim_r+0x32>
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	4a09      	ldr	r2, [pc, #36]	; (800ad88 <_malloc_trim_r+0xa4>)
 800ad64:	1b2d      	subs	r5, r5, r4
 800ad66:	f045 0501 	orr.w	r5, r5, #1
 800ad6a:	605d      	str	r5, [r3, #4]
 800ad6c:	6813      	ldr	r3, [r2, #0]
 800ad6e:	4630      	mov	r0, r6
 800ad70:	1b1c      	subs	r4, r3, r4
 800ad72:	6014      	str	r4, [r2, #0]
 800ad74:	f7ff fc28 	bl	800a5c8 <__malloc_unlock>
 800ad78:	2001      	movs	r0, #1
 800ad7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad7e:	bf00      	nop
 800ad80:	20000154 	.word	0x20000154
 800ad84:	2000055c 	.word	0x2000055c
 800ad88:	20000880 	.word	0x20000880
 800ad8c:	00000080 	.word	0x00000080

0800ad90 <_free_r>:
 800ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad94:	4604      	mov	r4, r0
 800ad96:	4688      	mov	r8, r1
 800ad98:	2900      	cmp	r1, #0
 800ad9a:	f000 80ab 	beq.w	800aef4 <_free_r+0x164>
 800ad9e:	f7ff fc0d 	bl	800a5bc <__malloc_lock>
 800ada2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800ada6:	4d54      	ldr	r5, [pc, #336]	; (800aef8 <_free_r+0x168>)
 800ada8:	f022 0001 	bic.w	r0, r2, #1
 800adac:	f1a8 0308 	sub.w	r3, r8, #8
 800adb0:	181f      	adds	r7, r3, r0
 800adb2:	68a9      	ldr	r1, [r5, #8]
 800adb4:	687e      	ldr	r6, [r7, #4]
 800adb6:	428f      	cmp	r7, r1
 800adb8:	f026 0603 	bic.w	r6, r6, #3
 800adbc:	f002 0201 	and.w	r2, r2, #1
 800adc0:	d11b      	bne.n	800adfa <_free_r+0x6a>
 800adc2:	4430      	add	r0, r6
 800adc4:	b93a      	cbnz	r2, 800add6 <_free_r+0x46>
 800adc6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800adca:	1a9b      	subs	r3, r3, r2
 800adcc:	4410      	add	r0, r2
 800adce:	6899      	ldr	r1, [r3, #8]
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	60ca      	str	r2, [r1, #12]
 800add4:	6091      	str	r1, [r2, #8]
 800add6:	f040 0201 	orr.w	r2, r0, #1
 800adda:	605a      	str	r2, [r3, #4]
 800addc:	60ab      	str	r3, [r5, #8]
 800adde:	4b47      	ldr	r3, [pc, #284]	; (800aefc <_free_r+0x16c>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4298      	cmp	r0, r3
 800ade4:	d304      	bcc.n	800adf0 <_free_r+0x60>
 800ade6:	4b46      	ldr	r3, [pc, #280]	; (800af00 <_free_r+0x170>)
 800ade8:	4620      	mov	r0, r4
 800adea:	6819      	ldr	r1, [r3, #0]
 800adec:	f7ff ff7a 	bl	800ace4 <_malloc_trim_r>
 800adf0:	4620      	mov	r0, r4
 800adf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adf6:	f7ff bbe7 	b.w	800a5c8 <__malloc_unlock>
 800adfa:	607e      	str	r6, [r7, #4]
 800adfc:	2a00      	cmp	r2, #0
 800adfe:	d139      	bne.n	800ae74 <_free_r+0xe4>
 800ae00:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800ae04:	1a5b      	subs	r3, r3, r1
 800ae06:	4408      	add	r0, r1
 800ae08:	6899      	ldr	r1, [r3, #8]
 800ae0a:	f105 0e08 	add.w	lr, r5, #8
 800ae0e:	4571      	cmp	r1, lr
 800ae10:	d032      	beq.n	800ae78 <_free_r+0xe8>
 800ae12:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800ae16:	f8c1 e00c 	str.w	lr, [r1, #12]
 800ae1a:	f8ce 1008 	str.w	r1, [lr, #8]
 800ae1e:	19b9      	adds	r1, r7, r6
 800ae20:	6849      	ldr	r1, [r1, #4]
 800ae22:	07c9      	lsls	r1, r1, #31
 800ae24:	d40a      	bmi.n	800ae3c <_free_r+0xac>
 800ae26:	4430      	add	r0, r6
 800ae28:	68b9      	ldr	r1, [r7, #8]
 800ae2a:	bb3a      	cbnz	r2, 800ae7c <_free_r+0xec>
 800ae2c:	4e35      	ldr	r6, [pc, #212]	; (800af04 <_free_r+0x174>)
 800ae2e:	42b1      	cmp	r1, r6
 800ae30:	d124      	bne.n	800ae7c <_free_r+0xec>
 800ae32:	616b      	str	r3, [r5, #20]
 800ae34:	612b      	str	r3, [r5, #16]
 800ae36:	2201      	movs	r2, #1
 800ae38:	60d9      	str	r1, [r3, #12]
 800ae3a:	6099      	str	r1, [r3, #8]
 800ae3c:	f040 0101 	orr.w	r1, r0, #1
 800ae40:	6059      	str	r1, [r3, #4]
 800ae42:	5018      	str	r0, [r3, r0]
 800ae44:	2a00      	cmp	r2, #0
 800ae46:	d1d3      	bne.n	800adf0 <_free_r+0x60>
 800ae48:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800ae4c:	d21a      	bcs.n	800ae84 <_free_r+0xf4>
 800ae4e:	08c0      	lsrs	r0, r0, #3
 800ae50:	1081      	asrs	r1, r0, #2
 800ae52:	2201      	movs	r2, #1
 800ae54:	408a      	lsls	r2, r1
 800ae56:	6869      	ldr	r1, [r5, #4]
 800ae58:	3001      	adds	r0, #1
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	606a      	str	r2, [r5, #4]
 800ae5e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800ae62:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800ae66:	6099      	str	r1, [r3, #8]
 800ae68:	3a08      	subs	r2, #8
 800ae6a:	60da      	str	r2, [r3, #12]
 800ae6c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800ae70:	60cb      	str	r3, [r1, #12]
 800ae72:	e7bd      	b.n	800adf0 <_free_r+0x60>
 800ae74:	2200      	movs	r2, #0
 800ae76:	e7d2      	b.n	800ae1e <_free_r+0x8e>
 800ae78:	2201      	movs	r2, #1
 800ae7a:	e7d0      	b.n	800ae1e <_free_r+0x8e>
 800ae7c:	68fe      	ldr	r6, [r7, #12]
 800ae7e:	60ce      	str	r6, [r1, #12]
 800ae80:	60b1      	str	r1, [r6, #8]
 800ae82:	e7db      	b.n	800ae3c <_free_r+0xac>
 800ae84:	0a42      	lsrs	r2, r0, #9
 800ae86:	2a04      	cmp	r2, #4
 800ae88:	d813      	bhi.n	800aeb2 <_free_r+0x122>
 800ae8a:	0982      	lsrs	r2, r0, #6
 800ae8c:	3238      	adds	r2, #56	; 0x38
 800ae8e:	1c51      	adds	r1, r2, #1
 800ae90:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800ae94:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800ae98:	428e      	cmp	r6, r1
 800ae9a:	d124      	bne.n	800aee6 <_free_r+0x156>
 800ae9c:	2001      	movs	r0, #1
 800ae9e:	1092      	asrs	r2, r2, #2
 800aea0:	fa00 f202 	lsl.w	r2, r0, r2
 800aea4:	6868      	ldr	r0, [r5, #4]
 800aea6:	4302      	orrs	r2, r0
 800aea8:	606a      	str	r2, [r5, #4]
 800aeaa:	60de      	str	r6, [r3, #12]
 800aeac:	6099      	str	r1, [r3, #8]
 800aeae:	60b3      	str	r3, [r6, #8]
 800aeb0:	e7de      	b.n	800ae70 <_free_r+0xe0>
 800aeb2:	2a14      	cmp	r2, #20
 800aeb4:	d801      	bhi.n	800aeba <_free_r+0x12a>
 800aeb6:	325b      	adds	r2, #91	; 0x5b
 800aeb8:	e7e9      	b.n	800ae8e <_free_r+0xfe>
 800aeba:	2a54      	cmp	r2, #84	; 0x54
 800aebc:	d802      	bhi.n	800aec4 <_free_r+0x134>
 800aebe:	0b02      	lsrs	r2, r0, #12
 800aec0:	326e      	adds	r2, #110	; 0x6e
 800aec2:	e7e4      	b.n	800ae8e <_free_r+0xfe>
 800aec4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800aec8:	d802      	bhi.n	800aed0 <_free_r+0x140>
 800aeca:	0bc2      	lsrs	r2, r0, #15
 800aecc:	3277      	adds	r2, #119	; 0x77
 800aece:	e7de      	b.n	800ae8e <_free_r+0xfe>
 800aed0:	f240 5154 	movw	r1, #1364	; 0x554
 800aed4:	428a      	cmp	r2, r1
 800aed6:	bf9a      	itte	ls
 800aed8:	0c82      	lsrls	r2, r0, #18
 800aeda:	327c      	addls	r2, #124	; 0x7c
 800aedc:	227e      	movhi	r2, #126	; 0x7e
 800aede:	e7d6      	b.n	800ae8e <_free_r+0xfe>
 800aee0:	6889      	ldr	r1, [r1, #8]
 800aee2:	428e      	cmp	r6, r1
 800aee4:	d004      	beq.n	800aef0 <_free_r+0x160>
 800aee6:	684a      	ldr	r2, [r1, #4]
 800aee8:	f022 0203 	bic.w	r2, r2, #3
 800aeec:	4290      	cmp	r0, r2
 800aeee:	d3f7      	bcc.n	800aee0 <_free_r+0x150>
 800aef0:	68ce      	ldr	r6, [r1, #12]
 800aef2:	e7da      	b.n	800aeaa <_free_r+0x11a>
 800aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef8:	20000154 	.word	0x20000154
 800aefc:	20000560 	.word	0x20000560
 800af00:	200008b0 	.word	0x200008b0
 800af04:	2000015c 	.word	0x2000015c

0800af08 <__retarget_lock_acquire_recursive>:
 800af08:	4770      	bx	lr

0800af0a <__retarget_lock_release_recursive>:
 800af0a:	4770      	bx	lr

0800af0c <__ascii_mbtowc>:
 800af0c:	b082      	sub	sp, #8
 800af0e:	b901      	cbnz	r1, 800af12 <__ascii_mbtowc+0x6>
 800af10:	a901      	add	r1, sp, #4
 800af12:	b142      	cbz	r2, 800af26 <__ascii_mbtowc+0x1a>
 800af14:	b14b      	cbz	r3, 800af2a <__ascii_mbtowc+0x1e>
 800af16:	7813      	ldrb	r3, [r2, #0]
 800af18:	600b      	str	r3, [r1, #0]
 800af1a:	7812      	ldrb	r2, [r2, #0]
 800af1c:	1c10      	adds	r0, r2, #0
 800af1e:	bf18      	it	ne
 800af20:	2001      	movne	r0, #1
 800af22:	b002      	add	sp, #8
 800af24:	4770      	bx	lr
 800af26:	4610      	mov	r0, r2
 800af28:	e7fb      	b.n	800af22 <__ascii_mbtowc+0x16>
 800af2a:	f06f 0001 	mvn.w	r0, #1
 800af2e:	e7f8      	b.n	800af22 <__ascii_mbtowc+0x16>

0800af30 <memmove>:
 800af30:	4288      	cmp	r0, r1
 800af32:	b510      	push	{r4, lr}
 800af34:	eb01 0302 	add.w	r3, r1, r2
 800af38:	d803      	bhi.n	800af42 <memmove+0x12>
 800af3a:	1e42      	subs	r2, r0, #1
 800af3c:	4299      	cmp	r1, r3
 800af3e:	d10c      	bne.n	800af5a <memmove+0x2a>
 800af40:	bd10      	pop	{r4, pc}
 800af42:	4298      	cmp	r0, r3
 800af44:	d2f9      	bcs.n	800af3a <memmove+0xa>
 800af46:	1881      	adds	r1, r0, r2
 800af48:	1ad2      	subs	r2, r2, r3
 800af4a:	42d3      	cmn	r3, r2
 800af4c:	d100      	bne.n	800af50 <memmove+0x20>
 800af4e:	bd10      	pop	{r4, pc}
 800af50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800af58:	e7f7      	b.n	800af4a <memmove+0x1a>
 800af5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800af62:	e7eb      	b.n	800af3c <memmove+0xc>

0800af64 <memset>:
 800af64:	4402      	add	r2, r0
 800af66:	4603      	mov	r3, r0
 800af68:	4293      	cmp	r3, r2
 800af6a:	d100      	bne.n	800af6e <memset+0xa>
 800af6c:	4770      	bx	lr
 800af6e:	f803 1b01 	strb.w	r1, [r3], #1
 800af72:	e7f9      	b.n	800af68 <memset+0x4>

0800af74 <_realloc_r>:
 800af74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	4682      	mov	sl, r0
 800af7a:	460c      	mov	r4, r1
 800af7c:	b929      	cbnz	r1, 800af8a <_realloc_r+0x16>
 800af7e:	4611      	mov	r1, r2
 800af80:	b003      	add	sp, #12
 800af82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af86:	f7ff b90b 	b.w	800a1a0 <_malloc_r>
 800af8a:	9201      	str	r2, [sp, #4]
 800af8c:	f7ff fb16 	bl	800a5bc <__malloc_lock>
 800af90:	9a01      	ldr	r2, [sp, #4]
 800af92:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800af96:	f102 080b 	add.w	r8, r2, #11
 800af9a:	f1b8 0f16 	cmp.w	r8, #22
 800af9e:	f1a4 0908 	sub.w	r9, r4, #8
 800afa2:	f025 0603 	bic.w	r6, r5, #3
 800afa6:	d90a      	bls.n	800afbe <_realloc_r+0x4a>
 800afa8:	f038 0807 	bics.w	r8, r8, #7
 800afac:	d509      	bpl.n	800afc2 <_realloc_r+0x4e>
 800afae:	230c      	movs	r3, #12
 800afb0:	f8ca 3000 	str.w	r3, [sl]
 800afb4:	2700      	movs	r7, #0
 800afb6:	4638      	mov	r0, r7
 800afb8:	b003      	add	sp, #12
 800afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbe:	f04f 0810 	mov.w	r8, #16
 800afc2:	4590      	cmp	r8, r2
 800afc4:	d3f3      	bcc.n	800afae <_realloc_r+0x3a>
 800afc6:	45b0      	cmp	r8, r6
 800afc8:	f340 8145 	ble.w	800b256 <_realloc_r+0x2e2>
 800afcc:	4ba8      	ldr	r3, [pc, #672]	; (800b270 <_realloc_r+0x2fc>)
 800afce:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800afd2:	eb09 0106 	add.w	r1, r9, r6
 800afd6:	4571      	cmp	r1, lr
 800afd8:	469b      	mov	fp, r3
 800afda:	684b      	ldr	r3, [r1, #4]
 800afdc:	d005      	beq.n	800afea <_realloc_r+0x76>
 800afde:	f023 0001 	bic.w	r0, r3, #1
 800afe2:	4408      	add	r0, r1
 800afe4:	6840      	ldr	r0, [r0, #4]
 800afe6:	07c7      	lsls	r7, r0, #31
 800afe8:	d447      	bmi.n	800b07a <_realloc_r+0x106>
 800afea:	f023 0303 	bic.w	r3, r3, #3
 800afee:	4571      	cmp	r1, lr
 800aff0:	eb06 0703 	add.w	r7, r6, r3
 800aff4:	d119      	bne.n	800b02a <_realloc_r+0xb6>
 800aff6:	f108 0010 	add.w	r0, r8, #16
 800affa:	4287      	cmp	r7, r0
 800affc:	db3f      	blt.n	800b07e <_realloc_r+0x10a>
 800affe:	eb09 0308 	add.w	r3, r9, r8
 800b002:	eba7 0708 	sub.w	r7, r7, r8
 800b006:	f047 0701 	orr.w	r7, r7, #1
 800b00a:	f8cb 3008 	str.w	r3, [fp, #8]
 800b00e:	605f      	str	r7, [r3, #4]
 800b010:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	ea43 0308 	orr.w	r3, r3, r8
 800b01c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b020:	4650      	mov	r0, sl
 800b022:	f7ff fad1 	bl	800a5c8 <__malloc_unlock>
 800b026:	4627      	mov	r7, r4
 800b028:	e7c5      	b.n	800afb6 <_realloc_r+0x42>
 800b02a:	45b8      	cmp	r8, r7
 800b02c:	dc27      	bgt.n	800b07e <_realloc_r+0x10a>
 800b02e:	68cb      	ldr	r3, [r1, #12]
 800b030:	688a      	ldr	r2, [r1, #8]
 800b032:	60d3      	str	r3, [r2, #12]
 800b034:	609a      	str	r2, [r3, #8]
 800b036:	eba7 0008 	sub.w	r0, r7, r8
 800b03a:	280f      	cmp	r0, #15
 800b03c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b040:	eb09 0207 	add.w	r2, r9, r7
 800b044:	f240 8109 	bls.w	800b25a <_realloc_r+0x2e6>
 800b048:	eb09 0108 	add.w	r1, r9, r8
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	ea43 0308 	orr.w	r3, r3, r8
 800b054:	f040 0001 	orr.w	r0, r0, #1
 800b058:	f8c9 3004 	str.w	r3, [r9, #4]
 800b05c:	6048      	str	r0, [r1, #4]
 800b05e:	6853      	ldr	r3, [r2, #4]
 800b060:	f043 0301 	orr.w	r3, r3, #1
 800b064:	6053      	str	r3, [r2, #4]
 800b066:	3108      	adds	r1, #8
 800b068:	4650      	mov	r0, sl
 800b06a:	f7ff fe91 	bl	800ad90 <_free_r>
 800b06e:	4650      	mov	r0, sl
 800b070:	f7ff faaa 	bl	800a5c8 <__malloc_unlock>
 800b074:	f109 0708 	add.w	r7, r9, #8
 800b078:	e79d      	b.n	800afb6 <_realloc_r+0x42>
 800b07a:	2300      	movs	r3, #0
 800b07c:	4619      	mov	r1, r3
 800b07e:	07e8      	lsls	r0, r5, #31
 800b080:	f100 8084 	bmi.w	800b18c <_realloc_r+0x218>
 800b084:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800b088:	eba9 0505 	sub.w	r5, r9, r5
 800b08c:	6868      	ldr	r0, [r5, #4]
 800b08e:	f020 0003 	bic.w	r0, r0, #3
 800b092:	4430      	add	r0, r6
 800b094:	2900      	cmp	r1, #0
 800b096:	d076      	beq.n	800b186 <_realloc_r+0x212>
 800b098:	4571      	cmp	r1, lr
 800b09a:	d150      	bne.n	800b13e <_realloc_r+0x1ca>
 800b09c:	4403      	add	r3, r0
 800b09e:	f108 0110 	add.w	r1, r8, #16
 800b0a2:	428b      	cmp	r3, r1
 800b0a4:	db6f      	blt.n	800b186 <_realloc_r+0x212>
 800b0a6:	462f      	mov	r7, r5
 800b0a8:	68ea      	ldr	r2, [r5, #12]
 800b0aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800b0ae:	60ca      	str	r2, [r1, #12]
 800b0b0:	6091      	str	r1, [r2, #8]
 800b0b2:	1f32      	subs	r2, r6, #4
 800b0b4:	2a24      	cmp	r2, #36	; 0x24
 800b0b6:	d83b      	bhi.n	800b130 <_realloc_r+0x1bc>
 800b0b8:	2a13      	cmp	r2, #19
 800b0ba:	d936      	bls.n	800b12a <_realloc_r+0x1b6>
 800b0bc:	6821      	ldr	r1, [r4, #0]
 800b0be:	60a9      	str	r1, [r5, #8]
 800b0c0:	6861      	ldr	r1, [r4, #4]
 800b0c2:	60e9      	str	r1, [r5, #12]
 800b0c4:	2a1b      	cmp	r2, #27
 800b0c6:	d81c      	bhi.n	800b102 <_realloc_r+0x18e>
 800b0c8:	f105 0210 	add.w	r2, r5, #16
 800b0cc:	f104 0108 	add.w	r1, r4, #8
 800b0d0:	6808      	ldr	r0, [r1, #0]
 800b0d2:	6010      	str	r0, [r2, #0]
 800b0d4:	6848      	ldr	r0, [r1, #4]
 800b0d6:	6050      	str	r0, [r2, #4]
 800b0d8:	6889      	ldr	r1, [r1, #8]
 800b0da:	6091      	str	r1, [r2, #8]
 800b0dc:	eb05 0208 	add.w	r2, r5, r8
 800b0e0:	eba3 0308 	sub.w	r3, r3, r8
 800b0e4:	f043 0301 	orr.w	r3, r3, #1
 800b0e8:	f8cb 2008 	str.w	r2, [fp, #8]
 800b0ec:	6053      	str	r3, [r2, #4]
 800b0ee:	686b      	ldr	r3, [r5, #4]
 800b0f0:	f003 0301 	and.w	r3, r3, #1
 800b0f4:	ea43 0308 	orr.w	r3, r3, r8
 800b0f8:	606b      	str	r3, [r5, #4]
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	f7ff fa64 	bl	800a5c8 <__malloc_unlock>
 800b100:	e759      	b.n	800afb6 <_realloc_r+0x42>
 800b102:	68a1      	ldr	r1, [r4, #8]
 800b104:	6129      	str	r1, [r5, #16]
 800b106:	68e1      	ldr	r1, [r4, #12]
 800b108:	6169      	str	r1, [r5, #20]
 800b10a:	2a24      	cmp	r2, #36	; 0x24
 800b10c:	bf01      	itttt	eq
 800b10e:	6922      	ldreq	r2, [r4, #16]
 800b110:	61aa      	streq	r2, [r5, #24]
 800b112:	6960      	ldreq	r0, [r4, #20]
 800b114:	61e8      	streq	r0, [r5, #28]
 800b116:	bf19      	ittee	ne
 800b118:	f105 0218 	addne.w	r2, r5, #24
 800b11c:	f104 0110 	addne.w	r1, r4, #16
 800b120:	f105 0220 	addeq.w	r2, r5, #32
 800b124:	f104 0118 	addeq.w	r1, r4, #24
 800b128:	e7d2      	b.n	800b0d0 <_realloc_r+0x15c>
 800b12a:	463a      	mov	r2, r7
 800b12c:	4621      	mov	r1, r4
 800b12e:	e7cf      	b.n	800b0d0 <_realloc_r+0x15c>
 800b130:	4621      	mov	r1, r4
 800b132:	4638      	mov	r0, r7
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	f7ff fefb 	bl	800af30 <memmove>
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	e7ce      	b.n	800b0dc <_realloc_r+0x168>
 800b13e:	18c7      	adds	r7, r0, r3
 800b140:	45b8      	cmp	r8, r7
 800b142:	dc20      	bgt.n	800b186 <_realloc_r+0x212>
 800b144:	68cb      	ldr	r3, [r1, #12]
 800b146:	688a      	ldr	r2, [r1, #8]
 800b148:	60d3      	str	r3, [r2, #12]
 800b14a:	609a      	str	r2, [r3, #8]
 800b14c:	4628      	mov	r0, r5
 800b14e:	68eb      	ldr	r3, [r5, #12]
 800b150:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b154:	60d3      	str	r3, [r2, #12]
 800b156:	609a      	str	r2, [r3, #8]
 800b158:	1f32      	subs	r2, r6, #4
 800b15a:	2a24      	cmp	r2, #36	; 0x24
 800b15c:	d842      	bhi.n	800b1e4 <_realloc_r+0x270>
 800b15e:	2a13      	cmp	r2, #19
 800b160:	d93e      	bls.n	800b1e0 <_realloc_r+0x26c>
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	60ab      	str	r3, [r5, #8]
 800b166:	6863      	ldr	r3, [r4, #4]
 800b168:	60eb      	str	r3, [r5, #12]
 800b16a:	2a1b      	cmp	r2, #27
 800b16c:	d824      	bhi.n	800b1b8 <_realloc_r+0x244>
 800b16e:	f105 0010 	add.w	r0, r5, #16
 800b172:	f104 0308 	add.w	r3, r4, #8
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	6002      	str	r2, [r0, #0]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	6042      	str	r2, [r0, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	6083      	str	r3, [r0, #8]
 800b182:	46a9      	mov	r9, r5
 800b184:	e757      	b.n	800b036 <_realloc_r+0xc2>
 800b186:	4580      	cmp	r8, r0
 800b188:	4607      	mov	r7, r0
 800b18a:	dddf      	ble.n	800b14c <_realloc_r+0x1d8>
 800b18c:	4611      	mov	r1, r2
 800b18e:	4650      	mov	r0, sl
 800b190:	f7ff f806 	bl	800a1a0 <_malloc_r>
 800b194:	4607      	mov	r7, r0
 800b196:	2800      	cmp	r0, #0
 800b198:	d0af      	beq.n	800b0fa <_realloc_r+0x186>
 800b19a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b19e:	f023 0301 	bic.w	r3, r3, #1
 800b1a2:	f1a0 0208 	sub.w	r2, r0, #8
 800b1a6:	444b      	add	r3, r9
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d11f      	bne.n	800b1ec <_realloc_r+0x278>
 800b1ac:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b1b0:	f027 0703 	bic.w	r7, r7, #3
 800b1b4:	4437      	add	r7, r6
 800b1b6:	e73e      	b.n	800b036 <_realloc_r+0xc2>
 800b1b8:	68a3      	ldr	r3, [r4, #8]
 800b1ba:	612b      	str	r3, [r5, #16]
 800b1bc:	68e3      	ldr	r3, [r4, #12]
 800b1be:	616b      	str	r3, [r5, #20]
 800b1c0:	2a24      	cmp	r2, #36	; 0x24
 800b1c2:	bf01      	itttt	eq
 800b1c4:	6923      	ldreq	r3, [r4, #16]
 800b1c6:	61ab      	streq	r3, [r5, #24]
 800b1c8:	6962      	ldreq	r2, [r4, #20]
 800b1ca:	61ea      	streq	r2, [r5, #28]
 800b1cc:	bf19      	ittee	ne
 800b1ce:	f105 0018 	addne.w	r0, r5, #24
 800b1d2:	f104 0310 	addne.w	r3, r4, #16
 800b1d6:	f105 0020 	addeq.w	r0, r5, #32
 800b1da:	f104 0318 	addeq.w	r3, r4, #24
 800b1de:	e7ca      	b.n	800b176 <_realloc_r+0x202>
 800b1e0:	4623      	mov	r3, r4
 800b1e2:	e7c8      	b.n	800b176 <_realloc_r+0x202>
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	f7ff fea3 	bl	800af30 <memmove>
 800b1ea:	e7ca      	b.n	800b182 <_realloc_r+0x20e>
 800b1ec:	1f32      	subs	r2, r6, #4
 800b1ee:	2a24      	cmp	r2, #36	; 0x24
 800b1f0:	d82d      	bhi.n	800b24e <_realloc_r+0x2da>
 800b1f2:	2a13      	cmp	r2, #19
 800b1f4:	d928      	bls.n	800b248 <_realloc_r+0x2d4>
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	6863      	ldr	r3, [r4, #4]
 800b1fc:	6043      	str	r3, [r0, #4]
 800b1fe:	2a1b      	cmp	r2, #27
 800b200:	d80e      	bhi.n	800b220 <_realloc_r+0x2ac>
 800b202:	f100 0308 	add.w	r3, r0, #8
 800b206:	f104 0208 	add.w	r2, r4, #8
 800b20a:	6811      	ldr	r1, [r2, #0]
 800b20c:	6019      	str	r1, [r3, #0]
 800b20e:	6851      	ldr	r1, [r2, #4]
 800b210:	6059      	str	r1, [r3, #4]
 800b212:	6892      	ldr	r2, [r2, #8]
 800b214:	609a      	str	r2, [r3, #8]
 800b216:	4621      	mov	r1, r4
 800b218:	4650      	mov	r0, sl
 800b21a:	f7ff fdb9 	bl	800ad90 <_free_r>
 800b21e:	e76c      	b.n	800b0fa <_realloc_r+0x186>
 800b220:	68a3      	ldr	r3, [r4, #8]
 800b222:	6083      	str	r3, [r0, #8]
 800b224:	68e3      	ldr	r3, [r4, #12]
 800b226:	60c3      	str	r3, [r0, #12]
 800b228:	2a24      	cmp	r2, #36	; 0x24
 800b22a:	bf01      	itttt	eq
 800b22c:	6923      	ldreq	r3, [r4, #16]
 800b22e:	6103      	streq	r3, [r0, #16]
 800b230:	6961      	ldreq	r1, [r4, #20]
 800b232:	6141      	streq	r1, [r0, #20]
 800b234:	bf19      	ittee	ne
 800b236:	f100 0310 	addne.w	r3, r0, #16
 800b23a:	f104 0210 	addne.w	r2, r4, #16
 800b23e:	f100 0318 	addeq.w	r3, r0, #24
 800b242:	f104 0218 	addeq.w	r2, r4, #24
 800b246:	e7e0      	b.n	800b20a <_realloc_r+0x296>
 800b248:	4603      	mov	r3, r0
 800b24a:	4622      	mov	r2, r4
 800b24c:	e7dd      	b.n	800b20a <_realloc_r+0x296>
 800b24e:	4621      	mov	r1, r4
 800b250:	f7ff fe6e 	bl	800af30 <memmove>
 800b254:	e7df      	b.n	800b216 <_realloc_r+0x2a2>
 800b256:	4637      	mov	r7, r6
 800b258:	e6ed      	b.n	800b036 <_realloc_r+0xc2>
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	431f      	orrs	r7, r3
 800b260:	f8c9 7004 	str.w	r7, [r9, #4]
 800b264:	6853      	ldr	r3, [r2, #4]
 800b266:	f043 0301 	orr.w	r3, r3, #1
 800b26a:	6053      	str	r3, [r2, #4]
 800b26c:	e6ff      	b.n	800b06e <_realloc_r+0xfa>
 800b26e:	bf00      	nop
 800b270:	20000154 	.word	0x20000154

0800b274 <__ascii_wctomb>:
 800b274:	b149      	cbz	r1, 800b28a <__ascii_wctomb+0x16>
 800b276:	2aff      	cmp	r2, #255	; 0xff
 800b278:	bf85      	ittet	hi
 800b27a:	238a      	movhi	r3, #138	; 0x8a
 800b27c:	6003      	strhi	r3, [r0, #0]
 800b27e:	700a      	strbls	r2, [r1, #0]
 800b280:	f04f 30ff 	movhi.w	r0, #4294967295
 800b284:	bf98      	it	ls
 800b286:	2001      	movls	r0, #1
 800b288:	4770      	bx	lr
 800b28a:	4608      	mov	r0, r1
 800b28c:	4770      	bx	lr
	...

0800b290 <_sbrk>:
 800b290:	4b04      	ldr	r3, [pc, #16]	; (800b2a4 <_sbrk+0x14>)
 800b292:	6819      	ldr	r1, [r3, #0]
 800b294:	4602      	mov	r2, r0
 800b296:	b909      	cbnz	r1, 800b29c <_sbrk+0xc>
 800b298:	4903      	ldr	r1, [pc, #12]	; (800b2a8 <_sbrk+0x18>)
 800b29a:	6019      	str	r1, [r3, #0]
 800b29c:	6818      	ldr	r0, [r3, #0]
 800b29e:	4402      	add	r2, r0
 800b2a0:	601a      	str	r2, [r3, #0]
 800b2a2:	4770      	bx	lr
 800b2a4:	200008b4 	.word	0x200008b4
 800b2a8:	20001748 	.word	0x20001748

0800b2ac <_init>:
 800b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ae:	bf00      	nop
 800b2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2b2:	bc08      	pop	{r3}
 800b2b4:	469e      	mov	lr, r3
 800b2b6:	4770      	bx	lr

0800b2b8 <_fini>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	bf00      	nop
 800b2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2be:	bc08      	pop	{r3}
 800b2c0:	469e      	mov	lr, r3
 800b2c2:	4770      	bx	lr
